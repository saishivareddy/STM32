
dwm1000- f411re-rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005be0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ed0  08005d80  08005d80  00015d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c50  08006c50  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08006c50  08006c50  00016c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c58  08006c58  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c58  08006c58  00016c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c5c  08006c5c  00016c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08006c60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f4  20000098  08006cf8  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000068c  08006cf8  0002068c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b771  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b1c  00000000  00000000  0003b839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001260  00000000  00000000  0003f358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f8  00000000  00000000  000405b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b7c5  00000000  00000000  000416b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017414  00000000  00000000  0005ce75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000937f7  00000000  00000000  00074289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00107a80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052d0  00000000  00000000  00107ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000098 	.word	0x20000098
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005d68 	.word	0x08005d68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	08005d68 	.word	0x08005d68

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b087      	sub	sp, #28
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8000588:	4ba1      	ldr	r3, [pc, #644]	; (8000810 <dwt_initialise+0x298>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2200      	movs	r2, #0
 800058e:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 8000590:	4b9f      	ldr	r3, [pc, #636]	; (8000810 <dwt_initialise+0x298>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2200      	movs	r2, #0
 8000596:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 8000598:	4b9d      	ldr	r3, [pc, #628]	; (8000810 <dwt_initialise+0x298>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2200      	movs	r2, #0
 800059e:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 80005a0:	4b9b      	ldr	r3, [pc, #620]	; (8000810 <dwt_initialise+0x298>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2200      	movs	r2, #0
 80005a6:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 80005a8:	4b99      	ldr	r3, [pc, #612]	; (8000810 <dwt_initialise+0x298>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2200      	movs	r2, #0
 80005ae:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 80005b0:	4b97      	ldr	r3, [pc, #604]	; (8000810 <dwt_initialise+0x298>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2200      	movs	r2, #0
 80005b6:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 80005b8:	4b95      	ldr	r3, [pc, #596]	; (8000810 <dwt_initialise+0x298>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2200      	movs	r2, #0
 80005be:	635a      	str	r2, [r3, #52]	; 0x34

#ifdef DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
 80005c0:	4b93      	ldr	r3, [pc, #588]	; (8000810 <dwt_initialise+0x298>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	b292      	uxth	r2, r2
 80005c8:	831a      	strh	r2, [r3, #24]
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 80005ca:	f000 f925 	bl	8000818 <dwt_readdevid>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a90      	ldr	r2, [pc, #576]	; (8000814 <dwt_initialise+0x29c>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d002      	beq.n	80005dc <dwt_initialise+0x64>
    {
        return DWT_ERROR ;
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	e115      	b.n	8000808 <dwt_initialise+0x290>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f003 0302 	and.w	r3, r3, #2
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d101      	bne.n	80005ea <dwt_initialise+0x72>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 80005e6:	f000 fe87 	bl	80012f8 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	f003 0302 	and.w	r3, r3, #2
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d004      	beq.n	80005fe <dwt_initialise+0x86>
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d102      	bne.n	8000604 <dwt_initialise+0x8c>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 80005fe:	2000      	movs	r0, #0
 8000600:	f000 fd48 	bl	8001094 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 8000604:	2204      	movs	r2, #4
 8000606:	2100      	movs	r1, #0
 8000608:	2024      	movs	r0, #36	; 0x24
 800060a:	f000 fc8c 	bl	8000f26 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	f003 0302 	and.w	r3, r3, #2
 8000614:	2b00      	cmp	r3, #0
 8000616:	d116      	bne.n	8000646 <dwt_initialise+0xce>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 8000618:	2004      	movs	r0, #4
 800061a:	f000 fcda 	bl	8000fd2 <_dwt_otpread>
 800061e:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 8000620:	693b      	ldr	r3, [r7, #16]
 8000622:	b2db      	uxtb	r3, r3
 8000624:	2b00      	cmp	r3, #0
 8000626:	d01f      	beq.n	8000668 <dwt_initialise+0xf0>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 8000628:	2202      	movs	r2, #2
 800062a:	2112      	movs	r1, #18
 800062c:	202d      	movs	r0, #45	; 0x2d
 800062e:	f000 fc7a 	bl	8000f26 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8000632:	4b77      	ldr	r3, [pc, #476]	; (8000810 <dwt_initialise+0x298>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	8ada      	ldrh	r2, [r3, #22]
 8000638:	4b75      	ldr	r3, [pc, #468]	; (8000810 <dwt_initialise+0x298>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000640:	b292      	uxth	r2, r2
 8000642:	82da      	strh	r2, [r3, #22]
 8000644:	e010      	b.n	8000668 <dwt_initialise+0xf0>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 8000646:	2130      	movs	r1, #48	; 0x30
 8000648:	2028      	movs	r0, #40	; 0x28
 800064a:	f000 fc15 	bl	8000e78 <dwt_read32bitoffsetreg>
 800064e:	4603      	mov	r3, r0
 8000650:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 8000654:	d008      	beq.n	8000668 <dwt_initialise+0xf0>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 8000656:	4b6e      	ldr	r3, [pc, #440]	; (8000810 <dwt_initialise+0x298>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	8ada      	ldrh	r2, [r3, #22]
 800065c:	4b6c      	ldr	r3, [pc, #432]	; (8000810 <dwt_initialise+0x298>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000664:	b292      	uxth	r2, r2
 8000666:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f003 0302 	and.w	r3, r3, #2
 800066e:	2b00      	cmp	r3, #0
 8000670:	d009      	beq.n	8000686 <dwt_initialise+0x10e>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f003 0302 	and.w	r3, r3, #2
 8000678:	2b00      	cmp	r3, #0
 800067a:	d011      	beq.n	80006a0 <dwt_initialise+0x128>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f003 0308 	and.w	r3, r3, #8
 8000682:	2b00      	cmp	r3, #0
 8000684:	d00c      	beq.n	80006a0 <dwt_initialise+0x128>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8000686:	201e      	movs	r0, #30
 8000688:	f000 fca3 	bl	8000fd2 <_dwt_otpread>
 800068c:	4603      	mov	r3, r0
 800068e:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 8000690:	8afb      	ldrh	r3, [r7, #22]
 8000692:	0a1b      	lsrs	r3, r3, #8
 8000694:	b29a      	uxth	r2, r3
 8000696:	4b5e      	ldr	r3, [pc, #376]	; (8000810 <dwt_initialise+0x298>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	b2d2      	uxtb	r2, r2
 800069c:	72da      	strb	r2, [r3, #11]
 800069e:	e003      	b.n	80006a8 <dwt_initialise+0x130>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 80006a0:	4b5b      	ldr	r3, [pc, #364]	; (8000810 <dwt_initialise+0x298>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2200      	movs	r2, #0
 80006a6:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f003 0302 	and.w	r3, r3, #2
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d10b      	bne.n	80006ca <dwt_initialise+0x152>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 80006b2:	8afb      	ldrh	r3, [r7, #22]
 80006b4:	f003 031f 	and.w	r3, r3, #31
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d101      	bne.n	80006c0 <dwt_initialise+0x148>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 80006bc:	2310      	movs	r3, #16
 80006be:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 80006c0:	8afb      	ldrh	r3, [r7, #22]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 fe3d 	bl	8001344 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	f003 0310 	and.w	r3, r3, #16
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d007      	beq.n	80006e4 <dwt_initialise+0x16c>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 80006d4:	4b4e      	ldr	r3, [pc, #312]	; (8000810 <dwt_initialise+0x298>)
 80006d6:	681c      	ldr	r4, [r3, #0]
 80006d8:	2006      	movs	r0, #6
 80006da:	f000 fc7a 	bl	8000fd2 <_dwt_otpread>
 80006de:	4603      	mov	r3, r0
 80006e0:	6023      	str	r3, [r4, #0]
 80006e2:	e003      	b.n	80006ec <dwt_initialise+0x174>
    }
    else
    {
        pdw1000local->partID = 0;
 80006e4:	4b4a      	ldr	r3, [pc, #296]	; (8000810 <dwt_initialise+0x298>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f003 0320 	and.w	r3, r3, #32
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d007      	beq.n	8000706 <dwt_initialise+0x18e>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 80006f6:	4b46      	ldr	r3, [pc, #280]	; (8000810 <dwt_initialise+0x298>)
 80006f8:	681c      	ldr	r4, [r3, #0]
 80006fa:	2007      	movs	r0, #7
 80006fc:	f000 fc69 	bl	8000fd2 <_dwt_otpread>
 8000700:	4603      	mov	r3, r0
 8000702:	6063      	str	r3, [r4, #4]
 8000704:	e003      	b.n	800070e <dwt_initialise+0x196>
    }
    else
    {
        pdw1000local->lotID = 0;
 8000706:	4b42      	ldr	r3, [pc, #264]	; (8000810 <dwt_initialise+0x298>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2200      	movs	r2, #0
 800070c:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000714:	2b00      	cmp	r3, #0
 8000716:	d008      	beq.n	800072a <dwt_initialise+0x1b2>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 8000718:	2008      	movs	r0, #8
 800071a:	f000 fc5a 	bl	8000fd2 <_dwt_otpread>
 800071e:	4602      	mov	r2, r0
 8000720:	4b3b      	ldr	r3, [pc, #236]	; (8000810 <dwt_initialise+0x298>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	721a      	strb	r2, [r3, #8]
 8000728:	e003      	b.n	8000732 <dwt_initialise+0x1ba>
    }
    else
    {
        pdw1000local->vBatP = 0;
 800072a:	4b39      	ldr	r3, [pc, #228]	; (8000810 <dwt_initialise+0x298>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2200      	movs	r2, #0
 8000730:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000738:	2b00      	cmp	r3, #0
 800073a:	d008      	beq.n	800074e <dwt_initialise+0x1d6>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 800073c:	2009      	movs	r0, #9
 800073e:	f000 fc48 	bl	8000fd2 <_dwt_otpread>
 8000742:	4602      	mov	r2, r0
 8000744:	4b32      	ldr	r3, [pc, #200]	; (8000810 <dwt_initialise+0x298>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	b2d2      	uxtb	r2, r2
 800074a:	725a      	strb	r2, [r3, #9]
 800074c:	e003      	b.n	8000756 <dwt_initialise+0x1de>
    }
    else
    {
        pdw1000local->tempP = 0;
 800074e:	4b30      	ldr	r3, [pc, #192]	; (8000810 <dwt_initialise+0x298>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2200      	movs	r2, #0
 8000754:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	f003 0302 	and.w	r3, r3, #2
 800075c:	2b00      	cmp	r3, #0
 800075e:	d121      	bne.n	80007a4 <dwt_initialise+0x22c>
    {
        if(DWT_LOADUCODE & config)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	2b00      	cmp	r3, #0
 8000768:	d00b      	beq.n	8000782 <dwt_initialise+0x20a>
        {
            _dwt_loaducodefromrom();
 800076a:	f000 fc7f 	bl	800106c <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 800076e:	4b28      	ldr	r3, [pc, #160]	; (8000810 <dwt_initialise+0x298>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	8ada      	ldrh	r2, [r3, #22]
 8000774:	4b26      	ldr	r3, [pc, #152]	; (8000810 <dwt_initialise+0x298>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800077c:	b292      	uxth	r2, r2
 800077e:	82da      	strh	r2, [r3, #22]
 8000780:	e01e      	b.n	80007c0 <dwt_initialise+0x248>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 8000782:	2105      	movs	r1, #5
 8000784:	2036      	movs	r0, #54	; 0x36
 8000786:	f000 fb9e 	bl	8000ec6 <dwt_read16bitoffsetreg>
 800078a:	4603      	mov	r3, r0
 800078c:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 800078e:	89fb      	ldrh	r3, [r7, #14]
 8000790:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000794:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 8000796:	89fb      	ldrh	r3, [r7, #14]
 8000798:	461a      	mov	r2, r3
 800079a:	2105      	movs	r1, #5
 800079c:	2036      	movs	r0, #54	; 0x36
 800079e:	f000 fbd5 	bl	8000f4c <dwt_write16bitoffsetreg>
 80007a2:	e00d      	b.n	80007c0 <dwt_initialise+0x248>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d108      	bne.n	80007c0 <dwt_initialise+0x248>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <dwt_initialise+0x298>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	8ada      	ldrh	r2, [r3, #22]
 80007b4:	4b16      	ldr	r3, [pc, #88]	; (8000810 <dwt_initialise+0x298>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80007bc:	b292      	uxth	r2, r2
 80007be:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 80007c0:	2001      	movs	r0, #1
 80007c2:	f000 fc67 	bl	8001094 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 80007c6:	2200      	movs	r2, #0
 80007c8:	210a      	movs	r1, #10
 80007ca:	202c      	movs	r0, #44	; 0x2c
 80007cc:	f000 fbab 	bl	8000f26 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <dwt_initialise+0x298>)
 80007d2:	681c      	ldr	r4, [r3, #0]
 80007d4:	2100      	movs	r1, #0
 80007d6:	2004      	movs	r0, #4
 80007d8:	f000 fb4e 	bl	8000e78 <dwt_read32bitoffsetreg>
 80007dc:	4603      	mov	r3, r0
 80007de:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 80007e0:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <dwt_initialise+0x298>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	691b      	ldr	r3, [r3, #16]
 80007e6:	0c1b      	lsrs	r3, r3, #16
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <dwt_initialise+0x298>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f002 0203 	and.w	r2, r2, #3
 80007f2:	b2d2      	uxtb	r2, r2
 80007f4:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <dwt_initialise+0x298>)
 80007f8:	681c      	ldr	r4, [r3, #0]
 80007fa:	2100      	movs	r1, #0
 80007fc:	2008      	movs	r0, #8
 80007fe:	f000 fb3b 	bl	8000e78 <dwt_read32bitoffsetreg>
 8000802:	4603      	mov	r3, r0
 8000804:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 8000806:	2300      	movs	r3, #0

} // end dwt_initialise()
 8000808:	4618      	mov	r0, r3
 800080a:	371c      	adds	r7, #28
 800080c:	46bd      	mov	sp, r7
 800080e:	bd90      	pop	{r4, r7, pc}
 8000810:	20000000 	.word	0x20000000
 8000814:	deca0130 	.word	0xdeca0130

08000818 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 800081c:	2100      	movs	r1, #0
 800081e:	2000      	movs	r0, #0
 8000820:	f000 fb2a 	bl	8000e78 <dwt_read32bitoffsetreg>
 8000824:	4603      	mov	r3, r0
}
 8000826:	4618      	mov	r0, r3
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	795b      	ldrb	r3, [r3, #5]
 8000846:	461a      	mov	r2, r3
 8000848:	4b9e      	ldr	r3, [pc, #632]	; (8000ac4 <dwt_configure+0x298>)
 800084a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800084e:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	785b      	ldrb	r3, [r3, #1]
 8000854:	3b01      	subs	r3, #1
 8000856:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 8000858:	7cfb      	ldrb	r3, [r7, #19]
 800085a:	2b04      	cmp	r3, #4
 800085c:	d002      	beq.n	8000864 <dwt_configure+0x38>
 800085e:	7cfb      	ldrb	r3, [r7, #19]
 8000860:	2b07      	cmp	r3, #7
 8000862:	d101      	bne.n	8000868 <dwt_configure+0x3c>
 8000864:	2301      	movs	r3, #1
 8000866:	e000      	b.n	800086a <dwt_configure+0x3e>
 8000868:	2300      	movs	r3, #0
 800086a:	747b      	strb	r3, [r7, #17]

#ifdef DWT_API_ERROR_CHECK
    assert(config->dataRate <= DWT_BR_6M8);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	79db      	ldrb	r3, [r3, #7]
 8000870:	2b02      	cmp	r3, #2
 8000872:	d906      	bls.n	8000882 <dwt_configure+0x56>
 8000874:	4b94      	ldr	r3, [pc, #592]	; (8000ac8 <dwt_configure+0x29c>)
 8000876:	4a95      	ldr	r2, [pc, #596]	; (8000acc <dwt_configure+0x2a0>)
 8000878:	f240 219f 	movw	r1, #671	; 0x29f
 800087c:	4894      	ldr	r0, [pc, #592]	; (8000ad0 <dwt_configure+0x2a4>)
 800087e:	f004 fa6f 	bl	8004d60 <__assert_func>
    assert(config->rxPAC <= DWT_PAC64);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	78db      	ldrb	r3, [r3, #3]
 8000886:	2b03      	cmp	r3, #3
 8000888:	d906      	bls.n	8000898 <dwt_configure+0x6c>
 800088a:	4b92      	ldr	r3, [pc, #584]	; (8000ad4 <dwt_configure+0x2a8>)
 800088c:	4a8f      	ldr	r2, [pc, #572]	; (8000acc <dwt_configure+0x2a0>)
 800088e:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 8000892:	488f      	ldr	r0, [pc, #572]	; (8000ad0 <dwt_configure+0x2a4>)
 8000894:	f004 fa64 	bl	8004d60 <__assert_func>
    assert((chan >= 1) && (chan <= 7) && (chan != 6));
 8000898:	7cfb      	ldrb	r3, [r7, #19]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d005      	beq.n	80008aa <dwt_configure+0x7e>
 800089e:	7cfb      	ldrb	r3, [r7, #19]
 80008a0:	2b07      	cmp	r3, #7
 80008a2:	d802      	bhi.n	80008aa <dwt_configure+0x7e>
 80008a4:	7cfb      	ldrb	r3, [r7, #19]
 80008a6:	2b06      	cmp	r3, #6
 80008a8:	d106      	bne.n	80008b8 <dwt_configure+0x8c>
 80008aa:	4b8b      	ldr	r3, [pc, #556]	; (8000ad8 <dwt_configure+0x2ac>)
 80008ac:	4a87      	ldr	r2, [pc, #540]	; (8000acc <dwt_configure+0x2a0>)
 80008ae:	f240 21a1 	movw	r1, #673	; 0x2a1
 80008b2:	4887      	ldr	r0, [pc, #540]	; (8000ad0 <dwt_configure+0x2a4>)
 80008b4:	f004 fa54 	bl	8004d60 <__assert_func>
    assert(((config->prf == DWT_PRF_64M) && (config->txCode >= 9) && (config->txCode <= 24))
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	785b      	ldrb	r3, [r3, #1]
 80008bc:	2b02      	cmp	r3, #2
 80008be:	d107      	bne.n	80008d0 <dwt_configure+0xa4>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	791b      	ldrb	r3, [r3, #4]
 80008c4:	2b08      	cmp	r3, #8
 80008c6:	d903      	bls.n	80008d0 <dwt_configure+0xa4>
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	791b      	ldrb	r3, [r3, #4]
 80008cc:	2b18      	cmp	r3, #24
 80008ce:	d912      	bls.n	80008f6 <dwt_configure+0xca>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	785b      	ldrb	r3, [r3, #1]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d107      	bne.n	80008e8 <dwt_configure+0xbc>
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	791b      	ldrb	r3, [r3, #4]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d003      	beq.n	80008e8 <dwt_configure+0xbc>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	791b      	ldrb	r3, [r3, #4]
 80008e4:	2b08      	cmp	r3, #8
 80008e6:	d906      	bls.n	80008f6 <dwt_configure+0xca>
 80008e8:	4b7c      	ldr	r3, [pc, #496]	; (8000adc <dwt_configure+0x2b0>)
 80008ea:	4a78      	ldr	r2, [pc, #480]	; (8000acc <dwt_configure+0x2a0>)
 80008ec:	f240 21a2 	movw	r1, #674	; 0x2a2
 80008f0:	4877      	ldr	r0, [pc, #476]	; (8000ad0 <dwt_configure+0x2a4>)
 80008f2:	f004 fa35 	bl	8004d60 <__assert_func>
           || ((config->prf == DWT_PRF_16M) && (config->txCode >= 1) && (config->txCode <= 8)));
    assert(((config->prf == DWT_PRF_64M) && (config->rxCode >= 9) && (config->rxCode <= 24))
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	785b      	ldrb	r3, [r3, #1]
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	d107      	bne.n	800090e <dwt_configure+0xe2>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	795b      	ldrb	r3, [r3, #5]
 8000902:	2b08      	cmp	r3, #8
 8000904:	d903      	bls.n	800090e <dwt_configure+0xe2>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	795b      	ldrb	r3, [r3, #5]
 800090a:	2b18      	cmp	r3, #24
 800090c:	d912      	bls.n	8000934 <dwt_configure+0x108>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	785b      	ldrb	r3, [r3, #1]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d107      	bne.n	8000926 <dwt_configure+0xfa>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	795b      	ldrb	r3, [r3, #5]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d003      	beq.n	8000926 <dwt_configure+0xfa>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	795b      	ldrb	r3, [r3, #5]
 8000922:	2b08      	cmp	r3, #8
 8000924:	d906      	bls.n	8000934 <dwt_configure+0x108>
 8000926:	4b6e      	ldr	r3, [pc, #440]	; (8000ae0 <dwt_configure+0x2b4>)
 8000928:	4a68      	ldr	r2, [pc, #416]	; (8000acc <dwt_configure+0x2a0>)
 800092a:	f44f 7129 	mov.w	r1, #676	; 0x2a4
 800092e:	4868      	ldr	r0, [pc, #416]	; (8000ad0 <dwt_configure+0x2a4>)
 8000930:	f004 fa16 	bl	8004d60 <__assert_func>
           || ((config->prf == DWT_PRF_16M) && (config->rxCode >= 1) && (config->rxCode <= 8)));
    assert((config->txPreambLength == DWT_PLEN_64) || (config->txPreambLength == DWT_PLEN_128) || (config->txPreambLength == DWT_PLEN_256)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	789b      	ldrb	r3, [r3, #2]
 8000938:	2b04      	cmp	r3, #4
 800093a:	d022      	beq.n	8000982 <dwt_configure+0x156>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	789b      	ldrb	r3, [r3, #2]
 8000940:	2b14      	cmp	r3, #20
 8000942:	d01e      	beq.n	8000982 <dwt_configure+0x156>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	789b      	ldrb	r3, [r3, #2]
 8000948:	2b24      	cmp	r3, #36	; 0x24
 800094a:	d01a      	beq.n	8000982 <dwt_configure+0x156>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	789b      	ldrb	r3, [r3, #2]
 8000950:	2b34      	cmp	r3, #52	; 0x34
 8000952:	d016      	beq.n	8000982 <dwt_configure+0x156>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	789b      	ldrb	r3, [r3, #2]
 8000958:	2b08      	cmp	r3, #8
 800095a:	d012      	beq.n	8000982 <dwt_configure+0x156>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	789b      	ldrb	r3, [r3, #2]
 8000960:	2b18      	cmp	r3, #24
 8000962:	d00e      	beq.n	8000982 <dwt_configure+0x156>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	789b      	ldrb	r3, [r3, #2]
 8000968:	2b28      	cmp	r3, #40	; 0x28
 800096a:	d00a      	beq.n	8000982 <dwt_configure+0x156>
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	789b      	ldrb	r3, [r3, #2]
 8000970:	2b0c      	cmp	r3, #12
 8000972:	d006      	beq.n	8000982 <dwt_configure+0x156>
 8000974:	4b5b      	ldr	r3, [pc, #364]	; (8000ae4 <dwt_configure+0x2b8>)
 8000976:	4a55      	ldr	r2, [pc, #340]	; (8000acc <dwt_configure+0x2a0>)
 8000978:	f240 21a6 	movw	r1, #678	; 0x2a6
 800097c:	4854      	ldr	r0, [pc, #336]	; (8000ad0 <dwt_configure+0x2a4>)
 800097e:	f004 f9ef 	bl	8004d60 <__assert_func>
           || (config->txPreambLength == DWT_PLEN_512) || (config->txPreambLength == DWT_PLEN_1024) || (config->txPreambLength == DWT_PLEN_1536)
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	7a1b      	ldrb	r3, [r3, #8]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d00a      	beq.n	80009a0 <dwt_configure+0x174>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	7a1b      	ldrb	r3, [r3, #8]
 800098e:	2b03      	cmp	r3, #3
 8000990:	d006      	beq.n	80009a0 <dwt_configure+0x174>
 8000992:	4b55      	ldr	r3, [pc, #340]	; (8000ae8 <dwt_configure+0x2bc>)
 8000994:	4a4d      	ldr	r2, [pc, #308]	; (8000acc <dwt_configure+0x2a0>)
 8000996:	f240 21a9 	movw	r1, #681	; 0x2a9
 800099a:	484d      	ldr	r0, [pc, #308]	; (8000ad0 <dwt_configure+0x2a4>)
 800099c:	f004 f9e0 	bl	8004d60 <__assert_func>
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	79db      	ldrb	r3, [r3, #7]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d10b      	bne.n	80009c0 <dwt_configure+0x194>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 80009a8:	4b50      	ldr	r3, [pc, #320]	; (8000aec <dwt_configure+0x2c0>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	691a      	ldr	r2, [r3, #16]
 80009ae:	4b4f      	ldr	r3, [pc, #316]	; (8000aec <dwt_configure+0x2c0>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80009b6:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 80009b8:	8abb      	ldrh	r3, [r7, #20]
 80009ba:	08db      	lsrs	r3, r3, #3
 80009bc:	82bb      	strh	r3, [r7, #20]
 80009be:	e007      	b.n	80009d0 <dwt_configure+0x1a4>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 80009c0:	4b4a      	ldr	r3, [pc, #296]	; (8000aec <dwt_configure+0x2c0>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	691a      	ldr	r2, [r3, #16]
 80009c6:	4b49      	ldr	r3, [pc, #292]	; (8000aec <dwt_configure+0x2c0>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80009ce:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 80009d0:	4b46      	ldr	r3, [pc, #280]	; (8000aec <dwt_configure+0x2c0>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	7a12      	ldrb	r2, [r2, #8]
 80009d8:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 80009da:	4b44      	ldr	r3, [pc, #272]	; (8000aec <dwt_configure+0x2c0>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	691a      	ldr	r2, [r3, #16]
 80009e0:	4b42      	ldr	r3, [pc, #264]	; (8000aec <dwt_configure+0x2c0>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80009e8:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 80009ea:	4b40      	ldr	r3, [pc, #256]	; (8000aec <dwt_configure+0x2c0>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	6919      	ldr	r1, [r3, #16]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	7a1b      	ldrb	r3, [r3, #8]
 80009f4:	041b      	lsls	r3, r3, #16
 80009f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80009fa:	4b3c      	ldr	r3, [pc, #240]	; (8000aec <dwt_configure+0x2c0>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	430a      	orrs	r2, r1
 8000a00:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 8000a02:	4b3a      	ldr	r3, [pc, #232]	; (8000aec <dwt_configure+0x2c0>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	691b      	ldr	r3, [r3, #16]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2004      	movs	r0, #4
 8000a0e:	f000 fab9 	bl	8000f84 <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 8000a12:	8abb      	ldrh	r3, [r7, #20]
 8000a14:	461a      	mov	r2, r3
 8000a16:	f642 0104 	movw	r1, #10244	; 0x2804
 8000a1a:	202e      	movs	r0, #46	; 0x2e
 8000a1c:	f000 fa96 	bl	8000f4c <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 8000a20:	7cbb      	ldrb	r3, [r7, #18]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 fb02 	bl	800102c <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 8000a28:	7cfb      	ldrb	r3, [r7, #19]
 8000a2a:	4a31      	ldr	r2, [pc, #196]	; (8000af0 <dwt_configure+0x2c4>)
 8000a2c:	5cd3      	ldrb	r3, [r2, r3]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4b30      	ldr	r3, [pc, #192]	; (8000af4 <dwt_configure+0x2c8>)
 8000a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a36:	461a      	mov	r2, r3
 8000a38:	2107      	movs	r1, #7
 8000a3a:	202b      	movs	r0, #43	; 0x2b
 8000a3c:	f000 faa2 	bl	8000f84 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8000a40:	7cfb      	ldrb	r3, [r7, #19]
 8000a42:	4a2b      	ldr	r2, [pc, #172]	; (8000af0 <dwt_configure+0x2c4>)
 8000a44:	5cd3      	ldrb	r3, [r2, r3]
 8000a46:	461a      	mov	r2, r3
 8000a48:	4b2b      	ldr	r3, [pc, #172]	; (8000af8 <dwt_configure+0x2cc>)
 8000a4a:	5c9b      	ldrb	r3, [r3, r2]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	210b      	movs	r1, #11
 8000a50:	202b      	movs	r0, #43	; 0x2b
 8000a52:	f000 fa68 	bl	8000f26 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 8000a56:	7c7b      	ldrb	r3, [r7, #17]
 8000a58:	4a28      	ldr	r2, [pc, #160]	; (8000afc <dwt_configure+0x2d0>)
 8000a5a:	5cd3      	ldrb	r3, [r2, r3]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	210b      	movs	r1, #11
 8000a60:	2028      	movs	r0, #40	; 0x28
 8000a62:	f000 fa60 	bl	8000f26 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 8000a66:	7cfb      	ldrb	r3, [r7, #19]
 8000a68:	4a21      	ldr	r2, [pc, #132]	; (8000af0 <dwt_configure+0x2c4>)
 8000a6a:	5cd3      	ldrb	r3, [r2, r3]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4b24      	ldr	r3, [pc, #144]	; (8000b00 <dwt_configure+0x2d4>)
 8000a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a74:	461a      	mov	r2, r3
 8000a76:	210c      	movs	r1, #12
 8000a78:	2028      	movs	r0, #40	; 0x28
 8000a7a:	f000 fa83 	bl	8000f84 <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	79db      	ldrb	r3, [r3, #7]
 8000a82:	4618      	mov	r0, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	799b      	ldrb	r3, [r3, #6]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4a1e      	ldr	r2, [pc, #120]	; (8000b04 <dwt_configure+0x2d8>)
 8000a8c:	0043      	lsls	r3, r0, #1
 8000a8e:	440b      	add	r3, r1
 8000a90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a94:	461a      	mov	r2, r3
 8000a96:	2102      	movs	r1, #2
 8000a98:	2027      	movs	r0, #39	; 0x27
 8000a9a:	f000 fa57 	bl	8000f4c <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 8000a9e:	7cbb      	ldrb	r3, [r7, #18]
 8000aa0:	4a19      	ldr	r2, [pc, #100]	; (8000b08 <dwt_configure+0x2dc>)
 8000aa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	2104      	movs	r1, #4
 8000aaa:	2027      	movs	r0, #39	; 0x27
 8000aac:	f000 fa4e 	bl	8000f4c <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	79db      	ldrb	r3, [r3, #7]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d129      	bne.n	8000b0c <dwt_configure+0x2e0>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 8000ab8:	2264      	movs	r2, #100	; 0x64
 8000aba:	2106      	movs	r1, #6
 8000abc:	2027      	movs	r0, #39	; 0x27
 8000abe:	f000 fa45 	bl	8000f4c <dwt_write16bitoffsetreg>
 8000ac2:	e03c      	b.n	8000b3e <dwt_configure+0x312>
 8000ac4:	080063c4 	.word	0x080063c4
 8000ac8:	08005e58 	.word	0x08005e58
 8000acc:	0800630c 	.word	0x0800630c
 8000ad0:	08005dac 	.word	0x08005dac
 8000ad4:	08005e78 	.word	0x08005e78
 8000ad8:	08005e94 	.word	0x08005e94
 8000adc:	08005ec0 	.word	0x08005ec0
 8000ae0:	08005f68 	.word	0x08005f68
 8000ae4:	08006010 	.word	0x08006010
 8000ae8:	08006170 	.word	0x08006170
 8000aec:	20000000 	.word	0x20000000
 8000af0:	08006344 	.word	0x08006344
 8000af4:	08006364 	.word	0x08006364
 8000af8:	0800637c 	.word	0x0800637c
 8000afc:	08006384 	.word	0x08006384
 8000b00:	0800634c 	.word	0x0800634c
 8000b04:	08006394 	.word	0x08006394
 8000b08:	080063a0 	.word	0x080063a0
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	789b      	ldrb	r3, [r3, #2]
 8000b10:	2b04      	cmp	r3, #4
 8000b12:	d10a      	bne.n	8000b2a <dwt_configure+0x2fe>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 8000b14:	2210      	movs	r2, #16
 8000b16:	2106      	movs	r1, #6
 8000b18:	2027      	movs	r0, #39	; 0x27
 8000b1a:	f000 fa17 	bl	8000f4c <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 8000b1e:	2210      	movs	r2, #16
 8000b20:	2126      	movs	r1, #38	; 0x26
 8000b22:	2027      	movs	r0, #39	; 0x27
 8000b24:	f000 f9ff 	bl	8000f26 <dwt_write8bitoffsetreg>
 8000b28:	e009      	b.n	8000b3e <dwt_configure+0x312>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 8000b2a:	2220      	movs	r2, #32
 8000b2c:	2106      	movs	r1, #6
 8000b2e:	2027      	movs	r0, #39	; 0x27
 8000b30:	f000 fa0c 	bl	8000f4c <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 8000b34:	2228      	movs	r2, #40	; 0x28
 8000b36:	2126      	movs	r1, #38	; 0x26
 8000b38:	2027      	movs	r0, #39	; 0x27
 8000b3a:	f000 f9f4 	bl	8000f26 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 8000b3e:	7cbb      	ldrb	r3, [r7, #18]
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	78d2      	ldrb	r2, [r2, #3]
 8000b44:	4611      	mov	r1, r2
 8000b46:	4a41      	ldr	r2, [pc, #260]	; (8000c4c <dwt_configure+0x420>)
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	440b      	add	r3, r1
 8000b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b50:	461a      	mov	r2, r3
 8000b52:	2108      	movs	r1, #8
 8000b54:	2027      	movs	r0, #39	; 0x27
 8000b56:	f000 fa15 	bl	8000f84 <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	895b      	ldrh	r3, [r3, #10]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d103      	bne.n	8000b6a <dwt_configure+0x33e>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	f241 0241 	movw	r2, #4161	; 0x1041
 8000b68:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	895b      	ldrh	r3, [r3, #10]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	2120      	movs	r1, #32
 8000b72:	2027      	movs	r0, #39	; 0x27
 8000b74:	f000 f9ea 	bl	8000f4c <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 8000b78:	4b35      	ldr	r3, [pc, #212]	; (8000c50 <dwt_configure+0x424>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	210c      	movs	r1, #12
 8000b80:	2023      	movs	r0, #35	; 0x23
 8000b82:	f000 f9ff 	bl	8000f84 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 8000b86:	7cbb      	ldrb	r3, [r7, #18]
 8000b88:	4a31      	ldr	r2, [pc, #196]	; (8000c50 <dwt_configure+0x424>)
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	4413      	add	r3, r2
 8000b8e:	889b      	ldrh	r3, [r3, #4]
 8000b90:	461a      	mov	r2, r3
 8000b92:	2104      	movs	r1, #4
 8000b94:	2023      	movs	r0, #35	; 0x23
 8000b96:	f000 f9d9 	bl	8000f4c <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	799b      	ldrb	r3, [r3, #6]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d00d      	beq.n	8000bbe <dwt_configure+0x392>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	79db      	ldrb	r3, [r3, #7]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <dwt_configure+0x428>)
 8000baa:	5c9b      	ldrb	r3, [r3, r2]
 8000bac:	461a      	mov	r2, r3
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2021      	movs	r0, #33	; 0x21
 8000bb2:	f000 f9b8 	bl	8000f26 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000bbe:	7cfb      	ldrb	r3, [r7, #19]
 8000bc0:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8000bc4:	7cfb      	ldrb	r3, [r7, #19]
 8000bc6:	011b      	lsls	r3, r3, #4
 8000bc8:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000bca:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	785b      	ldrb	r3, [r3, #1]
 8000bd0:	049b      	lsls	r3, r3, #18
 8000bd2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8000bd6:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000bd8:	7dfb      	ldrb	r3, [r7, #23]
 8000bda:	051b      	lsls	r3, r3, #20
 8000bdc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000be0:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8000be2:	7dbb      	ldrb	r3, [r7, #22]
 8000be4:	045b      	lsls	r3, r3, #17
 8000be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000bea:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	791b      	ldrb	r3, [r3, #4]
 8000bf0:	059b      	lsls	r3, r3, #22
 8000bf2:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8000bf6:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	795b      	ldrb	r3, [r3, #5]
 8000bfc:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	2100      	movs	r1, #0
 8000c06:	201f      	movs	r0, #31
 8000c08:	f000 f9bc 	bl	8000f84 <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	789a      	ldrb	r2, [r3, #2]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	785b      	ldrb	r3, [r3, #1]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	0419      	lsls	r1, r3, #16
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	79db      	ldrb	r3, [r3, #7]
 8000c1e:	035a      	lsls	r2, r3, #13
 8000c20:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <dwt_configure+0x42c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	430a      	orrs	r2, r1
 8000c26:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 8000c28:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <dwt_configure+0x42c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	2100      	movs	r1, #0
 8000c32:	2008      	movs	r0, #8
 8000c34:	f000 f9a6 	bl	8000f84 <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 8000c38:	2242      	movs	r2, #66	; 0x42
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	200d      	movs	r0, #13
 8000c3e:	f000 f972 	bl	8000f26 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8000c42:	bf00      	nop
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	080063a4 	.word	0x080063a4
 8000c50:	08006388 	.word	0x08006388
 8000c54:	08006390 	.word	0x08006390
 8000c58:	20000000 	.word	0x20000000

08000c5c <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	807b      	strh	r3, [r7, #2]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	803b      	strh	r3, [r7, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 8000c6c:	887a      	ldrh	r2, [r7, #2]
 8000c6e:	8839      	ldrh	r1, [r7, #0]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2011      	movs	r0, #17
 8000c74:	f000 f884 	bl	8000d80 <dwt_readfromdevice>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60ba      	str	r2, [r7, #8]
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	81fb      	strh	r3, [r7, #14]
 8000c8e:	460b      	mov	r3, r1
 8000c90:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
 8000c96:	89fb      	ldrh	r3, [r7, #14]
 8000c98:	2b3f      	cmp	r3, #63	; 0x3f
 8000c9a:	d906      	bls.n	8000caa <dwt_writetodevice+0x2a>
 8000c9c:	4b34      	ldr	r3, [pc, #208]	; (8000d70 <dwt_writetodevice+0xf0>)
 8000c9e:	4a35      	ldr	r2, [pc, #212]	; (8000d74 <dwt_writetodevice+0xf4>)
 8000ca0:	f240 4197 	movw	r1, #1175	; 0x497
 8000ca4:	4834      	ldr	r0, [pc, #208]	; (8000d78 <dwt_writetodevice+0xf8>)
 8000ca6:	f004 f85b 	bl	8004d60 <__assert_func>
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000caa:	89bb      	ldrh	r3, [r7, #12]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d10d      	bne.n	8000ccc <dwt_writetodevice+0x4c>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000cb0:	89fb      	ldrh	r3, [r7, #14]
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	1c59      	adds	r1, r3, #1
 8000cb8:	6179      	str	r1, [r7, #20]
 8000cba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000cbe:	b2d2      	uxtb	r2, r2
 8000cc0:	f107 0118 	add.w	r1, r7, #24
 8000cc4:	440b      	add	r3, r1
 8000cc6:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000cca:	e044      	b.n	8000d56 <dwt_writetodevice+0xd6>
    }
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
 8000ccc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db05      	blt.n	8000ce0 <dwt_writetodevice+0x60>
 8000cd4:	89ba      	ldrh	r2, [r7, #12]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	4413      	add	r3, r2
 8000cda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000cde:	d306      	bcc.n	8000cee <dwt_writetodevice+0x6e>
 8000ce0:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <dwt_writetodevice+0xfc>)
 8000ce2:	4a24      	ldr	r2, [pc, #144]	; (8000d74 <dwt_writetodevice+0xf4>)
 8000ce4:	f240 41a2 	movw	r1, #1186	; 0x4a2
 8000ce8:	4823      	ldr	r0, [pc, #140]	; (8000d78 <dwt_writetodevice+0xf8>)
 8000cea:	f004 f839 	bl	8004d60 <__assert_func>
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000cee:	89fb      	ldrh	r3, [r7, #14]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	1c59      	adds	r1, r3, #1
 8000cf6:	6179      	str	r1, [r7, #20]
 8000cf8:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8000cfc:	b2d2      	uxtb	r2, r2
 8000cfe:	f107 0118 	add.w	r1, r7, #24
 8000d02:	440b      	add	r3, r1
 8000d04:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000d08:	89bb      	ldrh	r3, [r7, #12]
 8000d0a:	2b7f      	cmp	r3, #127	; 0x7f
 8000d0c:	d80a      	bhi.n	8000d24 <dwt_writetodevice+0xa4>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	1c5a      	adds	r2, r3, #1
 8000d12:	617a      	str	r2, [r7, #20]
 8000d14:	89ba      	ldrh	r2, [r7, #12]
 8000d16:	b2d2      	uxtb	r2, r2
 8000d18:	f107 0118 	add.w	r1, r7, #24
 8000d1c:	440b      	add	r3, r1
 8000d1e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000d22:	e018      	b.n	8000d56 <dwt_writetodevice+0xd6>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000d24:	89bb      	ldrh	r3, [r7, #12]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	1c59      	adds	r1, r3, #1
 8000d2c:	6179      	str	r1, [r7, #20]
 8000d2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	f107 0118 	add.w	r1, r7, #24
 8000d38:	440b      	add	r3, r1
 8000d3a:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000d3e:	89bb      	ldrh	r3, [r7, #12]
 8000d40:	09db      	lsrs	r3, r3, #7
 8000d42:	b299      	uxth	r1, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	1c5a      	adds	r2, r3, #1
 8000d48:	617a      	str	r2, [r7, #20]
 8000d4a:	b2ca      	uxtb	r2, r1
 8000d4c:	f107 0118 	add.w	r1, r7, #24
 8000d50:	440b      	add	r3, r1
 8000d52:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	b298      	uxth	r0, r3
 8000d5a:	f107 0110 	add.w	r1, r7, #16
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	68ba      	ldr	r2, [r7, #8]
 8000d62:	f000 fb31 	bl	80013c8 <writetospi>
} // end dwt_writetodevice()
 8000d66:	bf00      	nop
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	08006274 	.word	0x08006274
 8000d74:	0800631c 	.word	0x0800631c
 8000d78:	08005dac 	.word	0x08005dac
 8000d7c:	0800628c 	.word	0x0800628c

08000d80 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60ba      	str	r2, [r7, #8]
 8000d88:	607b      	str	r3, [r7, #4]
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	81fb      	strh	r3, [r7, #14]
 8000d8e:	460b      	mov	r3, r1
 8000d90:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
 8000d96:	89fb      	ldrh	r3, [r7, #14]
 8000d98:	2b3f      	cmp	r3, #63	; 0x3f
 8000d9a:	d906      	bls.n	8000daa <dwt_readfromdevice+0x2a>
 8000d9c:	4b32      	ldr	r3, [pc, #200]	; (8000e68 <dwt_readfromdevice+0xe8>)
 8000d9e:	4a33      	ldr	r2, [pc, #204]	; (8000e6c <dwt_readfromdevice+0xec>)
 8000da0:	f240 41d7 	movw	r1, #1239	; 0x4d7
 8000da4:	4832      	ldr	r0, [pc, #200]	; (8000e70 <dwt_readfromdevice+0xf0>)
 8000da6:	f003 ffdb 	bl	8004d60 <__assert_func>
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000daa:	89bb      	ldrh	r3, [r7, #12]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d10a      	bne.n	8000dc6 <dwt_readfromdevice+0x46>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	1c5a      	adds	r2, r3, #1
 8000db4:	617a      	str	r2, [r7, #20]
 8000db6:	89fa      	ldrh	r2, [r7, #14]
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	f107 0118 	add.w	r1, r7, #24
 8000dbe:	440b      	add	r3, r1
 8000dc0:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000dc4:	e044      	b.n	8000e50 <dwt_readfromdevice+0xd0>
    }
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
 8000dc6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	db05      	blt.n	8000dda <dwt_readfromdevice+0x5a>
 8000dce:	89ba      	ldrh	r2, [r7, #12]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000dd8:	d306      	bcc.n	8000de8 <dwt_readfromdevice+0x68>
 8000dda:	4b26      	ldr	r3, [pc, #152]	; (8000e74 <dwt_readfromdevice+0xf4>)
 8000ddc:	4a23      	ldr	r2, [pc, #140]	; (8000e6c <dwt_readfromdevice+0xec>)
 8000dde:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8000de2:	4823      	ldr	r0, [pc, #140]	; (8000e70 <dwt_readfromdevice+0xf0>)
 8000de4:	f003 ffbc 	bl	8004d60 <__assert_func>
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000de8:	89fb      	ldrh	r3, [r7, #14]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	1c59      	adds	r1, r3, #1
 8000df0:	6179      	str	r1, [r7, #20]
 8000df2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	f107 0118 	add.w	r1, r7, #24
 8000dfc:	440b      	add	r3, r1
 8000dfe:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000e02:	89bb      	ldrh	r3, [r7, #12]
 8000e04:	2b7f      	cmp	r3, #127	; 0x7f
 8000e06:	d80a      	bhi.n	8000e1e <dwt_readfromdevice+0x9e>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	1c5a      	adds	r2, r3, #1
 8000e0c:	617a      	str	r2, [r7, #20]
 8000e0e:	89ba      	ldrh	r2, [r7, #12]
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	f107 0118 	add.w	r1, r7, #24
 8000e16:	440b      	add	r3, r1
 8000e18:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000e1c:	e018      	b.n	8000e50 <dwt_readfromdevice+0xd0>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000e1e:	89bb      	ldrh	r3, [r7, #12]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	1c59      	adds	r1, r3, #1
 8000e26:	6179      	str	r1, [r7, #20]
 8000e28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000e2c:	b2d2      	uxtb	r2, r2
 8000e2e:	f107 0118 	add.w	r1, r7, #24
 8000e32:	440b      	add	r3, r1
 8000e34:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000e38:	89bb      	ldrh	r3, [r7, #12]
 8000e3a:	09db      	lsrs	r3, r3, #7
 8000e3c:	b299      	uxth	r1, r3
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	1c5a      	adds	r2, r3, #1
 8000e42:	617a      	str	r2, [r7, #20]
 8000e44:	b2ca      	uxtb	r2, r1
 8000e46:	f107 0118 	add.w	r1, r7, #24
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	b298      	uxth	r0, r3
 8000e54:	f107 0110 	add.w	r1, r7, #16
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	f000 fae8 	bl	8001430 <readfromspi>
} // end dwt_readfromdevice()
 8000e60:	bf00      	nop
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	08006274 	.word	0x08006274
 8000e6c:	08006330 	.word	0x08006330
 8000e70:	08005dac 	.word	0x08005dac
 8000e74:	0800628c 	.word	0x0800628c

08000e78 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	b298      	uxth	r0, r3
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	b299      	uxth	r1, r3
 8000e8e:	f107 030c 	add.w	r3, r7, #12
 8000e92:	2204      	movs	r2, #4
 8000e94:	f7ff ff74 	bl	8000d80 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8000e98:	2303      	movs	r3, #3
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	e00b      	b.n	8000eb6 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	021b      	lsls	r3, r3, #8
 8000ea2:	f107 010c 	add.w	r1, r7, #12
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	440a      	add	r2, r1
 8000eaa:	7812      	ldrb	r2, [r2, #0]
 8000eac:	4413      	add	r3, r2
 8000eae:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	daf0      	bge.n	8000e9e <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8000ebc:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b084      	sub	sp, #16
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	b298      	uxth	r0, r3
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	b299      	uxth	r1, r3
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	f7ff ff4d 	bl	8000d80 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8000ee6:	7b7b      	ldrb	r3, [r7, #13]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	021b      	lsls	r3, r3, #8
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	7b3b      	ldrb	r3, [r7, #12]
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	4413      	add	r3, r2
 8000ef4:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8000ef6:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	b298      	uxth	r0, r3
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	b299      	uxth	r1, r3
 8000f12:	f107 030f 	add.w	r3, r7, #15
 8000f16:	2201      	movs	r2, #1
 8000f18:	f7ff ff32 	bl	8000d80 <dwt_readfromdevice>

    return regval ;
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b084      	sub	sp, #16
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	60f8      	str	r0, [r7, #12]
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	4613      	mov	r3, r2
 8000f32:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	b298      	uxth	r0, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	b299      	uxth	r1, r3
 8000f3c:	1dfb      	adds	r3, r7, #7
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f7ff fe9e 	bl	8000c80 <dwt_writetodevice>
}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	4613      	mov	r3, r2
 8000f58:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 8000f60:	88fb      	ldrh	r3, [r7, #6]
 8000f62:	0a1b      	lsrs	r3, r3, #8
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	b298      	uxth	r0, r3
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	b299      	uxth	r1, r3
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	2202      	movs	r2, #2
 8000f78:	f7ff fe82 	bl	8000c80 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8000f7c:	bf00      	nop
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	e00d      	b.n	8000fb2 <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	b2d9      	uxtb	r1, r3
 8000f9a:	f107 0210 	add.w	r2, r7, #16
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	460a      	mov	r2, r1
 8000fa4:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	ddee      	ble.n	8000f96 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	b298      	uxth	r0, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	b299      	uxth	r1, r3
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	2204      	movs	r2, #4
 8000fc6:	f7ff fe5b 	bl	8000c80 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8000fca:	bf00      	nop
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b084      	sub	sp, #16
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	2104      	movs	r1, #4
 8000fe2:	202d      	movs	r0, #45	; 0x2d
 8000fe4:	f7ff ffb2 	bl	8000f4c <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8000fe8:	2203      	movs	r2, #3
 8000fea:	2106      	movs	r1, #6
 8000fec:	202d      	movs	r0, #45	; 0x2d
 8000fee:	f7ff ff9a 	bl	8000f26 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2106      	movs	r1, #6
 8000ff6:	202d      	movs	r0, #45	; 0x2d
 8000ff8:	f7ff ff95 	bl	8000f26 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8000ffc:	210a      	movs	r1, #10
 8000ffe:	202d      	movs	r0, #45	; 0x2d
 8001000:	f7ff ff3a 	bl	8000e78 <dwt_read32bitoffsetreg>
 8001004:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8001006:	68fb      	ldr	r3, [r7, #12]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8001014:	2200      	movs	r2, #0
 8001016:	2102      	movs	r1, #2
 8001018:	202c      	movs	r0, #44	; 0x2c
 800101a:	f7ff ff84 	bl	8000f26 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 800101e:	2202      	movs	r2, #2
 8001020:	2102      	movs	r1, #2
 8001022:	202c      	movs	r0, #44	; 0x2c
 8001024:	f7ff ff7f 	bl	8000f26 <dwt_write8bitoffsetreg>
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}

0800102c <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 8001034:	226d      	movs	r2, #109	; 0x6d
 8001036:	f640 0106 	movw	r1, #2054	; 0x806
 800103a:	202e      	movs	r0, #46	; 0x2e
 800103c:	f7ff ff73 	bl	8000f26 <dwt_write8bitoffsetreg>

    if(prfIndex)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d007      	beq.n	8001056 <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8001046:	f240 6207 	movw	r2, #1543	; 0x607
 800104a:	f641 0106 	movw	r1, #6150	; 0x1806
 800104e:	202e      	movs	r0, #46	; 0x2e
 8001050:	f7ff ff7c 	bl	8000f4c <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8001054:	e006      	b.n	8001064 <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8001056:	f241 6207 	movw	r2, #5639	; 0x1607
 800105a:	f641 0106 	movw	r1, #6150	; 0x1806
 800105e:	202e      	movs	r0, #46	; 0x2e
 8001060:	f7ff ff74 	bl	8000f4c <dwt_write16bitoffsetreg>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8001070:	200e      	movs	r0, #14
 8001072:	f000 f80f 	bl	8001094 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8001076:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800107a:	2106      	movs	r1, #6
 800107c:	202d      	movs	r0, #45	; 0x2d
 800107e:	f7ff ff65 	bl	8000f4c <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8001082:	2001      	movs	r0, #1
 8001084:	f000 f994 	bl	80013b0 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8001088:	2001      	movs	r0, #1
 800108a:	f000 f803 	bl	8001094 <_dwt_enableclocks>
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	2202      	movs	r2, #2
 80010a2:	2100      	movs	r1, #0
 80010a4:	2036      	movs	r0, #54	; 0x36
 80010a6:	f7ff fe6b 	bl	8000d80 <dwt_readfromdevice>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b0e      	cmp	r3, #14
 80010ae:	d876      	bhi.n	800119e <_dwt_enableclocks+0x10a>
 80010b0:	a201      	add	r2, pc, #4	; (adr r2, 80010b8 <_dwt_enableclocks+0x24>)
 80010b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b6:	bf00      	nop
 80010b8:	08001105 	.word	0x08001105
 80010bc:	080010f5 	.word	0x080010f5
 80010c0:	0800111b 	.word	0x0800111b
 80010c4:	0800119f 	.word	0x0800119f
 80010c8:	0800119f 	.word	0x0800119f
 80010cc:	0800119f 	.word	0x0800119f
 80010d0:	0800119f 	.word	0x0800119f
 80010d4:	08001131 	.word	0x08001131
 80010d8:	08001151 	.word	0x08001151
 80010dc:	0800119f 	.word	0x0800119f
 80010e0:	0800119f 	.word	0x0800119f
 80010e4:	08001167 	.word	0x08001167
 80010e8:	08001173 	.word	0x08001173
 80010ec:	0800117f 	.word	0x0800117f
 80010f0:	08001195 	.word	0x08001195
    switch(clocks)
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 80010f4:	2300      	movs	r3, #0
 80010f6:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 80010f8:	7b7b      	ldrb	r3, [r7, #13]
 80010fa:	f023 0301 	bic.w	r3, r3, #1
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001102:	e04d      	b.n	80011a0 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8001104:	7b3b      	ldrb	r3, [r7, #12]
 8001106:	b25b      	sxtb	r3, r3
 8001108:	f023 0303 	bic.w	r3, r3, #3
 800110c:	b25b      	sxtb	r3, r3
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	b25b      	sxtb	r3, r3
 8001114:	b2db      	uxtb	r3, r3
 8001116:	733b      	strb	r3, [r7, #12]
        }
        break;
 8001118:	e042      	b.n	80011a0 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 800111a:	7b3b      	ldrb	r3, [r7, #12]
 800111c:	b25b      	sxtb	r3, r3
 800111e:	f023 0303 	bic.w	r3, r3, #3
 8001122:	b25b      	sxtb	r3, r3
 8001124:	f043 0302 	orr.w	r3, r3, #2
 8001128:	b25b      	sxtb	r3, r3
 800112a:	b2db      	uxtb	r3, r3
 800112c:	733b      	strb	r3, [r7, #12]
        }
        break;
 800112e:	e037      	b.n	80011a0 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8001130:	7b3b      	ldrb	r3, [r7, #12]
 8001132:	b25b      	sxtb	r3, r3
 8001134:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8001138:	b25b      	sxtb	r3, r3
 800113a:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 800113e:	b25b      	sxtb	r3, r3
 8001140:	b2db      	uxtb	r3, r3
 8001142:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8001144:	7b7b      	ldrb	r3, [r7, #13]
 8001146:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800114a:	b2db      	uxtb	r3, r3
 800114c:	737b      	strb	r3, [r7, #13]
        }
        break;
 800114e:	e027      	b.n	80011a0 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8001150:	7b3b      	ldrb	r3, [r7, #12]
 8001152:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8001156:	b2db      	uxtb	r3, r3
 8001158:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 800115a:	7b7b      	ldrb	r3, [r7, #13]
 800115c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001160:	b2db      	uxtb	r3, r3
 8001162:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001164:	e01c      	b.n	80011a0 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8001166:	7b7b      	ldrb	r3, [r7, #13]
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	b2db      	uxtb	r3, r3
 800116e:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001170:	e016      	b.n	80011a0 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8001172:	7b7b      	ldrb	r3, [r7, #13]
 8001174:	f023 0302 	bic.w	r3, r3, #2
 8001178:	b2db      	uxtb	r3, r3
 800117a:	737b      	strb	r3, [r7, #13]
        }
        break;
 800117c:	e010      	b.n	80011a0 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 800117e:	7b3b      	ldrb	r3, [r7, #12]
 8001180:	b25b      	sxtb	r3, r3
 8001182:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001186:	b25b      	sxtb	r3, r3
 8001188:	f043 0320 	orr.w	r3, r3, #32
 800118c:	b25b      	sxtb	r3, r3
 800118e:	b2db      	uxtb	r3, r3
 8001190:	733b      	strb	r3, [r7, #12]
        }
        break;
 8001192:	e005      	b.n	80011a0 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8001194:	2301      	movs	r3, #1
 8001196:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8001198:	2303      	movs	r3, #3
 800119a:	737b      	strb	r3, [r7, #13]
        }
        break;
 800119c:	e000      	b.n	80011a0 <_dwt_enableclocks+0x10c>
        default:
        break;
 800119e:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	2201      	movs	r2, #1
 80011a6:	2100      	movs	r1, #0
 80011a8:	2036      	movs	r0, #54	; 0x36
 80011aa:	f7ff fd69 	bl	8000c80 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	3301      	adds	r3, #1
 80011b4:	2201      	movs	r2, #1
 80011b6:	2101      	movs	r1, #1
 80011b8:	2036      	movs	r0, #54	; 0x36
 80011ba:	f7ff fd61 	bl	8000c80 <dwt_writetodevice>

} // end _dwt_enableclocks()
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop

080011c8 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff ff61 	bl	8001094 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 80011d2:	2200      	movs	r2, #0
 80011d4:	2104      	movs	r1, #4
 80011d6:	2036      	movs	r0, #54	; 0x36
 80011d8:	f7ff feb8 	bl	8000f4c <dwt_write16bitoffsetreg>
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}

080011e0 <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 80011e6:	2100      	movs	r1, #0
 80011e8:	200e      	movs	r0, #14
 80011ea:	f7ff fe45 	bl	8000e78 <dwt_read32bitoffsetreg>
 80011ee:	6078      	str	r0, [r7, #4]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
 80011f0:	f000 f8c0 	bl	8001374 <decamutexon>
 80011f4:	6038      	str	r0, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 80011f6:	2200      	movs	r2, #0
 80011f8:	2100      	movs	r1, #0
 80011fa:	200e      	movs	r0, #14
 80011fc:	f7ff fec2 	bl	8000f84 <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 8001200:	2240      	movs	r2, #64	; 0x40
 8001202:	2100      	movs	r1, #0
 8001204:	200d      	movs	r0, #13
 8001206:	f7ff fe8e 	bl	8000f26 <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 800120a:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <dwt_forcetrxoff+0x58>)
 800120c:	2100      	movs	r1, #0
 800120e:	200f      	movs	r0, #15
 8001210:	f7ff feb8 	bl	8000f84 <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 8001214:	f000 f814 	bl	8001240 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	2100      	movs	r1, #0
 800121c:	200e      	movs	r0, #14
 800121e:	f7ff feb1 	bl	8000f84 <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 8001222:	6838      	ldr	r0, [r7, #0]
 8001224:	f000 f8b7 	bl	8001396 <decamutexoff>
    pdw1000local->wait4resp = 0;
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <dwt_forcetrxoff+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2200      	movs	r2, #0
 800122e:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	2427fff8 	.word	0x2427fff8
 800123c:	20000000 	.word	0x20000000

08001240 <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8001246:	2103      	movs	r1, #3
 8001248:	200f      	movs	r0, #15
 800124a:	f7ff fe59 	bl	8000f00 <dwt_read8bitoffsetreg>
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8001252:	79fa      	ldrb	r2, [r7, #7]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8001258:	4053      	eors	r3, r2
 800125a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125e:	2b00      	cmp	r3, #0
 8001260:	d004      	beq.n	800126c <dwt_syncrxbufptrs+0x2c>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 8001262:	2201      	movs	r2, #1
 8001264:	2103      	movs	r1, #3
 8001266:	200d      	movs	r0, #13
 8001268:	f7ff fe5d 	bl	8000f26 <dwt_write8bitoffsetreg>
    }
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <dwt_rxenable+0x16>
    {
        dwt_syncrxbufptrs();
 8001286:	f7ff ffdb 	bl	8001240 <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 800128a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800128e:	81fb      	strh	r3, [r7, #14]

    if (mode & DWT_START_RX_DELAYED)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <dwt_rxenable+0x2e>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 800129a:	89fb      	ldrh	r3, [r7, #14]
 800129c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a0:	81fb      	strh	r3, [r7, #14]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 80012a2:	89fb      	ldrh	r3, [r7, #14]
 80012a4:	461a      	mov	r2, r3
 80012a6:	2100      	movs	r1, #0
 80012a8:	200d      	movs	r0, #13
 80012aa:	f7ff fe4f 	bl	8000f4c <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d01a      	beq.n	80012ee <dwt_rxenable+0x7a>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 80012b8:	2103      	movs	r1, #3
 80012ba:	200f      	movs	r0, #15
 80012bc:	f7ff fe20 	bl	8000f00 <dwt_read8bitoffsetreg>
 80012c0:	4603      	mov	r3, r0
 80012c2:	737b      	strb	r3, [r7, #13]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 80012c4:	7b7b      	ldrb	r3, [r7, #13]
 80012c6:	f003 0308 	and.w	r3, r3, #8
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00f      	beq.n	80012ee <dwt_rxenable+0x7a>
        {
            dwt_forcetrxoff(); // turn the delayed receive off
 80012ce:	f7ff ff87 	bl	80011e0 <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d105      	bne.n	80012e8 <dwt_rxenable+0x74>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 80012dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012e0:	2100      	movs	r1, #0
 80012e2:	200d      	movs	r0, #13
 80012e4:	f7ff fe32 	bl	8000f4c <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ec:	e000      	b.n	80012f0 <dwt_rxenable+0x7c>
        }
    }

    return DWT_SUCCESS;
 80012ee:	2300      	movs	r3, #0
} // end dwt_rxenable()
 80012f0:	4618      	mov	r0, r3
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 80012fc:	f7ff ff64 	bl	80011c8 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8001300:	2200      	movs	r2, #0
 8001302:	2100      	movs	r1, #0
 8001304:	202c      	movs	r0, #44	; 0x2c
 8001306:	f7ff fe21 	bl	8000f4c <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 800130a:	2200      	movs	r2, #0
 800130c:	2106      	movs	r1, #6
 800130e:	202c      	movs	r0, #44	; 0x2c
 8001310:	f7ff fe09 	bl	8000f26 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8001314:	f7ff fe7c 	bl	8001010 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8001318:	2200      	movs	r2, #0
 800131a:	2103      	movs	r1, #3
 800131c:	2036      	movs	r0, #54	; 0x36
 800131e:	f7ff fe02 	bl	8000f26 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8001322:	2001      	movs	r0, #1
 8001324:	f000 f844 	bl	80013b0 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8001328:	22f0      	movs	r2, #240	; 0xf0
 800132a:	2103      	movs	r1, #3
 800132c:	2036      	movs	r0, #54	; 0x36
 800132e:	f7ff fdfa 	bl	8000f26 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8001332:	4b03      	ldr	r3, [pc, #12]	; (8001340 <dwt_softreset+0x48>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2200      	movs	r2, #0
 8001338:	755a      	strb	r2, [r3, #21]
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000000 	.word	0x20000000

08001344 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	f003 031f 	and.w	r3, r3, #31
 8001356:	b25b      	sxtb	r3, r3
 8001358:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800135c:	b25b      	sxtb	r3, r3
 800135e:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	461a      	mov	r2, r3
 8001364:	210e      	movs	r1, #14
 8001366:	202b      	movs	r0, #43	; 0x2b
 8001368:	f7ff fddd 	bl	8000f26 <dwt_write8bitoffsetreg>
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 800137a:	f000 f991 	bl	80016a0 <port_GetEXT_IRQStatus>
 800137e:	4603      	mov	r3, r0
 8001380:	607b      	str	r3, [r7, #4]

	if(s) {
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 8001388:	f000 f97c 	bl	8001684 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 800138c:	687b      	ldr	r3, [r7, #4]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 80013a4:	f000 f975 	bl	8001692 <port_EnableEXT_IRQ>
	}
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 f8c5 	bl	8001548 <Sleep>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 80013c8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80013cc:	4683      	mov	fp, r0
 80013ce:	468a      	mov	sl, r1
 80013d0:	4691      	mov	r9, r2
 80013d2:	4698      	mov	r8, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 80013d4:	f7ff ffce 	bl	8001374 <decamutexon>

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80013d8:	4d13      	ldr	r5, [pc, #76]	; (8001428 <writetospi+0x60>)
    stat = decamutexon() ;
 80013da:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80013dc:	4628      	mov	r0, r5
 80013de:	f003 f8bd 	bl	800455c <HAL_SPI_GetState>
 80013e2:	2801      	cmp	r0, #1
 80013e4:	4604      	mov	r4, r0
 80013e6:	d1f9      	bne.n	80013dc <writetospi+0x14>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 80013e8:	4810      	ldr	r0, [pc, #64]	; (800142c <writetospi+0x64>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	2140      	movs	r1, #64	; 0x40
 80013ee:	f001 fc09 	bl	8002c04 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 80013f2:	465a      	mov	r2, fp
 80013f4:	4651      	mov	r1, sl
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
 80013fa:	480b      	ldr	r0, [pc, #44]	; (8001428 <writetospi+0x60>)
 80013fc:	f002 fe67 	bl	80040ce <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 8001400:	f04f 33ff 	mov.w	r3, #4294967295
 8001404:	fa1f f289 	uxth.w	r2, r9
 8001408:	4641      	mov	r1, r8
 800140a:	4807      	ldr	r0, [pc, #28]	; (8001428 <writetospi+0x60>)
 800140c:	f002 fe5f 	bl	80040ce <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8001410:	4622      	mov	r2, r4
 8001412:	2140      	movs	r1, #64	; 0x40
 8001414:	4805      	ldr	r0, [pc, #20]	; (800142c <writetospi+0x64>)
 8001416:	f001 fbf5 	bl	8002c04 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800141a:	4630      	mov	r0, r6
 800141c:	f7ff ffbb 	bl	8001396 <decamutexoff>

    return 0;
} // end writetospi()
 8001420:	2000      	movs	r0, #0
 8001422:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 8001426:	bf00      	nop
 8001428:	200005dc 	.word	0x200005dc
 800142c:	40020400 	.word	0x40020400

08001430 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 8001430:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 8001434:	4681      	mov	r9, r0
 8001436:	460c      	mov	r4, r1
 8001438:	4690      	mov	r8, r2
 800143a:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 800143c:	f7ff ff9a 	bl	8001374 <decamutexon>

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001440:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80014c0 <readfromspi+0x90>
    stat = decamutexon() ;
 8001444:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001446:	4650      	mov	r0, sl
 8001448:	f003 f888 	bl	800455c <HAL_SPI_GetState>
 800144c:	2801      	cmp	r0, #1
 800144e:	d1fa      	bne.n	8001446 <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8001450:	481a      	ldr	r0, [pc, #104]	; (80014bc <readfromspi+0x8c>)
 8001452:	2200      	movs	r2, #0
 8001454:	2140      	movs	r1, #64	; 0x40
 8001456:	f001 fbd5 	bl	8002c04 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 800145a:	f1b9 0f00 	cmp.w	r9, #0
 800145e:	d00c      	beq.n	800147a <readfromspi+0x4a>
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8001460:	f8df a05c 	ldr.w	sl, [pc, #92]	; 80014c0 <readfromspi+0x90>
 8001464:	44a1      	add	r9, r4
 8001466:	2201      	movs	r2, #1
 8001468:	4621      	mov	r1, r4
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
 800146e:	4414      	add	r4, r2
 8001470:	4650      	mov	r0, sl
 8001472:	f002 fe2c 	bl	80040ce <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 8001476:	454c      	cmp	r4, r9
 8001478:	d1f5      	bne.n	8001466 <readfromspi+0x36>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 800147a:	f1b8 0f00 	cmp.w	r8, #0
 800147e:	d012      	beq.n	80014a6 <readfromspi+0x76>
 8001480:	f8df c03c 	ldr.w	ip, [pc, #60]	; 80014c0 <readfromspi+0x90>
 8001484:	eb05 0008 	add.w	r0, r5, r8
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8001488:	2400      	movs	r4, #0
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 800148a:	f8dc 2000 	ldr.w	r2, [ip]
 800148e:	6891      	ldr	r1, [r2, #8]
 8001490:	0789      	lsls	r1, r1, #30
 8001492:	d5fc      	bpl.n	800148e <readfromspi+0x5e>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8001494:	60d4      	str	r4, [r2, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 8001496:	6891      	ldr	r1, [r2, #8]
 8001498:	07cb      	lsls	r3, r1, #31
 800149a:	d5fc      	bpl.n	8001496 <readfromspi+0x66>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 800149c:	68d3      	ldr	r3, [r2, #12]
 800149e:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 80014a2:	4285      	cmp	r5, r0
 80014a4:	d1f1      	bne.n	800148a <readfromspi+0x5a>
    }

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80014a6:	2201      	movs	r2, #1
 80014a8:	2140      	movs	r1, #64	; 0x40
 80014aa:	4804      	ldr	r0, [pc, #16]	; (80014bc <readfromspi+0x8c>)
 80014ac:	f001 fbaa 	bl	8002c04 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80014b0:	4630      	mov	r0, r6
 80014b2:	f7ff ff70 	bl	8001396 <decamutexoff>

    return 0;
} // end readfromspi()
 80014b6:	2000      	movs	r0, #0
 80014b8:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 80014bc:	40020400 	.word	0x40020400
 80014c0:	200005dc 	.word	0x200005dc

080014c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	db0b      	blt.n	80014ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	f003 021f 	and.w	r2, r3, #31
 80014dc:	4907      	ldr	r1, [pc, #28]	; (80014fc <__NVIC_EnableIRQ+0x38>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	095b      	lsrs	r3, r3, #5
 80014e4:	2001      	movs	r0, #1
 80014e6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000e100 	.word	0xe000e100

08001500 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	2b00      	cmp	r3, #0
 8001510:	db12      	blt.n	8001538 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	f003 021f 	and.w	r2, r3, #31
 8001518:	490a      	ldr	r1, [pc, #40]	; (8001544 <__NVIC_DisableIRQ+0x44>)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	095b      	lsrs	r3, r3, #5
 8001520:	2001      	movs	r0, #1
 8001522:	fa00 f202 	lsl.w	r2, r0, r2
 8001526:	3320      	adds	r3, #32
 8001528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800152c:	f3bf 8f4f 	dsb	sy
}
 8001530:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001532:	f3bf 8f6f 	isb	sy
}
 8001536:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000e100 	.word	0xe000e100

08001548 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f001 f849 	bl	80025e8 <HAL_Delay>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 8001568:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <EXTI_GetITEnStatus+0x38>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	095b      	lsrs	r3, r3, #5
 800156e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f003 031f 	and.w	r3, r3, #31
 8001578:	fa22 f303 	lsr.w	r3, r2, r3
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	2b00      	cmp	r3, #0
 8001582:	bf14      	ite	ne
 8001584:	2301      	movne	r3, #1
 8001586:	2300      	moveq	r3, #0
 8001588:	b2db      	uxtb	r3, r3
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000e100 	.word	0xe000e100

0800159c <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RST_Pin;
 80015a2:	2301      	movs	r3, #1
 80015a4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80015a6:	2311      	movs	r3, #17
 80015a8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	4619      	mov	r1, r3
 80015b2:	480a      	ldr	r0, [pc, #40]	; (80015dc <reset_DW1000+0x40>)
 80015b4:	f001 f9a2 	bl	80028fc <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2101      	movs	r1, #1
 80015bc:	4807      	ldr	r0, [pc, #28]	; (80015dc <reset_DW1000+0x40>)
 80015be:	f001 fb21 	bl	8002c04 <HAL_GPIO_WritePin>

    Sleep(1);
 80015c2:	2001      	movs	r0, #1
 80015c4:	f7ff ffc0 	bl	8001548 <Sleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 80015c8:	2000      	movs	r0, #0
 80015ca:	f000 f809 	bl	80015e0 <setup_DW1000RSTnIRQ>



    Sleep(2);
 80015ce:	2002      	movs	r0, #2
 80015d0:	f7ff ffba 	bl	8001548 <Sleep>
}
 80015d4:	bf00      	nop
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40020000 	.word	0x40020000

080015e0 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d015      	beq.n	800161a <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RST_Pin;
 80015ee:	2301      	movs	r3, #1
 80015f0:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015f6:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	4619      	mov	r1, r3
 8001602:	4813      	ldr	r0, [pc, #76]	; (8001650 <setup_DW1000RSTnIRQ+0x70>)
 8001604:	f001 f97a 	bl	80028fc <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 8001608:	2006      	movs	r0, #6
 800160a:	f001 f92c 	bl	8002866 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2105      	movs	r1, #5
 8001612:	2006      	movs	r0, #6
 8001614:	f001 f90b 	bl	800282e <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
    }
}
 8001618:	e015      	b.n	8001646 <setup_DW1000RSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 800161a:	2006      	movs	r0, #6
 800161c:	f001 f931 	bl	8002882 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8001620:	2301      	movs	r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001624:	2311      	movs	r3, #17
 8001626:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800162c:	2302      	movs	r3, #2
 800162e:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001630:	f107 030c 	add.w	r3, r7, #12
 8001634:	4619      	mov	r1, r3
 8001636:	4806      	ldr	r0, [pc, #24]	; (8001650 <setup_DW1000RSTnIRQ+0x70>)
 8001638:	f001 f960 	bl	80028fc <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
 800163c:	2201      	movs	r2, #1
 800163e:	2101      	movs	r1, #1
 8001640:	4803      	ldr	r0, [pc, #12]	; (8001650 <setup_DW1000RSTnIRQ+0x70>)
 8001642:	f001 fadf 	bl	8002c04 <HAL_GPIO_WritePin>
}
 8001646:	bf00      	nop
 8001648:	3720      	adds	r7, #32
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40020000 	.word	0x40020000

08001654 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <port_set_dw1000_slowrate+0x14>)
 800165a:	2220      	movs	r2, #32
 800165c:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800165e:	4802      	ldr	r0, [pc, #8]	; (8001668 <port_set_dw1000_slowrate+0x14>)
 8001660:	f002 fcac 	bl	8003fbc <HAL_SPI_Init>
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}
 8001668:	200005dc 	.word	0x200005dc

0800166c <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001670:	4b03      	ldr	r3, [pc, #12]	; (8001680 <port_set_dw1000_fastrate+0x14>)
 8001672:	2208      	movs	r2, #8
 8001674:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8001676:	4802      	ldr	r0, [pc, #8]	; (8001680 <port_set_dw1000_fastrate+0x14>)
 8001678:	f002 fca0 	bl	8003fbc <HAL_SPI_Init>
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	200005dc 	.word	0x200005dc

08001684 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8001688:	2017      	movs	r0, #23
 800168a:	f7ff ff39 	bl	8001500 <__NVIC_DisableIRQ>
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}

08001692 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 8001696:	2017      	movs	r0, #23
 8001698:	f7ff ff14 	bl	80014c4 <__NVIC_EnableIRQ>
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}

080016a0 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 80016a4:	2017      	movs	r0, #23
 80016a6:	f7ff ff5b 	bl	8001560 <EXTI_GetITEnStatus>
 80016aa:	4603      	mov	r3, r0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <SSD1306_InvertDisplay>:
}



void SSD1306_InvertDisplay (int i)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d005      	beq.n	80016ca <SSD1306_InvertDisplay+0x1a>
 80016be:	22a7      	movs	r2, #167	; 0xa7
 80016c0:	2100      	movs	r1, #0
 80016c2:	2078      	movs	r0, #120	; 0x78
 80016c4:	f000 fa8e 	bl	8001be4 <ssd1306_I2C_Write>

  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}
 80016c8:	e004      	b.n	80016d4 <SSD1306_InvertDisplay+0x24>
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
 80016ca:	22a6      	movs	r2, #166	; 0xa6
 80016cc:	2100      	movs	r1, #0
 80016ce:	2078      	movs	r0, #120	; 0x78
 80016d0:	f000 fa88 	bl	8001be4 <ssd1306_I2C_Write>
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80016e2:	f000 fa21 	bl	8001b28 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80016e6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80016ea:	2201      	movs	r2, #1
 80016ec:	2178      	movs	r1, #120	; 0x78
 80016ee:	485b      	ldr	r0, [pc, #364]	; (800185c <SSD1306_Init+0x180>)
 80016f0:	f001 fce4 	bl	80030bc <HAL_I2C_IsDeviceReady>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e0a9      	b.n	8001852 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80016fe:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001702:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001704:	e002      	b.n	800170c <SSD1306_Init+0x30>
		p--;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3b01      	subs	r3, #1
 800170a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f9      	bne.n	8001706 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001712:	22ae      	movs	r2, #174	; 0xae
 8001714:	2100      	movs	r1, #0
 8001716:	2078      	movs	r0, #120	; 0x78
 8001718:	f000 fa64 	bl	8001be4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800171c:	2220      	movs	r2, #32
 800171e:	2100      	movs	r1, #0
 8001720:	2078      	movs	r0, #120	; 0x78
 8001722:	f000 fa5f 	bl	8001be4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001726:	2210      	movs	r2, #16
 8001728:	2100      	movs	r1, #0
 800172a:	2078      	movs	r0, #120	; 0x78
 800172c:	f000 fa5a 	bl	8001be4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001730:	22b0      	movs	r2, #176	; 0xb0
 8001732:	2100      	movs	r1, #0
 8001734:	2078      	movs	r0, #120	; 0x78
 8001736:	f000 fa55 	bl	8001be4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800173a:	22c8      	movs	r2, #200	; 0xc8
 800173c:	2100      	movs	r1, #0
 800173e:	2078      	movs	r0, #120	; 0x78
 8001740:	f000 fa50 	bl	8001be4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001744:	2200      	movs	r2, #0
 8001746:	2100      	movs	r1, #0
 8001748:	2078      	movs	r0, #120	; 0x78
 800174a:	f000 fa4b 	bl	8001be4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800174e:	2210      	movs	r2, #16
 8001750:	2100      	movs	r1, #0
 8001752:	2078      	movs	r0, #120	; 0x78
 8001754:	f000 fa46 	bl	8001be4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001758:	2240      	movs	r2, #64	; 0x40
 800175a:	2100      	movs	r1, #0
 800175c:	2078      	movs	r0, #120	; 0x78
 800175e:	f000 fa41 	bl	8001be4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001762:	2281      	movs	r2, #129	; 0x81
 8001764:	2100      	movs	r1, #0
 8001766:	2078      	movs	r0, #120	; 0x78
 8001768:	f000 fa3c 	bl	8001be4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800176c:	22ff      	movs	r2, #255	; 0xff
 800176e:	2100      	movs	r1, #0
 8001770:	2078      	movs	r0, #120	; 0x78
 8001772:	f000 fa37 	bl	8001be4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001776:	22a1      	movs	r2, #161	; 0xa1
 8001778:	2100      	movs	r1, #0
 800177a:	2078      	movs	r0, #120	; 0x78
 800177c:	f000 fa32 	bl	8001be4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001780:	22a6      	movs	r2, #166	; 0xa6
 8001782:	2100      	movs	r1, #0
 8001784:	2078      	movs	r0, #120	; 0x78
 8001786:	f000 fa2d 	bl	8001be4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800178a:	22a8      	movs	r2, #168	; 0xa8
 800178c:	2100      	movs	r1, #0
 800178e:	2078      	movs	r0, #120	; 0x78
 8001790:	f000 fa28 	bl	8001be4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001794:	223f      	movs	r2, #63	; 0x3f
 8001796:	2100      	movs	r1, #0
 8001798:	2078      	movs	r0, #120	; 0x78
 800179a:	f000 fa23 	bl	8001be4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800179e:	22a4      	movs	r2, #164	; 0xa4
 80017a0:	2100      	movs	r1, #0
 80017a2:	2078      	movs	r0, #120	; 0x78
 80017a4:	f000 fa1e 	bl	8001be4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80017a8:	22d3      	movs	r2, #211	; 0xd3
 80017aa:	2100      	movs	r1, #0
 80017ac:	2078      	movs	r0, #120	; 0x78
 80017ae:	f000 fa19 	bl	8001be4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	2078      	movs	r0, #120	; 0x78
 80017b8:	f000 fa14 	bl	8001be4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80017bc:	22d5      	movs	r2, #213	; 0xd5
 80017be:	2100      	movs	r1, #0
 80017c0:	2078      	movs	r0, #120	; 0x78
 80017c2:	f000 fa0f 	bl	8001be4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80017c6:	22f0      	movs	r2, #240	; 0xf0
 80017c8:	2100      	movs	r1, #0
 80017ca:	2078      	movs	r0, #120	; 0x78
 80017cc:	f000 fa0a 	bl	8001be4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80017d0:	22d9      	movs	r2, #217	; 0xd9
 80017d2:	2100      	movs	r1, #0
 80017d4:	2078      	movs	r0, #120	; 0x78
 80017d6:	f000 fa05 	bl	8001be4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80017da:	2222      	movs	r2, #34	; 0x22
 80017dc:	2100      	movs	r1, #0
 80017de:	2078      	movs	r0, #120	; 0x78
 80017e0:	f000 fa00 	bl	8001be4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80017e4:	22da      	movs	r2, #218	; 0xda
 80017e6:	2100      	movs	r1, #0
 80017e8:	2078      	movs	r0, #120	; 0x78
 80017ea:	f000 f9fb 	bl	8001be4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80017ee:	2212      	movs	r2, #18
 80017f0:	2100      	movs	r1, #0
 80017f2:	2078      	movs	r0, #120	; 0x78
 80017f4:	f000 f9f6 	bl	8001be4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80017f8:	22db      	movs	r2, #219	; 0xdb
 80017fa:	2100      	movs	r1, #0
 80017fc:	2078      	movs	r0, #120	; 0x78
 80017fe:	f000 f9f1 	bl	8001be4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001802:	2220      	movs	r2, #32
 8001804:	2100      	movs	r1, #0
 8001806:	2078      	movs	r0, #120	; 0x78
 8001808:	f000 f9ec 	bl	8001be4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800180c:	228d      	movs	r2, #141	; 0x8d
 800180e:	2100      	movs	r1, #0
 8001810:	2078      	movs	r0, #120	; 0x78
 8001812:	f000 f9e7 	bl	8001be4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001816:	2214      	movs	r2, #20
 8001818:	2100      	movs	r1, #0
 800181a:	2078      	movs	r0, #120	; 0x78
 800181c:	f000 f9e2 	bl	8001be4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001820:	22af      	movs	r2, #175	; 0xaf
 8001822:	2100      	movs	r1, #0
 8001824:	2078      	movs	r0, #120	; 0x78
 8001826:	f000 f9dd 	bl	8001be4 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800182a:	222e      	movs	r2, #46	; 0x2e
 800182c:	2100      	movs	r1, #0
 800182e:	2078      	movs	r0, #120	; 0x78
 8001830:	f000 f9d8 	bl	8001be4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001834:	2000      	movs	r0, #0
 8001836:	f000 f843 	bl	80018c0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800183a:	f000 f813 	bl	8001864 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800183e:	4b08      	ldr	r3, [pc, #32]	; (8001860 <SSD1306_Init+0x184>)
 8001840:	2200      	movs	r2, #0
 8001842:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <SSD1306_Init+0x184>)
 8001846:	2200      	movs	r2, #0
 8001848:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800184a:	4b05      	ldr	r3, [pc, #20]	; (8001860 <SSD1306_Init+0x184>)
 800184c:	2201      	movs	r2, #1
 800184e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001850:	2301      	movs	r3, #1
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000588 	.word	0x20000588
 8001860:	200004ec 	.word	0x200004ec

08001864 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800186a:	2300      	movs	r3, #0
 800186c:	71fb      	strb	r3, [r7, #7]
 800186e:	e01d      	b.n	80018ac <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	3b50      	subs	r3, #80	; 0x50
 8001874:	b2db      	uxtb	r3, r3
 8001876:	461a      	mov	r2, r3
 8001878:	2100      	movs	r1, #0
 800187a:	2078      	movs	r0, #120	; 0x78
 800187c:	f000 f9b2 	bl	8001be4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001880:	2200      	movs	r2, #0
 8001882:	2100      	movs	r1, #0
 8001884:	2078      	movs	r0, #120	; 0x78
 8001886:	f000 f9ad 	bl	8001be4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800188a:	2210      	movs	r2, #16
 800188c:	2100      	movs	r1, #0
 800188e:	2078      	movs	r0, #120	; 0x78
 8001890:	f000 f9a8 	bl	8001be4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	01db      	lsls	r3, r3, #7
 8001898:	4a08      	ldr	r2, [pc, #32]	; (80018bc <SSD1306_UpdateScreen+0x58>)
 800189a:	441a      	add	r2, r3
 800189c:	2380      	movs	r3, #128	; 0x80
 800189e:	2140      	movs	r1, #64	; 0x40
 80018a0:	2078      	movs	r0, #120	; 0x78
 80018a2:	f000 f957 	bl	8001b54 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	3301      	adds	r3, #1
 80018aa:	71fb      	strb	r3, [r7, #7]
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	2b07      	cmp	r3, #7
 80018b0:	d9de      	bls.n	8001870 <SSD1306_UpdateScreen+0xc>
	}
}
 80018b2:	bf00      	nop
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200000ec 	.word	0x200000ec

080018c0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <SSD1306_Fill+0x14>
 80018d0:	2300      	movs	r3, #0
 80018d2:	e000      	b.n	80018d6 <SSD1306_Fill+0x16>
 80018d4:	23ff      	movs	r3, #255	; 0xff
 80018d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018da:	4619      	mov	r1, r3
 80018dc:	4803      	ldr	r0, [pc, #12]	; (80018ec <SSD1306_Fill+0x2c>)
 80018de:	f003 fa99 	bl	8004e14 <memset>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200000ec 	.word	0x200000ec

080018f0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	80fb      	strh	r3, [r7, #6]
 80018fa:	460b      	mov	r3, r1
 80018fc:	80bb      	strh	r3, [r7, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	70fb      	strb	r3, [r7, #3]
	if (
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	2b7f      	cmp	r3, #127	; 0x7f
 8001906:	d848      	bhi.n	800199a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001908:	88bb      	ldrh	r3, [r7, #4]
 800190a:	2b3f      	cmp	r3, #63	; 0x3f
 800190c:	d845      	bhi.n	800199a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800190e:	4b26      	ldr	r3, [pc, #152]	; (80019a8 <SSD1306_DrawPixel+0xb8>)
 8001910:	791b      	ldrb	r3, [r3, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d006      	beq.n	8001924 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001916:	78fb      	ldrb	r3, [r7, #3]
 8001918:	2b00      	cmp	r3, #0
 800191a:	bf0c      	ite	eq
 800191c:	2301      	moveq	r3, #1
 800191e:	2300      	movne	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d11a      	bne.n	8001960 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800192a:	88fa      	ldrh	r2, [r7, #6]
 800192c:	88bb      	ldrh	r3, [r7, #4]
 800192e:	08db      	lsrs	r3, r3, #3
 8001930:	b298      	uxth	r0, r3
 8001932:	4603      	mov	r3, r0
 8001934:	01db      	lsls	r3, r3, #7
 8001936:	4413      	add	r3, r2
 8001938:	4a1c      	ldr	r2, [pc, #112]	; (80019ac <SSD1306_DrawPixel+0xbc>)
 800193a:	5cd3      	ldrb	r3, [r2, r3]
 800193c:	b25a      	sxtb	r2, r3
 800193e:	88bb      	ldrh	r3, [r7, #4]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	2101      	movs	r1, #1
 8001946:	fa01 f303 	lsl.w	r3, r1, r3
 800194a:	b25b      	sxtb	r3, r3
 800194c:	4313      	orrs	r3, r2
 800194e:	b259      	sxtb	r1, r3
 8001950:	88fa      	ldrh	r2, [r7, #6]
 8001952:	4603      	mov	r3, r0
 8001954:	01db      	lsls	r3, r3, #7
 8001956:	4413      	add	r3, r2
 8001958:	b2c9      	uxtb	r1, r1
 800195a:	4a14      	ldr	r2, [pc, #80]	; (80019ac <SSD1306_DrawPixel+0xbc>)
 800195c:	54d1      	strb	r1, [r2, r3]
 800195e:	e01d      	b.n	800199c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001960:	88fa      	ldrh	r2, [r7, #6]
 8001962:	88bb      	ldrh	r3, [r7, #4]
 8001964:	08db      	lsrs	r3, r3, #3
 8001966:	b298      	uxth	r0, r3
 8001968:	4603      	mov	r3, r0
 800196a:	01db      	lsls	r3, r3, #7
 800196c:	4413      	add	r3, r2
 800196e:	4a0f      	ldr	r2, [pc, #60]	; (80019ac <SSD1306_DrawPixel+0xbc>)
 8001970:	5cd3      	ldrb	r3, [r2, r3]
 8001972:	b25a      	sxtb	r2, r3
 8001974:	88bb      	ldrh	r3, [r7, #4]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	2101      	movs	r1, #1
 800197c:	fa01 f303 	lsl.w	r3, r1, r3
 8001980:	b25b      	sxtb	r3, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	b25b      	sxtb	r3, r3
 8001986:	4013      	ands	r3, r2
 8001988:	b259      	sxtb	r1, r3
 800198a:	88fa      	ldrh	r2, [r7, #6]
 800198c:	4603      	mov	r3, r0
 800198e:	01db      	lsls	r3, r3, #7
 8001990:	4413      	add	r3, r2
 8001992:	b2c9      	uxtb	r1, r1
 8001994:	4a05      	ldr	r2, [pc, #20]	; (80019ac <SSD1306_DrawPixel+0xbc>)
 8001996:	54d1      	strb	r1, [r2, r3]
 8001998:	e000      	b.n	800199c <SSD1306_DrawPixel+0xac>
		return;
 800199a:	bf00      	nop
	}
}
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	200004ec 	.word	0x200004ec
 80019ac:	200000ec 	.word	0x200000ec

080019b0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	460a      	mov	r2, r1
 80019ba:	80fb      	strh	r3, [r7, #6]
 80019bc:	4613      	mov	r3, r2
 80019be:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80019c0:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <SSD1306_GotoXY+0x28>)
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80019c6:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <SSD1306_GotoXY+0x28>)
 80019c8:	88bb      	ldrh	r3, [r7, #4]
 80019ca:	8053      	strh	r3, [r2, #2]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	200004ec 	.word	0x200004ec

080019dc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	6039      	str	r1, [r7, #0]
 80019e6:	71fb      	strb	r3, [r7, #7]
 80019e8:	4613      	mov	r3, r2
 80019ea:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80019ec:	4b3a      	ldr	r3, [pc, #232]	; (8001ad8 <SSD1306_Putc+0xfc>)
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	4413      	add	r3, r2
	if (
 80019f8:	2b7f      	cmp	r3, #127	; 0x7f
 80019fa:	dc07      	bgt.n	8001a0c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80019fc:	4b36      	ldr	r3, [pc, #216]	; (8001ad8 <SSD1306_Putc+0xfc>)
 80019fe:	885b      	ldrh	r3, [r3, #2]
 8001a00:	461a      	mov	r2, r3
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	785b      	ldrb	r3, [r3, #1]
 8001a06:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a08:	2b3f      	cmp	r3, #63	; 0x3f
 8001a0a:	dd01      	ble.n	8001a10 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	e05e      	b.n	8001ace <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	e04b      	b.n	8001aae <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	3b20      	subs	r3, #32
 8001a1e:	6839      	ldr	r1, [r7, #0]
 8001a20:	7849      	ldrb	r1, [r1, #1]
 8001a22:	fb01 f303 	mul.w	r3, r1, r3
 8001a26:	4619      	mov	r1, r3
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	440b      	add	r3, r1
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4413      	add	r3, r2
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001a34:	2300      	movs	r3, #0
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	e030      	b.n	8001a9c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d010      	beq.n	8001a6c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001a4a:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <SSD1306_Putc+0xfc>)
 8001a4c:	881a      	ldrh	r2, [r3, #0]
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	4413      	add	r3, r2
 8001a54:	b298      	uxth	r0, r3
 8001a56:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <SSD1306_Putc+0xfc>)
 8001a58:	885a      	ldrh	r2, [r3, #2]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	4413      	add	r3, r2
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	79ba      	ldrb	r2, [r7, #6]
 8001a64:	4619      	mov	r1, r3
 8001a66:	f7ff ff43 	bl	80018f0 <SSD1306_DrawPixel>
 8001a6a:	e014      	b.n	8001a96 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <SSD1306_Putc+0xfc>)
 8001a6e:	881a      	ldrh	r2, [r3, #0]
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	b298      	uxth	r0, r3
 8001a78:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <SSD1306_Putc+0xfc>)
 8001a7a:	885a      	ldrh	r2, [r3, #2]
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	4413      	add	r3, r2
 8001a82:	b299      	uxth	r1, r3
 8001a84:	79bb      	ldrb	r3, [r7, #6]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	bf0c      	ite	eq
 8001a8a:	2301      	moveq	r3, #1
 8001a8c:	2300      	movne	r3, #0
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	461a      	mov	r2, r3
 8001a92:	f7ff ff2d 	bl	80018f0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d3c8      	bcc.n	8001a3a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	785b      	ldrb	r3, [r3, #1]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d3ad      	bcc.n	8001a16 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001aba:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <SSD1306_Putc+0xfc>)
 8001abc:	881a      	ldrh	r2, [r3, #0]
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <SSD1306_Putc+0xfc>)
 8001aca:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001acc:	79fb      	ldrb	r3, [r7, #7]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	200004ec 	.word	0x200004ec

08001adc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001aea:	e012      	b.n	8001b12 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	79fa      	ldrb	r2, [r7, #7]
 8001af2:	68b9      	ldr	r1, [r7, #8]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff71 	bl	80019dc <SSD1306_Putc>
 8001afa:	4603      	mov	r3, r0
 8001afc:	461a      	mov	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d002      	beq.n	8001b0c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	e008      	b.n	8001b1e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1e8      	bne.n	8001aec <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	781b      	ldrb	r3, [r3, #0]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001b2e:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <ssd1306_I2C_Init+0x28>)
 8001b30:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b32:	e002      	b.n	8001b3a <ssd1306_I2C_Init+0x12>
		p--;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f9      	bne.n	8001b34 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001b40:	bf00      	nop
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	0003d090 	.word	0x0003d090

08001b54 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001b54:	b590      	push	{r4, r7, lr}
 8001b56:	b0c7      	sub	sp, #284	; 0x11c
 8001b58:	af02      	add	r7, sp, #8
 8001b5a:	4604      	mov	r4, r0
 8001b5c:	4608      	mov	r0, r1
 8001b5e:	4639      	mov	r1, r7
 8001b60:	600a      	str	r2, [r1, #0]
 8001b62:	4619      	mov	r1, r3
 8001b64:	1dfb      	adds	r3, r7, #7
 8001b66:	4622      	mov	r2, r4
 8001b68:	701a      	strb	r2, [r3, #0]
 8001b6a:	1dbb      	adds	r3, r7, #6
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	701a      	strb	r2, [r3, #0]
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	460a      	mov	r2, r1
 8001b74:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001b76:	f107 030c 	add.w	r3, r7, #12
 8001b7a:	1dba      	adds	r2, r7, #6
 8001b7c:	7812      	ldrb	r2, [r2, #0]
 8001b7e:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001b80:	2300      	movs	r3, #0
 8001b82:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001b86:	e010      	b.n	8001baa <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001b88:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b8c:	463a      	mov	r2, r7
 8001b8e:	6812      	ldr	r2, [r2, #0]
 8001b90:	441a      	add	r2, r3
 8001b92:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b96:	3301      	adds	r3, #1
 8001b98:	7811      	ldrb	r1, [r2, #0]
 8001b9a:	f107 020c 	add.w	r2, r7, #12
 8001b9e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001ba0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001baa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	1d3a      	adds	r2, r7, #4
 8001bb2:	8812      	ldrh	r2, [r2, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d8e7      	bhi.n	8001b88 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001bb8:	1dfb      	adds	r3, r7, #7
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	b299      	uxth	r1, r3
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	f107 020c 	add.w	r2, r7, #12
 8001bca:	200a      	movs	r0, #10
 8001bcc:	9000      	str	r0, [sp, #0]
 8001bce:	4804      	ldr	r0, [pc, #16]	; (8001be0 <ssd1306_I2C_WriteMulti+0x8c>)
 8001bd0:	f001 f976 	bl	8002ec0 <HAL_I2C_Master_Transmit>
}
 8001bd4:	bf00      	nop
 8001bd6:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd90      	pop	{r4, r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000588 	.word	0x20000588

08001be4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af02      	add	r7, sp, #8
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	71bb      	strb	r3, [r7, #6]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001bf6:	79bb      	ldrb	r3, [r7, #6]
 8001bf8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001bfa:	797b      	ldrb	r3, [r7, #5]
 8001bfc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	b299      	uxth	r1, r3
 8001c02:	f107 020c 	add.w	r2, r7, #12
 8001c06:	230a      	movs	r3, #10
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	4803      	ldr	r0, [pc, #12]	; (8001c1c <ssd1306_I2C_Write+0x38>)
 8001c0e:	f001 f957 	bl	8002ec0 <HAL_I2C_Master_Transmit>
}
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000588 	.word	0x20000588

08001c20 <ssd1306_write>:

void ssd1306_write(uint32_t buff, FontDef_t Font)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	1d3b      	adds	r3, r7, #4
 8001c2a:	e883 0006 	stmia.w	r3, {r1, r2}
//	SSD1306_Clear ();
//	SSD1306_Fill(SSD1306_COLOR_BLACK);
	SSD1306_Puts(buff, &Font, 1);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	1d39      	adds	r1, r7, #4
 8001c32:	2201      	movs	r2, #1
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff51 	bl	8001adc <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001c3a:	f7ff fe13 	bl	8001864 <SSD1306_UpdateScreen>
}
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
 8001c5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	4b30      	ldr	r3, [pc, #192]	; (8001d24 <MX_GPIO_Init+0xdc>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a2f      	ldr	r2, [pc, #188]	; (8001d24 <MX_GPIO_Init+0xdc>)
 8001c68:	f043 0304 	orr.w	r3, r3, #4
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <MX_GPIO_Init+0xdc>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b29      	ldr	r3, [pc, #164]	; (8001d24 <MX_GPIO_Init+0xdc>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a28      	ldr	r2, [pc, #160]	; (8001d24 <MX_GPIO_Init+0xdc>)
 8001c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b26      	ldr	r3, [pc, #152]	; (8001d24 <MX_GPIO_Init+0xdc>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	4b22      	ldr	r3, [pc, #136]	; (8001d24 <MX_GPIO_Init+0xdc>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4a21      	ldr	r2, [pc, #132]	; (8001d24 <MX_GPIO_Init+0xdc>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca6:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <MX_GPIO_Init+0xdc>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <MX_GPIO_Init+0xdc>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a1a      	ldr	r2, [pc, #104]	; (8001d24 <MX_GPIO_Init+0xdc>)
 8001cbc:	f043 0302 	orr.w	r3, r3, #2
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <MX_GPIO_Init+0xdc>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DW_RST_Pin|DW_IRQ_Pin, GPIO_PIN_RESET);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2103      	movs	r1, #3
 8001cd2:	4815      	ldr	r0, [pc, #84]	; (8001d28 <MX_GPIO_Init+0xe0>)
 8001cd4:	f000 ff96 	bl	8002c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2140      	movs	r1, #64	; 0x40
 8001cdc:	4813      	ldr	r0, [pc, #76]	; (8001d2c <MX_GPIO_Init+0xe4>)
 8001cde:	f000 ff91 	bl	8002c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DW_RST_Pin|DW_IRQ_Pin;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf2:	f107 0314 	add.w	r3, r7, #20
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	480b      	ldr	r0, [pc, #44]	; (8001d28 <MX_GPIO_Init+0xe0>)
 8001cfa:	f000 fdff 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_CS_Pin;
 8001cfe:	2340      	movs	r3, #64	; 0x40
 8001d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d02:	2301      	movs	r3, #1
 8001d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);
 8001d0e:	f107 0314 	add.w	r3, r7, #20
 8001d12:	4619      	mov	r1, r3
 8001d14:	4805      	ldr	r0, [pc, #20]	; (8001d2c <MX_GPIO_Init+0xe4>)
 8001d16:	f000 fdf1 	bl	80028fc <HAL_GPIO_Init>

}
 8001d1a:	bf00      	nop
 8001d1c:	3728      	adds	r7, #40	; 0x28
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40020000 	.word	0x40020000
 8001d2c:	40020400 	.word	0x40020400

08001d30 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d34:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d36:	4a13      	ldr	r2, [pc, #76]	; (8001d84 <MX_I2C1_Init+0x54>)
 8001d38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001d3a:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d3c:	4a12      	ldr	r2, [pc, #72]	; (8001d88 <MX_I2C1_Init+0x58>)
 8001d3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d40:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d54:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d60:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d6c:	4804      	ldr	r0, [pc, #16]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d6e:	f000 ff63 	bl	8002c38 <HAL_I2C_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d78:	f000 f8ce 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000588 	.word	0x20000588
 8001d84:	40005400 	.word	0x40005400
 8001d88:	00061a80 	.word	0x00061a80

08001d8c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	; 0x28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a19      	ldr	r2, [pc, #100]	; (8001e10 <HAL_I2C_MspInit+0x84>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d12c      	bne.n	8001e08 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <HAL_I2C_MspInit+0x88>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a17      	ldr	r2, [pc, #92]	; (8001e14 <HAL_I2C_MspInit+0x88>)
 8001db8:	f043 0302 	orr.w	r3, r3, #2
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <HAL_I2C_MspInit+0x88>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dd0:	2312      	movs	r3, #18
 8001dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ddc:	2304      	movs	r3, #4
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	4619      	mov	r1, r3
 8001de6:	480c      	ldr	r0, [pc, #48]	; (8001e18 <HAL_I2C_MspInit+0x8c>)
 8001de8:	f000 fd88 	bl	80028fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <HAL_I2C_MspInit+0x88>)
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	4a07      	ldr	r2, [pc, #28]	; (8001e14 <HAL_I2C_MspInit+0x88>)
 8001df6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_I2C_MspInit+0x88>)
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e08:	bf00      	nop
 8001e0a:	3728      	adds	r7, #40	; 0x28
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40005400 	.word	0x40005400
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40020400 	.word	0x40020400

08001e1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e20:	f000 fb70 	bl	8002504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e24:	f000 f810 	bl	8001e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e28:	f7ff ff0e 	bl	8001c48 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001e2c:	f000 f914 	bl	8002058 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001e30:	f000 facc 	bl	80023cc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001e34:	f7ff ff7c 	bl	8001d30 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  setup_DW1000RSTnIRQ(0);
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f7ff fbd1 	bl	80015e0 <setup_DW1000RSTnIRQ>
  SSD1306_Init();
 8001e3e:	f7ff fc4d 	bl	80016dc <SSD1306_Init>
    dw_main();
 8001e42:	f000 f86f 	bl	8001f24 <dw_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e46:	e7fe      	b.n	8001e46 <main+0x2a>

08001e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b094      	sub	sp, #80	; 0x50
 8001e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e4e:	f107 0320 	add.w	r3, r7, #32
 8001e52:	2230      	movs	r2, #48	; 0x30
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f002 ffdc 	bl	8004e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	4b27      	ldr	r3, [pc, #156]	; (8001f10 <SystemClock_Config+0xc8>)
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	4a26      	ldr	r2, [pc, #152]	; (8001f10 <SystemClock_Config+0xc8>)
 8001e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7c:	4b24      	ldr	r3, [pc, #144]	; (8001f10 <SystemClock_Config+0xc8>)
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e88:	2300      	movs	r3, #0
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <SystemClock_Config+0xcc>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a20      	ldr	r2, [pc, #128]	; (8001f14 <SystemClock_Config+0xcc>)
 8001e92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	4b1e      	ldr	r3, [pc, #120]	; (8001f14 <SystemClock_Config+0xcc>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ea0:	607b      	str	r3, [r7, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eac:	2310      	movs	r3, #16
 8001eae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001eb8:	2308      	movs	r3, #8
 8001eba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001ebc:	2364      	movs	r3, #100	; 0x64
 8001ebe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ec4:	2304      	movs	r3, #4
 8001ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ec8:	f107 0320 	add.w	r3, r7, #32
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f001 fc2d 	bl	800372c <HAL_RCC_OscConfig>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ed8:	f000 f81e 	bl	8001f18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001edc:	230f      	movs	r3, #15
 8001ede:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ef2:	f107 030c 	add.w	r3, r7, #12
 8001ef6:	2103      	movs	r1, #3
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f001 fe8f 	bl	8003c1c <HAL_RCC_ClockConfig>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001f04:	f000 f808 	bl	8001f18 <Error_Handler>
  }
}
 8001f08:	bf00      	nop
 8001f0a:	3750      	adds	r7, #80	; 0x50
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40007000 	.word	0x40007000

08001f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001f1c:	b672      	cpsid	i
}
 8001f1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f20:	e7fe      	b.n	8001f20 <Error_Handler+0x8>
	...

08001f24 <dw_main>:

/**
 * Application entry point.
 */
int dw_main(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
    /* Display application name on LCD. */
    ssd1306_write(buff, Font_7x10);
 8001f2a:	4840      	ldr	r0, [pc, #256]	; (800202c <dw_main+0x108>)
 8001f2c:	4b40      	ldr	r3, [pc, #256]	; (8002030 <dw_main+0x10c>)
 8001f2e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f32:	f7ff fe75 	bl	8001c20 <ssd1306_write>

    /* Reset and initialise DW1000. See NOTE 2 below.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8001f36:	f7ff fb31 	bl	800159c <reset_DW1000>
    port_set_dw1000_slowrate();
 8001f3a:	f7ff fb8b 	bl	8001654 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADNONE) == DWT_ERROR)
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f7fe fb1a 	bl	8000578 <dwt_initialise>
 8001f44:	4603      	mov	r3, r0
 8001f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4a:	d110      	bne.n	8001f6e <dw_main+0x4a>
    {
        printf("INIT FAILED");
 8001f4c:	4839      	ldr	r0, [pc, #228]	; (8002034 <dw_main+0x110>)
 8001f4e:	f003 fa57 	bl	8005400 <iprintf>
        SSD1306_GotoXY(0, 10); SSD1306_InvertDisplay(1);
 8001f52:	210a      	movs	r1, #10
 8001f54:	2000      	movs	r0, #0
 8001f56:	f7ff fd2b 	bl	80019b0 <SSD1306_GotoXY>
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f7ff fba8 	bl	80016b0 <SSD1306_InvertDisplay>
        ssd1306_write("Init Failed!!!", Font_7x10);
 8001f60:	4835      	ldr	r0, [pc, #212]	; (8002038 <dw_main+0x114>)
 8001f62:	4b33      	ldr	r3, [pc, #204]	; (8002030 <dw_main+0x10c>)
 8001f64:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f68:	f7ff fe5a 	bl	8001c20 <ssd1306_write>
        while (1)
 8001f6c:	e7fe      	b.n	8001f6c <dw_main+0x48>
        { };
    }
    port_set_dw1000_fastrate();
 8001f6e:	f7ff fb7d 	bl	800166c <port_set_dw1000_fastrate>

    /* Configure DW1000. */
    dwt_configure(&config);
 8001f72:	4832      	ldr	r0, [pc, #200]	; (800203c <dw_main+0x118>)
 8001f74:	f7fe fc5a 	bl	800082c <dwt_configure>

        /* Clear local RX buffer to avoid having leftovers from previous receptions  This is not necessary but is included here to aid reading
         * the RX buffer.
         * This is a good place to put a breakpoint. Here (after first time through the loop) the local status register will be set for last event
         * and if a good receive has happened the data buffer will have the data in it, and frame_len will be set to the length of the RX frame. */
        for (i = 0 ; i < FRAME_LEN_MAX; i++ )
 8001f78:	2300      	movs	r3, #0
 8001f7a:	607b      	str	r3, [r7, #4]
 8001f7c:	e007      	b.n	8001f8e <dw_main+0x6a>
        {
            rx_buffer[i] = 0;
 8001f7e:	4a30      	ldr	r2, [pc, #192]	; (8002040 <dw_main+0x11c>)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4413      	add	r3, r2
 8001f84:	2200      	movs	r2, #0
 8001f86:	701a      	strb	r2, [r3, #0]
        for (i = 0 ; i < FRAME_LEN_MAX; i++ )
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	607b      	str	r3, [r7, #4]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b7e      	cmp	r3, #126	; 0x7e
 8001f92:	ddf4      	ble.n	8001f7e <dw_main+0x5a>
        }

        /* Activate reception immediately. See NOTE 3 below. */
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8001f94:	2000      	movs	r0, #0
 8001f96:	f7ff f96d 	bl	8001274 <dwt_rxenable>

        /* Poll until a frame is properly received or an error/timeout occurs. See NOTE 4 below.
         * STATUS register is 5 bytes long but, as the event we are looking at is in the first byte of the register, we can use this simplest API
         * function to access it. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR)))
 8001f9a:	bf00      	nop
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	200f      	movs	r0, #15
 8001fa0:	f7fe ff6a 	bl	8000e78 <dwt_read32bitoffsetreg>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	4a27      	ldr	r2, [pc, #156]	; (8002044 <dw_main+0x120>)
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	4b26      	ldr	r3, [pc, #152]	; (8002044 <dw_main+0x120>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	4b26      	ldr	r3, [pc, #152]	; (8002048 <dw_main+0x124>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0f2      	beq.n	8001f9c <dw_main+0x78>
        { };

        if (status_reg & SYS_STATUS_RXFCG)
 8001fb6:	4b23      	ldr	r3, [pc, #140]	; (8002044 <dw_main+0x120>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d02d      	beq.n	800201e <dw_main+0xfa>
        {
            /* A frame has been received, copy it to our local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	2010      	movs	r0, #16
 8001fc6:	f7fe ff57 	bl	8000e78 <dwt_read32bitoffsetreg>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	4b1d      	ldr	r3, [pc, #116]	; (800204c <dw_main+0x128>)
 8001fd6:	801a      	strh	r2, [r3, #0]
            if (frame_len <= FRAME_LEN_MAX)
 8001fd8:	4b1c      	ldr	r3, [pc, #112]	; (800204c <dw_main+0x128>)
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	2b7f      	cmp	r3, #127	; 0x7f
 8001fde:	d806      	bhi.n	8001fee <dw_main+0xca>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	; (800204c <dw_main+0x128>)
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4815      	ldr	r0, [pc, #84]	; (8002040 <dw_main+0x11c>)
 8001fea:	f7fe fe37 	bl	8000c5c <dwt_readrxdata>
            }
            SSD1306_GotoXY(0, 30);
 8001fee:	211e      	movs	r1, #30
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	f7ff fcdd 	bl	80019b0 <SSD1306_GotoXY>
            ssd1306_write(rx_buffer, Font_7x10);
 8001ff6:	4812      	ldr	r0, [pc, #72]	; (8002040 <dw_main+0x11c>)
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <dw_main+0x10c>)
 8001ffa:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001ffe:	f7ff fe0f 	bl	8001c20 <ssd1306_write>
            HAL_UART_Transmit(&huart2, rx_buffer, 10, HAL_MAX_DELAY);
 8002002:	f04f 33ff 	mov.w	r3, #4294967295
 8002006:	220a      	movs	r2, #10
 8002008:	490d      	ldr	r1, [pc, #52]	; (8002040 <dw_main+0x11c>)
 800200a:	4811      	ldr	r0, [pc, #68]	; (8002050 <dw_main+0x12c>)
 800200c:	f002 fbdf 	bl	80047ce <HAL_UART_Transmit>
            /* Clear good RX frame event in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 8002010:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002014:	2100      	movs	r1, #0
 8002016:	200f      	movs	r0, #15
 8002018:	f7fe ffb4 	bl	8000f84 <dwt_write32bitoffsetreg>
 800201c:	e7ac      	b.n	8001f78 <dw_main+0x54>

        }
        else
        {
            /* Clear RX error events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR);
 800201e:	4a0d      	ldr	r2, [pc, #52]	; (8002054 <dw_main+0x130>)
 8002020:	2100      	movs	r1, #0
 8002022:	200f      	movs	r0, #15
 8002024:	f7fe ffae 	bl	8000f84 <dwt_write32bitoffsetreg>
    {
 8002028:	e7a6      	b.n	8001f78 <dw_main+0x54>
 800202a:	bf00      	nop
 800202c:	2000000c 	.word	0x2000000c
 8002030:	20000004 	.word	0x20000004
 8002034:	080062f0 	.word	0x080062f0
 8002038:	080062fc 	.word	0x080062fc
 800203c:	2000001c 	.word	0x2000001c
 8002040:	200004f4 	.word	0x200004f4
 8002044:	20000574 	.word	0x20000574
 8002048:	2405d000 	.word	0x2405d000
 800204c:	20000578 	.word	0x20000578
 8002050:	20000634 	.word	0x20000634
 8002054:	24059000 	.word	0x24059000

08002058 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800205c:	4b17      	ldr	r3, [pc, #92]	; (80020bc <MX_SPI1_Init+0x64>)
 800205e:	4a18      	ldr	r2, [pc, #96]	; (80020c0 <MX_SPI1_Init+0x68>)
 8002060:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002062:	4b16      	ldr	r3, [pc, #88]	; (80020bc <MX_SPI1_Init+0x64>)
 8002064:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002068:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800206a:	4b14      	ldr	r3, [pc, #80]	; (80020bc <MX_SPI1_Init+0x64>)
 800206c:	2200      	movs	r2, #0
 800206e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <MX_SPI1_Init+0x64>)
 8002072:	2200      	movs	r2, #0
 8002074:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002076:	4b11      	ldr	r3, [pc, #68]	; (80020bc <MX_SPI1_Init+0x64>)
 8002078:	2200      	movs	r2, #0
 800207a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800207c:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <MX_SPI1_Init+0x64>)
 800207e:	2200      	movs	r2, #0
 8002080:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002082:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <MX_SPI1_Init+0x64>)
 8002084:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002088:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800208a:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <MX_SPI1_Init+0x64>)
 800208c:	2200      	movs	r2, #0
 800208e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002090:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <MX_SPI1_Init+0x64>)
 8002092:	2200      	movs	r2, #0
 8002094:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002096:	4b09      	ldr	r3, [pc, #36]	; (80020bc <MX_SPI1_Init+0x64>)
 8002098:	2200      	movs	r2, #0
 800209a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800209c:	4b07      	ldr	r3, [pc, #28]	; (80020bc <MX_SPI1_Init+0x64>)
 800209e:	2200      	movs	r2, #0
 80020a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <MX_SPI1_Init+0x64>)
 80020a4:	220a      	movs	r2, #10
 80020a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020a8:	4804      	ldr	r0, [pc, #16]	; (80020bc <MX_SPI1_Init+0x64>)
 80020aa:	f001 ff87 	bl	8003fbc <HAL_SPI_Init>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80020b4:	f7ff ff30 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	200005dc 	.word	0x200005dc
 80020c0:	40013000 	.word	0x40013000

080020c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08a      	sub	sp, #40	; 0x28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020cc:	f107 0314 	add.w	r3, r7, #20
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a1d      	ldr	r2, [pc, #116]	; (8002158 <HAL_SPI_MspInit+0x94>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d133      	bne.n	800214e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	4b1c      	ldr	r3, [pc, #112]	; (800215c <HAL_SPI_MspInit+0x98>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	4a1b      	ldr	r2, [pc, #108]	; (800215c <HAL_SPI_MspInit+0x98>)
 80020f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020f4:	6453      	str	r3, [r2, #68]	; 0x44
 80020f6:	4b19      	ldr	r3, [pc, #100]	; (800215c <HAL_SPI_MspInit+0x98>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	4b15      	ldr	r3, [pc, #84]	; (800215c <HAL_SPI_MspInit+0x98>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	4a14      	ldr	r2, [pc, #80]	; (800215c <HAL_SPI_MspInit+0x98>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6313      	str	r3, [r2, #48]	; 0x30
 8002112:	4b12      	ldr	r3, [pc, #72]	; (800215c <HAL_SPI_MspInit+0x98>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800211e:	23e0      	movs	r3, #224	; 0xe0
 8002120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	2302      	movs	r3, #2
 8002124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212a:	2303      	movs	r3, #3
 800212c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800212e:	2305      	movs	r3, #5
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002132:	f107 0314 	add.w	r3, r7, #20
 8002136:	4619      	mov	r1, r3
 8002138:	4809      	ldr	r0, [pc, #36]	; (8002160 <HAL_SPI_MspInit+0x9c>)
 800213a:	f000 fbdf 	bl	80028fc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	2100      	movs	r1, #0
 8002142:	2023      	movs	r0, #35	; 0x23
 8002144:	f000 fb73 	bl	800282e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002148:	2023      	movs	r0, #35	; 0x23
 800214a:	f000 fb8c 	bl	8002866 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800214e:	bf00      	nop
 8002150:	3728      	adds	r7, #40	; 0x28
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40013000 	.word	0x40013000
 800215c:	40023800 	.word	0x40023800
 8002160:	40020000 	.word	0x40020000

08002164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	607b      	str	r3, [r7, #4]
 800216e:	4b10      	ldr	r3, [pc, #64]	; (80021b0 <HAL_MspInit+0x4c>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	4a0f      	ldr	r2, [pc, #60]	; (80021b0 <HAL_MspInit+0x4c>)
 8002174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002178:	6453      	str	r3, [r2, #68]	; 0x44
 800217a:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <HAL_MspInit+0x4c>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002182:	607b      	str	r3, [r7, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	603b      	str	r3, [r7, #0]
 800218a:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <HAL_MspInit+0x4c>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	4a08      	ldr	r2, [pc, #32]	; (80021b0 <HAL_MspInit+0x4c>)
 8002190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002194:	6413      	str	r3, [r2, #64]	; 0x40
 8002196:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <HAL_MspInit+0x4c>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219e:	603b      	str	r3, [r7, #0]
 80021a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40023800 	.word	0x40023800

080021b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021b8:	e7fe      	b.n	80021b8 <NMI_Handler+0x4>

080021ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021be:	e7fe      	b.n	80021be <HardFault_Handler+0x4>

080021c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c4:	e7fe      	b.n	80021c4 <MemManage_Handler+0x4>

080021c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ca:	e7fe      	b.n	80021ca <BusFault_Handler+0x4>

080021cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d0:	e7fe      	b.n	80021d0 <UsageFault_Handler+0x4>

080021d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002200:	f000 f9d2 	bl	80025a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}

08002208 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800220c:	4802      	ldr	r0, [pc, #8]	; (8002218 <SPI1_IRQHandler+0x10>)
 800220e:	f002 f89b 	bl	8004348 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	200005dc 	.word	0x200005dc

0800221c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
	return 1;
 8002220:	2301      	movs	r3, #1
}
 8002222:	4618      	mov	r0, r3
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <_kill>:

int _kill(int pid, int sig)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002236:	f002 fdb1 	bl	8004d9c <__errno>
 800223a:	4603      	mov	r3, r0
 800223c:	2216      	movs	r2, #22
 800223e:	601a      	str	r2, [r3, #0]
	return -1;
 8002240:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002244:	4618      	mov	r0, r3
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <_exit>:

void _exit (int status)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002254:	f04f 31ff 	mov.w	r1, #4294967295
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff ffe7 	bl	800222c <_kill>
	while (1) {}		/* Make sure we hang here */
 800225e:	e7fe      	b.n	800225e <_exit+0x12>

08002260 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	e00a      	b.n	8002288 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002272:	f3af 8000 	nop.w
 8002276:	4601      	mov	r1, r0
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	60ba      	str	r2, [r7, #8]
 800227e:	b2ca      	uxtb	r2, r1
 8002280:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	3301      	adds	r3, #1
 8002286:	617b      	str	r3, [r7, #20]
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	429a      	cmp	r2, r3
 800228e:	dbf0      	blt.n	8002272 <_read+0x12>
	}

return len;
 8002290:	687b      	ldr	r3, [r7, #4]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b086      	sub	sp, #24
 800229e:	af00      	add	r7, sp, #0
 80022a0:	60f8      	str	r0, [r7, #12]
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	e009      	b.n	80022c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	60ba      	str	r2, [r7, #8]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	3301      	adds	r3, #1
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	dbf1      	blt.n	80022ac <_write+0x12>
	}
	return len;
 80022c8:	687b      	ldr	r3, [r7, #4]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <_close>:

int _close(int file)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
	return -1;
 80022da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022fa:	605a      	str	r2, [r3, #4]
	return 0;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <_isatty>:

int _isatty(int file)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
	return 1;
 8002312:	2301      	movs	r3, #1
}
 8002314:	4618      	mov	r0, r3
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
	return 0;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
	...

0800233c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002344:	4a14      	ldr	r2, [pc, #80]	; (8002398 <_sbrk+0x5c>)
 8002346:	4b15      	ldr	r3, [pc, #84]	; (800239c <_sbrk+0x60>)
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002350:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <_sbrk+0x64>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d102      	bne.n	800235e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002358:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <_sbrk+0x64>)
 800235a:	4a12      	ldr	r2, [pc, #72]	; (80023a4 <_sbrk+0x68>)
 800235c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800235e:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <_sbrk+0x64>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4413      	add	r3, r2
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	429a      	cmp	r2, r3
 800236a:	d207      	bcs.n	800237c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800236c:	f002 fd16 	bl	8004d9c <__errno>
 8002370:	4603      	mov	r3, r0
 8002372:	220c      	movs	r2, #12
 8002374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002376:	f04f 33ff 	mov.w	r3, #4294967295
 800237a:	e009      	b.n	8002390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800237c:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <_sbrk+0x64>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002382:	4b07      	ldr	r3, [pc, #28]	; (80023a0 <_sbrk+0x64>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4413      	add	r3, r2
 800238a:	4a05      	ldr	r2, [pc, #20]	; (80023a0 <_sbrk+0x64>)
 800238c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800238e:	68fb      	ldr	r3, [r7, #12]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20020000 	.word	0x20020000
 800239c:	00000400 	.word	0x00000400
 80023a0:	2000057c 	.word	0x2000057c
 80023a4:	20000690 	.word	0x20000690

080023a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <SystemInit+0x20>)
 80023ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b2:	4a05      	ldr	r2, [pc, #20]	; (80023c8 <SystemInit+0x20>)
 80023b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <MX_USART2_UART_Init+0x4c>)
 80023d2:	4a12      	ldr	r2, [pc, #72]	; (800241c <MX_USART2_UART_Init+0x50>)
 80023d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <MX_USART2_UART_Init+0x4c>)
 80023d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023de:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <MX_USART2_UART_Init+0x4c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <MX_USART2_UART_Init+0x4c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <MX_USART2_UART_Init+0x4c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023f0:	4b09      	ldr	r3, [pc, #36]	; (8002418 <MX_USART2_UART_Init+0x4c>)
 80023f2:	220c      	movs	r2, #12
 80023f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023f6:	4b08      	ldr	r3, [pc, #32]	; (8002418 <MX_USART2_UART_Init+0x4c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <MX_USART2_UART_Init+0x4c>)
 80023fe:	2200      	movs	r2, #0
 8002400:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002402:	4805      	ldr	r0, [pc, #20]	; (8002418 <MX_USART2_UART_Init+0x4c>)
 8002404:	f002 f996 	bl	8004734 <HAL_UART_Init>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800240e:	f7ff fd83 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000634 	.word	0x20000634
 800241c:	40004400 	.word	0x40004400

08002420 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08a      	sub	sp, #40	; 0x28
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a19      	ldr	r2, [pc, #100]	; (80024a4 <HAL_UART_MspInit+0x84>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d12b      	bne.n	800249a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	4b18      	ldr	r3, [pc, #96]	; (80024a8 <HAL_UART_MspInit+0x88>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	4a17      	ldr	r2, [pc, #92]	; (80024a8 <HAL_UART_MspInit+0x88>)
 800244c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002450:	6413      	str	r3, [r2, #64]	; 0x40
 8002452:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <HAL_UART_MspInit+0x88>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <HAL_UART_MspInit+0x88>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	4a10      	ldr	r2, [pc, #64]	; (80024a8 <HAL_UART_MspInit+0x88>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	6313      	str	r3, [r2, #48]	; 0x30
 800246e:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <HAL_UART_MspInit+0x88>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800247a:	230c      	movs	r3, #12
 800247c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247e:	2302      	movs	r3, #2
 8002480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002486:	2303      	movs	r3, #3
 8002488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800248a:	2307      	movs	r3, #7
 800248c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248e:	f107 0314 	add.w	r3, r7, #20
 8002492:	4619      	mov	r1, r3
 8002494:	4805      	ldr	r0, [pc, #20]	; (80024ac <HAL_UART_MspInit+0x8c>)
 8002496:	f000 fa31 	bl	80028fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800249a:	bf00      	nop
 800249c:	3728      	adds	r7, #40	; 0x28
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40004400 	.word	0x40004400
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40020000 	.word	0x40020000

080024b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024b4:	480d      	ldr	r0, [pc, #52]	; (80024ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024b6:	490e      	ldr	r1, [pc, #56]	; (80024f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024b8:	4a0e      	ldr	r2, [pc, #56]	; (80024f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024bc:	e002      	b.n	80024c4 <LoopCopyDataInit>

080024be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024c2:	3304      	adds	r3, #4

080024c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c8:	d3f9      	bcc.n	80024be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ca:	4a0b      	ldr	r2, [pc, #44]	; (80024f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024cc:	4c0b      	ldr	r4, [pc, #44]	; (80024fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80024ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024d0:	e001      	b.n	80024d6 <LoopFillZerobss>

080024d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024d4:	3204      	adds	r2, #4

080024d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d8:	d3fb      	bcc.n	80024d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80024da:	f7ff ff65 	bl	80023a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024de:	f002 fc75 	bl	8004dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024e2:	f7ff fc9b 	bl	8001e1c <main>
  bx  lr    
 80024e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024f0:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80024f4:	08006c60 	.word	0x08006c60
  ldr r2, =_sbss
 80024f8:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80024fc:	2000068c 	.word	0x2000068c

08002500 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002500:	e7fe      	b.n	8002500 <ADC_IRQHandler>
	...

08002504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002508:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <HAL_Init+0x40>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a0d      	ldr	r2, [pc, #52]	; (8002544 <HAL_Init+0x40>)
 800250e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_Init+0x40>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a0a      	ldr	r2, [pc, #40]	; (8002544 <HAL_Init+0x40>)
 800251a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800251e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002520:	4b08      	ldr	r3, [pc, #32]	; (8002544 <HAL_Init+0x40>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a07      	ldr	r2, [pc, #28]	; (8002544 <HAL_Init+0x40>)
 8002526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800252c:	2003      	movs	r0, #3
 800252e:	f000 f973 	bl	8002818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002532:	200f      	movs	r0, #15
 8002534:	f000 f808 	bl	8002548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002538:	f7ff fe14 	bl	8002164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40023c00 	.word	0x40023c00

08002548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002550:	4b12      	ldr	r3, [pc, #72]	; (800259c <HAL_InitTick+0x54>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <HAL_InitTick+0x58>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	4619      	mov	r1, r3
 800255a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800255e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002562:	fbb2 f3f3 	udiv	r3, r2, r3
 8002566:	4618      	mov	r0, r3
 8002568:	f000 f999 	bl	800289e <HAL_SYSTICK_Config>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e00e      	b.n	8002594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b0f      	cmp	r3, #15
 800257a:	d80a      	bhi.n	8002592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800257c:	2200      	movs	r2, #0
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	f04f 30ff 	mov.w	r0, #4294967295
 8002584:	f000 f953 	bl	800282e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002588:	4a06      	ldr	r2, [pc, #24]	; (80025a4 <HAL_InitTick+0x5c>)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	e000      	b.n	8002594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20000028 	.word	0x20000028
 80025a0:	20000030 	.word	0x20000030
 80025a4:	2000002c 	.word	0x2000002c

080025a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_IncTick+0x20>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	461a      	mov	r2, r3
 80025b2:	4b06      	ldr	r3, [pc, #24]	; (80025cc <HAL_IncTick+0x24>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4413      	add	r3, r2
 80025b8:	4a04      	ldr	r2, [pc, #16]	; (80025cc <HAL_IncTick+0x24>)
 80025ba:	6013      	str	r3, [r2, #0]
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	20000030 	.word	0x20000030
 80025cc:	20000678 	.word	0x20000678

080025d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return uwTick;
 80025d4:	4b03      	ldr	r3, [pc, #12]	; (80025e4 <HAL_GetTick+0x14>)
 80025d6:	681b      	ldr	r3, [r3, #0]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	20000678 	.word	0x20000678

080025e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025f0:	f7ff ffee 	bl	80025d0 <HAL_GetTick>
 80025f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002600:	d005      	beq.n	800260e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002602:	4b0a      	ldr	r3, [pc, #40]	; (800262c <HAL_Delay+0x44>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4413      	add	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800260e:	bf00      	nop
 8002610:	f7ff ffde 	bl	80025d0 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	429a      	cmp	r2, r3
 800261e:	d8f7      	bhi.n	8002610 <HAL_Delay+0x28>
  {
  }
}
 8002620:	bf00      	nop
 8002622:	bf00      	nop
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20000030 	.word	0x20000030

08002630 <__NVIC_SetPriorityGrouping>:
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002640:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <__NVIC_SetPriorityGrouping+0x44>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800264c:	4013      	ands	r3, r2
 800264e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800265c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002662:	4a04      	ldr	r2, [pc, #16]	; (8002674 <__NVIC_SetPriorityGrouping+0x44>)
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	60d3      	str	r3, [r2, #12]
}
 8002668:	bf00      	nop
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <__NVIC_GetPriorityGrouping>:
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800267c:	4b04      	ldr	r3, [pc, #16]	; (8002690 <__NVIC_GetPriorityGrouping+0x18>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	0a1b      	lsrs	r3, r3, #8
 8002682:	f003 0307 	and.w	r3, r3, #7
}
 8002686:	4618      	mov	r0, r3
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <__NVIC_EnableIRQ>:
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	db0b      	blt.n	80026be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	f003 021f 	and.w	r2, r3, #31
 80026ac:	4907      	ldr	r1, [pc, #28]	; (80026cc <__NVIC_EnableIRQ+0x38>)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	2001      	movs	r0, #1
 80026b6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	e000e100 	.word	0xe000e100

080026d0 <__NVIC_DisableIRQ>:
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	db12      	blt.n	8002708 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	f003 021f 	and.w	r2, r3, #31
 80026e8:	490a      	ldr	r1, [pc, #40]	; (8002714 <__NVIC_DisableIRQ+0x44>)
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	095b      	lsrs	r3, r3, #5
 80026f0:	2001      	movs	r0, #1
 80026f2:	fa00 f202 	lsl.w	r2, r0, r2
 80026f6:	3320      	adds	r3, #32
 80026f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80026fc:	f3bf 8f4f 	dsb	sy
}
 8002700:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002702:	f3bf 8f6f 	isb	sy
}
 8002706:	bf00      	nop
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	e000e100 	.word	0xe000e100

08002718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	6039      	str	r1, [r7, #0]
 8002722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002728:	2b00      	cmp	r3, #0
 800272a:	db0a      	blt.n	8002742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	b2da      	uxtb	r2, r3
 8002730:	490c      	ldr	r1, [pc, #48]	; (8002764 <__NVIC_SetPriority+0x4c>)
 8002732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002736:	0112      	lsls	r2, r2, #4
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	440b      	add	r3, r1
 800273c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002740:	e00a      	b.n	8002758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	b2da      	uxtb	r2, r3
 8002746:	4908      	ldr	r1, [pc, #32]	; (8002768 <__NVIC_SetPriority+0x50>)
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	3b04      	subs	r3, #4
 8002750:	0112      	lsls	r2, r2, #4
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	440b      	add	r3, r1
 8002756:	761a      	strb	r2, [r3, #24]
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	e000e100 	.word	0xe000e100
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800276c:	b480      	push	{r7}
 800276e:	b089      	sub	sp, #36	; 0x24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f1c3 0307 	rsb	r3, r3, #7
 8002786:	2b04      	cmp	r3, #4
 8002788:	bf28      	it	cs
 800278a:	2304      	movcs	r3, #4
 800278c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	3304      	adds	r3, #4
 8002792:	2b06      	cmp	r3, #6
 8002794:	d902      	bls.n	800279c <NVIC_EncodePriority+0x30>
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3b03      	subs	r3, #3
 800279a:	e000      	b.n	800279e <NVIC_EncodePriority+0x32>
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a0:	f04f 32ff 	mov.w	r2, #4294967295
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43da      	mvns	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	401a      	ands	r2, r3
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027b4:	f04f 31ff 	mov.w	r1, #4294967295
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	fa01 f303 	lsl.w	r3, r1, r3
 80027be:	43d9      	mvns	r1, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c4:	4313      	orrs	r3, r2
         );
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3724      	adds	r7, #36	; 0x24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
	...

080027d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3b01      	subs	r3, #1
 80027e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027e4:	d301      	bcc.n	80027ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027e6:	2301      	movs	r3, #1
 80027e8:	e00f      	b.n	800280a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ea:	4a0a      	ldr	r2, [pc, #40]	; (8002814 <SysTick_Config+0x40>)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027f2:	210f      	movs	r1, #15
 80027f4:	f04f 30ff 	mov.w	r0, #4294967295
 80027f8:	f7ff ff8e 	bl	8002718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <SysTick_Config+0x40>)
 80027fe:	2200      	movs	r2, #0
 8002800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002802:	4b04      	ldr	r3, [pc, #16]	; (8002814 <SysTick_Config+0x40>)
 8002804:	2207      	movs	r2, #7
 8002806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	e000e010 	.word	0xe000e010

08002818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff ff05 	bl	8002630 <__NVIC_SetPriorityGrouping>
}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800282e:	b580      	push	{r7, lr}
 8002830:	b086      	sub	sp, #24
 8002832:	af00      	add	r7, sp, #0
 8002834:	4603      	mov	r3, r0
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607a      	str	r2, [r7, #4]
 800283a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002840:	f7ff ff1a 	bl	8002678 <__NVIC_GetPriorityGrouping>
 8002844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	68b9      	ldr	r1, [r7, #8]
 800284a:	6978      	ldr	r0, [r7, #20]
 800284c:	f7ff ff8e 	bl	800276c <NVIC_EncodePriority>
 8002850:	4602      	mov	r2, r0
 8002852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002856:	4611      	mov	r1, r2
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ff5d 	bl	8002718 <__NVIC_SetPriority>
}
 800285e:	bf00      	nop
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	4603      	mov	r3, r0
 800286e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff ff0d 	bl	8002694 <__NVIC_EnableIRQ>
}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
 8002888:	4603      	mov	r3, r0
 800288a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800288c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff ff1d 	bl	80026d0 <__NVIC_DisableIRQ>
}
 8002896:	bf00      	nop
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff ff94 	bl	80027d4 <SysTick_Config>
 80028ac:	4603      	mov	r3, r0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d004      	beq.n	80028d4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2280      	movs	r2, #128	; 0x80
 80028ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e00c      	b.n	80028ee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2205      	movs	r2, #5
 80028d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0201 	bic.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
	...

080028fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b089      	sub	sp, #36	; 0x24
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800290a:	2300      	movs	r3, #0
 800290c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800290e:	2300      	movs	r3, #0
 8002910:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
 8002916:	e159      	b.n	8002bcc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002918:	2201      	movs	r2, #1
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	4013      	ands	r3, r2
 800292a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	429a      	cmp	r2, r3
 8002932:	f040 8148 	bne.w	8002bc6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	2b01      	cmp	r3, #1
 8002940:	d005      	beq.n	800294e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800294a:	2b02      	cmp	r3, #2
 800294c:	d130      	bne.n	80029b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	2203      	movs	r2, #3
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4013      	ands	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002984:	2201      	movs	r2, #1
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	f003 0201 	and.w	r2, r3, #1
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d017      	beq.n	80029ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	2203      	movs	r2, #3
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 0303 	and.w	r3, r3, #3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d123      	bne.n	8002a40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	08da      	lsrs	r2, r3, #3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3208      	adds	r2, #8
 8002a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	220f      	movs	r2, #15
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	08da      	lsrs	r2, r3, #3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3208      	adds	r2, #8
 8002a3a:	69b9      	ldr	r1, [r7, #24]
 8002a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0203 	and.w	r2, r3, #3
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 80a2 	beq.w	8002bc6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	4b57      	ldr	r3, [pc, #348]	; (8002be4 <HAL_GPIO_Init+0x2e8>)
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	4a56      	ldr	r2, [pc, #344]	; (8002be4 <HAL_GPIO_Init+0x2e8>)
 8002a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a90:	6453      	str	r3, [r2, #68]	; 0x44
 8002a92:	4b54      	ldr	r3, [pc, #336]	; (8002be4 <HAL_GPIO_Init+0x2e8>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a9e:	4a52      	ldr	r2, [pc, #328]	; (8002be8 <HAL_GPIO_Init+0x2ec>)
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	089b      	lsrs	r3, r3, #2
 8002aa4:	3302      	adds	r3, #2
 8002aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	220f      	movs	r2, #15
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a49      	ldr	r2, [pc, #292]	; (8002bec <HAL_GPIO_Init+0x2f0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d019      	beq.n	8002afe <HAL_GPIO_Init+0x202>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a48      	ldr	r2, [pc, #288]	; (8002bf0 <HAL_GPIO_Init+0x2f4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d013      	beq.n	8002afa <HAL_GPIO_Init+0x1fe>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a47      	ldr	r2, [pc, #284]	; (8002bf4 <HAL_GPIO_Init+0x2f8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d00d      	beq.n	8002af6 <HAL_GPIO_Init+0x1fa>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a46      	ldr	r2, [pc, #280]	; (8002bf8 <HAL_GPIO_Init+0x2fc>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d007      	beq.n	8002af2 <HAL_GPIO_Init+0x1f6>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a45      	ldr	r2, [pc, #276]	; (8002bfc <HAL_GPIO_Init+0x300>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d101      	bne.n	8002aee <HAL_GPIO_Init+0x1f2>
 8002aea:	2304      	movs	r3, #4
 8002aec:	e008      	b.n	8002b00 <HAL_GPIO_Init+0x204>
 8002aee:	2307      	movs	r3, #7
 8002af0:	e006      	b.n	8002b00 <HAL_GPIO_Init+0x204>
 8002af2:	2303      	movs	r3, #3
 8002af4:	e004      	b.n	8002b00 <HAL_GPIO_Init+0x204>
 8002af6:	2302      	movs	r3, #2
 8002af8:	e002      	b.n	8002b00 <HAL_GPIO_Init+0x204>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <HAL_GPIO_Init+0x204>
 8002afe:	2300      	movs	r3, #0
 8002b00:	69fa      	ldr	r2, [r7, #28]
 8002b02:	f002 0203 	and.w	r2, r2, #3
 8002b06:	0092      	lsls	r2, r2, #2
 8002b08:	4093      	lsls	r3, r2
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b10:	4935      	ldr	r1, [pc, #212]	; (8002be8 <HAL_GPIO_Init+0x2ec>)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	089b      	lsrs	r3, r3, #2
 8002b16:	3302      	adds	r3, #2
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b1e:	4b38      	ldr	r3, [pc, #224]	; (8002c00 <HAL_GPIO_Init+0x304>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	43db      	mvns	r3, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b42:	4a2f      	ldr	r2, [pc, #188]	; (8002c00 <HAL_GPIO_Init+0x304>)
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b48:	4b2d      	ldr	r3, [pc, #180]	; (8002c00 <HAL_GPIO_Init+0x304>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b6c:	4a24      	ldr	r2, [pc, #144]	; (8002c00 <HAL_GPIO_Init+0x304>)
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b72:	4b23      	ldr	r3, [pc, #140]	; (8002c00 <HAL_GPIO_Init+0x304>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b96:	4a1a      	ldr	r2, [pc, #104]	; (8002c00 <HAL_GPIO_Init+0x304>)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b9c:	4b18      	ldr	r3, [pc, #96]	; (8002c00 <HAL_GPIO_Init+0x304>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bc0:	4a0f      	ldr	r2, [pc, #60]	; (8002c00 <HAL_GPIO_Init+0x304>)
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	61fb      	str	r3, [r7, #28]
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	2b0f      	cmp	r3, #15
 8002bd0:	f67f aea2 	bls.w	8002918 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop
 8002bd8:	3724      	adds	r7, #36	; 0x24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40013800 	.word	0x40013800
 8002bec:	40020000 	.word	0x40020000
 8002bf0:	40020400 	.word	0x40020400
 8002bf4:	40020800 	.word	0x40020800
 8002bf8:	40020c00 	.word	0x40020c00
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40013c00 	.word	0x40013c00

08002c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	807b      	strh	r3, [r7, #2]
 8002c10:	4613      	mov	r3, r2
 8002c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c14:	787b      	ldrb	r3, [r7, #1]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c1a:	887a      	ldrh	r2, [r7, #2]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c20:	e003      	b.n	8002c2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c22:	887b      	ldrh	r3, [r7, #2]
 8002c24:	041a      	lsls	r2, r3, #16
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	619a      	str	r2, [r3, #24]
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e12b      	b.n	8002ea2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7ff f894 	bl	8001d8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2224      	movs	r2, #36	; 0x24
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0201 	bic.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c9c:	f001 f966 	bl	8003f6c <HAL_RCC_GetPCLK1Freq>
 8002ca0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	4a81      	ldr	r2, [pc, #516]	; (8002eac <HAL_I2C_Init+0x274>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d807      	bhi.n	8002cbc <HAL_I2C_Init+0x84>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4a80      	ldr	r2, [pc, #512]	; (8002eb0 <HAL_I2C_Init+0x278>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	bf94      	ite	ls
 8002cb4:	2301      	movls	r3, #1
 8002cb6:	2300      	movhi	r3, #0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	e006      	b.n	8002cca <HAL_I2C_Init+0x92>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4a7d      	ldr	r2, [pc, #500]	; (8002eb4 <HAL_I2C_Init+0x27c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	bf94      	ite	ls
 8002cc4:	2301      	movls	r3, #1
 8002cc6:	2300      	movhi	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e0e7      	b.n	8002ea2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4a78      	ldr	r2, [pc, #480]	; (8002eb8 <HAL_I2C_Init+0x280>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	0c9b      	lsrs	r3, r3, #18
 8002cdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	4a6a      	ldr	r2, [pc, #424]	; (8002eac <HAL_I2C_Init+0x274>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d802      	bhi.n	8002d0c <HAL_I2C_Init+0xd4>
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	e009      	b.n	8002d20 <HAL_I2C_Init+0xe8>
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d12:	fb02 f303 	mul.w	r3, r2, r3
 8002d16:	4a69      	ldr	r2, [pc, #420]	; (8002ebc <HAL_I2C_Init+0x284>)
 8002d18:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1c:	099b      	lsrs	r3, r3, #6
 8002d1e:	3301      	adds	r3, #1
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6812      	ldr	r2, [r2, #0]
 8002d24:	430b      	orrs	r3, r1
 8002d26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	495c      	ldr	r1, [pc, #368]	; (8002eac <HAL_I2C_Init+0x274>)
 8002d3c:	428b      	cmp	r3, r1
 8002d3e:	d819      	bhi.n	8002d74 <HAL_I2C_Init+0x13c>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	1e59      	subs	r1, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d4e:	1c59      	adds	r1, r3, #1
 8002d50:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d54:	400b      	ands	r3, r1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <HAL_I2C_Init+0x138>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1e59      	subs	r1, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d68:	3301      	adds	r3, #1
 8002d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6e:	e051      	b.n	8002e14 <HAL_I2C_Init+0x1dc>
 8002d70:	2304      	movs	r3, #4
 8002d72:	e04f      	b.n	8002e14 <HAL_I2C_Init+0x1dc>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d111      	bne.n	8002da0 <HAL_I2C_Init+0x168>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	1e58      	subs	r0, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6859      	ldr	r1, [r3, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	440b      	add	r3, r1
 8002d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d8e:	3301      	adds	r3, #1
 8002d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bf0c      	ite	eq
 8002d98:	2301      	moveq	r3, #1
 8002d9a:	2300      	movne	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	e012      	b.n	8002dc6 <HAL_I2C_Init+0x18e>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	1e58      	subs	r0, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6859      	ldr	r1, [r3, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	0099      	lsls	r1, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db6:	3301      	adds	r3, #1
 8002db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_Init+0x196>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e022      	b.n	8002e14 <HAL_I2C_Init+0x1dc>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10e      	bne.n	8002df4 <HAL_I2C_Init+0x1bc>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1e58      	subs	r0, r3, #1
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6859      	ldr	r1, [r3, #4]
 8002dde:	460b      	mov	r3, r1
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	440b      	add	r3, r1
 8002de4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de8:	3301      	adds	r3, #1
 8002dea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002df2:	e00f      	b.n	8002e14 <HAL_I2C_Init+0x1dc>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	1e58      	subs	r0, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6859      	ldr	r1, [r3, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	0099      	lsls	r1, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	6809      	ldr	r1, [r1, #0]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69da      	ldr	r2, [r3, #28]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6911      	ldr	r1, [r2, #16]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	68d2      	ldr	r2, [r2, #12]
 8002e4e:	4311      	orrs	r1, r2
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	430b      	orrs	r3, r1
 8002e56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	000186a0 	.word	0x000186a0
 8002eb0:	001e847f 	.word	0x001e847f
 8002eb4:	003d08ff 	.word	0x003d08ff
 8002eb8:	431bde83 	.word	0x431bde83
 8002ebc:	10624dd3 	.word	0x10624dd3

08002ec0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	607a      	str	r2, [r7, #4]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	460b      	mov	r3, r1
 8002ece:	817b      	strh	r3, [r7, #10]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ed4:	f7ff fb7c 	bl	80025d0 <HAL_GetTick>
 8002ed8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b20      	cmp	r3, #32
 8002ee4:	f040 80e0 	bne.w	80030a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	2319      	movs	r3, #25
 8002eee:	2201      	movs	r2, #1
 8002ef0:	4970      	ldr	r1, [pc, #448]	; (80030b4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 fa92 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002efe:	2302      	movs	r3, #2
 8002f00:	e0d3      	b.n	80030aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_I2C_Master_Transmit+0x50>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e0cc      	b.n	80030aa <HAL_I2C_Master_Transmit+0x1ea>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d007      	beq.n	8002f36 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0201 	orr.w	r2, r2, #1
 8002f34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2221      	movs	r2, #33	; 0x21
 8002f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2210      	movs	r2, #16
 8002f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	893a      	ldrh	r2, [r7, #8]
 8002f66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4a50      	ldr	r2, [pc, #320]	; (80030b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f78:	8979      	ldrh	r1, [r7, #10]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	6a3a      	ldr	r2, [r7, #32]
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 f9ca 	bl	8003318 <I2C_MasterRequestWrite>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e08d      	b.n	80030aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f8e:	2300      	movs	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002fa4:	e066      	b.n	8003074 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	6a39      	ldr	r1, [r7, #32]
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 fb0c 	bl	80035c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00d      	beq.n	8002fd2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d107      	bne.n	8002fce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fcc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e06b      	b.n	80030aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	781a      	ldrb	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b04      	cmp	r3, #4
 800300e:	d11b      	bne.n	8003048 <HAL_I2C_Master_Transmit+0x188>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003014:	2b00      	cmp	r3, #0
 8003016:	d017      	beq.n	8003048 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	781a      	ldrb	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003032:	b29b      	uxth	r3, r3
 8003034:	3b01      	subs	r3, #1
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	6a39      	ldr	r1, [r7, #32]
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 fafc 	bl	800364a <I2C_WaitOnBTFFlagUntilTimeout>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00d      	beq.n	8003074 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	2b04      	cmp	r3, #4
 800305e:	d107      	bne.n	8003070 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800306e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e01a      	b.n	80030aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003078:	2b00      	cmp	r3, #0
 800307a:	d194      	bne.n	8002fa6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800308a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2220      	movs	r2, #32
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	e000      	b.n	80030aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030a8:	2302      	movs	r3, #2
  }
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	00100002 	.word	0x00100002
 80030b8:	ffff0000 	.word	0xffff0000

080030bc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08a      	sub	sp, #40	; 0x28
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	460b      	mov	r3, r1
 80030ca:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80030cc:	f7ff fa80 	bl	80025d0 <HAL_GetTick>
 80030d0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80030d2:	2301      	movs	r3, #1
 80030d4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b20      	cmp	r3, #32
 80030e0:	f040 8111 	bne.w	8003306 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	2319      	movs	r3, #25
 80030ea:	2201      	movs	r2, #1
 80030ec:	4988      	ldr	r1, [pc, #544]	; (8003310 <HAL_I2C_IsDeviceReady+0x254>)
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 f994 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80030fa:	2302      	movs	r3, #2
 80030fc:	e104      	b.n	8003308 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_I2C_IsDeviceReady+0x50>
 8003108:	2302      	movs	r3, #2
 800310a:	e0fd      	b.n	8003308 <HAL_I2C_IsDeviceReady+0x24c>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b01      	cmp	r3, #1
 8003120:	d007      	beq.n	8003132 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f042 0201 	orr.w	r2, r2, #1
 8003130:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003140:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2224      	movs	r2, #36	; 0x24
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4a70      	ldr	r2, [pc, #448]	; (8003314 <HAL_I2C_IsDeviceReady+0x258>)
 8003154:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003164:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2200      	movs	r2, #0
 800316e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 f952 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00d      	beq.n	800319a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800318c:	d103      	bne.n	8003196 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003194:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e0b6      	b.n	8003308 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800319a:	897b      	ldrh	r3, [r7, #10]
 800319c:	b2db      	uxtb	r3, r3
 800319e:	461a      	mov	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031a8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80031aa:	f7ff fa11 	bl	80025d0 <HAL_GetTick>
 80031ae:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	bf0c      	ite	eq
 80031be:	2301      	moveq	r3, #1
 80031c0:	2300      	movne	r3, #0
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d4:	bf0c      	ite	eq
 80031d6:	2301      	moveq	r3, #1
 80031d8:	2300      	movne	r3, #0
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80031de:	e025      	b.n	800322c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031e0:	f7ff f9f6 	bl	80025d0 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d302      	bcc.n	80031f6 <HAL_I2C_IsDeviceReady+0x13a>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d103      	bne.n	80031fe <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	22a0      	movs	r2, #160	; 0xa0
 80031fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b02      	cmp	r3, #2
 800320a:	bf0c      	ite	eq
 800320c:	2301      	moveq	r3, #1
 800320e:	2300      	movne	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800321e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003222:	bf0c      	ite	eq
 8003224:	2301      	moveq	r3, #1
 8003226:	2300      	movne	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2ba0      	cmp	r3, #160	; 0xa0
 8003236:	d005      	beq.n	8003244 <HAL_I2C_IsDeviceReady+0x188>
 8003238:	7dfb      	ldrb	r3, [r7, #23]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d102      	bne.n	8003244 <HAL_I2C_IsDeviceReady+0x188>
 800323e:	7dbb      	ldrb	r3, [r7, #22]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0cd      	beq.n	80031e0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b02      	cmp	r3, #2
 8003258:	d129      	bne.n	80032ae <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003268:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	2319      	movs	r3, #25
 8003286:	2201      	movs	r2, #1
 8003288:	4921      	ldr	r1, [pc, #132]	; (8003310 <HAL_I2C_IsDeviceReady+0x254>)
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 f8c6 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e036      	b.n	8003308 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	e02c      	b.n	8003308 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032bc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032c6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	2319      	movs	r3, #25
 80032ce:	2201      	movs	r2, #1
 80032d0:	490f      	ldr	r1, [pc, #60]	; (8003310 <HAL_I2C_IsDeviceReady+0x254>)
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 f8a2 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e012      	b.n	8003308 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	3301      	adds	r3, #1
 80032e6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	f4ff af32 	bcc.w	8003156 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e000      	b.n	8003308 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003306:	2302      	movs	r3, #2
  }
}
 8003308:	4618      	mov	r0, r3
 800330a:	3720      	adds	r7, #32
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	00100002 	.word	0x00100002
 8003314:	ffff0000 	.word	0xffff0000

08003318 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b088      	sub	sp, #32
 800331c:	af02      	add	r7, sp, #8
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	607a      	str	r2, [r7, #4]
 8003322:	603b      	str	r3, [r7, #0]
 8003324:	460b      	mov	r3, r1
 8003326:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	2b08      	cmp	r3, #8
 8003332:	d006      	beq.n	8003342 <I2C_MasterRequestWrite+0x2a>
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d003      	beq.n	8003342 <I2C_MasterRequestWrite+0x2a>
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003340:	d108      	bne.n	8003354 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	e00b      	b.n	800336c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	2b12      	cmp	r3, #18
 800335a:	d107      	bne.n	800336c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800336a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 f84f 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00d      	beq.n	80033a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003392:	d103      	bne.n	800339c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f44f 7200 	mov.w	r2, #512	; 0x200
 800339a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e035      	b.n	800340c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033a8:	d108      	bne.n	80033bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033aa:	897b      	ldrh	r3, [r7, #10]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	461a      	mov	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033b8:	611a      	str	r2, [r3, #16]
 80033ba:	e01b      	b.n	80033f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033bc:	897b      	ldrh	r3, [r7, #10]
 80033be:	11db      	asrs	r3, r3, #7
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	f003 0306 	and.w	r3, r3, #6
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	f063 030f 	orn	r3, r3, #15
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	490e      	ldr	r1, [pc, #56]	; (8003414 <I2C_MasterRequestWrite+0xfc>)
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 f875 	bl	80034ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e010      	b.n	800340c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033ea:	897b      	ldrh	r3, [r7, #10]
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	4907      	ldr	r1, [pc, #28]	; (8003418 <I2C_MasterRequestWrite+0x100>)
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 f865 	bl	80034ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	00010008 	.word	0x00010008
 8003418:	00010002 	.word	0x00010002

0800341c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	603b      	str	r3, [r7, #0]
 8003428:	4613      	mov	r3, r2
 800342a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800342c:	e025      	b.n	800347a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003434:	d021      	beq.n	800347a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003436:	f7ff f8cb 	bl	80025d0 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d302      	bcc.n	800344c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d116      	bne.n	800347a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2220      	movs	r2, #32
 8003456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f043 0220 	orr.w	r2, r3, #32
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e023      	b.n	80034c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	0c1b      	lsrs	r3, r3, #16
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b01      	cmp	r3, #1
 8003482:	d10d      	bne.n	80034a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	43da      	mvns	r2, r3
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	4013      	ands	r3, r2
 8003490:	b29b      	uxth	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	bf0c      	ite	eq
 8003496:	2301      	moveq	r3, #1
 8003498:	2300      	movne	r3, #0
 800349a:	b2db      	uxtb	r3, r3
 800349c:	461a      	mov	r2, r3
 800349e:	e00c      	b.n	80034ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	43da      	mvns	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4013      	ands	r3, r2
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	bf0c      	ite	eq
 80034b2:	2301      	moveq	r3, #1
 80034b4:	2300      	movne	r3, #0
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	461a      	mov	r2, r3
 80034ba:	79fb      	ldrb	r3, [r7, #7]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d0b6      	beq.n	800342e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	60f8      	str	r0, [r7, #12]
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	607a      	str	r2, [r7, #4]
 80034d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034d8:	e051      	b.n	800357e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e8:	d123      	bne.n	8003532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003502:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2220      	movs	r2, #32
 800350e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f043 0204 	orr.w	r2, r3, #4
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e046      	b.n	80035c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003538:	d021      	beq.n	800357e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353a:	f7ff f849 	bl	80025d0 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	429a      	cmp	r2, r3
 8003548:	d302      	bcc.n	8003550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d116      	bne.n	800357e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2220      	movs	r2, #32
 800355a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	f043 0220 	orr.w	r2, r3, #32
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e020      	b.n	80035c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	0c1b      	lsrs	r3, r3, #16
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b01      	cmp	r3, #1
 8003586:	d10c      	bne.n	80035a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	43da      	mvns	r2, r3
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4013      	ands	r3, r2
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	bf14      	ite	ne
 800359a:	2301      	movne	r3, #1
 800359c:	2300      	moveq	r3, #0
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	e00b      	b.n	80035ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	43da      	mvns	r2, r3
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	4013      	ands	r3, r2
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	bf14      	ite	ne
 80035b4:	2301      	movne	r3, #1
 80035b6:	2300      	moveq	r3, #0
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d18d      	bne.n	80034da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035d4:	e02d      	b.n	8003632 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 f878 	bl	80036cc <I2C_IsAcknowledgeFailed>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e02d      	b.n	8003642 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ec:	d021      	beq.n	8003632 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ee:	f7fe ffef 	bl	80025d0 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d302      	bcc.n	8003604 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d116      	bne.n	8003632 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	f043 0220 	orr.w	r2, r3, #32
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e007      	b.n	8003642 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363c:	2b80      	cmp	r3, #128	; 0x80
 800363e:	d1ca      	bne.n	80035d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b084      	sub	sp, #16
 800364e:	af00      	add	r7, sp, #0
 8003650:	60f8      	str	r0, [r7, #12]
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003656:	e02d      	b.n	80036b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 f837 	bl	80036cc <I2C_IsAcknowledgeFailed>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e02d      	b.n	80036c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366e:	d021      	beq.n	80036b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003670:	f7fe ffae 	bl	80025d0 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	429a      	cmp	r2, r3
 800367e:	d302      	bcc.n	8003686 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d116      	bne.n	80036b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	f043 0220 	orr.w	r2, r3, #32
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e007      	b.n	80036c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d1ca      	bne.n	8003658 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e2:	d11b      	bne.n	800371c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	f043 0204 	orr.w	r2, r3, #4
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e000      	b.n	800371e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
	...

0800372c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e264      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d075      	beq.n	8003836 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800374a:	4ba3      	ldr	r3, [pc, #652]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
 8003752:	2b04      	cmp	r3, #4
 8003754:	d00c      	beq.n	8003770 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003756:	4ba0      	ldr	r3, [pc, #640]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800375e:	2b08      	cmp	r3, #8
 8003760:	d112      	bne.n	8003788 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003762:	4b9d      	ldr	r3, [pc, #628]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800376a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800376e:	d10b      	bne.n	8003788 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003770:	4b99      	ldr	r3, [pc, #612]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d05b      	beq.n	8003834 <HAL_RCC_OscConfig+0x108>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d157      	bne.n	8003834 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e23f      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003790:	d106      	bne.n	80037a0 <HAL_RCC_OscConfig+0x74>
 8003792:	4b91      	ldr	r3, [pc, #580]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a90      	ldr	r2, [pc, #576]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	e01d      	b.n	80037dc <HAL_RCC_OscConfig+0xb0>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCC_OscConfig+0x98>
 80037aa:	4b8b      	ldr	r3, [pc, #556]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a8a      	ldr	r2, [pc, #552]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80037b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	4b88      	ldr	r3, [pc, #544]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a87      	ldr	r2, [pc, #540]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80037bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	e00b      	b.n	80037dc <HAL_RCC_OscConfig+0xb0>
 80037c4:	4b84      	ldr	r3, [pc, #528]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a83      	ldr	r2, [pc, #524]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80037ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	4b81      	ldr	r3, [pc, #516]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a80      	ldr	r2, [pc, #512]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80037d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d013      	beq.n	800380c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7fe fef4 	bl	80025d0 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ec:	f7fe fef0 	bl	80025d0 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b64      	cmp	r3, #100	; 0x64
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e204      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fe:	4b76      	ldr	r3, [pc, #472]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0xc0>
 800380a:	e014      	b.n	8003836 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380c:	f7fe fee0 	bl	80025d0 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003814:	f7fe fedc 	bl	80025d0 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b64      	cmp	r3, #100	; 0x64
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e1f0      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003826:	4b6c      	ldr	r3, [pc, #432]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0xe8>
 8003832:	e000      	b.n	8003836 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d063      	beq.n	800390a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003842:	4b65      	ldr	r3, [pc, #404]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00b      	beq.n	8003866 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800384e:	4b62      	ldr	r3, [pc, #392]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003856:	2b08      	cmp	r3, #8
 8003858:	d11c      	bne.n	8003894 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800385a:	4b5f      	ldr	r3, [pc, #380]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d116      	bne.n	8003894 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003866:	4b5c      	ldr	r3, [pc, #368]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d005      	beq.n	800387e <HAL_RCC_OscConfig+0x152>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d001      	beq.n	800387e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e1c4      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387e:	4b56      	ldr	r3, [pc, #344]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4952      	ldr	r1, [pc, #328]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 800388e:	4313      	orrs	r3, r2
 8003890:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003892:	e03a      	b.n	800390a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d020      	beq.n	80038de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800389c:	4b4f      	ldr	r3, [pc, #316]	; (80039dc <HAL_RCC_OscConfig+0x2b0>)
 800389e:	2201      	movs	r2, #1
 80038a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a2:	f7fe fe95 	bl	80025d0 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038aa:	f7fe fe91 	bl	80025d0 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e1a5      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038bc:	4b46      	ldr	r3, [pc, #280]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0f0      	beq.n	80038aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c8:	4b43      	ldr	r3, [pc, #268]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	4940      	ldr	r1, [pc, #256]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	600b      	str	r3, [r1, #0]
 80038dc:	e015      	b.n	800390a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038de:	4b3f      	ldr	r3, [pc, #252]	; (80039dc <HAL_RCC_OscConfig+0x2b0>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e4:	f7fe fe74 	bl	80025d0 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ec:	f7fe fe70 	bl	80025d0 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e184      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fe:	4b36      	ldr	r3, [pc, #216]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d030      	beq.n	8003978 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d016      	beq.n	800394c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800391e:	4b30      	ldr	r3, [pc, #192]	; (80039e0 <HAL_RCC_OscConfig+0x2b4>)
 8003920:	2201      	movs	r2, #1
 8003922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003924:	f7fe fe54 	bl	80025d0 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800392c:	f7fe fe50 	bl	80025d0 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e164      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393e:	4b26      	ldr	r3, [pc, #152]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0f0      	beq.n	800392c <HAL_RCC_OscConfig+0x200>
 800394a:	e015      	b.n	8003978 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800394c:	4b24      	ldr	r3, [pc, #144]	; (80039e0 <HAL_RCC_OscConfig+0x2b4>)
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003952:	f7fe fe3d 	bl	80025d0 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800395a:	f7fe fe39 	bl	80025d0 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e14d      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800396c:	4b1a      	ldr	r3, [pc, #104]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 800396e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1f0      	bne.n	800395a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 80a0 	beq.w	8003ac6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003986:	2300      	movs	r3, #0
 8003988:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800398a:	4b13      	ldr	r3, [pc, #76]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10f      	bne.n	80039b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003996:	2300      	movs	r3, #0
 8003998:	60bb      	str	r3, [r7, #8]
 800399a:	4b0f      	ldr	r3, [pc, #60]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	4a0e      	ldr	r2, [pc, #56]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80039a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a4:	6413      	str	r3, [r2, #64]	; 0x40
 80039a6:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ae:	60bb      	str	r3, [r7, #8]
 80039b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039b2:	2301      	movs	r3, #1
 80039b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b6:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <HAL_RCC_OscConfig+0x2b8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d121      	bne.n	8003a06 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039c2:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <HAL_RCC_OscConfig+0x2b8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a07      	ldr	r2, [pc, #28]	; (80039e4 <HAL_RCC_OscConfig+0x2b8>)
 80039c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ce:	f7fe fdff 	bl	80025d0 <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d4:	e011      	b.n	80039fa <HAL_RCC_OscConfig+0x2ce>
 80039d6:	bf00      	nop
 80039d8:	40023800 	.word	0x40023800
 80039dc:	42470000 	.word	0x42470000
 80039e0:	42470e80 	.word	0x42470e80
 80039e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e8:	f7fe fdf2 	bl	80025d0 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e106      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fa:	4b85      	ldr	r3, [pc, #532]	; (8003c10 <HAL_RCC_OscConfig+0x4e4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0f0      	beq.n	80039e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d106      	bne.n	8003a1c <HAL_RCC_OscConfig+0x2f0>
 8003a0e:	4b81      	ldr	r3, [pc, #516]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a12:	4a80      	ldr	r2, [pc, #512]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a14:	f043 0301 	orr.w	r3, r3, #1
 8003a18:	6713      	str	r3, [r2, #112]	; 0x70
 8003a1a:	e01c      	b.n	8003a56 <HAL_RCC_OscConfig+0x32a>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	2b05      	cmp	r3, #5
 8003a22:	d10c      	bne.n	8003a3e <HAL_RCC_OscConfig+0x312>
 8003a24:	4b7b      	ldr	r3, [pc, #492]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a28:	4a7a      	ldr	r2, [pc, #488]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a2a:	f043 0304 	orr.w	r3, r3, #4
 8003a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a30:	4b78      	ldr	r3, [pc, #480]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a34:	4a77      	ldr	r2, [pc, #476]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a36:	f043 0301 	orr.w	r3, r3, #1
 8003a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a3c:	e00b      	b.n	8003a56 <HAL_RCC_OscConfig+0x32a>
 8003a3e:	4b75      	ldr	r3, [pc, #468]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a42:	4a74      	ldr	r2, [pc, #464]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a44:	f023 0301 	bic.w	r3, r3, #1
 8003a48:	6713      	str	r3, [r2, #112]	; 0x70
 8003a4a:	4b72      	ldr	r3, [pc, #456]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4e:	4a71      	ldr	r2, [pc, #452]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a50:	f023 0304 	bic.w	r3, r3, #4
 8003a54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d015      	beq.n	8003a8a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5e:	f7fe fdb7 	bl	80025d0 <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a64:	e00a      	b.n	8003a7c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a66:	f7fe fdb3 	bl	80025d0 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e0c5      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a7c:	4b65      	ldr	r3, [pc, #404]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0ee      	beq.n	8003a66 <HAL_RCC_OscConfig+0x33a>
 8003a88:	e014      	b.n	8003ab4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a8a:	f7fe fda1 	bl	80025d0 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a90:	e00a      	b.n	8003aa8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a92:	f7fe fd9d 	bl	80025d0 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e0af      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa8:	4b5a      	ldr	r3, [pc, #360]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1ee      	bne.n	8003a92 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ab4:	7dfb      	ldrb	r3, [r7, #23]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d105      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aba:	4b56      	ldr	r3, [pc, #344]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	4a55      	ldr	r2, [pc, #340]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003ac0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 809b 	beq.w	8003c06 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ad0:	4b50      	ldr	r3, [pc, #320]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f003 030c 	and.w	r3, r3, #12
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d05c      	beq.n	8003b96 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d141      	bne.n	8003b68 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae4:	4b4c      	ldr	r3, [pc, #304]	; (8003c18 <HAL_RCC_OscConfig+0x4ec>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aea:	f7fe fd71 	bl	80025d0 <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af2:	f7fe fd6d 	bl	80025d0 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e081      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b04:	4b43      	ldr	r3, [pc, #268]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1f0      	bne.n	8003af2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69da      	ldr	r2, [r3, #28]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	019b      	lsls	r3, r3, #6
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	085b      	lsrs	r3, r3, #1
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	041b      	lsls	r3, r3, #16
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b32:	061b      	lsls	r3, r3, #24
 8003b34:	4937      	ldr	r1, [pc, #220]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b3a:	4b37      	ldr	r3, [pc, #220]	; (8003c18 <HAL_RCC_OscConfig+0x4ec>)
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b40:	f7fe fd46 	bl	80025d0 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b48:	f7fe fd42 	bl	80025d0 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e056      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b5a:	4b2e      	ldr	r3, [pc, #184]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCC_OscConfig+0x41c>
 8003b66:	e04e      	b.n	8003c06 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b68:	4b2b      	ldr	r3, [pc, #172]	; (8003c18 <HAL_RCC_OscConfig+0x4ec>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6e:	f7fe fd2f 	bl	80025d0 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b76:	f7fe fd2b 	bl	80025d0 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e03f      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b88:	4b22      	ldr	r3, [pc, #136]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1f0      	bne.n	8003b76 <HAL_RCC_OscConfig+0x44a>
 8003b94:	e037      	b.n	8003c06 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e032      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ba2:	4b1c      	ldr	r3, [pc, #112]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d028      	beq.n	8003c02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d121      	bne.n	8003c02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d11a      	bne.n	8003c02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bd8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d111      	bne.n	8003c02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be8:	085b      	lsrs	r3, r3, #1
 8003bea:	3b01      	subs	r3, #1
 8003bec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d107      	bne.n	8003c02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d001      	beq.n	8003c06 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3718      	adds	r7, #24
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40007000 	.word	0x40007000
 8003c14:	40023800 	.word	0x40023800
 8003c18:	42470060 	.word	0x42470060

08003c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0cc      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c30:	4b68      	ldr	r3, [pc, #416]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d90c      	bls.n	8003c58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3e:	4b65      	ldr	r3, [pc, #404]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c46:	4b63      	ldr	r3, [pc, #396]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d001      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0b8      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d020      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d005      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c70:	4b59      	ldr	r3, [pc, #356]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	4a58      	ldr	r2, [pc, #352]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c88:	4b53      	ldr	r3, [pc, #332]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	4a52      	ldr	r2, [pc, #328]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c94:	4b50      	ldr	r3, [pc, #320]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	494d      	ldr	r1, [pc, #308]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d044      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d107      	bne.n	8003cca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cba:	4b47      	ldr	r3, [pc, #284]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d119      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e07f      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d003      	beq.n	8003cda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d107      	bne.n	8003cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cda:	4b3f      	ldr	r3, [pc, #252]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e06f      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cea:	4b3b      	ldr	r3, [pc, #236]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e067      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cfa:	4b37      	ldr	r3, [pc, #220]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f023 0203 	bic.w	r2, r3, #3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	4934      	ldr	r1, [pc, #208]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d0c:	f7fe fc60 	bl	80025d0 <HAL_GetTick>
 8003d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d12:	e00a      	b.n	8003d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d14:	f7fe fc5c 	bl	80025d0 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e04f      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2a:	4b2b      	ldr	r3, [pc, #172]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 020c 	and.w	r2, r3, #12
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d1eb      	bne.n	8003d14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d3c:	4b25      	ldr	r3, [pc, #148]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d20c      	bcs.n	8003d64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4a:	4b22      	ldr	r3, [pc, #136]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d52:	4b20      	ldr	r3, [pc, #128]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d001      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e032      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d70:	4b19      	ldr	r3, [pc, #100]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	4916      	ldr	r1, [pc, #88]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d009      	beq.n	8003da2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d8e:	4b12      	ldr	r3, [pc, #72]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	490e      	ldr	r1, [pc, #56]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003da2:	f000 f821 	bl	8003de8 <HAL_RCC_GetSysClockFreq>
 8003da6:	4602      	mov	r2, r0
 8003da8:	4b0b      	ldr	r3, [pc, #44]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	490a      	ldr	r1, [pc, #40]	; (8003ddc <HAL_RCC_ClockConfig+0x1c0>)
 8003db4:	5ccb      	ldrb	r3, [r1, r3]
 8003db6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dba:	4a09      	ldr	r2, [pc, #36]	; (8003de0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dbe:	4b09      	ldr	r3, [pc, #36]	; (8003de4 <HAL_RCC_ClockConfig+0x1c8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fe fbc0 	bl	8002548 <HAL_InitTick>

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40023c00 	.word	0x40023c00
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	08006b64 	.word	0x08006b64
 8003de0:	20000028 	.word	0x20000028
 8003de4:	2000002c 	.word	0x2000002c

08003de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de8:	b5b0      	push	{r4, r5, r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dee:	2100      	movs	r1, #0
 8003df0:	6079      	str	r1, [r7, #4]
 8003df2:	2100      	movs	r1, #0
 8003df4:	60f9      	str	r1, [r7, #12]
 8003df6:	2100      	movs	r1, #0
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dfe:	4952      	ldr	r1, [pc, #328]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e00:	6889      	ldr	r1, [r1, #8]
 8003e02:	f001 010c 	and.w	r1, r1, #12
 8003e06:	2908      	cmp	r1, #8
 8003e08:	d00d      	beq.n	8003e26 <HAL_RCC_GetSysClockFreq+0x3e>
 8003e0a:	2908      	cmp	r1, #8
 8003e0c:	f200 8094 	bhi.w	8003f38 <HAL_RCC_GetSysClockFreq+0x150>
 8003e10:	2900      	cmp	r1, #0
 8003e12:	d002      	beq.n	8003e1a <HAL_RCC_GetSysClockFreq+0x32>
 8003e14:	2904      	cmp	r1, #4
 8003e16:	d003      	beq.n	8003e20 <HAL_RCC_GetSysClockFreq+0x38>
 8003e18:	e08e      	b.n	8003f38 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e1a:	4b4c      	ldr	r3, [pc, #304]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x164>)
 8003e1c:	60bb      	str	r3, [r7, #8]
       break;
 8003e1e:	e08e      	b.n	8003f3e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e20:	4b4b      	ldr	r3, [pc, #300]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x168>)
 8003e22:	60bb      	str	r3, [r7, #8]
      break;
 8003e24:	e08b      	b.n	8003f3e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e26:	4948      	ldr	r1, [pc, #288]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e28:	6849      	ldr	r1, [r1, #4]
 8003e2a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003e2e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e30:	4945      	ldr	r1, [pc, #276]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e32:	6849      	ldr	r1, [r1, #4]
 8003e34:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003e38:	2900      	cmp	r1, #0
 8003e3a:	d024      	beq.n	8003e86 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e3c:	4942      	ldr	r1, [pc, #264]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e3e:	6849      	ldr	r1, [r1, #4]
 8003e40:	0989      	lsrs	r1, r1, #6
 8003e42:	4608      	mov	r0, r1
 8003e44:	f04f 0100 	mov.w	r1, #0
 8003e48:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003e4c:	f04f 0500 	mov.w	r5, #0
 8003e50:	ea00 0204 	and.w	r2, r0, r4
 8003e54:	ea01 0305 	and.w	r3, r1, r5
 8003e58:	493d      	ldr	r1, [pc, #244]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x168>)
 8003e5a:	fb01 f003 	mul.w	r0, r1, r3
 8003e5e:	2100      	movs	r1, #0
 8003e60:	fb01 f102 	mul.w	r1, r1, r2
 8003e64:	1844      	adds	r4, r0, r1
 8003e66:	493a      	ldr	r1, [pc, #232]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x168>)
 8003e68:	fba2 0101 	umull	r0, r1, r2, r1
 8003e6c:	1863      	adds	r3, r4, r1
 8003e6e:	4619      	mov	r1, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	461a      	mov	r2, r3
 8003e74:	f04f 0300 	mov.w	r3, #0
 8003e78:	f7fc fa02 	bl	8000280 <__aeabi_uldivmod>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4613      	mov	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	e04a      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e86:	4b30      	ldr	r3, [pc, #192]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	099b      	lsrs	r3, r3, #6
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	f04f 0300 	mov.w	r3, #0
 8003e92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e96:	f04f 0100 	mov.w	r1, #0
 8003e9a:	ea02 0400 	and.w	r4, r2, r0
 8003e9e:	ea03 0501 	and.w	r5, r3, r1
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	4629      	mov	r1, r5
 8003ea6:	f04f 0200 	mov.w	r2, #0
 8003eaa:	f04f 0300 	mov.w	r3, #0
 8003eae:	014b      	lsls	r3, r1, #5
 8003eb0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003eb4:	0142      	lsls	r2, r0, #5
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	4619      	mov	r1, r3
 8003eba:	1b00      	subs	r0, r0, r4
 8003ebc:	eb61 0105 	sbc.w	r1, r1, r5
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	f04f 0300 	mov.w	r3, #0
 8003ec8:	018b      	lsls	r3, r1, #6
 8003eca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ece:	0182      	lsls	r2, r0, #6
 8003ed0:	1a12      	subs	r2, r2, r0
 8003ed2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ed6:	f04f 0000 	mov.w	r0, #0
 8003eda:	f04f 0100 	mov.w	r1, #0
 8003ede:	00d9      	lsls	r1, r3, #3
 8003ee0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ee4:	00d0      	lsls	r0, r2, #3
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	1912      	adds	r2, r2, r4
 8003eec:	eb45 0303 	adc.w	r3, r5, r3
 8003ef0:	f04f 0000 	mov.w	r0, #0
 8003ef4:	f04f 0100 	mov.w	r1, #0
 8003ef8:	0299      	lsls	r1, r3, #10
 8003efa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003efe:	0290      	lsls	r0, r2, #10
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4610      	mov	r0, r2
 8003f06:	4619      	mov	r1, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	f7fc f9b6 	bl	8000280 <__aeabi_uldivmod>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	4613      	mov	r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f1c:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	0c1b      	lsrs	r3, r3, #16
 8003f22:	f003 0303 	and.w	r3, r3, #3
 8003f26:	3301      	adds	r3, #1
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f34:	60bb      	str	r3, [r7, #8]
      break;
 8003f36:	e002      	b.n	8003f3e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f38:	4b04      	ldr	r3, [pc, #16]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x164>)
 8003f3a:	60bb      	str	r3, [r7, #8]
      break;
 8003f3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f3e:	68bb      	ldr	r3, [r7, #8]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bdb0      	pop	{r4, r5, r7, pc}
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	00f42400 	.word	0x00f42400
 8003f50:	017d7840 	.word	0x017d7840

08003f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f58:	4b03      	ldr	r3, [pc, #12]	; (8003f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	20000028 	.word	0x20000028

08003f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f70:	f7ff fff0 	bl	8003f54 <HAL_RCC_GetHCLKFreq>
 8003f74:	4602      	mov	r2, r0
 8003f76:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	0a9b      	lsrs	r3, r3, #10
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	4903      	ldr	r1, [pc, #12]	; (8003f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f82:	5ccb      	ldrb	r3, [r1, r3]
 8003f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	08006b74 	.word	0x08006b74

08003f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f98:	f7ff ffdc 	bl	8003f54 <HAL_RCC_GetHCLKFreq>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	0b5b      	lsrs	r3, r3, #13
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	4903      	ldr	r1, [pc, #12]	; (8003fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003faa:	5ccb      	ldrb	r3, [r1, r3]
 8003fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	08006b74 	.word	0x08006b74

08003fbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e07b      	b.n	80040c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d108      	bne.n	8003fe8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fde:	d009      	beq.n	8003ff4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	61da      	str	r2, [r3, #28]
 8003fe6:	e005      	b.n	8003ff4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d106      	bne.n	8004014 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7fe f858 	bl	80020c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800402a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	431a      	orrs	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004064:	431a      	orrs	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004078:	ea42 0103 	orr.w	r1, r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004080:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	0c1b      	lsrs	r3, r3, #16
 8004092:	f003 0104 	and.w	r1, r3, #4
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	f003 0210 	and.w	r2, r3, #16
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	69da      	ldr	r2, [r3, #28]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b088      	sub	sp, #32
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	60f8      	str	r0, [r7, #12]
 80040d6:	60b9      	str	r1, [r7, #8]
 80040d8:	603b      	str	r3, [r7, #0]
 80040da:	4613      	mov	r3, r2
 80040dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <HAL_SPI_Transmit+0x22>
 80040ec:	2302      	movs	r3, #2
 80040ee:	e126      	b.n	800433e <HAL_SPI_Transmit+0x270>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040f8:	f7fe fa6a 	bl	80025d0 <HAL_GetTick>
 80040fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80040fe:	88fb      	ldrh	r3, [r7, #6]
 8004100:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b01      	cmp	r3, #1
 800410c:	d002      	beq.n	8004114 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800410e:	2302      	movs	r3, #2
 8004110:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004112:	e10b      	b.n	800432c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <HAL_SPI_Transmit+0x52>
 800411a:	88fb      	ldrh	r3, [r7, #6]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d102      	bne.n	8004126 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004124:	e102      	b.n	800432c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2203      	movs	r2, #3
 800412a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	88fa      	ldrh	r2, [r7, #6]
 800413e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	88fa      	ldrh	r2, [r7, #6]
 8004144:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800416c:	d10f      	bne.n	800418e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800417c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800418c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004198:	2b40      	cmp	r3, #64	; 0x40
 800419a:	d007      	beq.n	80041ac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041b4:	d14b      	bne.n	800424e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d002      	beq.n	80041c4 <HAL_SPI_Transmit+0xf6>
 80041be:	8afb      	ldrh	r3, [r7, #22]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d13e      	bne.n	8004242 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c8:	881a      	ldrh	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d4:	1c9a      	adds	r2, r3, #2
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041de:	b29b      	uxth	r3, r3
 80041e0:	3b01      	subs	r3, #1
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80041e8:	e02b      	b.n	8004242 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d112      	bne.n	800421e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fc:	881a      	ldrh	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004208:	1c9a      	adds	r2, r3, #2
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004212:	b29b      	uxth	r3, r3
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	86da      	strh	r2, [r3, #54]	; 0x36
 800421c:	e011      	b.n	8004242 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800421e:	f7fe f9d7 	bl	80025d0 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d803      	bhi.n	8004236 <HAL_SPI_Transmit+0x168>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004234:	d102      	bne.n	800423c <HAL_SPI_Transmit+0x16e>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d102      	bne.n	8004242 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004240:	e074      	b.n	800432c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1ce      	bne.n	80041ea <HAL_SPI_Transmit+0x11c>
 800424c:	e04c      	b.n	80042e8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <HAL_SPI_Transmit+0x18e>
 8004256:	8afb      	ldrh	r3, [r7, #22]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d140      	bne.n	80042de <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	330c      	adds	r3, #12
 8004266:	7812      	ldrb	r2, [r2, #0]
 8004268:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426e:	1c5a      	adds	r2, r3, #1
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004278:	b29b      	uxth	r3, r3
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004282:	e02c      	b.n	80042de <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b02      	cmp	r3, #2
 8004290:	d113      	bne.n	80042ba <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	330c      	adds	r3, #12
 800429c:	7812      	ldrb	r2, [r2, #0]
 800429e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80042b8:	e011      	b.n	80042de <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042ba:	f7fe f989 	bl	80025d0 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d803      	bhi.n	80042d2 <HAL_SPI_Transmit+0x204>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d0:	d102      	bne.n	80042d8 <HAL_SPI_Transmit+0x20a>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d102      	bne.n	80042de <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80042dc:	e026      	b.n	800432c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1cd      	bne.n	8004284 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	6839      	ldr	r1, [r7, #0]
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f9df 	bl	80046b0 <SPI_EndRxTxTransaction>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10a      	bne.n	800431c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004306:	2300      	movs	r3, #0
 8004308:	613b      	str	r3, [r7, #16]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	613b      	str	r3, [r7, #16]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	613b      	str	r3, [r7, #16]
 800431a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004320:	2b00      	cmp	r3, #0
 8004322:	d002      	beq.n	800432a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	77fb      	strb	r3, [r7, #31]
 8004328:	e000      	b.n	800432c <HAL_SPI_Transmit+0x25e>
  }

error:
 800432a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800433c:	7ffb      	ldrb	r3, [r7, #31]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3720      	adds	r7, #32
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b088      	sub	sp, #32
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	099b      	lsrs	r3, r3, #6
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10f      	bne.n	800438c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	099b      	lsrs	r3, r3, #6
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d004      	beq.n	800438c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	4798      	blx	r3
    return;
 800438a:	e0d7      	b.n	800453c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	085b      	lsrs	r3, r3, #1
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <HAL_SPI_IRQHandler+0x66>
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	09db      	lsrs	r3, r3, #7
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d004      	beq.n	80043ae <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	4798      	blx	r3
    return;
 80043ac:	e0c6      	b.n	800453c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	095b      	lsrs	r3, r3, #5
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10c      	bne.n	80043d4 <HAL_SPI_IRQHandler+0x8c>
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	099b      	lsrs	r3, r3, #6
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d106      	bne.n	80043d4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	0a1b      	lsrs	r3, r3, #8
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 80b4 	beq.w	800453c <HAL_SPI_IRQHandler+0x1f4>
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	095b      	lsrs	r3, r3, #5
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 80ad 	beq.w	800453c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	099b      	lsrs	r3, r3, #6
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d023      	beq.n	8004436 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b03      	cmp	r3, #3
 80043f8:	d011      	beq.n	800441e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fe:	f043 0204 	orr.w	r2, r3, #4
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004406:	2300      	movs	r3, #0
 8004408:	617b      	str	r3, [r7, #20]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	617b      	str	r3, [r7, #20]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	e00b      	b.n	8004436 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800441e:	2300      	movs	r3, #0
 8004420:	613b      	str	r3, [r7, #16]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	613b      	str	r3, [r7, #16]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	693b      	ldr	r3, [r7, #16]
        return;
 8004434:	e082      	b.n	800453c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	095b      	lsrs	r3, r3, #5
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d014      	beq.n	800446c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004446:	f043 0201 	orr.w	r2, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	0a1b      	lsrs	r3, r3, #8
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00c      	beq.n	8004492 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447c:	f043 0208 	orr.w	r2, r3, #8
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004484:	2300      	movs	r3, #0
 8004486:	60bb      	str	r3, [r7, #8]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	60bb      	str	r3, [r7, #8]
 8004490:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004496:	2b00      	cmp	r3, #0
 8004498:	d04f      	beq.n	800453a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044a8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d104      	bne.n	80044c6 <HAL_SPI_IRQHandler+0x17e>
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d034      	beq.n	8004530 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 0203 	bic.w	r2, r2, #3
 80044d4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d011      	beq.n	8004502 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e2:	4a18      	ldr	r2, [pc, #96]	; (8004544 <HAL_SPI_IRQHandler+0x1fc>)
 80044e4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fe f9e3 	bl	80028b6 <HAL_DMA_Abort_IT>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d005      	beq.n	8004502 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004506:	2b00      	cmp	r3, #0
 8004508:	d016      	beq.n	8004538 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800450e:	4a0d      	ldr	r2, [pc, #52]	; (8004544 <HAL_SPI_IRQHandler+0x1fc>)
 8004510:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004516:	4618      	mov	r0, r3
 8004518:	f7fe f9cd 	bl	80028b6 <HAL_DMA_Abort_IT>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00a      	beq.n	8004538 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004526:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800452e:	e003      	b.n	8004538 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f809 	bl	8004548 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004536:	e000      	b.n	800453a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004538:	bf00      	nop
    return;
 800453a:	bf00      	nop
  }
}
 800453c:	3720      	adds	r7, #32
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	08004579 	.word	0x08004579

08004548 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800456a:	b2db      	uxtb	r3, r3
}
 800456c:	4618      	mov	r0, r3
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004584:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f7ff ffd8 	bl	8004548 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004598:	bf00      	nop
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	603b      	str	r3, [r7, #0]
 80045ac:	4613      	mov	r3, r2
 80045ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045b0:	f7fe f80e 	bl	80025d0 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b8:	1a9b      	subs	r3, r3, r2
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	4413      	add	r3, r2
 80045be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045c0:	f7fe f806 	bl	80025d0 <HAL_GetTick>
 80045c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045c6:	4b39      	ldr	r3, [pc, #228]	; (80046ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	015b      	lsls	r3, r3, #5
 80045cc:	0d1b      	lsrs	r3, r3, #20
 80045ce:	69fa      	ldr	r2, [r7, #28]
 80045d0:	fb02 f303 	mul.w	r3, r2, r3
 80045d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045d6:	e054      	b.n	8004682 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045de:	d050      	beq.n	8004682 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045e0:	f7fd fff6 	bl	80025d0 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	69fa      	ldr	r2, [r7, #28]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d902      	bls.n	80045f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d13d      	bne.n	8004672 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004604:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800460e:	d111      	bne.n	8004634 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004618:	d004      	beq.n	8004624 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004622:	d107      	bne.n	8004634 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004632:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004638:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800463c:	d10f      	bne.n	800465e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800465c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e017      	b.n	80046a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	3b01      	subs	r3, #1
 8004680:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	4013      	ands	r3, r2
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	429a      	cmp	r2, r3
 8004690:	bf0c      	ite	eq
 8004692:	2301      	moveq	r3, #1
 8004694:	2300      	movne	r3, #0
 8004696:	b2db      	uxtb	r3, r3
 8004698:	461a      	mov	r2, r3
 800469a:	79fb      	ldrb	r3, [r7, #7]
 800469c:	429a      	cmp	r2, r3
 800469e:	d19b      	bne.n	80045d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3720      	adds	r7, #32
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	20000028 	.word	0x20000028

080046b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b088      	sub	sp, #32
 80046b4:	af02      	add	r7, sp, #8
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80046bc:	4b1b      	ldr	r3, [pc, #108]	; (800472c <SPI_EndRxTxTransaction+0x7c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a1b      	ldr	r2, [pc, #108]	; (8004730 <SPI_EndRxTxTransaction+0x80>)
 80046c2:	fba2 2303 	umull	r2, r3, r2, r3
 80046c6:	0d5b      	lsrs	r3, r3, #21
 80046c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046cc:	fb02 f303 	mul.w	r3, r2, r3
 80046d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046da:	d112      	bne.n	8004702 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2200      	movs	r2, #0
 80046e4:	2180      	movs	r1, #128	; 0x80
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f7ff ff5a 	bl	80045a0 <SPI_WaitFlagStateUntilTimeout>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d016      	beq.n	8004720 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f6:	f043 0220 	orr.w	r2, r3, #32
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e00f      	b.n	8004722 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00a      	beq.n	800471e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	3b01      	subs	r3, #1
 800470c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004718:	2b80      	cmp	r3, #128	; 0x80
 800471a:	d0f2      	beq.n	8004702 <SPI_EndRxTxTransaction+0x52>
 800471c:	e000      	b.n	8004720 <SPI_EndRxTxTransaction+0x70>
        break;
 800471e:	bf00      	nop
  }

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	20000028 	.word	0x20000028
 8004730:	165e9f81 	.word	0x165e9f81

08004734 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e03f      	b.n	80047c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d106      	bne.n	8004760 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7fd fe60 	bl	8002420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2224      	movs	r2, #36	; 0x24
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004776:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f929 	bl	80049d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	691a      	ldr	r2, [r3, #16]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800478c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	695a      	ldr	r2, [r3, #20]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800479c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68da      	ldr	r2, [r3, #12]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b08a      	sub	sp, #40	; 0x28
 80047d2:	af02      	add	r7, sp, #8
 80047d4:	60f8      	str	r0, [r7, #12]
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	603b      	str	r3, [r7, #0]
 80047da:	4613      	mov	r3, r2
 80047dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047de:	2300      	movs	r3, #0
 80047e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b20      	cmp	r3, #32
 80047ec:	d17c      	bne.n	80048e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <HAL_UART_Transmit+0x2c>
 80047f4:	88fb      	ldrh	r3, [r7, #6]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e075      	b.n	80048ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004804:	2b01      	cmp	r3, #1
 8004806:	d101      	bne.n	800480c <HAL_UART_Transmit+0x3e>
 8004808:	2302      	movs	r3, #2
 800480a:	e06e      	b.n	80048ea <HAL_UART_Transmit+0x11c>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2221      	movs	r2, #33	; 0x21
 800481e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004822:	f7fd fed5 	bl	80025d0 <HAL_GetTick>
 8004826:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	88fa      	ldrh	r2, [r7, #6]
 800482c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	88fa      	ldrh	r2, [r7, #6]
 8004832:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800483c:	d108      	bne.n	8004850 <HAL_UART_Transmit+0x82>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d104      	bne.n	8004850 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004846:	2300      	movs	r3, #0
 8004848:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	61bb      	str	r3, [r7, #24]
 800484e:	e003      	b.n	8004858 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004854:	2300      	movs	r3, #0
 8004856:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004860:	e02a      	b.n	80048b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	2200      	movs	r2, #0
 800486a:	2180      	movs	r1, #128	; 0x80
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f000 f840 	bl	80048f2 <UART_WaitOnFlagUntilTimeout>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e036      	b.n	80048ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10b      	bne.n	800489a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	461a      	mov	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004890:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	3302      	adds	r3, #2
 8004896:	61bb      	str	r3, [r7, #24]
 8004898:	e007      	b.n	80048aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	781a      	ldrb	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	3301      	adds	r3, #1
 80048a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	3b01      	subs	r3, #1
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1cf      	bne.n	8004862 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2200      	movs	r2, #0
 80048ca:	2140      	movs	r1, #64	; 0x40
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f000 f810 	bl	80048f2 <UART_WaitOnFlagUntilTimeout>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e006      	b.n	80048ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2220      	movs	r2, #32
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048e4:	2300      	movs	r3, #0
 80048e6:	e000      	b.n	80048ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048e8:	2302      	movs	r3, #2
  }
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3720      	adds	r7, #32
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b090      	sub	sp, #64	; 0x40
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	60f8      	str	r0, [r7, #12]
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	603b      	str	r3, [r7, #0]
 80048fe:	4613      	mov	r3, r2
 8004900:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004902:	e050      	b.n	80049a6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004904:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490a:	d04c      	beq.n	80049a6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800490c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800490e:	2b00      	cmp	r3, #0
 8004910:	d007      	beq.n	8004922 <UART_WaitOnFlagUntilTimeout+0x30>
 8004912:	f7fd fe5d 	bl	80025d0 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800491e:	429a      	cmp	r2, r3
 8004920:	d241      	bcs.n	80049a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	330c      	adds	r3, #12
 8004928:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492c:	e853 3f00 	ldrex	r3, [r3]
 8004930:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004938:	63fb      	str	r3, [r7, #60]	; 0x3c
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	330c      	adds	r3, #12
 8004940:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004942:	637a      	str	r2, [r7, #52]	; 0x34
 8004944:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004946:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004948:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800494a:	e841 2300 	strex	r3, r2, [r1]
 800494e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1e5      	bne.n	8004922 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3314      	adds	r3, #20
 800495c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	e853 3f00 	ldrex	r3, [r3]
 8004964:	613b      	str	r3, [r7, #16]
   return(result);
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	f023 0301 	bic.w	r3, r3, #1
 800496c:	63bb      	str	r3, [r7, #56]	; 0x38
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	3314      	adds	r3, #20
 8004974:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004976:	623a      	str	r2, [r7, #32]
 8004978:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497a:	69f9      	ldr	r1, [r7, #28]
 800497c:	6a3a      	ldr	r2, [r7, #32]
 800497e:	e841 2300 	strex	r3, r2, [r1]
 8004982:	61bb      	str	r3, [r7, #24]
   return(result);
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1e5      	bne.n	8004956 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2220      	movs	r2, #32
 800498e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2220      	movs	r2, #32
 8004996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e00f      	b.n	80049c6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	4013      	ands	r3, r2
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	bf0c      	ite	eq
 80049b6:	2301      	moveq	r3, #1
 80049b8:	2300      	movne	r3, #0
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	461a      	mov	r2, r3
 80049be:	79fb      	ldrb	r3, [r7, #7]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d09f      	beq.n	8004904 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3740      	adds	r7, #64	; 0x40
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d4:	b09f      	sub	sp, #124	; 0x7c
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e6:	68d9      	ldr	r1, [r3, #12]
 80049e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	ea40 0301 	orr.w	r3, r0, r1
 80049f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f4:	689a      	ldr	r2, [r3, #8]
 80049f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	431a      	orrs	r2, r3
 8004a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a14:	f021 010c 	bic.w	r1, r1, #12
 8004a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a1e:	430b      	orrs	r3, r1
 8004a20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a2e:	6999      	ldr	r1, [r3, #24]
 8004a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	ea40 0301 	orr.w	r3, r0, r1
 8004a38:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	4bc5      	ldr	r3, [pc, #788]	; (8004d54 <UART_SetConfig+0x384>)
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d004      	beq.n	8004a4e <UART_SetConfig+0x7e>
 8004a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	4bc3      	ldr	r3, [pc, #780]	; (8004d58 <UART_SetConfig+0x388>)
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d103      	bne.n	8004a56 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a4e:	f7ff faa1 	bl	8003f94 <HAL_RCC_GetPCLK2Freq>
 8004a52:	6778      	str	r0, [r7, #116]	; 0x74
 8004a54:	e002      	b.n	8004a5c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a56:	f7ff fa89 	bl	8003f6c <HAL_RCC_GetPCLK1Freq>
 8004a5a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a64:	f040 80b6 	bne.w	8004bd4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a6a:	461c      	mov	r4, r3
 8004a6c:	f04f 0500 	mov.w	r5, #0
 8004a70:	4622      	mov	r2, r4
 8004a72:	462b      	mov	r3, r5
 8004a74:	1891      	adds	r1, r2, r2
 8004a76:	6439      	str	r1, [r7, #64]	; 0x40
 8004a78:	415b      	adcs	r3, r3
 8004a7a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a7c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a80:	1912      	adds	r2, r2, r4
 8004a82:	eb45 0303 	adc.w	r3, r5, r3
 8004a86:	f04f 0000 	mov.w	r0, #0
 8004a8a:	f04f 0100 	mov.w	r1, #0
 8004a8e:	00d9      	lsls	r1, r3, #3
 8004a90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a94:	00d0      	lsls	r0, r2, #3
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	1911      	adds	r1, r2, r4
 8004a9c:	6639      	str	r1, [r7, #96]	; 0x60
 8004a9e:	416b      	adcs	r3, r5
 8004aa0:	667b      	str	r3, [r7, #100]	; 0x64
 8004aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	1891      	adds	r1, r2, r2
 8004aae:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ab0:	415b      	adcs	r3, r3
 8004ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ab4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ab8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004abc:	f7fb fbe0 	bl	8000280 <__aeabi_uldivmod>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4ba5      	ldr	r3, [pc, #660]	; (8004d5c <UART_SetConfig+0x38c>)
 8004ac6:	fba3 2302 	umull	r2, r3, r3, r2
 8004aca:	095b      	lsrs	r3, r3, #5
 8004acc:	011e      	lsls	r6, r3, #4
 8004ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ad0:	461c      	mov	r4, r3
 8004ad2:	f04f 0500 	mov.w	r5, #0
 8004ad6:	4622      	mov	r2, r4
 8004ad8:	462b      	mov	r3, r5
 8004ada:	1891      	adds	r1, r2, r2
 8004adc:	6339      	str	r1, [r7, #48]	; 0x30
 8004ade:	415b      	adcs	r3, r3
 8004ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ae2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004ae6:	1912      	adds	r2, r2, r4
 8004ae8:	eb45 0303 	adc.w	r3, r5, r3
 8004aec:	f04f 0000 	mov.w	r0, #0
 8004af0:	f04f 0100 	mov.w	r1, #0
 8004af4:	00d9      	lsls	r1, r3, #3
 8004af6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004afa:	00d0      	lsls	r0, r2, #3
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	1911      	adds	r1, r2, r4
 8004b02:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b04:	416b      	adcs	r3, r5
 8004b06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	f04f 0300 	mov.w	r3, #0
 8004b12:	1891      	adds	r1, r2, r2
 8004b14:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b16:	415b      	adcs	r3, r3
 8004b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b1e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004b22:	f7fb fbad 	bl	8000280 <__aeabi_uldivmod>
 8004b26:	4602      	mov	r2, r0
 8004b28:	460b      	mov	r3, r1
 8004b2a:	4b8c      	ldr	r3, [pc, #560]	; (8004d5c <UART_SetConfig+0x38c>)
 8004b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b30:	095b      	lsrs	r3, r3, #5
 8004b32:	2164      	movs	r1, #100	; 0x64
 8004b34:	fb01 f303 	mul.w	r3, r1, r3
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	3332      	adds	r3, #50	; 0x32
 8004b3e:	4a87      	ldr	r2, [pc, #540]	; (8004d5c <UART_SetConfig+0x38c>)
 8004b40:	fba2 2303 	umull	r2, r3, r2, r3
 8004b44:	095b      	lsrs	r3, r3, #5
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b4c:	441e      	add	r6, r3
 8004b4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b50:	4618      	mov	r0, r3
 8004b52:	f04f 0100 	mov.w	r1, #0
 8004b56:	4602      	mov	r2, r0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	1894      	adds	r4, r2, r2
 8004b5c:	623c      	str	r4, [r7, #32]
 8004b5e:	415b      	adcs	r3, r3
 8004b60:	627b      	str	r3, [r7, #36]	; 0x24
 8004b62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b66:	1812      	adds	r2, r2, r0
 8004b68:	eb41 0303 	adc.w	r3, r1, r3
 8004b6c:	f04f 0400 	mov.w	r4, #0
 8004b70:	f04f 0500 	mov.w	r5, #0
 8004b74:	00dd      	lsls	r5, r3, #3
 8004b76:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b7a:	00d4      	lsls	r4, r2, #3
 8004b7c:	4622      	mov	r2, r4
 8004b7e:	462b      	mov	r3, r5
 8004b80:	1814      	adds	r4, r2, r0
 8004b82:	653c      	str	r4, [r7, #80]	; 0x50
 8004b84:	414b      	adcs	r3, r1
 8004b86:	657b      	str	r3, [r7, #84]	; 0x54
 8004b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	f04f 0300 	mov.w	r3, #0
 8004b92:	1891      	adds	r1, r2, r2
 8004b94:	61b9      	str	r1, [r7, #24]
 8004b96:	415b      	adcs	r3, r3
 8004b98:	61fb      	str	r3, [r7, #28]
 8004b9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b9e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004ba2:	f7fb fb6d 	bl	8000280 <__aeabi_uldivmod>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	460b      	mov	r3, r1
 8004baa:	4b6c      	ldr	r3, [pc, #432]	; (8004d5c <UART_SetConfig+0x38c>)
 8004bac:	fba3 1302 	umull	r1, r3, r3, r2
 8004bb0:	095b      	lsrs	r3, r3, #5
 8004bb2:	2164      	movs	r1, #100	; 0x64
 8004bb4:	fb01 f303 	mul.w	r3, r1, r3
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	3332      	adds	r3, #50	; 0x32
 8004bbe:	4a67      	ldr	r2, [pc, #412]	; (8004d5c <UART_SetConfig+0x38c>)
 8004bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc4:	095b      	lsrs	r3, r3, #5
 8004bc6:	f003 0207 	and.w	r2, r3, #7
 8004bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4432      	add	r2, r6
 8004bd0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bd2:	e0b9      	b.n	8004d48 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bd6:	461c      	mov	r4, r3
 8004bd8:	f04f 0500 	mov.w	r5, #0
 8004bdc:	4622      	mov	r2, r4
 8004bde:	462b      	mov	r3, r5
 8004be0:	1891      	adds	r1, r2, r2
 8004be2:	6139      	str	r1, [r7, #16]
 8004be4:	415b      	adcs	r3, r3
 8004be6:	617b      	str	r3, [r7, #20]
 8004be8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004bec:	1912      	adds	r2, r2, r4
 8004bee:	eb45 0303 	adc.w	r3, r5, r3
 8004bf2:	f04f 0000 	mov.w	r0, #0
 8004bf6:	f04f 0100 	mov.w	r1, #0
 8004bfa:	00d9      	lsls	r1, r3, #3
 8004bfc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c00:	00d0      	lsls	r0, r2, #3
 8004c02:	4602      	mov	r2, r0
 8004c04:	460b      	mov	r3, r1
 8004c06:	eb12 0804 	adds.w	r8, r2, r4
 8004c0a:	eb43 0905 	adc.w	r9, r3, r5
 8004c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f04f 0100 	mov.w	r1, #0
 8004c18:	f04f 0200 	mov.w	r2, #0
 8004c1c:	f04f 0300 	mov.w	r3, #0
 8004c20:	008b      	lsls	r3, r1, #2
 8004c22:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c26:	0082      	lsls	r2, r0, #2
 8004c28:	4640      	mov	r0, r8
 8004c2a:	4649      	mov	r1, r9
 8004c2c:	f7fb fb28 	bl	8000280 <__aeabi_uldivmod>
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	4b49      	ldr	r3, [pc, #292]	; (8004d5c <UART_SetConfig+0x38c>)
 8004c36:	fba3 2302 	umull	r2, r3, r3, r2
 8004c3a:	095b      	lsrs	r3, r3, #5
 8004c3c:	011e      	lsls	r6, r3, #4
 8004c3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c40:	4618      	mov	r0, r3
 8004c42:	f04f 0100 	mov.w	r1, #0
 8004c46:	4602      	mov	r2, r0
 8004c48:	460b      	mov	r3, r1
 8004c4a:	1894      	adds	r4, r2, r2
 8004c4c:	60bc      	str	r4, [r7, #8]
 8004c4e:	415b      	adcs	r3, r3
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c56:	1812      	adds	r2, r2, r0
 8004c58:	eb41 0303 	adc.w	r3, r1, r3
 8004c5c:	f04f 0400 	mov.w	r4, #0
 8004c60:	f04f 0500 	mov.w	r5, #0
 8004c64:	00dd      	lsls	r5, r3, #3
 8004c66:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c6a:	00d4      	lsls	r4, r2, #3
 8004c6c:	4622      	mov	r2, r4
 8004c6e:	462b      	mov	r3, r5
 8004c70:	1814      	adds	r4, r2, r0
 8004c72:	64bc      	str	r4, [r7, #72]	; 0x48
 8004c74:	414b      	adcs	r3, r1
 8004c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f04f 0100 	mov.w	r1, #0
 8004c82:	f04f 0200 	mov.w	r2, #0
 8004c86:	f04f 0300 	mov.w	r3, #0
 8004c8a:	008b      	lsls	r3, r1, #2
 8004c8c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c90:	0082      	lsls	r2, r0, #2
 8004c92:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004c96:	f7fb faf3 	bl	8000280 <__aeabi_uldivmod>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	4b2f      	ldr	r3, [pc, #188]	; (8004d5c <UART_SetConfig+0x38c>)
 8004ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ca4:	095b      	lsrs	r3, r3, #5
 8004ca6:	2164      	movs	r1, #100	; 0x64
 8004ca8:	fb01 f303 	mul.w	r3, r1, r3
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	011b      	lsls	r3, r3, #4
 8004cb0:	3332      	adds	r3, #50	; 0x32
 8004cb2:	4a2a      	ldr	r2, [pc, #168]	; (8004d5c <UART_SetConfig+0x38c>)
 8004cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb8:	095b      	lsrs	r3, r3, #5
 8004cba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cbe:	441e      	add	r6, r3
 8004cc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f04f 0100 	mov.w	r1, #0
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	1894      	adds	r4, r2, r2
 8004cce:	603c      	str	r4, [r7, #0]
 8004cd0:	415b      	adcs	r3, r3
 8004cd2:	607b      	str	r3, [r7, #4]
 8004cd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cd8:	1812      	adds	r2, r2, r0
 8004cda:	eb41 0303 	adc.w	r3, r1, r3
 8004cde:	f04f 0400 	mov.w	r4, #0
 8004ce2:	f04f 0500 	mov.w	r5, #0
 8004ce6:	00dd      	lsls	r5, r3, #3
 8004ce8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004cec:	00d4      	lsls	r4, r2, #3
 8004cee:	4622      	mov	r2, r4
 8004cf0:	462b      	mov	r3, r5
 8004cf2:	eb12 0a00 	adds.w	sl, r2, r0
 8004cf6:	eb43 0b01 	adc.w	fp, r3, r1
 8004cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f04f 0100 	mov.w	r1, #0
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	008b      	lsls	r3, r1, #2
 8004d0e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d12:	0082      	lsls	r2, r0, #2
 8004d14:	4650      	mov	r0, sl
 8004d16:	4659      	mov	r1, fp
 8004d18:	f7fb fab2 	bl	8000280 <__aeabi_uldivmod>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4b0e      	ldr	r3, [pc, #56]	; (8004d5c <UART_SetConfig+0x38c>)
 8004d22:	fba3 1302 	umull	r1, r3, r3, r2
 8004d26:	095b      	lsrs	r3, r3, #5
 8004d28:	2164      	movs	r1, #100	; 0x64
 8004d2a:	fb01 f303 	mul.w	r3, r1, r3
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	3332      	adds	r3, #50	; 0x32
 8004d34:	4a09      	ldr	r2, [pc, #36]	; (8004d5c <UART_SetConfig+0x38c>)
 8004d36:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3a:	095b      	lsrs	r3, r3, #5
 8004d3c:	f003 020f 	and.w	r2, r3, #15
 8004d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4432      	add	r2, r6
 8004d46:	609a      	str	r2, [r3, #8]
}
 8004d48:	bf00      	nop
 8004d4a:	377c      	adds	r7, #124	; 0x7c
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d52:	bf00      	nop
 8004d54:	40011000 	.word	0x40011000
 8004d58:	40011400 	.word	0x40011400
 8004d5c:	51eb851f 	.word	0x51eb851f

08004d60 <__assert_func>:
 8004d60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004d62:	4614      	mov	r4, r2
 8004d64:	461a      	mov	r2, r3
 8004d66:	4b09      	ldr	r3, [pc, #36]	; (8004d8c <__assert_func+0x2c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4605      	mov	r5, r0
 8004d6c:	68d8      	ldr	r0, [r3, #12]
 8004d6e:	b14c      	cbz	r4, 8004d84 <__assert_func+0x24>
 8004d70:	4b07      	ldr	r3, [pc, #28]	; (8004d90 <__assert_func+0x30>)
 8004d72:	9100      	str	r1, [sp, #0]
 8004d74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004d78:	4906      	ldr	r1, [pc, #24]	; (8004d94 <__assert_func+0x34>)
 8004d7a:	462b      	mov	r3, r5
 8004d7c:	f000 f814 	bl	8004da8 <fiprintf>
 8004d80:	f000 fc16 	bl	80055b0 <abort>
 8004d84:	4b04      	ldr	r3, [pc, #16]	; (8004d98 <__assert_func+0x38>)
 8004d86:	461c      	mov	r4, r3
 8004d88:	e7f3      	b.n	8004d72 <__assert_func+0x12>
 8004d8a:	bf00      	nop
 8004d8c:	20000034 	.word	0x20000034
 8004d90:	08006b7c 	.word	0x08006b7c
 8004d94:	08006b89 	.word	0x08006b89
 8004d98:	08006bb7 	.word	0x08006bb7

08004d9c <__errno>:
 8004d9c:	4b01      	ldr	r3, [pc, #4]	; (8004da4 <__errno+0x8>)
 8004d9e:	6818      	ldr	r0, [r3, #0]
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	20000034 	.word	0x20000034

08004da8 <fiprintf>:
 8004da8:	b40e      	push	{r1, r2, r3}
 8004daa:	b503      	push	{r0, r1, lr}
 8004dac:	4601      	mov	r1, r0
 8004dae:	ab03      	add	r3, sp, #12
 8004db0:	4805      	ldr	r0, [pc, #20]	; (8004dc8 <fiprintf+0x20>)
 8004db2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004db6:	6800      	ldr	r0, [r0, #0]
 8004db8:	9301      	str	r3, [sp, #4]
 8004dba:	f000 f85d 	bl	8004e78 <_vfiprintf_r>
 8004dbe:	b002      	add	sp, #8
 8004dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004dc4:	b003      	add	sp, #12
 8004dc6:	4770      	bx	lr
 8004dc8:	20000034 	.word	0x20000034

08004dcc <__libc_init_array>:
 8004dcc:	b570      	push	{r4, r5, r6, lr}
 8004dce:	4d0d      	ldr	r5, [pc, #52]	; (8004e04 <__libc_init_array+0x38>)
 8004dd0:	4c0d      	ldr	r4, [pc, #52]	; (8004e08 <__libc_init_array+0x3c>)
 8004dd2:	1b64      	subs	r4, r4, r5
 8004dd4:	10a4      	asrs	r4, r4, #2
 8004dd6:	2600      	movs	r6, #0
 8004dd8:	42a6      	cmp	r6, r4
 8004dda:	d109      	bne.n	8004df0 <__libc_init_array+0x24>
 8004ddc:	4d0b      	ldr	r5, [pc, #44]	; (8004e0c <__libc_init_array+0x40>)
 8004dde:	4c0c      	ldr	r4, [pc, #48]	; (8004e10 <__libc_init_array+0x44>)
 8004de0:	f000 ffc2 	bl	8005d68 <_init>
 8004de4:	1b64      	subs	r4, r4, r5
 8004de6:	10a4      	asrs	r4, r4, #2
 8004de8:	2600      	movs	r6, #0
 8004dea:	42a6      	cmp	r6, r4
 8004dec:	d105      	bne.n	8004dfa <__libc_init_array+0x2e>
 8004dee:	bd70      	pop	{r4, r5, r6, pc}
 8004df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004df4:	4798      	blx	r3
 8004df6:	3601      	adds	r6, #1
 8004df8:	e7ee      	b.n	8004dd8 <__libc_init_array+0xc>
 8004dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dfe:	4798      	blx	r3
 8004e00:	3601      	adds	r6, #1
 8004e02:	e7f2      	b.n	8004dea <__libc_init_array+0x1e>
 8004e04:	08006c58 	.word	0x08006c58
 8004e08:	08006c58 	.word	0x08006c58
 8004e0c:	08006c58 	.word	0x08006c58
 8004e10:	08006c5c 	.word	0x08006c5c

08004e14 <memset>:
 8004e14:	4402      	add	r2, r0
 8004e16:	4603      	mov	r3, r0
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d100      	bne.n	8004e1e <memset+0xa>
 8004e1c:	4770      	bx	lr
 8004e1e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e22:	e7f9      	b.n	8004e18 <memset+0x4>

08004e24 <__sfputc_r>:
 8004e24:	6893      	ldr	r3, [r2, #8]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	b410      	push	{r4}
 8004e2c:	6093      	str	r3, [r2, #8]
 8004e2e:	da08      	bge.n	8004e42 <__sfputc_r+0x1e>
 8004e30:	6994      	ldr	r4, [r2, #24]
 8004e32:	42a3      	cmp	r3, r4
 8004e34:	db01      	blt.n	8004e3a <__sfputc_r+0x16>
 8004e36:	290a      	cmp	r1, #10
 8004e38:	d103      	bne.n	8004e42 <__sfputc_r+0x1e>
 8004e3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e3e:	f000 baf7 	b.w	8005430 <__swbuf_r>
 8004e42:	6813      	ldr	r3, [r2, #0]
 8004e44:	1c58      	adds	r0, r3, #1
 8004e46:	6010      	str	r0, [r2, #0]
 8004e48:	7019      	strb	r1, [r3, #0]
 8004e4a:	4608      	mov	r0, r1
 8004e4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <__sfputs_r>:
 8004e52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e54:	4606      	mov	r6, r0
 8004e56:	460f      	mov	r7, r1
 8004e58:	4614      	mov	r4, r2
 8004e5a:	18d5      	adds	r5, r2, r3
 8004e5c:	42ac      	cmp	r4, r5
 8004e5e:	d101      	bne.n	8004e64 <__sfputs_r+0x12>
 8004e60:	2000      	movs	r0, #0
 8004e62:	e007      	b.n	8004e74 <__sfputs_r+0x22>
 8004e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e68:	463a      	mov	r2, r7
 8004e6a:	4630      	mov	r0, r6
 8004e6c:	f7ff ffda 	bl	8004e24 <__sfputc_r>
 8004e70:	1c43      	adds	r3, r0, #1
 8004e72:	d1f3      	bne.n	8004e5c <__sfputs_r+0xa>
 8004e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e78 <_vfiprintf_r>:
 8004e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e7c:	460d      	mov	r5, r1
 8004e7e:	b09d      	sub	sp, #116	; 0x74
 8004e80:	4614      	mov	r4, r2
 8004e82:	4698      	mov	r8, r3
 8004e84:	4606      	mov	r6, r0
 8004e86:	b118      	cbz	r0, 8004e90 <_vfiprintf_r+0x18>
 8004e88:	6983      	ldr	r3, [r0, #24]
 8004e8a:	b90b      	cbnz	r3, 8004e90 <_vfiprintf_r+0x18>
 8004e8c:	f000 fcb2 	bl	80057f4 <__sinit>
 8004e90:	4b89      	ldr	r3, [pc, #548]	; (80050b8 <_vfiprintf_r+0x240>)
 8004e92:	429d      	cmp	r5, r3
 8004e94:	d11b      	bne.n	8004ece <_vfiprintf_r+0x56>
 8004e96:	6875      	ldr	r5, [r6, #4]
 8004e98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e9a:	07d9      	lsls	r1, r3, #31
 8004e9c:	d405      	bmi.n	8004eaa <_vfiprintf_r+0x32>
 8004e9e:	89ab      	ldrh	r3, [r5, #12]
 8004ea0:	059a      	lsls	r2, r3, #22
 8004ea2:	d402      	bmi.n	8004eaa <_vfiprintf_r+0x32>
 8004ea4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ea6:	f000 fd43 	bl	8005930 <__retarget_lock_acquire_recursive>
 8004eaa:	89ab      	ldrh	r3, [r5, #12]
 8004eac:	071b      	lsls	r3, r3, #28
 8004eae:	d501      	bpl.n	8004eb4 <_vfiprintf_r+0x3c>
 8004eb0:	692b      	ldr	r3, [r5, #16]
 8004eb2:	b9eb      	cbnz	r3, 8004ef0 <_vfiprintf_r+0x78>
 8004eb4:	4629      	mov	r1, r5
 8004eb6:	4630      	mov	r0, r6
 8004eb8:	f000 fb0c 	bl	80054d4 <__swsetup_r>
 8004ebc:	b1c0      	cbz	r0, 8004ef0 <_vfiprintf_r+0x78>
 8004ebe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ec0:	07dc      	lsls	r4, r3, #31
 8004ec2:	d50e      	bpl.n	8004ee2 <_vfiprintf_r+0x6a>
 8004ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec8:	b01d      	add	sp, #116	; 0x74
 8004eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ece:	4b7b      	ldr	r3, [pc, #492]	; (80050bc <_vfiprintf_r+0x244>)
 8004ed0:	429d      	cmp	r5, r3
 8004ed2:	d101      	bne.n	8004ed8 <_vfiprintf_r+0x60>
 8004ed4:	68b5      	ldr	r5, [r6, #8]
 8004ed6:	e7df      	b.n	8004e98 <_vfiprintf_r+0x20>
 8004ed8:	4b79      	ldr	r3, [pc, #484]	; (80050c0 <_vfiprintf_r+0x248>)
 8004eda:	429d      	cmp	r5, r3
 8004edc:	bf08      	it	eq
 8004ede:	68f5      	ldreq	r5, [r6, #12]
 8004ee0:	e7da      	b.n	8004e98 <_vfiprintf_r+0x20>
 8004ee2:	89ab      	ldrh	r3, [r5, #12]
 8004ee4:	0598      	lsls	r0, r3, #22
 8004ee6:	d4ed      	bmi.n	8004ec4 <_vfiprintf_r+0x4c>
 8004ee8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004eea:	f000 fd22 	bl	8005932 <__retarget_lock_release_recursive>
 8004eee:	e7e9      	b.n	8004ec4 <_vfiprintf_r+0x4c>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ef4:	2320      	movs	r3, #32
 8004ef6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004efa:	f8cd 800c 	str.w	r8, [sp, #12]
 8004efe:	2330      	movs	r3, #48	; 0x30
 8004f00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80050c4 <_vfiprintf_r+0x24c>
 8004f04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f08:	f04f 0901 	mov.w	r9, #1
 8004f0c:	4623      	mov	r3, r4
 8004f0e:	469a      	mov	sl, r3
 8004f10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f14:	b10a      	cbz	r2, 8004f1a <_vfiprintf_r+0xa2>
 8004f16:	2a25      	cmp	r2, #37	; 0x25
 8004f18:	d1f9      	bne.n	8004f0e <_vfiprintf_r+0x96>
 8004f1a:	ebba 0b04 	subs.w	fp, sl, r4
 8004f1e:	d00b      	beq.n	8004f38 <_vfiprintf_r+0xc0>
 8004f20:	465b      	mov	r3, fp
 8004f22:	4622      	mov	r2, r4
 8004f24:	4629      	mov	r1, r5
 8004f26:	4630      	mov	r0, r6
 8004f28:	f7ff ff93 	bl	8004e52 <__sfputs_r>
 8004f2c:	3001      	adds	r0, #1
 8004f2e:	f000 80aa 	beq.w	8005086 <_vfiprintf_r+0x20e>
 8004f32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f34:	445a      	add	r2, fp
 8004f36:	9209      	str	r2, [sp, #36]	; 0x24
 8004f38:	f89a 3000 	ldrb.w	r3, [sl]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 80a2 	beq.w	8005086 <_vfiprintf_r+0x20e>
 8004f42:	2300      	movs	r3, #0
 8004f44:	f04f 32ff 	mov.w	r2, #4294967295
 8004f48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f4c:	f10a 0a01 	add.w	sl, sl, #1
 8004f50:	9304      	str	r3, [sp, #16]
 8004f52:	9307      	str	r3, [sp, #28]
 8004f54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f58:	931a      	str	r3, [sp, #104]	; 0x68
 8004f5a:	4654      	mov	r4, sl
 8004f5c:	2205      	movs	r2, #5
 8004f5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f62:	4858      	ldr	r0, [pc, #352]	; (80050c4 <_vfiprintf_r+0x24c>)
 8004f64:	f7fb f93c 	bl	80001e0 <memchr>
 8004f68:	9a04      	ldr	r2, [sp, #16]
 8004f6a:	b9d8      	cbnz	r0, 8004fa4 <_vfiprintf_r+0x12c>
 8004f6c:	06d1      	lsls	r1, r2, #27
 8004f6e:	bf44      	itt	mi
 8004f70:	2320      	movmi	r3, #32
 8004f72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f76:	0713      	lsls	r3, r2, #28
 8004f78:	bf44      	itt	mi
 8004f7a:	232b      	movmi	r3, #43	; 0x2b
 8004f7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f80:	f89a 3000 	ldrb.w	r3, [sl]
 8004f84:	2b2a      	cmp	r3, #42	; 0x2a
 8004f86:	d015      	beq.n	8004fb4 <_vfiprintf_r+0x13c>
 8004f88:	9a07      	ldr	r2, [sp, #28]
 8004f8a:	4654      	mov	r4, sl
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	f04f 0c0a 	mov.w	ip, #10
 8004f92:	4621      	mov	r1, r4
 8004f94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f98:	3b30      	subs	r3, #48	; 0x30
 8004f9a:	2b09      	cmp	r3, #9
 8004f9c:	d94e      	bls.n	800503c <_vfiprintf_r+0x1c4>
 8004f9e:	b1b0      	cbz	r0, 8004fce <_vfiprintf_r+0x156>
 8004fa0:	9207      	str	r2, [sp, #28]
 8004fa2:	e014      	b.n	8004fce <_vfiprintf_r+0x156>
 8004fa4:	eba0 0308 	sub.w	r3, r0, r8
 8004fa8:	fa09 f303 	lsl.w	r3, r9, r3
 8004fac:	4313      	orrs	r3, r2
 8004fae:	9304      	str	r3, [sp, #16]
 8004fb0:	46a2      	mov	sl, r4
 8004fb2:	e7d2      	b.n	8004f5a <_vfiprintf_r+0xe2>
 8004fb4:	9b03      	ldr	r3, [sp, #12]
 8004fb6:	1d19      	adds	r1, r3, #4
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	9103      	str	r1, [sp, #12]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	bfbb      	ittet	lt
 8004fc0:	425b      	neglt	r3, r3
 8004fc2:	f042 0202 	orrlt.w	r2, r2, #2
 8004fc6:	9307      	strge	r3, [sp, #28]
 8004fc8:	9307      	strlt	r3, [sp, #28]
 8004fca:	bfb8      	it	lt
 8004fcc:	9204      	strlt	r2, [sp, #16]
 8004fce:	7823      	ldrb	r3, [r4, #0]
 8004fd0:	2b2e      	cmp	r3, #46	; 0x2e
 8004fd2:	d10c      	bne.n	8004fee <_vfiprintf_r+0x176>
 8004fd4:	7863      	ldrb	r3, [r4, #1]
 8004fd6:	2b2a      	cmp	r3, #42	; 0x2a
 8004fd8:	d135      	bne.n	8005046 <_vfiprintf_r+0x1ce>
 8004fda:	9b03      	ldr	r3, [sp, #12]
 8004fdc:	1d1a      	adds	r2, r3, #4
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	9203      	str	r2, [sp, #12]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	bfb8      	it	lt
 8004fe6:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fea:	3402      	adds	r4, #2
 8004fec:	9305      	str	r3, [sp, #20]
 8004fee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80050d4 <_vfiprintf_r+0x25c>
 8004ff2:	7821      	ldrb	r1, [r4, #0]
 8004ff4:	2203      	movs	r2, #3
 8004ff6:	4650      	mov	r0, sl
 8004ff8:	f7fb f8f2 	bl	80001e0 <memchr>
 8004ffc:	b140      	cbz	r0, 8005010 <_vfiprintf_r+0x198>
 8004ffe:	2340      	movs	r3, #64	; 0x40
 8005000:	eba0 000a 	sub.w	r0, r0, sl
 8005004:	fa03 f000 	lsl.w	r0, r3, r0
 8005008:	9b04      	ldr	r3, [sp, #16]
 800500a:	4303      	orrs	r3, r0
 800500c:	3401      	adds	r4, #1
 800500e:	9304      	str	r3, [sp, #16]
 8005010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005014:	482c      	ldr	r0, [pc, #176]	; (80050c8 <_vfiprintf_r+0x250>)
 8005016:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800501a:	2206      	movs	r2, #6
 800501c:	f7fb f8e0 	bl	80001e0 <memchr>
 8005020:	2800      	cmp	r0, #0
 8005022:	d03f      	beq.n	80050a4 <_vfiprintf_r+0x22c>
 8005024:	4b29      	ldr	r3, [pc, #164]	; (80050cc <_vfiprintf_r+0x254>)
 8005026:	bb1b      	cbnz	r3, 8005070 <_vfiprintf_r+0x1f8>
 8005028:	9b03      	ldr	r3, [sp, #12]
 800502a:	3307      	adds	r3, #7
 800502c:	f023 0307 	bic.w	r3, r3, #7
 8005030:	3308      	adds	r3, #8
 8005032:	9303      	str	r3, [sp, #12]
 8005034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005036:	443b      	add	r3, r7
 8005038:	9309      	str	r3, [sp, #36]	; 0x24
 800503a:	e767      	b.n	8004f0c <_vfiprintf_r+0x94>
 800503c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005040:	460c      	mov	r4, r1
 8005042:	2001      	movs	r0, #1
 8005044:	e7a5      	b.n	8004f92 <_vfiprintf_r+0x11a>
 8005046:	2300      	movs	r3, #0
 8005048:	3401      	adds	r4, #1
 800504a:	9305      	str	r3, [sp, #20]
 800504c:	4619      	mov	r1, r3
 800504e:	f04f 0c0a 	mov.w	ip, #10
 8005052:	4620      	mov	r0, r4
 8005054:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005058:	3a30      	subs	r2, #48	; 0x30
 800505a:	2a09      	cmp	r2, #9
 800505c:	d903      	bls.n	8005066 <_vfiprintf_r+0x1ee>
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0c5      	beq.n	8004fee <_vfiprintf_r+0x176>
 8005062:	9105      	str	r1, [sp, #20]
 8005064:	e7c3      	b.n	8004fee <_vfiprintf_r+0x176>
 8005066:	fb0c 2101 	mla	r1, ip, r1, r2
 800506a:	4604      	mov	r4, r0
 800506c:	2301      	movs	r3, #1
 800506e:	e7f0      	b.n	8005052 <_vfiprintf_r+0x1da>
 8005070:	ab03      	add	r3, sp, #12
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	462a      	mov	r2, r5
 8005076:	4b16      	ldr	r3, [pc, #88]	; (80050d0 <_vfiprintf_r+0x258>)
 8005078:	a904      	add	r1, sp, #16
 800507a:	4630      	mov	r0, r6
 800507c:	f3af 8000 	nop.w
 8005080:	4607      	mov	r7, r0
 8005082:	1c78      	adds	r0, r7, #1
 8005084:	d1d6      	bne.n	8005034 <_vfiprintf_r+0x1bc>
 8005086:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005088:	07d9      	lsls	r1, r3, #31
 800508a:	d405      	bmi.n	8005098 <_vfiprintf_r+0x220>
 800508c:	89ab      	ldrh	r3, [r5, #12]
 800508e:	059a      	lsls	r2, r3, #22
 8005090:	d402      	bmi.n	8005098 <_vfiprintf_r+0x220>
 8005092:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005094:	f000 fc4d 	bl	8005932 <__retarget_lock_release_recursive>
 8005098:	89ab      	ldrh	r3, [r5, #12]
 800509a:	065b      	lsls	r3, r3, #25
 800509c:	f53f af12 	bmi.w	8004ec4 <_vfiprintf_r+0x4c>
 80050a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050a2:	e711      	b.n	8004ec8 <_vfiprintf_r+0x50>
 80050a4:	ab03      	add	r3, sp, #12
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	462a      	mov	r2, r5
 80050aa:	4b09      	ldr	r3, [pc, #36]	; (80050d0 <_vfiprintf_r+0x258>)
 80050ac:	a904      	add	r1, sp, #16
 80050ae:	4630      	mov	r0, r6
 80050b0:	f000 f880 	bl	80051b4 <_printf_i>
 80050b4:	e7e4      	b.n	8005080 <_vfiprintf_r+0x208>
 80050b6:	bf00      	nop
 80050b8:	08006c10 	.word	0x08006c10
 80050bc:	08006c30 	.word	0x08006c30
 80050c0:	08006bf0 	.word	0x08006bf0
 80050c4:	08006bbc 	.word	0x08006bbc
 80050c8:	08006bc6 	.word	0x08006bc6
 80050cc:	00000000 	.word	0x00000000
 80050d0:	08004e53 	.word	0x08004e53
 80050d4:	08006bc2 	.word	0x08006bc2

080050d8 <_printf_common>:
 80050d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050dc:	4616      	mov	r6, r2
 80050de:	4699      	mov	r9, r3
 80050e0:	688a      	ldr	r2, [r1, #8]
 80050e2:	690b      	ldr	r3, [r1, #16]
 80050e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050e8:	4293      	cmp	r3, r2
 80050ea:	bfb8      	it	lt
 80050ec:	4613      	movlt	r3, r2
 80050ee:	6033      	str	r3, [r6, #0]
 80050f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050f4:	4607      	mov	r7, r0
 80050f6:	460c      	mov	r4, r1
 80050f8:	b10a      	cbz	r2, 80050fe <_printf_common+0x26>
 80050fa:	3301      	adds	r3, #1
 80050fc:	6033      	str	r3, [r6, #0]
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	0699      	lsls	r1, r3, #26
 8005102:	bf42      	ittt	mi
 8005104:	6833      	ldrmi	r3, [r6, #0]
 8005106:	3302      	addmi	r3, #2
 8005108:	6033      	strmi	r3, [r6, #0]
 800510a:	6825      	ldr	r5, [r4, #0]
 800510c:	f015 0506 	ands.w	r5, r5, #6
 8005110:	d106      	bne.n	8005120 <_printf_common+0x48>
 8005112:	f104 0a19 	add.w	sl, r4, #25
 8005116:	68e3      	ldr	r3, [r4, #12]
 8005118:	6832      	ldr	r2, [r6, #0]
 800511a:	1a9b      	subs	r3, r3, r2
 800511c:	42ab      	cmp	r3, r5
 800511e:	dc26      	bgt.n	800516e <_printf_common+0x96>
 8005120:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005124:	1e13      	subs	r3, r2, #0
 8005126:	6822      	ldr	r2, [r4, #0]
 8005128:	bf18      	it	ne
 800512a:	2301      	movne	r3, #1
 800512c:	0692      	lsls	r2, r2, #26
 800512e:	d42b      	bmi.n	8005188 <_printf_common+0xb0>
 8005130:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005134:	4649      	mov	r1, r9
 8005136:	4638      	mov	r0, r7
 8005138:	47c0      	blx	r8
 800513a:	3001      	adds	r0, #1
 800513c:	d01e      	beq.n	800517c <_printf_common+0xa4>
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	68e5      	ldr	r5, [r4, #12]
 8005142:	6832      	ldr	r2, [r6, #0]
 8005144:	f003 0306 	and.w	r3, r3, #6
 8005148:	2b04      	cmp	r3, #4
 800514a:	bf08      	it	eq
 800514c:	1aad      	subeq	r5, r5, r2
 800514e:	68a3      	ldr	r3, [r4, #8]
 8005150:	6922      	ldr	r2, [r4, #16]
 8005152:	bf0c      	ite	eq
 8005154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005158:	2500      	movne	r5, #0
 800515a:	4293      	cmp	r3, r2
 800515c:	bfc4      	itt	gt
 800515e:	1a9b      	subgt	r3, r3, r2
 8005160:	18ed      	addgt	r5, r5, r3
 8005162:	2600      	movs	r6, #0
 8005164:	341a      	adds	r4, #26
 8005166:	42b5      	cmp	r5, r6
 8005168:	d11a      	bne.n	80051a0 <_printf_common+0xc8>
 800516a:	2000      	movs	r0, #0
 800516c:	e008      	b.n	8005180 <_printf_common+0xa8>
 800516e:	2301      	movs	r3, #1
 8005170:	4652      	mov	r2, sl
 8005172:	4649      	mov	r1, r9
 8005174:	4638      	mov	r0, r7
 8005176:	47c0      	blx	r8
 8005178:	3001      	adds	r0, #1
 800517a:	d103      	bne.n	8005184 <_printf_common+0xac>
 800517c:	f04f 30ff 	mov.w	r0, #4294967295
 8005180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005184:	3501      	adds	r5, #1
 8005186:	e7c6      	b.n	8005116 <_printf_common+0x3e>
 8005188:	18e1      	adds	r1, r4, r3
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	2030      	movs	r0, #48	; 0x30
 800518e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005192:	4422      	add	r2, r4
 8005194:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005198:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800519c:	3302      	adds	r3, #2
 800519e:	e7c7      	b.n	8005130 <_printf_common+0x58>
 80051a0:	2301      	movs	r3, #1
 80051a2:	4622      	mov	r2, r4
 80051a4:	4649      	mov	r1, r9
 80051a6:	4638      	mov	r0, r7
 80051a8:	47c0      	blx	r8
 80051aa:	3001      	adds	r0, #1
 80051ac:	d0e6      	beq.n	800517c <_printf_common+0xa4>
 80051ae:	3601      	adds	r6, #1
 80051b0:	e7d9      	b.n	8005166 <_printf_common+0x8e>
	...

080051b4 <_printf_i>:
 80051b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051b8:	460c      	mov	r4, r1
 80051ba:	4691      	mov	r9, r2
 80051bc:	7e27      	ldrb	r7, [r4, #24]
 80051be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80051c0:	2f78      	cmp	r7, #120	; 0x78
 80051c2:	4680      	mov	r8, r0
 80051c4:	469a      	mov	sl, r3
 80051c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051ca:	d807      	bhi.n	80051dc <_printf_i+0x28>
 80051cc:	2f62      	cmp	r7, #98	; 0x62
 80051ce:	d80a      	bhi.n	80051e6 <_printf_i+0x32>
 80051d0:	2f00      	cmp	r7, #0
 80051d2:	f000 80d8 	beq.w	8005386 <_printf_i+0x1d2>
 80051d6:	2f58      	cmp	r7, #88	; 0x58
 80051d8:	f000 80a3 	beq.w	8005322 <_printf_i+0x16e>
 80051dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80051e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051e4:	e03a      	b.n	800525c <_printf_i+0xa8>
 80051e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051ea:	2b15      	cmp	r3, #21
 80051ec:	d8f6      	bhi.n	80051dc <_printf_i+0x28>
 80051ee:	a001      	add	r0, pc, #4	; (adr r0, 80051f4 <_printf_i+0x40>)
 80051f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80051f4:	0800524d 	.word	0x0800524d
 80051f8:	08005261 	.word	0x08005261
 80051fc:	080051dd 	.word	0x080051dd
 8005200:	080051dd 	.word	0x080051dd
 8005204:	080051dd 	.word	0x080051dd
 8005208:	080051dd 	.word	0x080051dd
 800520c:	08005261 	.word	0x08005261
 8005210:	080051dd 	.word	0x080051dd
 8005214:	080051dd 	.word	0x080051dd
 8005218:	080051dd 	.word	0x080051dd
 800521c:	080051dd 	.word	0x080051dd
 8005220:	0800536d 	.word	0x0800536d
 8005224:	08005291 	.word	0x08005291
 8005228:	0800534f 	.word	0x0800534f
 800522c:	080051dd 	.word	0x080051dd
 8005230:	080051dd 	.word	0x080051dd
 8005234:	0800538f 	.word	0x0800538f
 8005238:	080051dd 	.word	0x080051dd
 800523c:	08005291 	.word	0x08005291
 8005240:	080051dd 	.word	0x080051dd
 8005244:	080051dd 	.word	0x080051dd
 8005248:	08005357 	.word	0x08005357
 800524c:	680b      	ldr	r3, [r1, #0]
 800524e:	1d1a      	adds	r2, r3, #4
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	600a      	str	r2, [r1, #0]
 8005254:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005258:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800525c:	2301      	movs	r3, #1
 800525e:	e0a3      	b.n	80053a8 <_printf_i+0x1f4>
 8005260:	6825      	ldr	r5, [r4, #0]
 8005262:	6808      	ldr	r0, [r1, #0]
 8005264:	062e      	lsls	r6, r5, #24
 8005266:	f100 0304 	add.w	r3, r0, #4
 800526a:	d50a      	bpl.n	8005282 <_printf_i+0xce>
 800526c:	6805      	ldr	r5, [r0, #0]
 800526e:	600b      	str	r3, [r1, #0]
 8005270:	2d00      	cmp	r5, #0
 8005272:	da03      	bge.n	800527c <_printf_i+0xc8>
 8005274:	232d      	movs	r3, #45	; 0x2d
 8005276:	426d      	negs	r5, r5
 8005278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800527c:	485e      	ldr	r0, [pc, #376]	; (80053f8 <_printf_i+0x244>)
 800527e:	230a      	movs	r3, #10
 8005280:	e019      	b.n	80052b6 <_printf_i+0x102>
 8005282:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005286:	6805      	ldr	r5, [r0, #0]
 8005288:	600b      	str	r3, [r1, #0]
 800528a:	bf18      	it	ne
 800528c:	b22d      	sxthne	r5, r5
 800528e:	e7ef      	b.n	8005270 <_printf_i+0xbc>
 8005290:	680b      	ldr	r3, [r1, #0]
 8005292:	6825      	ldr	r5, [r4, #0]
 8005294:	1d18      	adds	r0, r3, #4
 8005296:	6008      	str	r0, [r1, #0]
 8005298:	0628      	lsls	r0, r5, #24
 800529a:	d501      	bpl.n	80052a0 <_printf_i+0xec>
 800529c:	681d      	ldr	r5, [r3, #0]
 800529e:	e002      	b.n	80052a6 <_printf_i+0xf2>
 80052a0:	0669      	lsls	r1, r5, #25
 80052a2:	d5fb      	bpl.n	800529c <_printf_i+0xe8>
 80052a4:	881d      	ldrh	r5, [r3, #0]
 80052a6:	4854      	ldr	r0, [pc, #336]	; (80053f8 <_printf_i+0x244>)
 80052a8:	2f6f      	cmp	r7, #111	; 0x6f
 80052aa:	bf0c      	ite	eq
 80052ac:	2308      	moveq	r3, #8
 80052ae:	230a      	movne	r3, #10
 80052b0:	2100      	movs	r1, #0
 80052b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052b6:	6866      	ldr	r6, [r4, #4]
 80052b8:	60a6      	str	r6, [r4, #8]
 80052ba:	2e00      	cmp	r6, #0
 80052bc:	bfa2      	ittt	ge
 80052be:	6821      	ldrge	r1, [r4, #0]
 80052c0:	f021 0104 	bicge.w	r1, r1, #4
 80052c4:	6021      	strge	r1, [r4, #0]
 80052c6:	b90d      	cbnz	r5, 80052cc <_printf_i+0x118>
 80052c8:	2e00      	cmp	r6, #0
 80052ca:	d04d      	beq.n	8005368 <_printf_i+0x1b4>
 80052cc:	4616      	mov	r6, r2
 80052ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80052d2:	fb03 5711 	mls	r7, r3, r1, r5
 80052d6:	5dc7      	ldrb	r7, [r0, r7]
 80052d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052dc:	462f      	mov	r7, r5
 80052de:	42bb      	cmp	r3, r7
 80052e0:	460d      	mov	r5, r1
 80052e2:	d9f4      	bls.n	80052ce <_printf_i+0x11a>
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	d10b      	bne.n	8005300 <_printf_i+0x14c>
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	07df      	lsls	r7, r3, #31
 80052ec:	d508      	bpl.n	8005300 <_printf_i+0x14c>
 80052ee:	6923      	ldr	r3, [r4, #16]
 80052f0:	6861      	ldr	r1, [r4, #4]
 80052f2:	4299      	cmp	r1, r3
 80052f4:	bfde      	ittt	le
 80052f6:	2330      	movle	r3, #48	; 0x30
 80052f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005300:	1b92      	subs	r2, r2, r6
 8005302:	6122      	str	r2, [r4, #16]
 8005304:	f8cd a000 	str.w	sl, [sp]
 8005308:	464b      	mov	r3, r9
 800530a:	aa03      	add	r2, sp, #12
 800530c:	4621      	mov	r1, r4
 800530e:	4640      	mov	r0, r8
 8005310:	f7ff fee2 	bl	80050d8 <_printf_common>
 8005314:	3001      	adds	r0, #1
 8005316:	d14c      	bne.n	80053b2 <_printf_i+0x1fe>
 8005318:	f04f 30ff 	mov.w	r0, #4294967295
 800531c:	b004      	add	sp, #16
 800531e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005322:	4835      	ldr	r0, [pc, #212]	; (80053f8 <_printf_i+0x244>)
 8005324:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	680e      	ldr	r6, [r1, #0]
 800532c:	061f      	lsls	r7, r3, #24
 800532e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005332:	600e      	str	r6, [r1, #0]
 8005334:	d514      	bpl.n	8005360 <_printf_i+0x1ac>
 8005336:	07d9      	lsls	r1, r3, #31
 8005338:	bf44      	itt	mi
 800533a:	f043 0320 	orrmi.w	r3, r3, #32
 800533e:	6023      	strmi	r3, [r4, #0]
 8005340:	b91d      	cbnz	r5, 800534a <_printf_i+0x196>
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	f023 0320 	bic.w	r3, r3, #32
 8005348:	6023      	str	r3, [r4, #0]
 800534a:	2310      	movs	r3, #16
 800534c:	e7b0      	b.n	80052b0 <_printf_i+0xfc>
 800534e:	6823      	ldr	r3, [r4, #0]
 8005350:	f043 0320 	orr.w	r3, r3, #32
 8005354:	6023      	str	r3, [r4, #0]
 8005356:	2378      	movs	r3, #120	; 0x78
 8005358:	4828      	ldr	r0, [pc, #160]	; (80053fc <_printf_i+0x248>)
 800535a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800535e:	e7e3      	b.n	8005328 <_printf_i+0x174>
 8005360:	065e      	lsls	r6, r3, #25
 8005362:	bf48      	it	mi
 8005364:	b2ad      	uxthmi	r5, r5
 8005366:	e7e6      	b.n	8005336 <_printf_i+0x182>
 8005368:	4616      	mov	r6, r2
 800536a:	e7bb      	b.n	80052e4 <_printf_i+0x130>
 800536c:	680b      	ldr	r3, [r1, #0]
 800536e:	6826      	ldr	r6, [r4, #0]
 8005370:	6960      	ldr	r0, [r4, #20]
 8005372:	1d1d      	adds	r5, r3, #4
 8005374:	600d      	str	r5, [r1, #0]
 8005376:	0635      	lsls	r5, r6, #24
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	d501      	bpl.n	8005380 <_printf_i+0x1cc>
 800537c:	6018      	str	r0, [r3, #0]
 800537e:	e002      	b.n	8005386 <_printf_i+0x1d2>
 8005380:	0671      	lsls	r1, r6, #25
 8005382:	d5fb      	bpl.n	800537c <_printf_i+0x1c8>
 8005384:	8018      	strh	r0, [r3, #0]
 8005386:	2300      	movs	r3, #0
 8005388:	6123      	str	r3, [r4, #16]
 800538a:	4616      	mov	r6, r2
 800538c:	e7ba      	b.n	8005304 <_printf_i+0x150>
 800538e:	680b      	ldr	r3, [r1, #0]
 8005390:	1d1a      	adds	r2, r3, #4
 8005392:	600a      	str	r2, [r1, #0]
 8005394:	681e      	ldr	r6, [r3, #0]
 8005396:	6862      	ldr	r2, [r4, #4]
 8005398:	2100      	movs	r1, #0
 800539a:	4630      	mov	r0, r6
 800539c:	f7fa ff20 	bl	80001e0 <memchr>
 80053a0:	b108      	cbz	r0, 80053a6 <_printf_i+0x1f2>
 80053a2:	1b80      	subs	r0, r0, r6
 80053a4:	6060      	str	r0, [r4, #4]
 80053a6:	6863      	ldr	r3, [r4, #4]
 80053a8:	6123      	str	r3, [r4, #16]
 80053aa:	2300      	movs	r3, #0
 80053ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053b0:	e7a8      	b.n	8005304 <_printf_i+0x150>
 80053b2:	6923      	ldr	r3, [r4, #16]
 80053b4:	4632      	mov	r2, r6
 80053b6:	4649      	mov	r1, r9
 80053b8:	4640      	mov	r0, r8
 80053ba:	47d0      	blx	sl
 80053bc:	3001      	adds	r0, #1
 80053be:	d0ab      	beq.n	8005318 <_printf_i+0x164>
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	079b      	lsls	r3, r3, #30
 80053c4:	d413      	bmi.n	80053ee <_printf_i+0x23a>
 80053c6:	68e0      	ldr	r0, [r4, #12]
 80053c8:	9b03      	ldr	r3, [sp, #12]
 80053ca:	4298      	cmp	r0, r3
 80053cc:	bfb8      	it	lt
 80053ce:	4618      	movlt	r0, r3
 80053d0:	e7a4      	b.n	800531c <_printf_i+0x168>
 80053d2:	2301      	movs	r3, #1
 80053d4:	4632      	mov	r2, r6
 80053d6:	4649      	mov	r1, r9
 80053d8:	4640      	mov	r0, r8
 80053da:	47d0      	blx	sl
 80053dc:	3001      	adds	r0, #1
 80053de:	d09b      	beq.n	8005318 <_printf_i+0x164>
 80053e0:	3501      	adds	r5, #1
 80053e2:	68e3      	ldr	r3, [r4, #12]
 80053e4:	9903      	ldr	r1, [sp, #12]
 80053e6:	1a5b      	subs	r3, r3, r1
 80053e8:	42ab      	cmp	r3, r5
 80053ea:	dcf2      	bgt.n	80053d2 <_printf_i+0x21e>
 80053ec:	e7eb      	b.n	80053c6 <_printf_i+0x212>
 80053ee:	2500      	movs	r5, #0
 80053f0:	f104 0619 	add.w	r6, r4, #25
 80053f4:	e7f5      	b.n	80053e2 <_printf_i+0x22e>
 80053f6:	bf00      	nop
 80053f8:	08006bcd 	.word	0x08006bcd
 80053fc:	08006bde 	.word	0x08006bde

08005400 <iprintf>:
 8005400:	b40f      	push	{r0, r1, r2, r3}
 8005402:	4b0a      	ldr	r3, [pc, #40]	; (800542c <iprintf+0x2c>)
 8005404:	b513      	push	{r0, r1, r4, lr}
 8005406:	681c      	ldr	r4, [r3, #0]
 8005408:	b124      	cbz	r4, 8005414 <iprintf+0x14>
 800540a:	69a3      	ldr	r3, [r4, #24]
 800540c:	b913      	cbnz	r3, 8005414 <iprintf+0x14>
 800540e:	4620      	mov	r0, r4
 8005410:	f000 f9f0 	bl	80057f4 <__sinit>
 8005414:	ab05      	add	r3, sp, #20
 8005416:	9a04      	ldr	r2, [sp, #16]
 8005418:	68a1      	ldr	r1, [r4, #8]
 800541a:	9301      	str	r3, [sp, #4]
 800541c:	4620      	mov	r0, r4
 800541e:	f7ff fd2b 	bl	8004e78 <_vfiprintf_r>
 8005422:	b002      	add	sp, #8
 8005424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005428:	b004      	add	sp, #16
 800542a:	4770      	bx	lr
 800542c:	20000034 	.word	0x20000034

08005430 <__swbuf_r>:
 8005430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005432:	460e      	mov	r6, r1
 8005434:	4614      	mov	r4, r2
 8005436:	4605      	mov	r5, r0
 8005438:	b118      	cbz	r0, 8005442 <__swbuf_r+0x12>
 800543a:	6983      	ldr	r3, [r0, #24]
 800543c:	b90b      	cbnz	r3, 8005442 <__swbuf_r+0x12>
 800543e:	f000 f9d9 	bl	80057f4 <__sinit>
 8005442:	4b21      	ldr	r3, [pc, #132]	; (80054c8 <__swbuf_r+0x98>)
 8005444:	429c      	cmp	r4, r3
 8005446:	d12b      	bne.n	80054a0 <__swbuf_r+0x70>
 8005448:	686c      	ldr	r4, [r5, #4]
 800544a:	69a3      	ldr	r3, [r4, #24]
 800544c:	60a3      	str	r3, [r4, #8]
 800544e:	89a3      	ldrh	r3, [r4, #12]
 8005450:	071a      	lsls	r2, r3, #28
 8005452:	d52f      	bpl.n	80054b4 <__swbuf_r+0x84>
 8005454:	6923      	ldr	r3, [r4, #16]
 8005456:	b36b      	cbz	r3, 80054b4 <__swbuf_r+0x84>
 8005458:	6923      	ldr	r3, [r4, #16]
 800545a:	6820      	ldr	r0, [r4, #0]
 800545c:	1ac0      	subs	r0, r0, r3
 800545e:	6963      	ldr	r3, [r4, #20]
 8005460:	b2f6      	uxtb	r6, r6
 8005462:	4283      	cmp	r3, r0
 8005464:	4637      	mov	r7, r6
 8005466:	dc04      	bgt.n	8005472 <__swbuf_r+0x42>
 8005468:	4621      	mov	r1, r4
 800546a:	4628      	mov	r0, r5
 800546c:	f000 f92e 	bl	80056cc <_fflush_r>
 8005470:	bb30      	cbnz	r0, 80054c0 <__swbuf_r+0x90>
 8005472:	68a3      	ldr	r3, [r4, #8]
 8005474:	3b01      	subs	r3, #1
 8005476:	60a3      	str	r3, [r4, #8]
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	1c5a      	adds	r2, r3, #1
 800547c:	6022      	str	r2, [r4, #0]
 800547e:	701e      	strb	r6, [r3, #0]
 8005480:	6963      	ldr	r3, [r4, #20]
 8005482:	3001      	adds	r0, #1
 8005484:	4283      	cmp	r3, r0
 8005486:	d004      	beq.n	8005492 <__swbuf_r+0x62>
 8005488:	89a3      	ldrh	r3, [r4, #12]
 800548a:	07db      	lsls	r3, r3, #31
 800548c:	d506      	bpl.n	800549c <__swbuf_r+0x6c>
 800548e:	2e0a      	cmp	r6, #10
 8005490:	d104      	bne.n	800549c <__swbuf_r+0x6c>
 8005492:	4621      	mov	r1, r4
 8005494:	4628      	mov	r0, r5
 8005496:	f000 f919 	bl	80056cc <_fflush_r>
 800549a:	b988      	cbnz	r0, 80054c0 <__swbuf_r+0x90>
 800549c:	4638      	mov	r0, r7
 800549e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054a0:	4b0a      	ldr	r3, [pc, #40]	; (80054cc <__swbuf_r+0x9c>)
 80054a2:	429c      	cmp	r4, r3
 80054a4:	d101      	bne.n	80054aa <__swbuf_r+0x7a>
 80054a6:	68ac      	ldr	r4, [r5, #8]
 80054a8:	e7cf      	b.n	800544a <__swbuf_r+0x1a>
 80054aa:	4b09      	ldr	r3, [pc, #36]	; (80054d0 <__swbuf_r+0xa0>)
 80054ac:	429c      	cmp	r4, r3
 80054ae:	bf08      	it	eq
 80054b0:	68ec      	ldreq	r4, [r5, #12]
 80054b2:	e7ca      	b.n	800544a <__swbuf_r+0x1a>
 80054b4:	4621      	mov	r1, r4
 80054b6:	4628      	mov	r0, r5
 80054b8:	f000 f80c 	bl	80054d4 <__swsetup_r>
 80054bc:	2800      	cmp	r0, #0
 80054be:	d0cb      	beq.n	8005458 <__swbuf_r+0x28>
 80054c0:	f04f 37ff 	mov.w	r7, #4294967295
 80054c4:	e7ea      	b.n	800549c <__swbuf_r+0x6c>
 80054c6:	bf00      	nop
 80054c8:	08006c10 	.word	0x08006c10
 80054cc:	08006c30 	.word	0x08006c30
 80054d0:	08006bf0 	.word	0x08006bf0

080054d4 <__swsetup_r>:
 80054d4:	4b32      	ldr	r3, [pc, #200]	; (80055a0 <__swsetup_r+0xcc>)
 80054d6:	b570      	push	{r4, r5, r6, lr}
 80054d8:	681d      	ldr	r5, [r3, #0]
 80054da:	4606      	mov	r6, r0
 80054dc:	460c      	mov	r4, r1
 80054de:	b125      	cbz	r5, 80054ea <__swsetup_r+0x16>
 80054e0:	69ab      	ldr	r3, [r5, #24]
 80054e2:	b913      	cbnz	r3, 80054ea <__swsetup_r+0x16>
 80054e4:	4628      	mov	r0, r5
 80054e6:	f000 f985 	bl	80057f4 <__sinit>
 80054ea:	4b2e      	ldr	r3, [pc, #184]	; (80055a4 <__swsetup_r+0xd0>)
 80054ec:	429c      	cmp	r4, r3
 80054ee:	d10f      	bne.n	8005510 <__swsetup_r+0x3c>
 80054f0:	686c      	ldr	r4, [r5, #4]
 80054f2:	89a3      	ldrh	r3, [r4, #12]
 80054f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054f8:	0719      	lsls	r1, r3, #28
 80054fa:	d42c      	bmi.n	8005556 <__swsetup_r+0x82>
 80054fc:	06dd      	lsls	r5, r3, #27
 80054fe:	d411      	bmi.n	8005524 <__swsetup_r+0x50>
 8005500:	2309      	movs	r3, #9
 8005502:	6033      	str	r3, [r6, #0]
 8005504:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005508:	81a3      	strh	r3, [r4, #12]
 800550a:	f04f 30ff 	mov.w	r0, #4294967295
 800550e:	e03e      	b.n	800558e <__swsetup_r+0xba>
 8005510:	4b25      	ldr	r3, [pc, #148]	; (80055a8 <__swsetup_r+0xd4>)
 8005512:	429c      	cmp	r4, r3
 8005514:	d101      	bne.n	800551a <__swsetup_r+0x46>
 8005516:	68ac      	ldr	r4, [r5, #8]
 8005518:	e7eb      	b.n	80054f2 <__swsetup_r+0x1e>
 800551a:	4b24      	ldr	r3, [pc, #144]	; (80055ac <__swsetup_r+0xd8>)
 800551c:	429c      	cmp	r4, r3
 800551e:	bf08      	it	eq
 8005520:	68ec      	ldreq	r4, [r5, #12]
 8005522:	e7e6      	b.n	80054f2 <__swsetup_r+0x1e>
 8005524:	0758      	lsls	r0, r3, #29
 8005526:	d512      	bpl.n	800554e <__swsetup_r+0x7a>
 8005528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800552a:	b141      	cbz	r1, 800553e <__swsetup_r+0x6a>
 800552c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005530:	4299      	cmp	r1, r3
 8005532:	d002      	beq.n	800553a <__swsetup_r+0x66>
 8005534:	4630      	mov	r0, r6
 8005536:	f000 fa61 	bl	80059fc <_free_r>
 800553a:	2300      	movs	r3, #0
 800553c:	6363      	str	r3, [r4, #52]	; 0x34
 800553e:	89a3      	ldrh	r3, [r4, #12]
 8005540:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005544:	81a3      	strh	r3, [r4, #12]
 8005546:	2300      	movs	r3, #0
 8005548:	6063      	str	r3, [r4, #4]
 800554a:	6923      	ldr	r3, [r4, #16]
 800554c:	6023      	str	r3, [r4, #0]
 800554e:	89a3      	ldrh	r3, [r4, #12]
 8005550:	f043 0308 	orr.w	r3, r3, #8
 8005554:	81a3      	strh	r3, [r4, #12]
 8005556:	6923      	ldr	r3, [r4, #16]
 8005558:	b94b      	cbnz	r3, 800556e <__swsetup_r+0x9a>
 800555a:	89a3      	ldrh	r3, [r4, #12]
 800555c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005564:	d003      	beq.n	800556e <__swsetup_r+0x9a>
 8005566:	4621      	mov	r1, r4
 8005568:	4630      	mov	r0, r6
 800556a:	f000 fa07 	bl	800597c <__smakebuf_r>
 800556e:	89a0      	ldrh	r0, [r4, #12]
 8005570:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005574:	f010 0301 	ands.w	r3, r0, #1
 8005578:	d00a      	beq.n	8005590 <__swsetup_r+0xbc>
 800557a:	2300      	movs	r3, #0
 800557c:	60a3      	str	r3, [r4, #8]
 800557e:	6963      	ldr	r3, [r4, #20]
 8005580:	425b      	negs	r3, r3
 8005582:	61a3      	str	r3, [r4, #24]
 8005584:	6923      	ldr	r3, [r4, #16]
 8005586:	b943      	cbnz	r3, 800559a <__swsetup_r+0xc6>
 8005588:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800558c:	d1ba      	bne.n	8005504 <__swsetup_r+0x30>
 800558e:	bd70      	pop	{r4, r5, r6, pc}
 8005590:	0781      	lsls	r1, r0, #30
 8005592:	bf58      	it	pl
 8005594:	6963      	ldrpl	r3, [r4, #20]
 8005596:	60a3      	str	r3, [r4, #8]
 8005598:	e7f4      	b.n	8005584 <__swsetup_r+0xb0>
 800559a:	2000      	movs	r0, #0
 800559c:	e7f7      	b.n	800558e <__swsetup_r+0xba>
 800559e:	bf00      	nop
 80055a0:	20000034 	.word	0x20000034
 80055a4:	08006c10 	.word	0x08006c10
 80055a8:	08006c30 	.word	0x08006c30
 80055ac:	08006bf0 	.word	0x08006bf0

080055b0 <abort>:
 80055b0:	b508      	push	{r3, lr}
 80055b2:	2006      	movs	r0, #6
 80055b4:	f000 fb04 	bl	8005bc0 <raise>
 80055b8:	2001      	movs	r0, #1
 80055ba:	f7fc fe47 	bl	800224c <_exit>
	...

080055c0 <__sflush_r>:
 80055c0:	898a      	ldrh	r2, [r1, #12]
 80055c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055c6:	4605      	mov	r5, r0
 80055c8:	0710      	lsls	r0, r2, #28
 80055ca:	460c      	mov	r4, r1
 80055cc:	d458      	bmi.n	8005680 <__sflush_r+0xc0>
 80055ce:	684b      	ldr	r3, [r1, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	dc05      	bgt.n	80055e0 <__sflush_r+0x20>
 80055d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	dc02      	bgt.n	80055e0 <__sflush_r+0x20>
 80055da:	2000      	movs	r0, #0
 80055dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055e2:	2e00      	cmp	r6, #0
 80055e4:	d0f9      	beq.n	80055da <__sflush_r+0x1a>
 80055e6:	2300      	movs	r3, #0
 80055e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80055ec:	682f      	ldr	r7, [r5, #0]
 80055ee:	602b      	str	r3, [r5, #0]
 80055f0:	d032      	beq.n	8005658 <__sflush_r+0x98>
 80055f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80055f4:	89a3      	ldrh	r3, [r4, #12]
 80055f6:	075a      	lsls	r2, r3, #29
 80055f8:	d505      	bpl.n	8005606 <__sflush_r+0x46>
 80055fa:	6863      	ldr	r3, [r4, #4]
 80055fc:	1ac0      	subs	r0, r0, r3
 80055fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005600:	b10b      	cbz	r3, 8005606 <__sflush_r+0x46>
 8005602:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005604:	1ac0      	subs	r0, r0, r3
 8005606:	2300      	movs	r3, #0
 8005608:	4602      	mov	r2, r0
 800560a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800560c:	6a21      	ldr	r1, [r4, #32]
 800560e:	4628      	mov	r0, r5
 8005610:	47b0      	blx	r6
 8005612:	1c43      	adds	r3, r0, #1
 8005614:	89a3      	ldrh	r3, [r4, #12]
 8005616:	d106      	bne.n	8005626 <__sflush_r+0x66>
 8005618:	6829      	ldr	r1, [r5, #0]
 800561a:	291d      	cmp	r1, #29
 800561c:	d82c      	bhi.n	8005678 <__sflush_r+0xb8>
 800561e:	4a2a      	ldr	r2, [pc, #168]	; (80056c8 <__sflush_r+0x108>)
 8005620:	40ca      	lsrs	r2, r1
 8005622:	07d6      	lsls	r6, r2, #31
 8005624:	d528      	bpl.n	8005678 <__sflush_r+0xb8>
 8005626:	2200      	movs	r2, #0
 8005628:	6062      	str	r2, [r4, #4]
 800562a:	04d9      	lsls	r1, r3, #19
 800562c:	6922      	ldr	r2, [r4, #16]
 800562e:	6022      	str	r2, [r4, #0]
 8005630:	d504      	bpl.n	800563c <__sflush_r+0x7c>
 8005632:	1c42      	adds	r2, r0, #1
 8005634:	d101      	bne.n	800563a <__sflush_r+0x7a>
 8005636:	682b      	ldr	r3, [r5, #0]
 8005638:	b903      	cbnz	r3, 800563c <__sflush_r+0x7c>
 800563a:	6560      	str	r0, [r4, #84]	; 0x54
 800563c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800563e:	602f      	str	r7, [r5, #0]
 8005640:	2900      	cmp	r1, #0
 8005642:	d0ca      	beq.n	80055da <__sflush_r+0x1a>
 8005644:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005648:	4299      	cmp	r1, r3
 800564a:	d002      	beq.n	8005652 <__sflush_r+0x92>
 800564c:	4628      	mov	r0, r5
 800564e:	f000 f9d5 	bl	80059fc <_free_r>
 8005652:	2000      	movs	r0, #0
 8005654:	6360      	str	r0, [r4, #52]	; 0x34
 8005656:	e7c1      	b.n	80055dc <__sflush_r+0x1c>
 8005658:	6a21      	ldr	r1, [r4, #32]
 800565a:	2301      	movs	r3, #1
 800565c:	4628      	mov	r0, r5
 800565e:	47b0      	blx	r6
 8005660:	1c41      	adds	r1, r0, #1
 8005662:	d1c7      	bne.n	80055f4 <__sflush_r+0x34>
 8005664:	682b      	ldr	r3, [r5, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d0c4      	beq.n	80055f4 <__sflush_r+0x34>
 800566a:	2b1d      	cmp	r3, #29
 800566c:	d001      	beq.n	8005672 <__sflush_r+0xb2>
 800566e:	2b16      	cmp	r3, #22
 8005670:	d101      	bne.n	8005676 <__sflush_r+0xb6>
 8005672:	602f      	str	r7, [r5, #0]
 8005674:	e7b1      	b.n	80055da <__sflush_r+0x1a>
 8005676:	89a3      	ldrh	r3, [r4, #12]
 8005678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800567c:	81a3      	strh	r3, [r4, #12]
 800567e:	e7ad      	b.n	80055dc <__sflush_r+0x1c>
 8005680:	690f      	ldr	r7, [r1, #16]
 8005682:	2f00      	cmp	r7, #0
 8005684:	d0a9      	beq.n	80055da <__sflush_r+0x1a>
 8005686:	0793      	lsls	r3, r2, #30
 8005688:	680e      	ldr	r6, [r1, #0]
 800568a:	bf08      	it	eq
 800568c:	694b      	ldreq	r3, [r1, #20]
 800568e:	600f      	str	r7, [r1, #0]
 8005690:	bf18      	it	ne
 8005692:	2300      	movne	r3, #0
 8005694:	eba6 0807 	sub.w	r8, r6, r7
 8005698:	608b      	str	r3, [r1, #8]
 800569a:	f1b8 0f00 	cmp.w	r8, #0
 800569e:	dd9c      	ble.n	80055da <__sflush_r+0x1a>
 80056a0:	6a21      	ldr	r1, [r4, #32]
 80056a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80056a4:	4643      	mov	r3, r8
 80056a6:	463a      	mov	r2, r7
 80056a8:	4628      	mov	r0, r5
 80056aa:	47b0      	blx	r6
 80056ac:	2800      	cmp	r0, #0
 80056ae:	dc06      	bgt.n	80056be <__sflush_r+0xfe>
 80056b0:	89a3      	ldrh	r3, [r4, #12]
 80056b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056b6:	81a3      	strh	r3, [r4, #12]
 80056b8:	f04f 30ff 	mov.w	r0, #4294967295
 80056bc:	e78e      	b.n	80055dc <__sflush_r+0x1c>
 80056be:	4407      	add	r7, r0
 80056c0:	eba8 0800 	sub.w	r8, r8, r0
 80056c4:	e7e9      	b.n	800569a <__sflush_r+0xda>
 80056c6:	bf00      	nop
 80056c8:	20400001 	.word	0x20400001

080056cc <_fflush_r>:
 80056cc:	b538      	push	{r3, r4, r5, lr}
 80056ce:	690b      	ldr	r3, [r1, #16]
 80056d0:	4605      	mov	r5, r0
 80056d2:	460c      	mov	r4, r1
 80056d4:	b913      	cbnz	r3, 80056dc <_fflush_r+0x10>
 80056d6:	2500      	movs	r5, #0
 80056d8:	4628      	mov	r0, r5
 80056da:	bd38      	pop	{r3, r4, r5, pc}
 80056dc:	b118      	cbz	r0, 80056e6 <_fflush_r+0x1a>
 80056de:	6983      	ldr	r3, [r0, #24]
 80056e0:	b90b      	cbnz	r3, 80056e6 <_fflush_r+0x1a>
 80056e2:	f000 f887 	bl	80057f4 <__sinit>
 80056e6:	4b14      	ldr	r3, [pc, #80]	; (8005738 <_fflush_r+0x6c>)
 80056e8:	429c      	cmp	r4, r3
 80056ea:	d11b      	bne.n	8005724 <_fflush_r+0x58>
 80056ec:	686c      	ldr	r4, [r5, #4]
 80056ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d0ef      	beq.n	80056d6 <_fflush_r+0xa>
 80056f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80056f8:	07d0      	lsls	r0, r2, #31
 80056fa:	d404      	bmi.n	8005706 <_fflush_r+0x3a>
 80056fc:	0599      	lsls	r1, r3, #22
 80056fe:	d402      	bmi.n	8005706 <_fflush_r+0x3a>
 8005700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005702:	f000 f915 	bl	8005930 <__retarget_lock_acquire_recursive>
 8005706:	4628      	mov	r0, r5
 8005708:	4621      	mov	r1, r4
 800570a:	f7ff ff59 	bl	80055c0 <__sflush_r>
 800570e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005710:	07da      	lsls	r2, r3, #31
 8005712:	4605      	mov	r5, r0
 8005714:	d4e0      	bmi.n	80056d8 <_fflush_r+0xc>
 8005716:	89a3      	ldrh	r3, [r4, #12]
 8005718:	059b      	lsls	r3, r3, #22
 800571a:	d4dd      	bmi.n	80056d8 <_fflush_r+0xc>
 800571c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800571e:	f000 f908 	bl	8005932 <__retarget_lock_release_recursive>
 8005722:	e7d9      	b.n	80056d8 <_fflush_r+0xc>
 8005724:	4b05      	ldr	r3, [pc, #20]	; (800573c <_fflush_r+0x70>)
 8005726:	429c      	cmp	r4, r3
 8005728:	d101      	bne.n	800572e <_fflush_r+0x62>
 800572a:	68ac      	ldr	r4, [r5, #8]
 800572c:	e7df      	b.n	80056ee <_fflush_r+0x22>
 800572e:	4b04      	ldr	r3, [pc, #16]	; (8005740 <_fflush_r+0x74>)
 8005730:	429c      	cmp	r4, r3
 8005732:	bf08      	it	eq
 8005734:	68ec      	ldreq	r4, [r5, #12]
 8005736:	e7da      	b.n	80056ee <_fflush_r+0x22>
 8005738:	08006c10 	.word	0x08006c10
 800573c:	08006c30 	.word	0x08006c30
 8005740:	08006bf0 	.word	0x08006bf0

08005744 <std>:
 8005744:	2300      	movs	r3, #0
 8005746:	b510      	push	{r4, lr}
 8005748:	4604      	mov	r4, r0
 800574a:	e9c0 3300 	strd	r3, r3, [r0]
 800574e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005752:	6083      	str	r3, [r0, #8]
 8005754:	8181      	strh	r1, [r0, #12]
 8005756:	6643      	str	r3, [r0, #100]	; 0x64
 8005758:	81c2      	strh	r2, [r0, #14]
 800575a:	6183      	str	r3, [r0, #24]
 800575c:	4619      	mov	r1, r3
 800575e:	2208      	movs	r2, #8
 8005760:	305c      	adds	r0, #92	; 0x5c
 8005762:	f7ff fb57 	bl	8004e14 <memset>
 8005766:	4b05      	ldr	r3, [pc, #20]	; (800577c <std+0x38>)
 8005768:	6263      	str	r3, [r4, #36]	; 0x24
 800576a:	4b05      	ldr	r3, [pc, #20]	; (8005780 <std+0x3c>)
 800576c:	62a3      	str	r3, [r4, #40]	; 0x28
 800576e:	4b05      	ldr	r3, [pc, #20]	; (8005784 <std+0x40>)
 8005770:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005772:	4b05      	ldr	r3, [pc, #20]	; (8005788 <std+0x44>)
 8005774:	6224      	str	r4, [r4, #32]
 8005776:	6323      	str	r3, [r4, #48]	; 0x30
 8005778:	bd10      	pop	{r4, pc}
 800577a:	bf00      	nop
 800577c:	08005bf9 	.word	0x08005bf9
 8005780:	08005c1b 	.word	0x08005c1b
 8005784:	08005c53 	.word	0x08005c53
 8005788:	08005c77 	.word	0x08005c77

0800578c <_cleanup_r>:
 800578c:	4901      	ldr	r1, [pc, #4]	; (8005794 <_cleanup_r+0x8>)
 800578e:	f000 b8af 	b.w	80058f0 <_fwalk_reent>
 8005792:	bf00      	nop
 8005794:	080056cd 	.word	0x080056cd

08005798 <__sfmoreglue>:
 8005798:	b570      	push	{r4, r5, r6, lr}
 800579a:	1e4a      	subs	r2, r1, #1
 800579c:	2568      	movs	r5, #104	; 0x68
 800579e:	4355      	muls	r5, r2
 80057a0:	460e      	mov	r6, r1
 80057a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80057a6:	f000 f979 	bl	8005a9c <_malloc_r>
 80057aa:	4604      	mov	r4, r0
 80057ac:	b140      	cbz	r0, 80057c0 <__sfmoreglue+0x28>
 80057ae:	2100      	movs	r1, #0
 80057b0:	e9c0 1600 	strd	r1, r6, [r0]
 80057b4:	300c      	adds	r0, #12
 80057b6:	60a0      	str	r0, [r4, #8]
 80057b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80057bc:	f7ff fb2a 	bl	8004e14 <memset>
 80057c0:	4620      	mov	r0, r4
 80057c2:	bd70      	pop	{r4, r5, r6, pc}

080057c4 <__sfp_lock_acquire>:
 80057c4:	4801      	ldr	r0, [pc, #4]	; (80057cc <__sfp_lock_acquire+0x8>)
 80057c6:	f000 b8b3 	b.w	8005930 <__retarget_lock_acquire_recursive>
 80057ca:	bf00      	nop
 80057cc:	20000684 	.word	0x20000684

080057d0 <__sfp_lock_release>:
 80057d0:	4801      	ldr	r0, [pc, #4]	; (80057d8 <__sfp_lock_release+0x8>)
 80057d2:	f000 b8ae 	b.w	8005932 <__retarget_lock_release_recursive>
 80057d6:	bf00      	nop
 80057d8:	20000684 	.word	0x20000684

080057dc <__sinit_lock_acquire>:
 80057dc:	4801      	ldr	r0, [pc, #4]	; (80057e4 <__sinit_lock_acquire+0x8>)
 80057de:	f000 b8a7 	b.w	8005930 <__retarget_lock_acquire_recursive>
 80057e2:	bf00      	nop
 80057e4:	2000067f 	.word	0x2000067f

080057e8 <__sinit_lock_release>:
 80057e8:	4801      	ldr	r0, [pc, #4]	; (80057f0 <__sinit_lock_release+0x8>)
 80057ea:	f000 b8a2 	b.w	8005932 <__retarget_lock_release_recursive>
 80057ee:	bf00      	nop
 80057f0:	2000067f 	.word	0x2000067f

080057f4 <__sinit>:
 80057f4:	b510      	push	{r4, lr}
 80057f6:	4604      	mov	r4, r0
 80057f8:	f7ff fff0 	bl	80057dc <__sinit_lock_acquire>
 80057fc:	69a3      	ldr	r3, [r4, #24]
 80057fe:	b11b      	cbz	r3, 8005808 <__sinit+0x14>
 8005800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005804:	f7ff bff0 	b.w	80057e8 <__sinit_lock_release>
 8005808:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800580c:	6523      	str	r3, [r4, #80]	; 0x50
 800580e:	4b13      	ldr	r3, [pc, #76]	; (800585c <__sinit+0x68>)
 8005810:	4a13      	ldr	r2, [pc, #76]	; (8005860 <__sinit+0x6c>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	62a2      	str	r2, [r4, #40]	; 0x28
 8005816:	42a3      	cmp	r3, r4
 8005818:	bf04      	itt	eq
 800581a:	2301      	moveq	r3, #1
 800581c:	61a3      	streq	r3, [r4, #24]
 800581e:	4620      	mov	r0, r4
 8005820:	f000 f820 	bl	8005864 <__sfp>
 8005824:	6060      	str	r0, [r4, #4]
 8005826:	4620      	mov	r0, r4
 8005828:	f000 f81c 	bl	8005864 <__sfp>
 800582c:	60a0      	str	r0, [r4, #8]
 800582e:	4620      	mov	r0, r4
 8005830:	f000 f818 	bl	8005864 <__sfp>
 8005834:	2200      	movs	r2, #0
 8005836:	60e0      	str	r0, [r4, #12]
 8005838:	2104      	movs	r1, #4
 800583a:	6860      	ldr	r0, [r4, #4]
 800583c:	f7ff ff82 	bl	8005744 <std>
 8005840:	68a0      	ldr	r0, [r4, #8]
 8005842:	2201      	movs	r2, #1
 8005844:	2109      	movs	r1, #9
 8005846:	f7ff ff7d 	bl	8005744 <std>
 800584a:	68e0      	ldr	r0, [r4, #12]
 800584c:	2202      	movs	r2, #2
 800584e:	2112      	movs	r1, #18
 8005850:	f7ff ff78 	bl	8005744 <std>
 8005854:	2301      	movs	r3, #1
 8005856:	61a3      	str	r3, [r4, #24]
 8005858:	e7d2      	b.n	8005800 <__sinit+0xc>
 800585a:	bf00      	nop
 800585c:	08006bb8 	.word	0x08006bb8
 8005860:	0800578d 	.word	0x0800578d

08005864 <__sfp>:
 8005864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005866:	4607      	mov	r7, r0
 8005868:	f7ff ffac 	bl	80057c4 <__sfp_lock_acquire>
 800586c:	4b1e      	ldr	r3, [pc, #120]	; (80058e8 <__sfp+0x84>)
 800586e:	681e      	ldr	r6, [r3, #0]
 8005870:	69b3      	ldr	r3, [r6, #24]
 8005872:	b913      	cbnz	r3, 800587a <__sfp+0x16>
 8005874:	4630      	mov	r0, r6
 8005876:	f7ff ffbd 	bl	80057f4 <__sinit>
 800587a:	3648      	adds	r6, #72	; 0x48
 800587c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005880:	3b01      	subs	r3, #1
 8005882:	d503      	bpl.n	800588c <__sfp+0x28>
 8005884:	6833      	ldr	r3, [r6, #0]
 8005886:	b30b      	cbz	r3, 80058cc <__sfp+0x68>
 8005888:	6836      	ldr	r6, [r6, #0]
 800588a:	e7f7      	b.n	800587c <__sfp+0x18>
 800588c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005890:	b9d5      	cbnz	r5, 80058c8 <__sfp+0x64>
 8005892:	4b16      	ldr	r3, [pc, #88]	; (80058ec <__sfp+0x88>)
 8005894:	60e3      	str	r3, [r4, #12]
 8005896:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800589a:	6665      	str	r5, [r4, #100]	; 0x64
 800589c:	f000 f847 	bl	800592e <__retarget_lock_init_recursive>
 80058a0:	f7ff ff96 	bl	80057d0 <__sfp_lock_release>
 80058a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80058a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80058ac:	6025      	str	r5, [r4, #0]
 80058ae:	61a5      	str	r5, [r4, #24]
 80058b0:	2208      	movs	r2, #8
 80058b2:	4629      	mov	r1, r5
 80058b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80058b8:	f7ff faac 	bl	8004e14 <memset>
 80058bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80058c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80058c4:	4620      	mov	r0, r4
 80058c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058c8:	3468      	adds	r4, #104	; 0x68
 80058ca:	e7d9      	b.n	8005880 <__sfp+0x1c>
 80058cc:	2104      	movs	r1, #4
 80058ce:	4638      	mov	r0, r7
 80058d0:	f7ff ff62 	bl	8005798 <__sfmoreglue>
 80058d4:	4604      	mov	r4, r0
 80058d6:	6030      	str	r0, [r6, #0]
 80058d8:	2800      	cmp	r0, #0
 80058da:	d1d5      	bne.n	8005888 <__sfp+0x24>
 80058dc:	f7ff ff78 	bl	80057d0 <__sfp_lock_release>
 80058e0:	230c      	movs	r3, #12
 80058e2:	603b      	str	r3, [r7, #0]
 80058e4:	e7ee      	b.n	80058c4 <__sfp+0x60>
 80058e6:	bf00      	nop
 80058e8:	08006bb8 	.word	0x08006bb8
 80058ec:	ffff0001 	.word	0xffff0001

080058f0 <_fwalk_reent>:
 80058f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058f4:	4606      	mov	r6, r0
 80058f6:	4688      	mov	r8, r1
 80058f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80058fc:	2700      	movs	r7, #0
 80058fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005902:	f1b9 0901 	subs.w	r9, r9, #1
 8005906:	d505      	bpl.n	8005914 <_fwalk_reent+0x24>
 8005908:	6824      	ldr	r4, [r4, #0]
 800590a:	2c00      	cmp	r4, #0
 800590c:	d1f7      	bne.n	80058fe <_fwalk_reent+0xe>
 800590e:	4638      	mov	r0, r7
 8005910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005914:	89ab      	ldrh	r3, [r5, #12]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d907      	bls.n	800592a <_fwalk_reent+0x3a>
 800591a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800591e:	3301      	adds	r3, #1
 8005920:	d003      	beq.n	800592a <_fwalk_reent+0x3a>
 8005922:	4629      	mov	r1, r5
 8005924:	4630      	mov	r0, r6
 8005926:	47c0      	blx	r8
 8005928:	4307      	orrs	r7, r0
 800592a:	3568      	adds	r5, #104	; 0x68
 800592c:	e7e9      	b.n	8005902 <_fwalk_reent+0x12>

0800592e <__retarget_lock_init_recursive>:
 800592e:	4770      	bx	lr

08005930 <__retarget_lock_acquire_recursive>:
 8005930:	4770      	bx	lr

08005932 <__retarget_lock_release_recursive>:
 8005932:	4770      	bx	lr

08005934 <__swhatbuf_r>:
 8005934:	b570      	push	{r4, r5, r6, lr}
 8005936:	460e      	mov	r6, r1
 8005938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800593c:	2900      	cmp	r1, #0
 800593e:	b096      	sub	sp, #88	; 0x58
 8005940:	4614      	mov	r4, r2
 8005942:	461d      	mov	r5, r3
 8005944:	da07      	bge.n	8005956 <__swhatbuf_r+0x22>
 8005946:	2300      	movs	r3, #0
 8005948:	602b      	str	r3, [r5, #0]
 800594a:	89b3      	ldrh	r3, [r6, #12]
 800594c:	061a      	lsls	r2, r3, #24
 800594e:	d410      	bmi.n	8005972 <__swhatbuf_r+0x3e>
 8005950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005954:	e00e      	b.n	8005974 <__swhatbuf_r+0x40>
 8005956:	466a      	mov	r2, sp
 8005958:	f000 f9b4 	bl	8005cc4 <_fstat_r>
 800595c:	2800      	cmp	r0, #0
 800595e:	dbf2      	blt.n	8005946 <__swhatbuf_r+0x12>
 8005960:	9a01      	ldr	r2, [sp, #4]
 8005962:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005966:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800596a:	425a      	negs	r2, r3
 800596c:	415a      	adcs	r2, r3
 800596e:	602a      	str	r2, [r5, #0]
 8005970:	e7ee      	b.n	8005950 <__swhatbuf_r+0x1c>
 8005972:	2340      	movs	r3, #64	; 0x40
 8005974:	2000      	movs	r0, #0
 8005976:	6023      	str	r3, [r4, #0]
 8005978:	b016      	add	sp, #88	; 0x58
 800597a:	bd70      	pop	{r4, r5, r6, pc}

0800597c <__smakebuf_r>:
 800597c:	898b      	ldrh	r3, [r1, #12]
 800597e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005980:	079d      	lsls	r5, r3, #30
 8005982:	4606      	mov	r6, r0
 8005984:	460c      	mov	r4, r1
 8005986:	d507      	bpl.n	8005998 <__smakebuf_r+0x1c>
 8005988:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	6123      	str	r3, [r4, #16]
 8005990:	2301      	movs	r3, #1
 8005992:	6163      	str	r3, [r4, #20]
 8005994:	b002      	add	sp, #8
 8005996:	bd70      	pop	{r4, r5, r6, pc}
 8005998:	ab01      	add	r3, sp, #4
 800599a:	466a      	mov	r2, sp
 800599c:	f7ff ffca 	bl	8005934 <__swhatbuf_r>
 80059a0:	9900      	ldr	r1, [sp, #0]
 80059a2:	4605      	mov	r5, r0
 80059a4:	4630      	mov	r0, r6
 80059a6:	f000 f879 	bl	8005a9c <_malloc_r>
 80059aa:	b948      	cbnz	r0, 80059c0 <__smakebuf_r+0x44>
 80059ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059b0:	059a      	lsls	r2, r3, #22
 80059b2:	d4ef      	bmi.n	8005994 <__smakebuf_r+0x18>
 80059b4:	f023 0303 	bic.w	r3, r3, #3
 80059b8:	f043 0302 	orr.w	r3, r3, #2
 80059bc:	81a3      	strh	r3, [r4, #12]
 80059be:	e7e3      	b.n	8005988 <__smakebuf_r+0xc>
 80059c0:	4b0d      	ldr	r3, [pc, #52]	; (80059f8 <__smakebuf_r+0x7c>)
 80059c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80059c4:	89a3      	ldrh	r3, [r4, #12]
 80059c6:	6020      	str	r0, [r4, #0]
 80059c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059cc:	81a3      	strh	r3, [r4, #12]
 80059ce:	9b00      	ldr	r3, [sp, #0]
 80059d0:	6163      	str	r3, [r4, #20]
 80059d2:	9b01      	ldr	r3, [sp, #4]
 80059d4:	6120      	str	r0, [r4, #16]
 80059d6:	b15b      	cbz	r3, 80059f0 <__smakebuf_r+0x74>
 80059d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059dc:	4630      	mov	r0, r6
 80059de:	f000 f983 	bl	8005ce8 <_isatty_r>
 80059e2:	b128      	cbz	r0, 80059f0 <__smakebuf_r+0x74>
 80059e4:	89a3      	ldrh	r3, [r4, #12]
 80059e6:	f023 0303 	bic.w	r3, r3, #3
 80059ea:	f043 0301 	orr.w	r3, r3, #1
 80059ee:	81a3      	strh	r3, [r4, #12]
 80059f0:	89a0      	ldrh	r0, [r4, #12]
 80059f2:	4305      	orrs	r5, r0
 80059f4:	81a5      	strh	r5, [r4, #12]
 80059f6:	e7cd      	b.n	8005994 <__smakebuf_r+0x18>
 80059f8:	0800578d 	.word	0x0800578d

080059fc <_free_r>:
 80059fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059fe:	2900      	cmp	r1, #0
 8005a00:	d048      	beq.n	8005a94 <_free_r+0x98>
 8005a02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a06:	9001      	str	r0, [sp, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f1a1 0404 	sub.w	r4, r1, #4
 8005a0e:	bfb8      	it	lt
 8005a10:	18e4      	addlt	r4, r4, r3
 8005a12:	f000 f98b 	bl	8005d2c <__malloc_lock>
 8005a16:	4a20      	ldr	r2, [pc, #128]	; (8005a98 <_free_r+0x9c>)
 8005a18:	9801      	ldr	r0, [sp, #4]
 8005a1a:	6813      	ldr	r3, [r2, #0]
 8005a1c:	4615      	mov	r5, r2
 8005a1e:	b933      	cbnz	r3, 8005a2e <_free_r+0x32>
 8005a20:	6063      	str	r3, [r4, #4]
 8005a22:	6014      	str	r4, [r2, #0]
 8005a24:	b003      	add	sp, #12
 8005a26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a2a:	f000 b985 	b.w	8005d38 <__malloc_unlock>
 8005a2e:	42a3      	cmp	r3, r4
 8005a30:	d90b      	bls.n	8005a4a <_free_r+0x4e>
 8005a32:	6821      	ldr	r1, [r4, #0]
 8005a34:	1862      	adds	r2, r4, r1
 8005a36:	4293      	cmp	r3, r2
 8005a38:	bf04      	itt	eq
 8005a3a:	681a      	ldreq	r2, [r3, #0]
 8005a3c:	685b      	ldreq	r3, [r3, #4]
 8005a3e:	6063      	str	r3, [r4, #4]
 8005a40:	bf04      	itt	eq
 8005a42:	1852      	addeq	r2, r2, r1
 8005a44:	6022      	streq	r2, [r4, #0]
 8005a46:	602c      	str	r4, [r5, #0]
 8005a48:	e7ec      	b.n	8005a24 <_free_r+0x28>
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	b10b      	cbz	r3, 8005a54 <_free_r+0x58>
 8005a50:	42a3      	cmp	r3, r4
 8005a52:	d9fa      	bls.n	8005a4a <_free_r+0x4e>
 8005a54:	6811      	ldr	r1, [r2, #0]
 8005a56:	1855      	adds	r5, r2, r1
 8005a58:	42a5      	cmp	r5, r4
 8005a5a:	d10b      	bne.n	8005a74 <_free_r+0x78>
 8005a5c:	6824      	ldr	r4, [r4, #0]
 8005a5e:	4421      	add	r1, r4
 8005a60:	1854      	adds	r4, r2, r1
 8005a62:	42a3      	cmp	r3, r4
 8005a64:	6011      	str	r1, [r2, #0]
 8005a66:	d1dd      	bne.n	8005a24 <_free_r+0x28>
 8005a68:	681c      	ldr	r4, [r3, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	6053      	str	r3, [r2, #4]
 8005a6e:	4421      	add	r1, r4
 8005a70:	6011      	str	r1, [r2, #0]
 8005a72:	e7d7      	b.n	8005a24 <_free_r+0x28>
 8005a74:	d902      	bls.n	8005a7c <_free_r+0x80>
 8005a76:	230c      	movs	r3, #12
 8005a78:	6003      	str	r3, [r0, #0]
 8005a7a:	e7d3      	b.n	8005a24 <_free_r+0x28>
 8005a7c:	6825      	ldr	r5, [r4, #0]
 8005a7e:	1961      	adds	r1, r4, r5
 8005a80:	428b      	cmp	r3, r1
 8005a82:	bf04      	itt	eq
 8005a84:	6819      	ldreq	r1, [r3, #0]
 8005a86:	685b      	ldreq	r3, [r3, #4]
 8005a88:	6063      	str	r3, [r4, #4]
 8005a8a:	bf04      	itt	eq
 8005a8c:	1949      	addeq	r1, r1, r5
 8005a8e:	6021      	streq	r1, [r4, #0]
 8005a90:	6054      	str	r4, [r2, #4]
 8005a92:	e7c7      	b.n	8005a24 <_free_r+0x28>
 8005a94:	b003      	add	sp, #12
 8005a96:	bd30      	pop	{r4, r5, pc}
 8005a98:	20000580 	.word	0x20000580

08005a9c <_malloc_r>:
 8005a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9e:	1ccd      	adds	r5, r1, #3
 8005aa0:	f025 0503 	bic.w	r5, r5, #3
 8005aa4:	3508      	adds	r5, #8
 8005aa6:	2d0c      	cmp	r5, #12
 8005aa8:	bf38      	it	cc
 8005aaa:	250c      	movcc	r5, #12
 8005aac:	2d00      	cmp	r5, #0
 8005aae:	4606      	mov	r6, r0
 8005ab0:	db01      	blt.n	8005ab6 <_malloc_r+0x1a>
 8005ab2:	42a9      	cmp	r1, r5
 8005ab4:	d903      	bls.n	8005abe <_malloc_r+0x22>
 8005ab6:	230c      	movs	r3, #12
 8005ab8:	6033      	str	r3, [r6, #0]
 8005aba:	2000      	movs	r0, #0
 8005abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005abe:	f000 f935 	bl	8005d2c <__malloc_lock>
 8005ac2:	4921      	ldr	r1, [pc, #132]	; (8005b48 <_malloc_r+0xac>)
 8005ac4:	680a      	ldr	r2, [r1, #0]
 8005ac6:	4614      	mov	r4, r2
 8005ac8:	b99c      	cbnz	r4, 8005af2 <_malloc_r+0x56>
 8005aca:	4f20      	ldr	r7, [pc, #128]	; (8005b4c <_malloc_r+0xb0>)
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	b923      	cbnz	r3, 8005ada <_malloc_r+0x3e>
 8005ad0:	4621      	mov	r1, r4
 8005ad2:	4630      	mov	r0, r6
 8005ad4:	f000 f83c 	bl	8005b50 <_sbrk_r>
 8005ad8:	6038      	str	r0, [r7, #0]
 8005ada:	4629      	mov	r1, r5
 8005adc:	4630      	mov	r0, r6
 8005ade:	f000 f837 	bl	8005b50 <_sbrk_r>
 8005ae2:	1c43      	adds	r3, r0, #1
 8005ae4:	d123      	bne.n	8005b2e <_malloc_r+0x92>
 8005ae6:	230c      	movs	r3, #12
 8005ae8:	6033      	str	r3, [r6, #0]
 8005aea:	4630      	mov	r0, r6
 8005aec:	f000 f924 	bl	8005d38 <__malloc_unlock>
 8005af0:	e7e3      	b.n	8005aba <_malloc_r+0x1e>
 8005af2:	6823      	ldr	r3, [r4, #0]
 8005af4:	1b5b      	subs	r3, r3, r5
 8005af6:	d417      	bmi.n	8005b28 <_malloc_r+0x8c>
 8005af8:	2b0b      	cmp	r3, #11
 8005afa:	d903      	bls.n	8005b04 <_malloc_r+0x68>
 8005afc:	6023      	str	r3, [r4, #0]
 8005afe:	441c      	add	r4, r3
 8005b00:	6025      	str	r5, [r4, #0]
 8005b02:	e004      	b.n	8005b0e <_malloc_r+0x72>
 8005b04:	6863      	ldr	r3, [r4, #4]
 8005b06:	42a2      	cmp	r2, r4
 8005b08:	bf0c      	ite	eq
 8005b0a:	600b      	streq	r3, [r1, #0]
 8005b0c:	6053      	strne	r3, [r2, #4]
 8005b0e:	4630      	mov	r0, r6
 8005b10:	f000 f912 	bl	8005d38 <__malloc_unlock>
 8005b14:	f104 000b 	add.w	r0, r4, #11
 8005b18:	1d23      	adds	r3, r4, #4
 8005b1a:	f020 0007 	bic.w	r0, r0, #7
 8005b1e:	1ac2      	subs	r2, r0, r3
 8005b20:	d0cc      	beq.n	8005abc <_malloc_r+0x20>
 8005b22:	1a1b      	subs	r3, r3, r0
 8005b24:	50a3      	str	r3, [r4, r2]
 8005b26:	e7c9      	b.n	8005abc <_malloc_r+0x20>
 8005b28:	4622      	mov	r2, r4
 8005b2a:	6864      	ldr	r4, [r4, #4]
 8005b2c:	e7cc      	b.n	8005ac8 <_malloc_r+0x2c>
 8005b2e:	1cc4      	adds	r4, r0, #3
 8005b30:	f024 0403 	bic.w	r4, r4, #3
 8005b34:	42a0      	cmp	r0, r4
 8005b36:	d0e3      	beq.n	8005b00 <_malloc_r+0x64>
 8005b38:	1a21      	subs	r1, r4, r0
 8005b3a:	4630      	mov	r0, r6
 8005b3c:	f000 f808 	bl	8005b50 <_sbrk_r>
 8005b40:	3001      	adds	r0, #1
 8005b42:	d1dd      	bne.n	8005b00 <_malloc_r+0x64>
 8005b44:	e7cf      	b.n	8005ae6 <_malloc_r+0x4a>
 8005b46:	bf00      	nop
 8005b48:	20000580 	.word	0x20000580
 8005b4c:	20000584 	.word	0x20000584

08005b50 <_sbrk_r>:
 8005b50:	b538      	push	{r3, r4, r5, lr}
 8005b52:	4d06      	ldr	r5, [pc, #24]	; (8005b6c <_sbrk_r+0x1c>)
 8005b54:	2300      	movs	r3, #0
 8005b56:	4604      	mov	r4, r0
 8005b58:	4608      	mov	r0, r1
 8005b5a:	602b      	str	r3, [r5, #0]
 8005b5c:	f7fc fbee 	bl	800233c <_sbrk>
 8005b60:	1c43      	adds	r3, r0, #1
 8005b62:	d102      	bne.n	8005b6a <_sbrk_r+0x1a>
 8005b64:	682b      	ldr	r3, [r5, #0]
 8005b66:	b103      	cbz	r3, 8005b6a <_sbrk_r+0x1a>
 8005b68:	6023      	str	r3, [r4, #0]
 8005b6a:	bd38      	pop	{r3, r4, r5, pc}
 8005b6c:	20000688 	.word	0x20000688

08005b70 <_raise_r>:
 8005b70:	291f      	cmp	r1, #31
 8005b72:	b538      	push	{r3, r4, r5, lr}
 8005b74:	4604      	mov	r4, r0
 8005b76:	460d      	mov	r5, r1
 8005b78:	d904      	bls.n	8005b84 <_raise_r+0x14>
 8005b7a:	2316      	movs	r3, #22
 8005b7c:	6003      	str	r3, [r0, #0]
 8005b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b82:	bd38      	pop	{r3, r4, r5, pc}
 8005b84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005b86:	b112      	cbz	r2, 8005b8e <_raise_r+0x1e>
 8005b88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005b8c:	b94b      	cbnz	r3, 8005ba2 <_raise_r+0x32>
 8005b8e:	4620      	mov	r0, r4
 8005b90:	f000 f830 	bl	8005bf4 <_getpid_r>
 8005b94:	462a      	mov	r2, r5
 8005b96:	4601      	mov	r1, r0
 8005b98:	4620      	mov	r0, r4
 8005b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b9e:	f000 b817 	b.w	8005bd0 <_kill_r>
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d00a      	beq.n	8005bbc <_raise_r+0x4c>
 8005ba6:	1c59      	adds	r1, r3, #1
 8005ba8:	d103      	bne.n	8005bb2 <_raise_r+0x42>
 8005baa:	2316      	movs	r3, #22
 8005bac:	6003      	str	r3, [r0, #0]
 8005bae:	2001      	movs	r0, #1
 8005bb0:	e7e7      	b.n	8005b82 <_raise_r+0x12>
 8005bb2:	2400      	movs	r4, #0
 8005bb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005bb8:	4628      	mov	r0, r5
 8005bba:	4798      	blx	r3
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	e7e0      	b.n	8005b82 <_raise_r+0x12>

08005bc0 <raise>:
 8005bc0:	4b02      	ldr	r3, [pc, #8]	; (8005bcc <raise+0xc>)
 8005bc2:	4601      	mov	r1, r0
 8005bc4:	6818      	ldr	r0, [r3, #0]
 8005bc6:	f7ff bfd3 	b.w	8005b70 <_raise_r>
 8005bca:	bf00      	nop
 8005bcc:	20000034 	.word	0x20000034

08005bd0 <_kill_r>:
 8005bd0:	b538      	push	{r3, r4, r5, lr}
 8005bd2:	4d07      	ldr	r5, [pc, #28]	; (8005bf0 <_kill_r+0x20>)
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	4604      	mov	r4, r0
 8005bd8:	4608      	mov	r0, r1
 8005bda:	4611      	mov	r1, r2
 8005bdc:	602b      	str	r3, [r5, #0]
 8005bde:	f7fc fb25 	bl	800222c <_kill>
 8005be2:	1c43      	adds	r3, r0, #1
 8005be4:	d102      	bne.n	8005bec <_kill_r+0x1c>
 8005be6:	682b      	ldr	r3, [r5, #0]
 8005be8:	b103      	cbz	r3, 8005bec <_kill_r+0x1c>
 8005bea:	6023      	str	r3, [r4, #0]
 8005bec:	bd38      	pop	{r3, r4, r5, pc}
 8005bee:	bf00      	nop
 8005bf0:	20000688 	.word	0x20000688

08005bf4 <_getpid_r>:
 8005bf4:	f7fc bb12 	b.w	800221c <_getpid>

08005bf8 <__sread>:
 8005bf8:	b510      	push	{r4, lr}
 8005bfa:	460c      	mov	r4, r1
 8005bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c00:	f000 f8a0 	bl	8005d44 <_read_r>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	bfab      	itete	ge
 8005c08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c0a:	89a3      	ldrhlt	r3, [r4, #12]
 8005c0c:	181b      	addge	r3, r3, r0
 8005c0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c12:	bfac      	ite	ge
 8005c14:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c16:	81a3      	strhlt	r3, [r4, #12]
 8005c18:	bd10      	pop	{r4, pc}

08005c1a <__swrite>:
 8005c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c1e:	461f      	mov	r7, r3
 8005c20:	898b      	ldrh	r3, [r1, #12]
 8005c22:	05db      	lsls	r3, r3, #23
 8005c24:	4605      	mov	r5, r0
 8005c26:	460c      	mov	r4, r1
 8005c28:	4616      	mov	r6, r2
 8005c2a:	d505      	bpl.n	8005c38 <__swrite+0x1e>
 8005c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c30:	2302      	movs	r3, #2
 8005c32:	2200      	movs	r2, #0
 8005c34:	f000 f868 	bl	8005d08 <_lseek_r>
 8005c38:	89a3      	ldrh	r3, [r4, #12]
 8005c3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c42:	81a3      	strh	r3, [r4, #12]
 8005c44:	4632      	mov	r2, r6
 8005c46:	463b      	mov	r3, r7
 8005c48:	4628      	mov	r0, r5
 8005c4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c4e:	f000 b817 	b.w	8005c80 <_write_r>

08005c52 <__sseek>:
 8005c52:	b510      	push	{r4, lr}
 8005c54:	460c      	mov	r4, r1
 8005c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c5a:	f000 f855 	bl	8005d08 <_lseek_r>
 8005c5e:	1c43      	adds	r3, r0, #1
 8005c60:	89a3      	ldrh	r3, [r4, #12]
 8005c62:	bf15      	itete	ne
 8005c64:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c6e:	81a3      	strheq	r3, [r4, #12]
 8005c70:	bf18      	it	ne
 8005c72:	81a3      	strhne	r3, [r4, #12]
 8005c74:	bd10      	pop	{r4, pc}

08005c76 <__sclose>:
 8005c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c7a:	f000 b813 	b.w	8005ca4 <_close_r>
	...

08005c80 <_write_r>:
 8005c80:	b538      	push	{r3, r4, r5, lr}
 8005c82:	4d07      	ldr	r5, [pc, #28]	; (8005ca0 <_write_r+0x20>)
 8005c84:	4604      	mov	r4, r0
 8005c86:	4608      	mov	r0, r1
 8005c88:	4611      	mov	r1, r2
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	602a      	str	r2, [r5, #0]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	f7fc fb03 	bl	800229a <_write>
 8005c94:	1c43      	adds	r3, r0, #1
 8005c96:	d102      	bne.n	8005c9e <_write_r+0x1e>
 8005c98:	682b      	ldr	r3, [r5, #0]
 8005c9a:	b103      	cbz	r3, 8005c9e <_write_r+0x1e>
 8005c9c:	6023      	str	r3, [r4, #0]
 8005c9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ca0:	20000688 	.word	0x20000688

08005ca4 <_close_r>:
 8005ca4:	b538      	push	{r3, r4, r5, lr}
 8005ca6:	4d06      	ldr	r5, [pc, #24]	; (8005cc0 <_close_r+0x1c>)
 8005ca8:	2300      	movs	r3, #0
 8005caa:	4604      	mov	r4, r0
 8005cac:	4608      	mov	r0, r1
 8005cae:	602b      	str	r3, [r5, #0]
 8005cb0:	f7fc fb0f 	bl	80022d2 <_close>
 8005cb4:	1c43      	adds	r3, r0, #1
 8005cb6:	d102      	bne.n	8005cbe <_close_r+0x1a>
 8005cb8:	682b      	ldr	r3, [r5, #0]
 8005cba:	b103      	cbz	r3, 8005cbe <_close_r+0x1a>
 8005cbc:	6023      	str	r3, [r4, #0]
 8005cbe:	bd38      	pop	{r3, r4, r5, pc}
 8005cc0:	20000688 	.word	0x20000688

08005cc4 <_fstat_r>:
 8005cc4:	b538      	push	{r3, r4, r5, lr}
 8005cc6:	4d07      	ldr	r5, [pc, #28]	; (8005ce4 <_fstat_r+0x20>)
 8005cc8:	2300      	movs	r3, #0
 8005cca:	4604      	mov	r4, r0
 8005ccc:	4608      	mov	r0, r1
 8005cce:	4611      	mov	r1, r2
 8005cd0:	602b      	str	r3, [r5, #0]
 8005cd2:	f7fc fb0a 	bl	80022ea <_fstat>
 8005cd6:	1c43      	adds	r3, r0, #1
 8005cd8:	d102      	bne.n	8005ce0 <_fstat_r+0x1c>
 8005cda:	682b      	ldr	r3, [r5, #0]
 8005cdc:	b103      	cbz	r3, 8005ce0 <_fstat_r+0x1c>
 8005cde:	6023      	str	r3, [r4, #0]
 8005ce0:	bd38      	pop	{r3, r4, r5, pc}
 8005ce2:	bf00      	nop
 8005ce4:	20000688 	.word	0x20000688

08005ce8 <_isatty_r>:
 8005ce8:	b538      	push	{r3, r4, r5, lr}
 8005cea:	4d06      	ldr	r5, [pc, #24]	; (8005d04 <_isatty_r+0x1c>)
 8005cec:	2300      	movs	r3, #0
 8005cee:	4604      	mov	r4, r0
 8005cf0:	4608      	mov	r0, r1
 8005cf2:	602b      	str	r3, [r5, #0]
 8005cf4:	f7fc fb09 	bl	800230a <_isatty>
 8005cf8:	1c43      	adds	r3, r0, #1
 8005cfa:	d102      	bne.n	8005d02 <_isatty_r+0x1a>
 8005cfc:	682b      	ldr	r3, [r5, #0]
 8005cfe:	b103      	cbz	r3, 8005d02 <_isatty_r+0x1a>
 8005d00:	6023      	str	r3, [r4, #0]
 8005d02:	bd38      	pop	{r3, r4, r5, pc}
 8005d04:	20000688 	.word	0x20000688

08005d08 <_lseek_r>:
 8005d08:	b538      	push	{r3, r4, r5, lr}
 8005d0a:	4d07      	ldr	r5, [pc, #28]	; (8005d28 <_lseek_r+0x20>)
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	4608      	mov	r0, r1
 8005d10:	4611      	mov	r1, r2
 8005d12:	2200      	movs	r2, #0
 8005d14:	602a      	str	r2, [r5, #0]
 8005d16:	461a      	mov	r2, r3
 8005d18:	f7fc fb02 	bl	8002320 <_lseek>
 8005d1c:	1c43      	adds	r3, r0, #1
 8005d1e:	d102      	bne.n	8005d26 <_lseek_r+0x1e>
 8005d20:	682b      	ldr	r3, [r5, #0]
 8005d22:	b103      	cbz	r3, 8005d26 <_lseek_r+0x1e>
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	bd38      	pop	{r3, r4, r5, pc}
 8005d28:	20000688 	.word	0x20000688

08005d2c <__malloc_lock>:
 8005d2c:	4801      	ldr	r0, [pc, #4]	; (8005d34 <__malloc_lock+0x8>)
 8005d2e:	f7ff bdff 	b.w	8005930 <__retarget_lock_acquire_recursive>
 8005d32:	bf00      	nop
 8005d34:	20000680 	.word	0x20000680

08005d38 <__malloc_unlock>:
 8005d38:	4801      	ldr	r0, [pc, #4]	; (8005d40 <__malloc_unlock+0x8>)
 8005d3a:	f7ff bdfa 	b.w	8005932 <__retarget_lock_release_recursive>
 8005d3e:	bf00      	nop
 8005d40:	20000680 	.word	0x20000680

08005d44 <_read_r>:
 8005d44:	b538      	push	{r3, r4, r5, lr}
 8005d46:	4d07      	ldr	r5, [pc, #28]	; (8005d64 <_read_r+0x20>)
 8005d48:	4604      	mov	r4, r0
 8005d4a:	4608      	mov	r0, r1
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	2200      	movs	r2, #0
 8005d50:	602a      	str	r2, [r5, #0]
 8005d52:	461a      	mov	r2, r3
 8005d54:	f7fc fa84 	bl	8002260 <_read>
 8005d58:	1c43      	adds	r3, r0, #1
 8005d5a:	d102      	bne.n	8005d62 <_read_r+0x1e>
 8005d5c:	682b      	ldr	r3, [r5, #0]
 8005d5e:	b103      	cbz	r3, 8005d62 <_read_r+0x1e>
 8005d60:	6023      	str	r3, [r4, #0]
 8005d62:	bd38      	pop	{r3, r4, r5, pc}
 8005d64:	20000688 	.word	0x20000688

08005d68 <_init>:
 8005d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6a:	bf00      	nop
 8005d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d6e:	bc08      	pop	{r3}
 8005d70:	469e      	mov	lr, r3
 8005d72:	4770      	bx	lr

08005d74 <_fini>:
 8005d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d76:	bf00      	nop
 8005d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d7a:	bc08      	pop	{r3}
 8005d7c:	469e      	mov	lr, r3
 8005d7e:	4770      	bx	lr
