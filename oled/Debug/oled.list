
oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000243c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000db0  08002578  08002578  00012578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003328  08003328  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08003328  08003328  00013328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003330  08003330  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003330  08003330  00013330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003334  08003334  00013334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  2000001c  08003354  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  08003354  00020498  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f19  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000165e  00000000  00000000  00027f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  000295c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e8  00000000  00000000  00029d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189e5  00000000  00000000  0002a428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000094f5  00000000  00000000  00042e0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084e09  00000000  00000000  0004c302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d110b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e10  00000000  00000000  000d1160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000001c 	.word	0x2000001c
 8000158:	00000000 	.word	0x00000000
 800015c:	08002560 	.word	0x08002560

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000020 	.word	0x20000020
 8000178:	08002560 	.word	0x08002560

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
	/* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000474:	b580      	push	{r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af04      	add	r7, sp, #16
 800047a:	4603      	mov	r3, r0
 800047c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1,
 800047e:	f04f 33ff 	mov.w	r3, #4294967295
 8000482:	9302      	str	r3, [sp, #8]
 8000484:	2301      	movs	r3, #1
 8000486:	9301      	str	r3, [sp, #4]
 8000488:	1dfb      	adds	r3, r7, #7
 800048a:	9300      	str	r3, [sp, #0]
 800048c:	2301      	movs	r3, #1
 800048e:	2200      	movs	r2, #0
 8000490:	2178      	movs	r1, #120	; 0x78
 8000492:	4803      	ldr	r0, [pc, #12]	; (80004a0 <ssd1306_WriteCommand+0x2c>)
 8000494:	f000 ff9a 	bl	80013cc <HAL_I2C_Mem_Write>
			HAL_MAX_DELAY);
}
 8000498:	bf00      	nop
 800049a:	3708      	adds	r7, #8
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	20000440 	.word	0x20000440

080004a4 <ssd1306_WriteData>:
//void ssd1306_writecommand(uint8_t *buff, uint8_t command)
//{
//	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR , 0x80, buff, command, HAL_MAX_DELAY);
//}
// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b086      	sub	sp, #24
 80004a8:	af04      	add	r7, sp, #16
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer,
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	b29b      	uxth	r3, r3
 80004b2:	f04f 32ff 	mov.w	r2, #4294967295
 80004b6:	9202      	str	r2, [sp, #8]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	9300      	str	r3, [sp, #0]
 80004be:	2301      	movs	r3, #1
 80004c0:	2240      	movs	r2, #64	; 0x40
 80004c2:	2178      	movs	r1, #120	; 0x78
 80004c4:	4803      	ldr	r0, [pc, #12]	; (80004d4 <ssd1306_WriteData+0x30>)
 80004c6:	f000 ff81 	bl	80013cc <HAL_I2C_Mem_Write>
			buff_size, HAL_MAX_DELAY);
}
 80004ca:	bf00      	nop
 80004cc:	3708      	adds	r7, #8
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	20000440 	.word	0x20000440

080004d8 <ssd1306_Fill>:

	SSD1306.Initialized = 1;
}

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;
//	send_uart("Enter Fill \n\r");
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80004e2:	2300      	movs	r3, #0
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	e00d      	b.n	8000504 <ssd1306_Fill+0x2c>
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d101      	bne.n	80004f2 <ssd1306_Fill+0x1a>
 80004ee:	2100      	movs	r1, #0
 80004f0:	e000      	b.n	80004f4 <ssd1306_Fill+0x1c>
 80004f2:	21ff      	movs	r1, #255	; 0xff
 80004f4:	4a08      	ldr	r2, [pc, #32]	; (8000518 <ssd1306_Fill+0x40>)
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	4413      	add	r3, r2
 80004fa:	460a      	mov	r2, r1
 80004fc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	3301      	adds	r3, #1
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800050a:	d3ed      	bcc.n	80004e8 <ssd1306_Fill+0x10>
	}
//	send_uart("End Fill \n\r");
}
 800050c:	bf00      	nop
 800050e:	bf00      	nop
 8000510:	3714      	adds	r7, #20
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr
 8000518:	20000038 	.word	0x20000038

0800051c <ssd1306_UpdateScreen>:

// Write the screen buffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
	// depends on the screen height:
	//
	//  * 32px   ==  4 pages
	//  * 64px   ==  8 pages
	//  * 128px  ==  16 pages
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 8000522:	2300      	movs	r3, #0
 8000524:	71fb      	strb	r3, [r7, #7]
 8000526:	e016      	b.n	8000556 <ssd1306_UpdateScreen+0x3a>
		ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	3b50      	subs	r3, #80	; 0x50
 800052c:	b2db      	uxtb	r3, r3
 800052e:	4618      	mov	r0, r3
 8000530:	f7ff ffa0 	bl	8000474 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8000534:	2000      	movs	r0, #0
 8000536:	f7ff ff9d 	bl	8000474 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 800053a:	2010      	movs	r0, #16
 800053c:	f7ff ff9a 	bl	8000474 <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	01db      	lsls	r3, r3, #7
 8000544:	4a08      	ldr	r2, [pc, #32]	; (8000568 <ssd1306_UpdateScreen+0x4c>)
 8000546:	4413      	add	r3, r2
 8000548:	2180      	movs	r1, #128	; 0x80
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff ffaa 	bl	80004a4 <ssd1306_WriteData>
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	3301      	adds	r3, #1
 8000554:	71fb      	strb	r3, [r7, #7]
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	2b07      	cmp	r3, #7
 800055a:	d9e5      	bls.n	8000528 <ssd1306_UpdateScreen+0xc>
	}
//	send_uart("End update \n\r");
}
 800055c:	bf00      	nop
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000038 	.word	0x20000038

0800056c <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
 8000576:	460b      	mov	r3, r1
 8000578:	71bb      	strb	r3, [r7, #6]
 800057a:	4613      	mov	r3, r2
 800057c:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800057e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000582:	2b00      	cmp	r3, #0
 8000584:	db48      	blt.n	8000618 <ssd1306_DrawPixel+0xac>
 8000586:	79bb      	ldrb	r3, [r7, #6]
 8000588:	2b3f      	cmp	r3, #63	; 0x3f
 800058a:	d845      	bhi.n	8000618 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted) {
 800058c:	4b25      	ldr	r3, [pc, #148]	; (8000624 <ssd1306_DrawPixel+0xb8>)
 800058e:	791b      	ldrb	r3, [r3, #4]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d006      	beq.n	80005a2 <ssd1306_DrawPixel+0x36>
		color = (SSD1306_COLOR) !color;
 8000594:	797b      	ldrb	r3, [r7, #5]
 8000596:	2b00      	cmp	r3, #0
 8000598:	bf0c      	ite	eq
 800059a:	2301      	moveq	r3, #1
 800059c:	2300      	movne	r3, #0
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	717b      	strb	r3, [r7, #5]
	}

	// Draw in the right color
	if (color == White) {
 80005a2:	797b      	ldrb	r3, [r7, #5]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d11a      	bne.n	80005de <ssd1306_DrawPixel+0x72>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80005a8:	79fa      	ldrb	r2, [r7, #7]
 80005aa:	79bb      	ldrb	r3, [r7, #6]
 80005ac:	08db      	lsrs	r3, r3, #3
 80005ae:	b2d8      	uxtb	r0, r3
 80005b0:	4603      	mov	r3, r0
 80005b2:	01db      	lsls	r3, r3, #7
 80005b4:	4413      	add	r3, r2
 80005b6:	4a1c      	ldr	r2, [pc, #112]	; (8000628 <ssd1306_DrawPixel+0xbc>)
 80005b8:	5cd3      	ldrb	r3, [r2, r3]
 80005ba:	b25a      	sxtb	r2, r3
 80005bc:	79bb      	ldrb	r3, [r7, #6]
 80005be:	f003 0307 	and.w	r3, r3, #7
 80005c2:	2101      	movs	r1, #1
 80005c4:	fa01 f303 	lsl.w	r3, r1, r3
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	4313      	orrs	r3, r2
 80005cc:	b259      	sxtb	r1, r3
 80005ce:	79fa      	ldrb	r2, [r7, #7]
 80005d0:	4603      	mov	r3, r0
 80005d2:	01db      	lsls	r3, r3, #7
 80005d4:	4413      	add	r3, r2
 80005d6:	b2c9      	uxtb	r1, r1
 80005d8:	4a13      	ldr	r2, [pc, #76]	; (8000628 <ssd1306_DrawPixel+0xbc>)
 80005da:	54d1      	strb	r1, [r2, r3]
 80005dc:	e01d      	b.n	800061a <ssd1306_DrawPixel+0xae>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80005de:	79fa      	ldrb	r2, [r7, #7]
 80005e0:	79bb      	ldrb	r3, [r7, #6]
 80005e2:	08db      	lsrs	r3, r3, #3
 80005e4:	b2d8      	uxtb	r0, r3
 80005e6:	4603      	mov	r3, r0
 80005e8:	01db      	lsls	r3, r3, #7
 80005ea:	4413      	add	r3, r2
 80005ec:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <ssd1306_DrawPixel+0xbc>)
 80005ee:	5cd3      	ldrb	r3, [r2, r3]
 80005f0:	b25a      	sxtb	r2, r3
 80005f2:	79bb      	ldrb	r3, [r7, #6]
 80005f4:	f003 0307 	and.w	r3, r3, #7
 80005f8:	2101      	movs	r1, #1
 80005fa:	fa01 f303 	lsl.w	r3, r1, r3
 80005fe:	b25b      	sxtb	r3, r3
 8000600:	43db      	mvns	r3, r3
 8000602:	b25b      	sxtb	r3, r3
 8000604:	4013      	ands	r3, r2
 8000606:	b259      	sxtb	r1, r3
 8000608:	79fa      	ldrb	r2, [r7, #7]
 800060a:	4603      	mov	r3, r0
 800060c:	01db      	lsls	r3, r3, #7
 800060e:	4413      	add	r3, r2
 8000610:	b2c9      	uxtb	r1, r1
 8000612:	4a05      	ldr	r2, [pc, #20]	; (8000628 <ssd1306_DrawPixel+0xbc>)
 8000614:	54d1      	strb	r1, [r2, r3]
 8000616:	e000      	b.n	800061a <ssd1306_DrawPixel+0xae>
		return;
 8000618:	bf00      	nop
	}
}
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000438 	.word	0x20000438
 8000628:	20000038 	.word	0x20000038

0800062c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b089      	sub	sp, #36	; 0x24
 8000630:	af00      	add	r7, sp, #0
 8000632:	4604      	mov	r4, r0
 8000634:	1d38      	adds	r0, r7, #4
 8000636:	e880 0006 	stmia.w	r0, {r1, r2}
 800063a:	461a      	mov	r2, r3
 800063c:	4623      	mov	r3, r4
 800063e:	73fb      	strb	r3, [r7, #15]
 8000640:	4613      	mov	r3, r2
 8000642:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Check if character is valid
	if (ch < 32 || ch > 126)
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	2b1f      	cmp	r3, #31
 8000648:	d902      	bls.n	8000650 <ssd1306_WriteChar+0x24>
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	2b7e      	cmp	r3, #126	; 0x7e
 800064e:	d901      	bls.n	8000654 <ssd1306_WriteChar+0x28>
		return 0;
 8000650:	2300      	movs	r3, #0
 8000652:	e06d      	b.n	8000730 <ssd1306_WriteChar+0x104>

	// Check remaining space on current line
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000654:	4b38      	ldr	r3, [pc, #224]	; (8000738 <ssd1306_WriteChar+0x10c>)
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	461a      	mov	r2, r3
 800065a:	793b      	ldrb	r3, [r7, #4]
 800065c:	4413      	add	r3, r2
 800065e:	2b80      	cmp	r3, #128	; 0x80
 8000660:	dc06      	bgt.n	8000670 <ssd1306_WriteChar+0x44>
	SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight)) {
 8000662:	4b35      	ldr	r3, [pc, #212]	; (8000738 <ssd1306_WriteChar+0x10c>)
 8000664:	885b      	ldrh	r3, [r3, #2]
 8000666:	461a      	mov	r2, r3
 8000668:	797b      	ldrb	r3, [r7, #5]
 800066a:	4413      	add	r3, r2
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800066c:	2b40      	cmp	r3, #64	; 0x40
 800066e:	dd01      	ble.n	8000674 <ssd1306_WriteChar+0x48>
		// Not enough space on current line
		return 0;
 8000670:	2300      	movs	r3, #0
 8000672:	e05d      	b.n	8000730 <ssd1306_WriteChar+0x104>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++) {
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]
 8000678:	e04c      	b.n	8000714 <ssd1306_WriteChar+0xe8>
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	3b20      	subs	r3, #32
 8000680:	7979      	ldrb	r1, [r7, #5]
 8000682:	fb01 f303 	mul.w	r3, r1, r3
 8000686:	4619      	mov	r1, r3
 8000688:	69fb      	ldr	r3, [r7, #28]
 800068a:	440b      	add	r3, r1
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	4413      	add	r3, r2
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++) {
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
 8000698:	e034      	b.n	8000704 <ssd1306_WriteChar+0xd8>
			if ((b << j) & 0x8000) {
 800069a:	697a      	ldr	r2, [r7, #20]
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	fa02 f303 	lsl.w	r3, r2, r3
 80006a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d012      	beq.n	80006d0 <ssd1306_WriteChar+0xa4>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 80006aa:	4b23      	ldr	r3, [pc, #140]	; (8000738 <ssd1306_WriteChar+0x10c>)
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	69bb      	ldr	r3, [r7, #24]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	4413      	add	r3, r2
 80006b6:	b2d8      	uxtb	r0, r3
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <ssd1306_WriteChar+0x10c>)
 80006ba:	885b      	ldrh	r3, [r3, #2]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	4413      	add	r3, r2
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	7bba      	ldrb	r2, [r7, #14]
 80006c8:	4619      	mov	r1, r3
 80006ca:	f7ff ff4f 	bl	800056c <ssd1306_DrawPixel>
 80006ce:	e016      	b.n	80006fe <ssd1306_WriteChar+0xd2>
						(SSD1306_COLOR) color);
			} else {
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 80006d0:	4b19      	ldr	r3, [pc, #100]	; (8000738 <ssd1306_WriteChar+0x10c>)
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	69bb      	ldr	r3, [r7, #24]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	4413      	add	r3, r2
 80006dc:	b2d8      	uxtb	r0, r3
 80006de:	4b16      	ldr	r3, [pc, #88]	; (8000738 <ssd1306_WriteChar+0x10c>)
 80006e0:	885b      	ldrh	r3, [r3, #2]
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	4413      	add	r3, r2
 80006ea:	b2d9      	uxtb	r1, r3
 80006ec:	7bbb      	ldrb	r3, [r7, #14]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	bf0c      	ite	eq
 80006f2:	2301      	moveq	r3, #1
 80006f4:	2300      	movne	r3, #0
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	461a      	mov	r2, r3
 80006fa:	f7ff ff37 	bl	800056c <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++) {
 80006fe:	69bb      	ldr	r3, [r7, #24]
 8000700:	3301      	adds	r3, #1
 8000702:	61bb      	str	r3, [r7, #24]
 8000704:	793b      	ldrb	r3, [r7, #4]
 8000706:	461a      	mov	r2, r3
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	4293      	cmp	r3, r2
 800070c:	d3c5      	bcc.n	800069a <ssd1306_WriteChar+0x6e>
	for (i = 0; i < Font.FontHeight; i++) {
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3301      	adds	r3, #1
 8000712:	61fb      	str	r3, [r7, #28]
 8000714:	797b      	ldrb	r3, [r7, #5]
 8000716:	461a      	mov	r2, r3
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	4293      	cmp	r3, r2
 800071c:	d3ad      	bcc.n	800067a <ssd1306_WriteChar+0x4e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <ssd1306_WriteChar+0x10c>)
 8000720:	881a      	ldrh	r2, [r3, #0]
 8000722:	793b      	ldrb	r3, [r7, #4]
 8000724:	b29b      	uxth	r3, r3
 8000726:	4413      	add	r3, r2
 8000728:	b29a      	uxth	r2, r3
 800072a:	4b03      	ldr	r3, [pc, #12]	; (8000738 <ssd1306_WriteChar+0x10c>)
 800072c:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 800072e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000730:	4618      	mov	r0, r3
 8000732:	3724      	adds	r7, #36	; 0x24
 8000734:	46bd      	mov	sp, r7
 8000736:	bd90      	pop	{r4, r7, pc}
 8000738:	20000438 	.word	0x20000438

0800073c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	1d38      	adds	r0, r7, #4
 8000746:	e880 0006 	stmia.w	r0, {r1, r2}
 800074a:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
//	send_uart("Enter Writestring \n\r");
	while (*str) {
 800074c:	e012      	b.n	8000774 <ssd1306_WriteString+0x38>
		if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	7818      	ldrb	r0, [r3, #0]
 8000752:	78fb      	ldrb	r3, [r7, #3]
 8000754:	1d3a      	adds	r2, r7, #4
 8000756:	ca06      	ldmia	r2, {r1, r2}
 8000758:	f7ff ff68 	bl	800062c <ssd1306_WriteChar>
 800075c:	4603      	mov	r3, r0
 800075e:	461a      	mov	r2, r3
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	429a      	cmp	r2, r3
 8000766:	d002      	beq.n	800076e <ssd1306_WriteString+0x32>
			// Char could not be written
			return *str;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	e008      	b.n	8000780 <ssd1306_WriteString+0x44>
		}

		// Next char
		str++;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	3301      	adds	r3, #1
 8000772:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1e8      	bne.n	800074e <ssd1306_WriteString+0x12>
	}
//	send_uart("End Writestring \n\r");
	// Everything ok
	return *str;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	781b      	ldrb	r3, [r3, #0]
}
 8000780:	4618      	mov	r0, r3
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	460a      	mov	r2, r1
 8000792:	71fb      	strb	r3, [r7, #7]
 8000794:	4613      	mov	r3, r2
 8000796:	71bb      	strb	r3, [r7, #6]
//	send_uart("Enter Cursor \n\r");
	SSD1306.CurrentX = x;
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	b29a      	uxth	r2, r3
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <ssd1306_SetCursor+0x2c>)
 800079e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 80007a0:	79bb      	ldrb	r3, [r7, #6]
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b03      	ldr	r3, [pc, #12]	; (80007b4 <ssd1306_SetCursor+0x2c>)
 80007a6:	805a      	strh	r2, [r3, #2]
//	send_uart("End Cursor \n\r");
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	20000438 	.word	0x20000438

080007b8 <ssd1306_SetDisplayOn>:
	const uint8_t kSetContrastControlRegister = 0x81;
	ssd1306_WriteCommand(kSetContrastControlRegister);
	ssd1306_WriteCommand(value);
}

void ssd1306_SetDisplayOn(const uint8_t on) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	if (on) {
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d005      	beq.n	80007d4 <ssd1306_SetDisplayOn+0x1c>
		value = 0xAF;   // Display on
 80007c8:	23af      	movs	r3, #175	; 0xaf
 80007ca:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 1;
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <ssd1306_SetDisplayOn+0x38>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	719a      	strb	r2, [r3, #6]
 80007d2:	e004      	b.n	80007de <ssd1306_SetDisplayOn+0x26>
	} else {
		value = 0xAE;   // Display off
 80007d4:	23ae      	movs	r3, #174	; 0xae
 80007d6:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 0;
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <ssd1306_SetDisplayOn+0x38>)
 80007da:	2200      	movs	r2, #0
 80007dc:	719a      	strb	r2, [r3, #6]
	}
	ssd1306_WriteCommand(value);
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fe47 	bl	8000474 <ssd1306_WriteCommand>
}
 80007e6:	bf00      	nop
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000438 	.word	0x20000438

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80007f8:	f000 f99f 	bl	8000b3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fc:	f000 f83a 	bl	8000874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000800:	f000 f8ae 	bl	8000960 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000804:	f000 f87e 	bl	8000904 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	ssd1306_SetDisplayOn(0xAF);		        /* Display ON */
 8000808:	20af      	movs	r0, #175	; 0xaf
 800080a:	f7ff ffd5 	bl	80007b8 <ssd1306_SetDisplayOn>
	ssd1306_Fill(White);
 800080e:	2001      	movs	r0, #1
 8000810:	f7ff fe62 	bl	80004d8 <ssd1306_Fill>
		ssd1306_SetCursor(1,1);
 8000814:	2101      	movs	r1, #1
 8000816:	2001      	movs	r0, #1
 8000818:	f7ff ffb6 	bl	8000788 <ssd1306_SetCursor>
		ssd1306_WriteString("Hello World",Font_7x10,Black);
 800081c:	4a10      	ldr	r2, [pc, #64]	; (8000860 <main+0x6c>)
 800081e:	2300      	movs	r3, #0
 8000820:	ca06      	ldmia	r2, {r1, r2}
 8000822:	4810      	ldr	r0, [pc, #64]	; (8000864 <main+0x70>)
 8000824:	f7ff ff8a 	bl	800073c <ssd1306_WriteString>
		ssd1306_SetCursor(1, 10);
 8000828:	210a      	movs	r1, #10
 800082a:	2001      	movs	r0, #1
 800082c:	f7ff ffac 	bl	8000788 <ssd1306_SetCursor>
		ssd1306_WriteString("Hello CDAC",Font_7x10,Black);
 8000830:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <main+0x6c>)
 8000832:	2300      	movs	r3, #0
 8000834:	ca06      	ldmia	r2, {r1, r2}
 8000836:	480c      	ldr	r0, [pc, #48]	; (8000868 <main+0x74>)
 8000838:	f7ff ff80 	bl	800073c <ssd1306_WriteString>

		ssd1306_SetCursor(1, 20);
 800083c:	2114      	movs	r1, #20
 800083e:	2001      	movs	r0, #1
 8000840:	f7ff ffa2 	bl	8000788 <ssd1306_SetCursor>
				ssd1306_WriteString("Saishiva Reddy Gatla",Font_6x8,Black);
 8000844:	4a09      	ldr	r2, [pc, #36]	; (800086c <main+0x78>)
 8000846:	2300      	movs	r3, #0
 8000848:	ca06      	ldmia	r2, {r1, r2}
 800084a:	4809      	ldr	r0, [pc, #36]	; (8000870 <main+0x7c>)
 800084c:	f7ff ff76 	bl	800073c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000850:	f7ff fe64 	bl	800051c <ssd1306_UpdateScreen>

		HAL_Delay(1000);
 8000854:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000858:	f000 f9de 	bl	8000c18 <HAL_Delay>
 // update screen
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800085c:	e7fe      	b.n	800085c <main+0x68>
 800085e:	bf00      	nop
 8000860:	20000008 	.word	0x20000008
 8000864:	08002578 	.word	0x08002578
 8000868:	08002584 	.word	0x08002584
 800086c:	20000000 	.word	0x20000000
 8000870:	08002590 	.word	0x08002590

08000874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b092      	sub	sp, #72	; 0x48
 8000878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	2234      	movs	r2, #52	; 0x34
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f001 fe64 	bl	8002550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000888:	463b      	mov	r3, r7
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000896:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <SystemClock_Config+0x8c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800089e:	4a18      	ldr	r2, [pc, #96]	; (8000900 <SystemClock_Config+0x8c>)
 80008a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008a4:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008a6:	2310      	movs	r3, #16
 80008a8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008aa:	2301      	movs	r3, #1
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80008b2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80008b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4618      	mov	r0, r3
 80008c2:	f001 f899 	bl	80019f8 <HAL_RCC_OscConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80008cc:	f000 f86a 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d0:	230f      	movs	r3, #15
 80008d2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008e4:	463b      	mov	r3, r7
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f001 fbb5 	bl	8002058 <HAL_RCC_ClockConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80008f4:	f000 f856 	bl	80009a4 <Error_Handler>
  }
}
 80008f8:	bf00      	nop
 80008fa:	3748      	adds	r7, #72	; 0x48
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40007000 	.word	0x40007000

08000904 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_I2C1_Init+0x50>)
 800090a:	4a13      	ldr	r2, [pc, #76]	; (8000958 <MX_I2C1_Init+0x54>)
 800090c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_I2C1_Init+0x50>)
 8000910:	4a12      	ldr	r2, [pc, #72]	; (800095c <MX_I2C1_Init+0x58>)
 8000912:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_I2C1_Init+0x50>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_I2C1_Init+0x50>)
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_I2C1_Init+0x50>)
 8000922:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000926:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MX_I2C1_Init+0x50>)
 800092a:	2200      	movs	r2, #0
 800092c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_I2C1_Init+0x50>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000934:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MX_I2C1_Init+0x50>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_I2C1_Init+0x50>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_I2C1_Init+0x50>)
 8000942:	f000 fbff 	bl	8001144 <HAL_I2C_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800094c:	f000 f82a 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000440 	.word	0x20000440
 8000958:	40005400 	.word	0x40005400
 800095c:	000186a0 	.word	0x000186a0

08000960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_GPIO_Init+0x40>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	4a0d      	ldr	r2, [pc, #52]	; (80009a0 <MX_GPIO_Init+0x40>)
 800096c:	f043 0320 	orr.w	r3, r3, #32
 8000970:	61d3      	str	r3, [r2, #28]
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <MX_GPIO_Init+0x40>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	f003 0320 	and.w	r3, r3, #32
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_GPIO_Init+0x40>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	4a07      	ldr	r2, [pc, #28]	; (80009a0 <MX_GPIO_Init+0x40>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	61d3      	str	r3, [r2, #28]
 800098a:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <MX_GPIO_Init+0x40>)
 800098c:	69db      	ldr	r3, [r3, #28]
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr
 80009a0:	40023800 	.word	0x40023800

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ac:	e7fe      	b.n	80009ac <Error_Handler+0x8>
	...

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80009b6:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <HAL_MspInit+0x58>)
 80009b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ba:	4a13      	ldr	r2, [pc, #76]	; (8000a08 <HAL_MspInit+0x58>)
 80009bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c0:	6253      	str	r3, [r2, #36]	; 0x24
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <HAL_MspInit+0x58>)
 80009c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <HAL_MspInit+0x58>)
 80009d0:	6a1b      	ldr	r3, [r3, #32]
 80009d2:	4a0d      	ldr	r2, [pc, #52]	; (8000a08 <HAL_MspInit+0x58>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6213      	str	r3, [r2, #32]
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <HAL_MspInit+0x58>)
 80009dc:	6a1b      	ldr	r3, [r3, #32]
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_MspInit+0x58>)
 80009e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ea:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <HAL_MspInit+0x58>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f0:	6253      	str	r3, [r2, #36]	; 0x24
 80009f2:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <HAL_MspInit+0x58>)
 80009f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fe:	bf00      	nop
 8000a00:	3714      	adds	r7, #20
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	40023800 	.word	0x40023800

08000a0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a17      	ldr	r2, [pc, #92]	; (8000a88 <HAL_I2C_MspInit+0x7c>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d127      	bne.n	8000a7e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <HAL_I2C_MspInit+0x80>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	4a16      	ldr	r2, [pc, #88]	; (8000a8c <HAL_I2C_MspInit+0x80>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	61d3      	str	r3, [r2, #28]
 8000a3a:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <HAL_I2C_MspInit+0x80>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a46:	23c0      	movs	r3, #192	; 0xc0
 8000a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a4a:	2312      	movs	r3, #18
 8000a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a52:	2303      	movs	r3, #3
 8000a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a56:	2304      	movs	r3, #4
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	480b      	ldr	r0, [pc, #44]	; (8000a90 <HAL_I2C_MspInit+0x84>)
 8000a62:	f000 f9df 	bl	8000e24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <HAL_I2C_MspInit+0x80>)
 8000a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a6a:	4a08      	ldr	r2, [pc, #32]	; (8000a8c <HAL_I2C_MspInit+0x80>)
 8000a6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a70:	6253      	str	r3, [r2, #36]	; 0x24
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_I2C_MspInit+0x80>)
 8000a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a7e:	bf00      	nop
 8000a80:	3728      	adds	r7, #40	; 0x28
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40005400 	.word	0x40005400
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020400 	.word	0x40020400

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <NMI_Handler+0x4>

08000a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr

08000abe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr

08000aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr

08000ad6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ada:	f000 f881 	bl	8000be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr
	...

08000af0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af0:	480c      	ldr	r0, [pc, #48]	; (8000b24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000af2:	490d      	ldr	r1, [pc, #52]	; (8000b28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000af4:	4a0d      	ldr	r2, [pc, #52]	; (8000b2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af8:	e002      	b.n	8000b00 <LoopCopyDataInit>

08000afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afe:	3304      	adds	r3, #4

08000b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b04:	d3f9      	bcc.n	8000afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b06:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b08:	4c0a      	ldr	r4, [pc, #40]	; (8000b34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b0c:	e001      	b.n	8000b12 <LoopFillZerobss>

08000b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b10:	3204      	adds	r2, #4

08000b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b14:	d3fb      	bcc.n	8000b0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b16:	f7ff ffe4 	bl	8000ae2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b1a:	f001 fcf5 	bl	8002508 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b1e:	f7ff fe69 	bl	80007f4 <main>
  bx lr
 8000b22:	4770      	bx	lr
  ldr r0, =_sdata
 8000b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b28:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000b2c:	08003338 	.word	0x08003338
  ldr r2, =_sbss
 8000b30:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000b34:	20000498 	.word	0x20000498

08000b38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <ADC1_IRQHandler>

08000b3a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b40:	2300      	movs	r3, #0
 8000b42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b44:	2003      	movs	r0, #3
 8000b46:	f000 f939 	bl	8000dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f000 f80e 	bl	8000b6c <HAL_InitTick>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d002      	beq.n	8000b5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	71fb      	strb	r3, [r7, #7]
 8000b5a:	e001      	b.n	8000b60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b5c:	f7ff ff28 	bl	80009b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b60:	79fb      	ldrb	r3, [r7, #7]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b74:	2300      	movs	r3, #0
 8000b76:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b78:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <HAL_InitTick+0x68>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d022      	beq.n	8000bc6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b80:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <HAL_InitTick+0x6c>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <HAL_InitTick+0x68>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 f938 	bl	8000e0a <HAL_SYSTICK_Config>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d10f      	bne.n	8000bc0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b0f      	cmp	r3, #15
 8000ba4:	d809      	bhi.n	8000bba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	6879      	ldr	r1, [r7, #4]
 8000baa:	f04f 30ff 	mov.w	r0, #4294967295
 8000bae:	f000 f910 	bl	8000dd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <HAL_InitTick+0x70>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	e007      	b.n	8000bca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	73fb      	strb	r3, [r7, #15]
 8000bbe:	e004      	b.n	8000bca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	73fb      	strb	r3, [r7, #15]
 8000bc4:	e001      	b.n	8000bca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000018 	.word	0x20000018
 8000bd8:	20000010 	.word	0x20000010
 8000bdc:	20000014 	.word	0x20000014

08000be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_IncTick+0x1c>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <HAL_IncTick+0x20>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4413      	add	r3, r2
 8000bee:	4a03      	ldr	r2, [pc, #12]	; (8000bfc <HAL_IncTick+0x1c>)
 8000bf0:	6013      	str	r3, [r2, #0]
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000494 	.word	0x20000494
 8000c00:	20000018 	.word	0x20000018

08000c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b02      	ldr	r3, [pc, #8]	; (8000c14 <HAL_GetTick+0x10>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	20000494 	.word	0x20000494

08000c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c20:	f7ff fff0 	bl	8000c04 <HAL_GetTick>
 8000c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c30:	d004      	beq.n	8000c3c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HAL_Delay+0x40>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	4413      	add	r3, r2
 8000c3a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c3c:	bf00      	nop
 8000c3e:	f7ff ffe1 	bl	8000c04 <HAL_GetTick>
 8000c42:	4602      	mov	r2, r0
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d8f7      	bhi.n	8000c3e <HAL_Delay+0x26>
  {
  }
}
 8000c4e:	bf00      	nop
 8000c50:	bf00      	nop
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000018 	.word	0x20000018

08000c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8e:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	60d3      	str	r3, [r2, #12]
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <__NVIC_GetPriorityGrouping+0x18>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	0a1b      	lsrs	r3, r3, #8
 8000cae:	f003 0307 	and.w	r3, r3, #7
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db0a      	blt.n	8000cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	490c      	ldr	r1, [pc, #48]	; (8000d0c <__NVIC_SetPriority+0x4c>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	0112      	lsls	r2, r2, #4
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce8:	e00a      	b.n	8000d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4908      	ldr	r1, [pc, #32]	; (8000d10 <__NVIC_SetPriority+0x50>)
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	f003 030f 	and.w	r3, r3, #15
 8000cf6:	3b04      	subs	r3, #4
 8000cf8:	0112      	lsls	r2, r2, #4
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	440b      	add	r3, r1
 8000cfe:	761a      	strb	r2, [r3, #24]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000e100 	.word	0xe000e100
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b089      	sub	sp, #36	; 0x24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f1c3 0307 	rsb	r3, r3, #7
 8000d2e:	2b04      	cmp	r3, #4
 8000d30:	bf28      	it	cs
 8000d32:	2304      	movcs	r3, #4
 8000d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	2b06      	cmp	r3, #6
 8000d3c:	d902      	bls.n	8000d44 <NVIC_EncodePriority+0x30>
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3b03      	subs	r3, #3
 8000d42:	e000      	b.n	8000d46 <NVIC_EncodePriority+0x32>
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	f04f 32ff 	mov.w	r2, #4294967295
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43da      	mvns	r2, r3
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	401a      	ands	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	fa01 f303 	lsl.w	r3, r1, r3
 8000d66:	43d9      	mvns	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	4313      	orrs	r3, r2
         );
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3724      	adds	r7, #36	; 0x24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr

08000d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d88:	d301      	bcc.n	8000d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e00f      	b.n	8000dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <SysTick_Config+0x40>)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d96:	210f      	movs	r1, #15
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9c:	f7ff ff90 	bl	8000cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <SysTick_Config+0x40>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da6:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <SysTick_Config+0x40>)
 8000da8:	2207      	movs	r2, #7
 8000daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	e000e010 	.word	0xe000e010

08000dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff ff49 	bl	8000c5c <__NVIC_SetPriorityGrouping>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
 8000dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de4:	f7ff ff5e 	bl	8000ca4 <__NVIC_GetPriorityGrouping>
 8000de8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	68b9      	ldr	r1, [r7, #8]
 8000dee:	6978      	ldr	r0, [r7, #20]
 8000df0:	f7ff ff90 	bl	8000d14 <NVIC_EncodePriority>
 8000df4:	4602      	mov	r2, r0
 8000df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff5f 	bl	8000cc0 <__NVIC_SetPriority>
}
 8000e02:	bf00      	nop
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ffb0 	bl	8000d78 <SysTick_Config>
 8000e18:	4603      	mov	r3, r0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b087      	sub	sp, #28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e3a:	e160      	b.n	80010fe <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	2101      	movs	r1, #1
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	fa01 f303 	lsl.w	r3, r1, r3
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f000 8152 	beq.w	80010f8 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d005      	beq.n	8000e6c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d130      	bne.n	8000ece <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	2203      	movs	r2, #3
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	68da      	ldr	r2, [r3, #12]
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	091b      	lsrs	r3, r3, #4
 8000eb8:	f003 0201 	and.w	r2, r3, #1
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	2b03      	cmp	r3, #3
 8000ed8:	d017      	beq.n	8000f0a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	689a      	ldr	r2, [r3, #8]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 0303 	and.w	r3, r3, #3
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d123      	bne.n	8000f5e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	08da      	lsrs	r2, r3, #3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3208      	adds	r2, #8
 8000f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f22:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	691a      	ldr	r2, [r3, #16]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f003 0307 	and.w	r3, r3, #7
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	08da      	lsrs	r2, r3, #3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3208      	adds	r2, #8
 8000f58:	6939      	ldr	r1, [r7, #16]
 8000f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	2203      	movs	r2, #3
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	4013      	ands	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0203 	and.w	r2, r3, #3
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f000 80ac 	beq.w	80010f8 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa0:	4b5e      	ldr	r3, [pc, #376]	; (800111c <HAL_GPIO_Init+0x2f8>)
 8000fa2:	6a1b      	ldr	r3, [r3, #32]
 8000fa4:	4a5d      	ldr	r2, [pc, #372]	; (800111c <HAL_GPIO_Init+0x2f8>)
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	6213      	str	r3, [r2, #32]
 8000fac:	4b5b      	ldr	r3, [pc, #364]	; (800111c <HAL_GPIO_Init+0x2f8>)
 8000fae:	6a1b      	ldr	r3, [r3, #32]
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000fb8:	4a59      	ldr	r2, [pc, #356]	; (8001120 <HAL_GPIO_Init+0x2fc>)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	089b      	lsrs	r3, r3, #2
 8000fbe:	3302      	adds	r3, #2
 8000fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	220f      	movs	r2, #15
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a51      	ldr	r2, [pc, #324]	; (8001124 <HAL_GPIO_Init+0x300>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d025      	beq.n	8001030 <HAL_GPIO_Init+0x20c>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a50      	ldr	r2, [pc, #320]	; (8001128 <HAL_GPIO_Init+0x304>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d01f      	beq.n	800102c <HAL_GPIO_Init+0x208>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a4f      	ldr	r2, [pc, #316]	; (800112c <HAL_GPIO_Init+0x308>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d019      	beq.n	8001028 <HAL_GPIO_Init+0x204>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a4e      	ldr	r2, [pc, #312]	; (8001130 <HAL_GPIO_Init+0x30c>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d013      	beq.n	8001024 <HAL_GPIO_Init+0x200>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a4d      	ldr	r2, [pc, #308]	; (8001134 <HAL_GPIO_Init+0x310>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d00d      	beq.n	8001020 <HAL_GPIO_Init+0x1fc>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a4c      	ldr	r2, [pc, #304]	; (8001138 <HAL_GPIO_Init+0x314>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d007      	beq.n	800101c <HAL_GPIO_Init+0x1f8>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a4b      	ldr	r2, [pc, #300]	; (800113c <HAL_GPIO_Init+0x318>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d101      	bne.n	8001018 <HAL_GPIO_Init+0x1f4>
 8001014:	2306      	movs	r3, #6
 8001016:	e00c      	b.n	8001032 <HAL_GPIO_Init+0x20e>
 8001018:	2307      	movs	r3, #7
 800101a:	e00a      	b.n	8001032 <HAL_GPIO_Init+0x20e>
 800101c:	2305      	movs	r3, #5
 800101e:	e008      	b.n	8001032 <HAL_GPIO_Init+0x20e>
 8001020:	2304      	movs	r3, #4
 8001022:	e006      	b.n	8001032 <HAL_GPIO_Init+0x20e>
 8001024:	2303      	movs	r3, #3
 8001026:	e004      	b.n	8001032 <HAL_GPIO_Init+0x20e>
 8001028:	2302      	movs	r3, #2
 800102a:	e002      	b.n	8001032 <HAL_GPIO_Init+0x20e>
 800102c:	2301      	movs	r3, #1
 800102e:	e000      	b.n	8001032 <HAL_GPIO_Init+0x20e>
 8001030:	2300      	movs	r3, #0
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	f002 0203 	and.w	r2, r2, #3
 8001038:	0092      	lsls	r2, r2, #2
 800103a:	4093      	lsls	r3, r2
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4313      	orrs	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001042:	4937      	ldr	r1, [pc, #220]	; (8001120 <HAL_GPIO_Init+0x2fc>)
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	089b      	lsrs	r3, r3, #2
 8001048:	3302      	adds	r3, #2
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001050:	4b3b      	ldr	r3, [pc, #236]	; (8001140 <HAL_GPIO_Init+0x31c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	43db      	mvns	r3, r3
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001074:	4a32      	ldr	r2, [pc, #200]	; (8001140 <HAL_GPIO_Init+0x31c>)
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800107a:	4b31      	ldr	r3, [pc, #196]	; (8001140 <HAL_GPIO_Init+0x31c>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4313      	orrs	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800109e:	4a28      	ldr	r2, [pc, #160]	; (8001140 <HAL_GPIO_Init+0x31c>)
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010a4:	4b26      	ldr	r3, [pc, #152]	; (8001140 <HAL_GPIO_Init+0x31c>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	43db      	mvns	r3, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010c8:	4a1d      	ldr	r2, [pc, #116]	; (8001140 <HAL_GPIO_Init+0x31c>)
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010ce:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <HAL_GPIO_Init+0x31c>)
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010f2:	4a13      	ldr	r2, [pc, #76]	; (8001140 <HAL_GPIO_Init+0x31c>)
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	3301      	adds	r3, #1
 80010fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	fa22 f303 	lsr.w	r3, r2, r3
 8001108:	2b00      	cmp	r3, #0
 800110a:	f47f ae97 	bne.w	8000e3c <HAL_GPIO_Init+0x18>
  }
}
 800110e:	bf00      	nop
 8001110:	bf00      	nop
 8001112:	371c      	adds	r7, #28
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800
 8001120:	40010000 	.word	0x40010000
 8001124:	40020000 	.word	0x40020000
 8001128:	40020400 	.word	0x40020400
 800112c:	40020800 	.word	0x40020800
 8001130:	40020c00 	.word	0x40020c00
 8001134:	40021000 	.word	0x40021000
 8001138:	40021400 	.word	0x40021400
 800113c:	40021800 	.word	0x40021800
 8001140:	40010400 	.word	0x40010400

08001144 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d101      	bne.n	8001156 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e12b      	b.n	80013ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	d106      	bne.n	8001170 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff fc4e 	bl	8000a0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2224      	movs	r2, #36	; 0x24
 8001174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f022 0201 	bic.w	r2, r2, #1
 8001186:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001196:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80011a8:	f001 f93a 	bl	8002420 <HAL_RCC_GetPCLK1Freq>
 80011ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	4a81      	ldr	r2, [pc, #516]	; (80013b8 <HAL_I2C_Init+0x274>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d807      	bhi.n	80011c8 <HAL_I2C_Init+0x84>
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4a80      	ldr	r2, [pc, #512]	; (80013bc <HAL_I2C_Init+0x278>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	bf94      	ite	ls
 80011c0:	2301      	movls	r3, #1
 80011c2:	2300      	movhi	r3, #0
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	e006      	b.n	80011d6 <HAL_I2C_Init+0x92>
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4a7d      	ldr	r2, [pc, #500]	; (80013c0 <HAL_I2C_Init+0x27c>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	bf94      	ite	ls
 80011d0:	2301      	movls	r3, #1
 80011d2:	2300      	movhi	r3, #0
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e0e7      	b.n	80013ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	4a78      	ldr	r2, [pc, #480]	; (80013c4 <HAL_I2C_Init+0x280>)
 80011e2:	fba2 2303 	umull	r2, r3, r2, r3
 80011e6:	0c9b      	lsrs	r3, r3, #18
 80011e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	68ba      	ldr	r2, [r7, #8]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6a1b      	ldr	r3, [r3, #32]
 8001204:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	4a6a      	ldr	r2, [pc, #424]	; (80013b8 <HAL_I2C_Init+0x274>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d802      	bhi.n	8001218 <HAL_I2C_Init+0xd4>
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	3301      	adds	r3, #1
 8001216:	e009      	b.n	800122c <HAL_I2C_Init+0xe8>
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800121e:	fb02 f303 	mul.w	r3, r2, r3
 8001222:	4a69      	ldr	r2, [pc, #420]	; (80013c8 <HAL_I2C_Init+0x284>)
 8001224:	fba2 2303 	umull	r2, r3, r2, r3
 8001228:	099b      	lsrs	r3, r3, #6
 800122a:	3301      	adds	r3, #1
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	6812      	ldr	r2, [r2, #0]
 8001230:	430b      	orrs	r3, r1
 8001232:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800123e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	495c      	ldr	r1, [pc, #368]	; (80013b8 <HAL_I2C_Init+0x274>)
 8001248:	428b      	cmp	r3, r1
 800124a:	d819      	bhi.n	8001280 <HAL_I2C_Init+0x13c>
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	1e59      	subs	r1, r3, #1
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fbb1 f3f3 	udiv	r3, r1, r3
 800125a:	1c59      	adds	r1, r3, #1
 800125c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001260:	400b      	ands	r3, r1
 8001262:	2b00      	cmp	r3, #0
 8001264:	d00a      	beq.n	800127c <HAL_I2C_Init+0x138>
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	1e59      	subs	r1, r3, #1
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fbb1 f3f3 	udiv	r3, r1, r3
 8001274:	3301      	adds	r3, #1
 8001276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800127a:	e051      	b.n	8001320 <HAL_I2C_Init+0x1dc>
 800127c:	2304      	movs	r3, #4
 800127e:	e04f      	b.n	8001320 <HAL_I2C_Init+0x1dc>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d111      	bne.n	80012ac <HAL_I2C_Init+0x168>
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	1e58      	subs	r0, r3, #1
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6859      	ldr	r1, [r3, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	440b      	add	r3, r1
 8001296:	fbb0 f3f3 	udiv	r3, r0, r3
 800129a:	3301      	adds	r3, #1
 800129c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	bf0c      	ite	eq
 80012a4:	2301      	moveq	r3, #1
 80012a6:	2300      	movne	r3, #0
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	e012      	b.n	80012d2 <HAL_I2C_Init+0x18e>
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	1e58      	subs	r0, r3, #1
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6859      	ldr	r1, [r3, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	440b      	add	r3, r1
 80012ba:	0099      	lsls	r1, r3, #2
 80012bc:	440b      	add	r3, r1
 80012be:	fbb0 f3f3 	udiv	r3, r0, r3
 80012c2:	3301      	adds	r3, #1
 80012c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	bf0c      	ite	eq
 80012cc:	2301      	moveq	r3, #1
 80012ce:	2300      	movne	r3, #0
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_I2C_Init+0x196>
 80012d6:	2301      	movs	r3, #1
 80012d8:	e022      	b.n	8001320 <HAL_I2C_Init+0x1dc>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10e      	bne.n	8001300 <HAL_I2C_Init+0x1bc>
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	1e58      	subs	r0, r3, #1
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6859      	ldr	r1, [r3, #4]
 80012ea:	460b      	mov	r3, r1
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	440b      	add	r3, r1
 80012f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80012f4:	3301      	adds	r3, #1
 80012f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012fe:	e00f      	b.n	8001320 <HAL_I2C_Init+0x1dc>
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	1e58      	subs	r0, r3, #1
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6859      	ldr	r1, [r3, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	440b      	add	r3, r1
 800130e:	0099      	lsls	r1, r3, #2
 8001310:	440b      	add	r3, r1
 8001312:	fbb0 f3f3 	udiv	r3, r0, r3
 8001316:	3301      	adds	r3, #1
 8001318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800131c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001320:	6879      	ldr	r1, [r7, #4]
 8001322:	6809      	ldr	r1, [r1, #0]
 8001324:	4313      	orrs	r3, r2
 8001326:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69da      	ldr	r2, [r3, #28]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	430a      	orrs	r2, r1
 8001342:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800134e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	6911      	ldr	r1, [r2, #16]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68d2      	ldr	r2, [r2, #12]
 800135a:	4311      	orrs	r1, r2
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	6812      	ldr	r2, [r2, #0]
 8001360:	430b      	orrs	r3, r1
 8001362:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	695a      	ldr	r2, [r3, #20]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	431a      	orrs	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	430a      	orrs	r2, r1
 800137e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f042 0201 	orr.w	r2, r2, #1
 800138e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2220      	movs	r2, #32
 800139a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	000186a0 	.word	0x000186a0
 80013bc:	001e847f 	.word	0x001e847f
 80013c0:	003d08ff 	.word	0x003d08ff
 80013c4:	431bde83 	.word	0x431bde83
 80013c8:	10624dd3 	.word	0x10624dd3

080013cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af02      	add	r7, sp, #8
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	4608      	mov	r0, r1
 80013d6:	4611      	mov	r1, r2
 80013d8:	461a      	mov	r2, r3
 80013da:	4603      	mov	r3, r0
 80013dc:	817b      	strh	r3, [r7, #10]
 80013de:	460b      	mov	r3, r1
 80013e0:	813b      	strh	r3, [r7, #8]
 80013e2:	4613      	mov	r3, r2
 80013e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013e6:	f7ff fc0d 	bl	8000c04 <HAL_GetTick>
 80013ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b20      	cmp	r3, #32
 80013f6:	f040 80d9 	bne.w	80015ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2319      	movs	r3, #25
 8001400:	2201      	movs	r2, #1
 8001402:	496d      	ldr	r1, [pc, #436]	; (80015b8 <HAL_I2C_Mem_Write+0x1ec>)
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f000 f971 	bl	80016ec <I2C_WaitOnFlagUntilTimeout>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001410:	2302      	movs	r3, #2
 8001412:	e0cc      	b.n	80015ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800141a:	2b01      	cmp	r3, #1
 800141c:	d101      	bne.n	8001422 <HAL_I2C_Mem_Write+0x56>
 800141e:	2302      	movs	r3, #2
 8001420:	e0c5      	b.n	80015ae <HAL_I2C_Mem_Write+0x1e2>
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b01      	cmp	r3, #1
 8001436:	d007      	beq.n	8001448 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f042 0201 	orr.w	r2, r2, #1
 8001446:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001456:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2221      	movs	r2, #33	; 0x21
 800145c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2240      	movs	r2, #64	; 0x40
 8001464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2200      	movs	r2, #0
 800146c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6a3a      	ldr	r2, [r7, #32]
 8001472:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001478:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800147e:	b29a      	uxth	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4a4d      	ldr	r2, [pc, #308]	; (80015bc <HAL_I2C_Mem_Write+0x1f0>)
 8001488:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800148a:	88f8      	ldrh	r0, [r7, #6]
 800148c:	893a      	ldrh	r2, [r7, #8]
 800148e:	8979      	ldrh	r1, [r7, #10]
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	9301      	str	r3, [sp, #4]
 8001494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	4603      	mov	r3, r0
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f000 f890 	bl	80015c0 <I2C_RequestMemoryWrite>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d052      	beq.n	800154c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e081      	b.n	80015ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	f000 f9f2 	bl	8001898 <I2C_WaitOnTXEFlagUntilTimeout>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d00d      	beq.n	80014d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	2b04      	cmp	r3, #4
 80014c0:	d107      	bne.n	80014d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e06b      	b.n	80015ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	781a      	ldrb	r2, [r3, #0]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e6:	1c5a      	adds	r2, r3, #1
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f0:	3b01      	subs	r3, #1
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	3b01      	subs	r3, #1
 8001500:	b29a      	uxth	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	2b04      	cmp	r3, #4
 8001512:	d11b      	bne.n	800154c <HAL_I2C_Mem_Write+0x180>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001518:	2b00      	cmp	r3, #0
 800151a:	d017      	beq.n	800154c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001520:	781a      	ldrb	r2, [r3, #0]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	1c5a      	adds	r2, r3, #1
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001536:	3b01      	subs	r3, #1
 8001538:	b29a      	uxth	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001542:	b29b      	uxth	r3, r3
 8001544:	3b01      	subs	r3, #1
 8001546:	b29a      	uxth	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1aa      	bne.n	80014aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f000 f9de 	bl	800191a <I2C_WaitOnBTFFlagUntilTimeout>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00d      	beq.n	8001580 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	2b04      	cmp	r3, #4
 800156a:	d107      	bne.n	800157c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800157a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e016      	b.n	80015ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800158e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2220      	movs	r2, #32
 8001594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80015a8:	2300      	movs	r3, #0
 80015aa:	e000      	b.n	80015ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80015ac:	2302      	movs	r3, #2
  }
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	00100002 	.word	0x00100002
 80015bc:	ffff0000 	.word	0xffff0000

080015c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af02      	add	r7, sp, #8
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	4608      	mov	r0, r1
 80015ca:	4611      	mov	r1, r2
 80015cc:	461a      	mov	r2, r3
 80015ce:	4603      	mov	r3, r0
 80015d0:	817b      	strh	r3, [r7, #10]
 80015d2:	460b      	mov	r3, r1
 80015d4:	813b      	strh	r3, [r7, #8]
 80015d6:	4613      	mov	r3, r2
 80015d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	6a3b      	ldr	r3, [r7, #32]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80015f6:	68f8      	ldr	r0, [r7, #12]
 80015f8:	f000 f878 	bl	80016ec <I2C_WaitOnFlagUntilTimeout>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00d      	beq.n	800161e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001610:	d103      	bne.n	800161a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001618:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e05f      	b.n	80016de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800161e:	897b      	ldrh	r3, [r7, #10]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	461a      	mov	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800162c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	6a3a      	ldr	r2, [r7, #32]
 8001632:	492d      	ldr	r1, [pc, #180]	; (80016e8 <I2C_RequestMemoryWrite+0x128>)
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f000 f8b0 	bl	800179a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e04c      	b.n	80016de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800165a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800165c:	6a39      	ldr	r1, [r7, #32]
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f000 f91a 	bl	8001898 <I2C_WaitOnTXEFlagUntilTimeout>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00d      	beq.n	8001686 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	2b04      	cmp	r3, #4
 8001670:	d107      	bne.n	8001682 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001680:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e02b      	b.n	80016de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d105      	bne.n	8001698 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800168c:	893b      	ldrh	r3, [r7, #8]
 800168e:	b2da      	uxtb	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	611a      	str	r2, [r3, #16]
 8001696:	e021      	b.n	80016dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001698:	893b      	ldrh	r3, [r7, #8]
 800169a:	0a1b      	lsrs	r3, r3, #8
 800169c:	b29b      	uxth	r3, r3
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a8:	6a39      	ldr	r1, [r7, #32]
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f000 f8f4 	bl	8001898 <I2C_WaitOnTXEFlagUntilTimeout>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00d      	beq.n	80016d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d107      	bne.n	80016ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e005      	b.n	80016de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80016d2:	893b      	ldrh	r3, [r7, #8]
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	00010002 	.word	0x00010002

080016ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	4613      	mov	r3, r2
 80016fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016fc:	e025      	b.n	800174a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001704:	d021      	beq.n	800174a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001706:	f7ff fa7d 	bl	8000c04 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	d302      	bcc.n	800171c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d116      	bne.n	800174a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2200      	movs	r2, #0
 8001720:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2220      	movs	r2, #32
 8001726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	f043 0220 	orr.w	r2, r3, #32
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e023      	b.n	8001792 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	0c1b      	lsrs	r3, r3, #16
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b01      	cmp	r3, #1
 8001752:	d10d      	bne.n	8001770 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	43da      	mvns	r2, r3
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	4013      	ands	r3, r2
 8001760:	b29b      	uxth	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	bf0c      	ite	eq
 8001766:	2301      	moveq	r3, #1
 8001768:	2300      	movne	r3, #0
 800176a:	b2db      	uxtb	r3, r3
 800176c:	461a      	mov	r2, r3
 800176e:	e00c      	b.n	800178a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	43da      	mvns	r2, r3
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	4013      	ands	r3, r2
 800177c:	b29b      	uxth	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	bf0c      	ite	eq
 8001782:	2301      	moveq	r3, #1
 8001784:	2300      	movne	r3, #0
 8001786:	b2db      	uxtb	r3, r3
 8001788:	461a      	mov	r2, r3
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	429a      	cmp	r2, r3
 800178e:	d0b6      	beq.n	80016fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b084      	sub	sp, #16
 800179e:	af00      	add	r7, sp, #0
 80017a0:	60f8      	str	r0, [r7, #12]
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
 80017a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017a8:	e051      	b.n	800184e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017b8:	d123      	bne.n	8001802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80017d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2200      	movs	r2, #0
 80017d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2220      	movs	r2, #32
 80017de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f043 0204 	orr.w	r2, r3, #4
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e046      	b.n	8001890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001808:	d021      	beq.n	800184e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800180a:	f7ff f9fb 	bl	8000c04 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	429a      	cmp	r2, r3
 8001818:	d302      	bcc.n	8001820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d116      	bne.n	800184e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2220      	movs	r2, #32
 800182a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f043 0220 	orr.w	r2, r3, #32
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e020      	b.n	8001890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	0c1b      	lsrs	r3, r3, #16
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b01      	cmp	r3, #1
 8001856:	d10c      	bne.n	8001872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	43da      	mvns	r2, r3
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	4013      	ands	r3, r2
 8001864:	b29b      	uxth	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	bf14      	ite	ne
 800186a:	2301      	movne	r3, #1
 800186c:	2300      	moveq	r3, #0
 800186e:	b2db      	uxtb	r3, r3
 8001870:	e00b      	b.n	800188a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	43da      	mvns	r2, r3
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	4013      	ands	r3, r2
 800187e:	b29b      	uxth	r3, r3
 8001880:	2b00      	cmp	r3, #0
 8001882:	bf14      	ite	ne
 8001884:	2301      	movne	r3, #1
 8001886:	2300      	moveq	r3, #0
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d18d      	bne.n	80017aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018a4:	e02d      	b.n	8001902 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f000 f878 	bl	800199c <I2C_IsAcknowledgeFailed>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e02d      	b.n	8001912 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018bc:	d021      	beq.n	8001902 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018be:	f7ff f9a1 	bl	8000c04 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d302      	bcc.n	80018d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d116      	bne.n	8001902 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2200      	movs	r2, #0
 80018d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2220      	movs	r2, #32
 80018de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f043 0220 	orr.w	r2, r3, #32
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e007      	b.n	8001912 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800190c:	2b80      	cmp	r3, #128	; 0x80
 800190e:	d1ca      	bne.n	80018a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b084      	sub	sp, #16
 800191e:	af00      	add	r7, sp, #0
 8001920:	60f8      	str	r0, [r7, #12]
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001926:	e02d      	b.n	8001984 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f000 f837 	bl	800199c <I2C_IsAcknowledgeFailed>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e02d      	b.n	8001994 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800193e:	d021      	beq.n	8001984 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001940:	f7ff f960 	bl	8000c04 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	429a      	cmp	r2, r3
 800194e:	d302      	bcc.n	8001956 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d116      	bne.n	8001984 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2220      	movs	r2, #32
 8001960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	f043 0220 	orr.w	r2, r3, #32
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e007      	b.n	8001994 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	2b04      	cmp	r3, #4
 8001990:	d1ca      	bne.n	8001928 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019b2:	d11b      	bne.n	80019ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80019bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2220      	movs	r2, #32
 80019c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	f043 0204 	orr.w	r2, r3, #4
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e31d      	b.n	8002046 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a0a:	4b94      	ldr	r3, [pc, #592]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 030c 	and.w	r3, r3, #12
 8001a12:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a14:	4b91      	ldr	r3, [pc, #580]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a1c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d07b      	beq.n	8001b22 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d006      	beq.n	8001a3e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	2b0c      	cmp	r3, #12
 8001a34:	d10f      	bne.n	8001a56 <HAL_RCC_OscConfig+0x5e>
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a3c:	d10b      	bne.n	8001a56 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a3e:	4b87      	ldr	r3, [pc, #540]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d06a      	beq.n	8001b20 <HAL_RCC_OscConfig+0x128>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d166      	bne.n	8001b20 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e2f7      	b.n	8002046 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d106      	bne.n	8001a6c <HAL_RCC_OscConfig+0x74>
 8001a5e:	4b7f      	ldr	r3, [pc, #508]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a7e      	ldr	r2, [pc, #504]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	e02d      	b.n	8001ac8 <HAL_RCC_OscConfig+0xd0>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10c      	bne.n	8001a8e <HAL_RCC_OscConfig+0x96>
 8001a74:	4b79      	ldr	r3, [pc, #484]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a78      	ldr	r2, [pc, #480]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	4b76      	ldr	r3, [pc, #472]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a75      	ldr	r2, [pc, #468]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001a86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	e01c      	b.n	8001ac8 <HAL_RCC_OscConfig+0xd0>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b05      	cmp	r3, #5
 8001a94:	d10c      	bne.n	8001ab0 <HAL_RCC_OscConfig+0xb8>
 8001a96:	4b71      	ldr	r3, [pc, #452]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a70      	ldr	r2, [pc, #448]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	4b6e      	ldr	r3, [pc, #440]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a6d      	ldr	r2, [pc, #436]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	e00b      	b.n	8001ac8 <HAL_RCC_OscConfig+0xd0>
 8001ab0:	4b6a      	ldr	r3, [pc, #424]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a69      	ldr	r2, [pc, #420]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	4b67      	ldr	r3, [pc, #412]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a66      	ldr	r2, [pc, #408]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d013      	beq.n	8001af8 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad0:	f7ff f898 	bl	8000c04 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ad8:	f7ff f894 	bl	8000c04 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b64      	cmp	r3, #100	; 0x64
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e2ad      	b.n	8002046 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001aea:	4b5c      	ldr	r3, [pc, #368]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0xe0>
 8001af6:	e014      	b.n	8001b22 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af8:	f7ff f884 	bl	8000c04 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b00:	f7ff f880 	bl	8000c04 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b64      	cmp	r3, #100	; 0x64
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e299      	b.n	8002046 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b12:	4b52      	ldr	r3, [pc, #328]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0x108>
 8001b1e:	e000      	b.n	8001b22 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d05a      	beq.n	8001be4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	2b0c      	cmp	r3, #12
 8001b38:	d119      	bne.n	8001b6e <HAL_RCC_OscConfig+0x176>
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d116      	bne.n	8001b6e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b40:	4b46      	ldr	r3, [pc, #280]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <HAL_RCC_OscConfig+0x160>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e276      	b.n	8002046 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b58:	4b40      	ldr	r3, [pc, #256]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	021b      	lsls	r3, r3, #8
 8001b66:	493d      	ldr	r1, [pc, #244]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6c:	e03a      	b.n	8001be4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d020      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b76:	4b3a      	ldr	r3, [pc, #232]	; (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7ff f842 	bl	8000c04 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b84:	f7ff f83e 	bl	8000c04 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e257      	b.n	8002046 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b96:	4b31      	ldr	r3, [pc, #196]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba2:	4b2e      	ldr	r3, [pc, #184]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	021b      	lsls	r3, r3, #8
 8001bb0:	492a      	ldr	r1, [pc, #168]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	604b      	str	r3, [r1, #4]
 8001bb6:	e015      	b.n	8001be4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bb8:	4b29      	ldr	r3, [pc, #164]	; (8001c60 <HAL_RCC_OscConfig+0x268>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbe:	f7ff f821 	bl	8000c04 <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc6:	f7ff f81d 	bl	8000c04 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e236      	b.n	8002046 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bd8:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1f0      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0310 	and.w	r3, r3, #16
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 80b8 	beq.w	8001d62 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d170      	bne.n	8001cda <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bf8:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d005      	beq.n	8001c10 <HAL_RCC_OscConfig+0x218>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e21a      	b.n	8002046 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a1a      	ldr	r2, [r3, #32]
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d921      	bls.n	8001c64 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 fc0f 	bl	8002448 <RCC_SetFlashLatencyFromMSIRange>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e208      	b.n	8002046 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c34:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	4906      	ldr	r1, [pc, #24]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c46:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	061b      	lsls	r3, r3, #24
 8001c54:	4901      	ldr	r1, [pc, #4]	; (8001c5c <HAL_RCC_OscConfig+0x264>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	604b      	str	r3, [r1, #4]
 8001c5a:	e020      	b.n	8001c9e <HAL_RCC_OscConfig+0x2a6>
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c64:	4ba4      	ldr	r3, [pc, #656]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	49a1      	ldr	r1, [pc, #644]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c76:	4ba0      	ldr	r3, [pc, #640]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	061b      	lsls	r3, r3, #24
 8001c84:	499c      	ldr	r1, [pc, #624]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 fbda 	bl	8002448 <RCC_SetFlashLatencyFromMSIRange>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e1d3      	b.n	8002046 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	0b5b      	lsrs	r3, r3, #13
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001cae:	4a92      	ldr	r2, [pc, #584]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001cb0:	6892      	ldr	r2, [r2, #8]
 8001cb2:	0912      	lsrs	r2, r2, #4
 8001cb4:	f002 020f 	and.w	r2, r2, #15
 8001cb8:	4990      	ldr	r1, [pc, #576]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001cba:	5c8a      	ldrb	r2, [r1, r2]
 8001cbc:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001cbe:	4a90      	ldr	r2, [pc, #576]	; (8001f00 <HAL_RCC_OscConfig+0x508>)
 8001cc0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cc2:	4b90      	ldr	r3, [pc, #576]	; (8001f04 <HAL_RCC_OscConfig+0x50c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe ff50 	bl	8000b6c <HAL_InitTick>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d045      	beq.n	8001d62 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	e1b5      	b.n	8002046 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d029      	beq.n	8001d36 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ce2:	4b89      	ldr	r3, [pc, #548]	; (8001f08 <HAL_RCC_OscConfig+0x510>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7fe ff8c 	bl	8000c04 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cf0:	f7fe ff88 	bl	8000c04 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e1a1      	b.n	8002046 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d02:	4b7d      	ldr	r3, [pc, #500]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f0      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d0e:	4b7a      	ldr	r3, [pc, #488]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	4977      	ldr	r1, [pc, #476]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d20:	4b75      	ldr	r3, [pc, #468]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	061b      	lsls	r3, r3, #24
 8001d2e:	4972      	ldr	r1, [pc, #456]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	604b      	str	r3, [r1, #4]
 8001d34:	e015      	b.n	8001d62 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d36:	4b74      	ldr	r3, [pc, #464]	; (8001f08 <HAL_RCC_OscConfig+0x510>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3c:	f7fe ff62 	bl	8000c04 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d44:	f7fe ff5e 	bl	8000c04 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e177      	b.n	8002046 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001d56:	4b68      	ldr	r3, [pc, #416]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d030      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d016      	beq.n	8001da4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d76:	4b65      	ldr	r3, [pc, #404]	; (8001f0c <HAL_RCC_OscConfig+0x514>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7c:	f7fe ff42 	bl	8000c04 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d84:	f7fe ff3e 	bl	8000c04 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e157      	b.n	8002046 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d96:	4b58      	ldr	r3, [pc, #352]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f0      	beq.n	8001d84 <HAL_RCC_OscConfig+0x38c>
 8001da2:	e015      	b.n	8001dd0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001da4:	4b59      	ldr	r3, [pc, #356]	; (8001f0c <HAL_RCC_OscConfig+0x514>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001daa:	f7fe ff2b 	bl	8000c04 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001db2:	f7fe ff27 	bl	8000c04 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e140      	b.n	8002046 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001dc4:	4b4c      	ldr	r3, [pc, #304]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1f0      	bne.n	8001db2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f000 80b5 	beq.w	8001f48 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dde:	2300      	movs	r3, #0
 8001de0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001de2:	4b45      	ldr	r3, [pc, #276]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10d      	bne.n	8001e0a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dee:	4b42      	ldr	r3, [pc, #264]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	4a41      	ldr	r2, [pc, #260]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df8:	6253      	str	r3, [r2, #36]	; 0x24
 8001dfa:	4b3f      	ldr	r3, [pc, #252]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e06:	2301      	movs	r3, #1
 8001e08:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0a:	4b41      	ldr	r3, [pc, #260]	; (8001f10 <HAL_RCC_OscConfig+0x518>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d118      	bne.n	8001e48 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e16:	4b3e      	ldr	r3, [pc, #248]	; (8001f10 <HAL_RCC_OscConfig+0x518>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a3d      	ldr	r2, [pc, #244]	; (8001f10 <HAL_RCC_OscConfig+0x518>)
 8001e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e22:	f7fe feef 	bl	8000c04 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2a:	f7fe feeb 	bl	8000c04 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b64      	cmp	r3, #100	; 0x64
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e104      	b.n	8002046 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3c:	4b34      	ldr	r3, [pc, #208]	; (8001f10 <HAL_RCC_OscConfig+0x518>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0f0      	beq.n	8001e2a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d106      	bne.n	8001e5e <HAL_RCC_OscConfig+0x466>
 8001e50:	4b29      	ldr	r3, [pc, #164]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e54:	4a28      	ldr	r2, [pc, #160]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e5a:	6353      	str	r3, [r2, #52]	; 0x34
 8001e5c:	e02d      	b.n	8001eba <HAL_RCC_OscConfig+0x4c2>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10c      	bne.n	8001e80 <HAL_RCC_OscConfig+0x488>
 8001e66:	4b24      	ldr	r3, [pc, #144]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e6a:	4a23      	ldr	r2, [pc, #140]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001e6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e70:	6353      	str	r3, [r2, #52]	; 0x34
 8001e72:	4b21      	ldr	r3, [pc, #132]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e76:	4a20      	ldr	r2, [pc, #128]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001e78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e7c:	6353      	str	r3, [r2, #52]	; 0x34
 8001e7e:	e01c      	b.n	8001eba <HAL_RCC_OscConfig+0x4c2>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b05      	cmp	r3, #5
 8001e86:	d10c      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x4aa>
 8001e88:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8c:	4a1a      	ldr	r2, [pc, #104]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001e8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e92:	6353      	str	r3, [r2, #52]	; 0x34
 8001e94:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e98:	4a17      	ldr	r2, [pc, #92]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e9e:	6353      	str	r3, [r2, #52]	; 0x34
 8001ea0:	e00b      	b.n	8001eba <HAL_RCC_OscConfig+0x4c2>
 8001ea2:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea6:	4a14      	ldr	r2, [pc, #80]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001eac:	6353      	str	r3, [r2, #52]	; 0x34
 8001eae:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb2:	4a11      	ldr	r2, [pc, #68]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001eb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001eb8:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d015      	beq.n	8001eee <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec2:	f7fe fe9f 	bl	8000c04 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ec8:	e00a      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eca:	f7fe fe9b 	bl	8000c04 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e0b2      	b.n	8002046 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <HAL_RCC_OscConfig+0x500>)
 8001ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0ee      	beq.n	8001eca <HAL_RCC_OscConfig+0x4d2>
 8001eec:	e023      	b.n	8001f36 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eee:	f7fe fe89 	bl	8000c04 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ef4:	e019      	b.n	8001f2a <HAL_RCC_OscConfig+0x532>
 8001ef6:	bf00      	nop
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	08003310 	.word	0x08003310
 8001f00:	20000010 	.word	0x20000010
 8001f04:	20000014 	.word	0x20000014
 8001f08:	42470020 	.word	0x42470020
 8001f0c:	42470680 	.word	0x42470680
 8001f10:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f14:	f7fe fe76 	bl	8000c04 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e08d      	b.n	8002046 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f2a:	4b49      	ldr	r3, [pc, #292]	; (8002050 <HAL_RCC_OscConfig+0x658>)
 8001f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1ee      	bne.n	8001f14 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f36:	7ffb      	ldrb	r3, [r7, #31]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d105      	bne.n	8001f48 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f3c:	4b44      	ldr	r3, [pc, #272]	; (8002050 <HAL_RCC_OscConfig+0x658>)
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f40:	4a43      	ldr	r2, [pc, #268]	; (8002050 <HAL_RCC_OscConfig+0x658>)
 8001f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f46:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d079      	beq.n	8002044 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	2b0c      	cmp	r3, #12
 8001f54:	d056      	beq.n	8002004 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d13b      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5e:	4b3d      	ldr	r3, [pc, #244]	; (8002054 <HAL_RCC_OscConfig+0x65c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7fe fe4e 	bl	8000c04 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f6c:	f7fe fe4a 	bl	8000c04 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e063      	b.n	8002046 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f7e:	4b34      	ldr	r3, [pc, #208]	; (8002050 <HAL_RCC_OscConfig+0x658>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f8a:	4b31      	ldr	r3, [pc, #196]	; (8002050 <HAL_RCC_OscConfig+0x658>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9a:	4319      	orrs	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	492b      	ldr	r1, [pc, #172]	; (8002050 <HAL_RCC_OscConfig+0x658>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fa8:	4b2a      	ldr	r3, [pc, #168]	; (8002054 <HAL_RCC_OscConfig+0x65c>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fae:	f7fe fe29 	bl	8000c04 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb6:	f7fe fe25 	bl	8000c04 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e03e      	b.n	8002046 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fc8:	4b21      	ldr	r3, [pc, #132]	; (8002050 <HAL_RCC_OscConfig+0x658>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0f0      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x5be>
 8001fd4:	e036      	b.n	8002044 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd6:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <HAL_RCC_OscConfig+0x65c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7fe fe12 	bl	8000c04 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe4:	f7fe fe0e 	bl	8000c04 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e027      	b.n	8002046 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ff6:	4b16      	ldr	r3, [pc, #88]	; (8002050 <HAL_RCC_OscConfig+0x658>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x5ec>
 8002002:	e01f      	b.n	8002044 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	2b01      	cmp	r3, #1
 800200a:	d101      	bne.n	8002010 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e01a      	b.n	8002046 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002010:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <HAL_RCC_OscConfig+0x658>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002020:	429a      	cmp	r2, r3
 8002022:	d10d      	bne.n	8002040 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202e:	429a      	cmp	r2, r3
 8002030:	d106      	bne.n	8002040 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800203c:	429a      	cmp	r2, r3
 800203e:	d001      	beq.n	8002044 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e000      	b.n	8002046 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3720      	adds	r7, #32
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40023800 	.word	0x40023800
 8002054:	42470060 	.word	0x42470060

08002058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e11a      	b.n	80022a2 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800206c:	4b8f      	ldr	r3, [pc, #572]	; (80022ac <HAL_RCC_ClockConfig+0x254>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d919      	bls.n	80020ae <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d105      	bne.n	800208c <HAL_RCC_ClockConfig+0x34>
 8002080:	4b8a      	ldr	r3, [pc, #552]	; (80022ac <HAL_RCC_ClockConfig+0x254>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a89      	ldr	r2, [pc, #548]	; (80022ac <HAL_RCC_ClockConfig+0x254>)
 8002086:	f043 0304 	orr.w	r3, r3, #4
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	4b87      	ldr	r3, [pc, #540]	; (80022ac <HAL_RCC_ClockConfig+0x254>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f023 0201 	bic.w	r2, r3, #1
 8002094:	4985      	ldr	r1, [pc, #532]	; (80022ac <HAL_RCC_ClockConfig+0x254>)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	4313      	orrs	r3, r2
 800209a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800209c:	4b83      	ldr	r3, [pc, #524]	; (80022ac <HAL_RCC_ClockConfig+0x254>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d001      	beq.n	80020ae <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e0f9      	b.n	80022a2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d008      	beq.n	80020cc <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ba:	4b7d      	ldr	r3, [pc, #500]	; (80022b0 <HAL_RCC_ClockConfig+0x258>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	497a      	ldr	r1, [pc, #488]	; (80022b0 <HAL_RCC_ClockConfig+0x258>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 808e 	beq.w	80021f6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d107      	bne.n	80020f2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020e2:	4b73      	ldr	r3, [pc, #460]	; (80022b0 <HAL_RCC_ClockConfig+0x258>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d121      	bne.n	8002132 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e0d7      	b.n	80022a2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d107      	bne.n	800210a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020fa:	4b6d      	ldr	r3, [pc, #436]	; (80022b0 <HAL_RCC_ClockConfig+0x258>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d115      	bne.n	8002132 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e0cb      	b.n	80022a2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d107      	bne.n	8002122 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002112:	4b67      	ldr	r3, [pc, #412]	; (80022b0 <HAL_RCC_ClockConfig+0x258>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d109      	bne.n	8002132 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e0bf      	b.n	80022a2 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002122:	4b63      	ldr	r3, [pc, #396]	; (80022b0 <HAL_RCC_ClockConfig+0x258>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e0b7      	b.n	80022a2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002132:	4b5f      	ldr	r3, [pc, #380]	; (80022b0 <HAL_RCC_ClockConfig+0x258>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f023 0203 	bic.w	r2, r3, #3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	495c      	ldr	r1, [pc, #368]	; (80022b0 <HAL_RCC_ClockConfig+0x258>)
 8002140:	4313      	orrs	r3, r2
 8002142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002144:	f7fe fd5e 	bl	8000c04 <HAL_GetTick>
 8002148:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d112      	bne.n	8002178 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002152:	e00a      	b.n	800216a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002154:	f7fe fd56 	bl	8000c04 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002162:	4293      	cmp	r3, r2
 8002164:	d901      	bls.n	800216a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e09b      	b.n	80022a2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800216a:	4b51      	ldr	r3, [pc, #324]	; (80022b0 <HAL_RCC_ClockConfig+0x258>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	2b08      	cmp	r3, #8
 8002174:	d1ee      	bne.n	8002154 <HAL_RCC_ClockConfig+0xfc>
 8002176:	e03e      	b.n	80021f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b03      	cmp	r3, #3
 800217e:	d112      	bne.n	80021a6 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002180:	e00a      	b.n	8002198 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002182:	f7fe fd3f 	bl	8000c04 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002190:	4293      	cmp	r3, r2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e084      	b.n	80022a2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002198:	4b45      	ldr	r3, [pc, #276]	; (80022b0 <HAL_RCC_ClockConfig+0x258>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 030c 	and.w	r3, r3, #12
 80021a0:	2b0c      	cmp	r3, #12
 80021a2:	d1ee      	bne.n	8002182 <HAL_RCC_ClockConfig+0x12a>
 80021a4:	e027      	b.n	80021f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d11d      	bne.n	80021ea <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ae:	e00a      	b.n	80021c6 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b0:	f7fe fd28 	bl	8000c04 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80021be:	4293      	cmp	r3, r2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e06d      	b.n	80022a2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021c6:	4b3a      	ldr	r3, [pc, #232]	; (80022b0 <HAL_RCC_ClockConfig+0x258>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d1ee      	bne.n	80021b0 <HAL_RCC_ClockConfig+0x158>
 80021d2:	e010      	b.n	80021f6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d4:	f7fe fd16 	bl	8000c04 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e05b      	b.n	80022a2 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80021ea:	4b31      	ldr	r3, [pc, #196]	; (80022b0 <HAL_RCC_ClockConfig+0x258>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1ee      	bne.n	80021d4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021f6:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <HAL_RCC_ClockConfig+0x254>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d219      	bcs.n	8002238 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d105      	bne.n	8002216 <HAL_RCC_ClockConfig+0x1be>
 800220a:	4b28      	ldr	r3, [pc, #160]	; (80022ac <HAL_RCC_ClockConfig+0x254>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a27      	ldr	r2, [pc, #156]	; (80022ac <HAL_RCC_ClockConfig+0x254>)
 8002210:	f043 0304 	orr.w	r3, r3, #4
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	4b25      	ldr	r3, [pc, #148]	; (80022ac <HAL_RCC_ClockConfig+0x254>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 0201 	bic.w	r2, r3, #1
 800221e:	4923      	ldr	r1, [pc, #140]	; (80022ac <HAL_RCC_ClockConfig+0x254>)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	4313      	orrs	r3, r2
 8002224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002226:	4b21      	ldr	r3, [pc, #132]	; (80022ac <HAL_RCC_ClockConfig+0x254>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e034      	b.n	80022a2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d008      	beq.n	8002256 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002244:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <HAL_RCC_ClockConfig+0x258>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4917      	ldr	r1, [pc, #92]	; (80022b0 <HAL_RCC_ClockConfig+0x258>)
 8002252:	4313      	orrs	r3, r2
 8002254:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d009      	beq.n	8002276 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002262:	4b13      	ldr	r3, [pc, #76]	; (80022b0 <HAL_RCC_ClockConfig+0x258>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	490f      	ldr	r1, [pc, #60]	; (80022b0 <HAL_RCC_ClockConfig+0x258>)
 8002272:	4313      	orrs	r3, r2
 8002274:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002276:	f000 f823 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 800227a:	4602      	mov	r2, r0
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <HAL_RCC_ClockConfig+0x258>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	091b      	lsrs	r3, r3, #4
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	490b      	ldr	r1, [pc, #44]	; (80022b4 <HAL_RCC_ClockConfig+0x25c>)
 8002288:	5ccb      	ldrb	r3, [r1, r3]
 800228a:	fa22 f303 	lsr.w	r3, r2, r3
 800228e:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <HAL_RCC_ClockConfig+0x260>)
 8002290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002292:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <HAL_RCC_ClockConfig+0x264>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fc68 	bl	8000b6c <HAL_InitTick>
 800229c:	4603      	mov	r3, r0
 800229e:	72fb      	strb	r3, [r7, #11]

  return status;
 80022a0:	7afb      	ldrb	r3, [r7, #11]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40023c00 	.word	0x40023c00
 80022b0:	40023800 	.word	0x40023800
 80022b4:	08003310 	.word	0x08003310
 80022b8:	20000010 	.word	0x20000010
 80022bc:	20000014 	.word	0x20000014

080022c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c0:	b5b0      	push	{r4, r5, r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80022c6:	4b4d      	ldr	r3, [pc, #308]	; (80023fc <HAL_RCC_GetSysClockFreq+0x13c>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b0c      	cmp	r3, #12
 80022d4:	d00c      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0x30>
 80022d6:	2b0c      	cmp	r3, #12
 80022d8:	d87c      	bhi.n	80023d4 <HAL_RCC_GetSysClockFreq+0x114>
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d002      	beq.n	80022e4 <HAL_RCC_GetSysClockFreq+0x24>
 80022de:	2b08      	cmp	r3, #8
 80022e0:	d003      	beq.n	80022ea <HAL_RCC_GetSysClockFreq+0x2a>
 80022e2:	e077      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022e4:	4b46      	ldr	r3, [pc, #280]	; (8002400 <HAL_RCC_GetSysClockFreq+0x140>)
 80022e6:	613b      	str	r3, [r7, #16]
      break;
 80022e8:	e082      	b.n	80023f0 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022ea:	4b46      	ldr	r3, [pc, #280]	; (8002404 <HAL_RCC_GetSysClockFreq+0x144>)
 80022ec:	613b      	str	r3, [r7, #16]
      break;
 80022ee:	e07f      	b.n	80023f0 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	0c9b      	lsrs	r3, r3, #18
 80022f4:	f003 030f 	and.w	r3, r3, #15
 80022f8:	4a43      	ldr	r2, [pc, #268]	; (8002408 <HAL_RCC_GetSysClockFreq+0x148>)
 80022fa:	5cd3      	ldrb	r3, [r2, r3]
 80022fc:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	0d9b      	lsrs	r3, r3, #22
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	3301      	adds	r3, #1
 8002308:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800230a:	4b3c      	ldr	r3, [pc, #240]	; (80023fc <HAL_RCC_GetSysClockFreq+0x13c>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d01a      	beq.n	800234c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	461a      	mov	r2, r3
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	4939      	ldr	r1, [pc, #228]	; (8002404 <HAL_RCC_GetSysClockFreq+0x144>)
 8002320:	fb01 f003 	mul.w	r0, r1, r3
 8002324:	2100      	movs	r1, #0
 8002326:	fb01 f102 	mul.w	r1, r1, r2
 800232a:	1844      	adds	r4, r0, r1
 800232c:	4935      	ldr	r1, [pc, #212]	; (8002404 <HAL_RCC_GetSysClockFreq+0x144>)
 800232e:	fba2 0101 	umull	r0, r1, r2, r1
 8002332:	1863      	adds	r3, r4, r1
 8002334:	4619      	mov	r1, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	461a      	mov	r2, r3
 800233a:	f04f 0300 	mov.w	r3, #0
 800233e:	f7fd ff1d 	bl	800017c <__aeabi_uldivmod>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	4613      	mov	r3, r2
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	e040      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	461c      	mov	r4, r3
 8002350:	f04f 0500 	mov.w	r5, #0
 8002354:	4620      	mov	r0, r4
 8002356:	4629      	mov	r1, r5
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	014b      	lsls	r3, r1, #5
 8002362:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002366:	0142      	lsls	r2, r0, #5
 8002368:	4610      	mov	r0, r2
 800236a:	4619      	mov	r1, r3
 800236c:	1b00      	subs	r0, r0, r4
 800236e:	eb61 0105 	sbc.w	r1, r1, r5
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	018b      	lsls	r3, r1, #6
 800237c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002380:	0182      	lsls	r2, r0, #6
 8002382:	1a12      	subs	r2, r2, r0
 8002384:	eb63 0301 	sbc.w	r3, r3, r1
 8002388:	f04f 0000 	mov.w	r0, #0
 800238c:	f04f 0100 	mov.w	r1, #0
 8002390:	00d9      	lsls	r1, r3, #3
 8002392:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002396:	00d0      	lsls	r0, r2, #3
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	1912      	adds	r2, r2, r4
 800239e:	eb45 0303 	adc.w	r3, r5, r3
 80023a2:	f04f 0000 	mov.w	r0, #0
 80023a6:	f04f 0100 	mov.w	r1, #0
 80023aa:	0299      	lsls	r1, r3, #10
 80023ac:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80023b0:	0290      	lsls	r0, r2, #10
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	4610      	mov	r0, r2
 80023b8:	4619      	mov	r1, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	461a      	mov	r2, r3
 80023be:	f04f 0300 	mov.w	r3, #0
 80023c2:	f7fd fedb 	bl	800017c <__aeabi_uldivmod>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4613      	mov	r3, r2
 80023cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	613b      	str	r3, [r7, #16]
      break;
 80023d2:	e00d      	b.n	80023f0 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80023d4:	4b09      	ldr	r3, [pc, #36]	; (80023fc <HAL_RCC_GetSysClockFreq+0x13c>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	0b5b      	lsrs	r3, r3, #13
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	3301      	adds	r3, #1
 80023e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	613b      	str	r3, [r7, #16]
      break;
 80023ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023f0:	693b      	ldr	r3, [r7, #16]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bdb0      	pop	{r4, r5, r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800
 8002400:	00f42400 	.word	0x00f42400
 8002404:	016e3600 	.word	0x016e3600
 8002408:	08003304 	.word	0x08003304

0800240c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002410:	4b02      	ldr	r3, [pc, #8]	; (800241c <HAL_RCC_GetHCLKFreq+0x10>)
 8002412:	681b      	ldr	r3, [r3, #0]
}
 8002414:	4618      	mov	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr
 800241c:	20000010 	.word	0x20000010

08002420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002424:	f7ff fff2 	bl	800240c <HAL_RCC_GetHCLKFreq>
 8002428:	4602      	mov	r2, r0
 800242a:	4b05      	ldr	r3, [pc, #20]	; (8002440 <HAL_RCC_GetPCLK1Freq+0x20>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	0a1b      	lsrs	r3, r3, #8
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	4903      	ldr	r1, [pc, #12]	; (8002444 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002436:	5ccb      	ldrb	r3, [r1, r3]
 8002438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800243c:	4618      	mov	r0, r3
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40023800 	.word	0x40023800
 8002444:	08003320 	.word	0x08003320

08002448 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002448:	b480      	push	{r7}
 800244a:	b087      	sub	sp, #28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002450:	2300      	movs	r3, #0
 8002452:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002454:	4b29      	ldr	r3, [pc, #164]	; (80024fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d12c      	bne.n	80024ba <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002460:	4b26      	ldr	r3, [pc, #152]	; (80024fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800246c:	4b24      	ldr	r3, [pc, #144]	; (8002500 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	e016      	b.n	80024a6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002478:	4b20      	ldr	r3, [pc, #128]	; (80024fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	4a1f      	ldr	r2, [pc, #124]	; (80024fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800247e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002482:	6253      	str	r3, [r2, #36]	; 0x24
 8002484:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002490:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002498:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800249a:	4b18      	ldr	r3, [pc, #96]	; (80024fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	4a17      	ldr	r2, [pc, #92]	; (80024fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80024a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024a4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80024ac:	d105      	bne.n	80024ba <RCC_SetFlashLatencyFromMSIRange+0x72>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80024b4:	d101      	bne.n	80024ba <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80024b6:	2301      	movs	r3, #1
 80024b8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d105      	bne.n	80024cc <RCC_SetFlashLatencyFromMSIRange+0x84>
 80024c0:	4b10      	ldr	r3, [pc, #64]	; (8002504 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a0f      	ldr	r2, [pc, #60]	; (8002504 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024c6:	f043 0304 	orr.w	r3, r3, #4
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	4b0d      	ldr	r3, [pc, #52]	; (8002504 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f023 0201 	bic.w	r2, r3, #1
 80024d4:	490b      	ldr	r1, [pc, #44]	; (8002504 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024dc:	4b09      	ldr	r3, [pc, #36]	; (8002504 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d001      	beq.n	80024ee <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	371c      	adds	r7, #28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40023800 	.word	0x40023800
 8002500:	40007000 	.word	0x40007000
 8002504:	40023c00 	.word	0x40023c00

08002508 <__libc_init_array>:
 8002508:	b570      	push	{r4, r5, r6, lr}
 800250a:	2600      	movs	r6, #0
 800250c:	4d0c      	ldr	r5, [pc, #48]	; (8002540 <__libc_init_array+0x38>)
 800250e:	4c0d      	ldr	r4, [pc, #52]	; (8002544 <__libc_init_array+0x3c>)
 8002510:	1b64      	subs	r4, r4, r5
 8002512:	10a4      	asrs	r4, r4, #2
 8002514:	42a6      	cmp	r6, r4
 8002516:	d109      	bne.n	800252c <__libc_init_array+0x24>
 8002518:	f000 f822 	bl	8002560 <_init>
 800251c:	2600      	movs	r6, #0
 800251e:	4d0a      	ldr	r5, [pc, #40]	; (8002548 <__libc_init_array+0x40>)
 8002520:	4c0a      	ldr	r4, [pc, #40]	; (800254c <__libc_init_array+0x44>)
 8002522:	1b64      	subs	r4, r4, r5
 8002524:	10a4      	asrs	r4, r4, #2
 8002526:	42a6      	cmp	r6, r4
 8002528:	d105      	bne.n	8002536 <__libc_init_array+0x2e>
 800252a:	bd70      	pop	{r4, r5, r6, pc}
 800252c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002530:	4798      	blx	r3
 8002532:	3601      	adds	r6, #1
 8002534:	e7ee      	b.n	8002514 <__libc_init_array+0xc>
 8002536:	f855 3b04 	ldr.w	r3, [r5], #4
 800253a:	4798      	blx	r3
 800253c:	3601      	adds	r6, #1
 800253e:	e7f2      	b.n	8002526 <__libc_init_array+0x1e>
 8002540:	08003330 	.word	0x08003330
 8002544:	08003330 	.word	0x08003330
 8002548:	08003330 	.word	0x08003330
 800254c:	08003334 	.word	0x08003334

08002550 <memset>:
 8002550:	4603      	mov	r3, r0
 8002552:	4402      	add	r2, r0
 8002554:	4293      	cmp	r3, r2
 8002556:	d100      	bne.n	800255a <memset+0xa>
 8002558:	4770      	bx	lr
 800255a:	f803 1b01 	strb.w	r1, [r3], #1
 800255e:	e7f9      	b.n	8002554 <memset+0x4>

08002560 <_init>:
 8002560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002562:	bf00      	nop
 8002564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002566:	bc08      	pop	{r3}
 8002568:	469e      	mov	lr, r3
 800256a:	4770      	bx	lr

0800256c <_fini>:
 800256c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800256e:	bf00      	nop
 8002570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002572:	bc08      	pop	{r3}
 8002574:	469e      	mov	lr, r3
 8002576:	4770      	bx	lr
