
DWM1000-twr-initiator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000557c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000874  08005714  08005714  00015714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f88  08005f88  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005f88  08005f88  00015f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f90  08005f90  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f90  08005f90  00015f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f94  08005f94  00015f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005f98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  20000070  08006004  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005fc  08006004  000205fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f5e  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000379f  00000000  00000000  00039ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  0003d7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001078  00000000  00000000  0003e970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b36f  00000000  00000000  0003f9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e84  00000000  00000000  0005ad57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092aed  00000000  00000000  00071bdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001046c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047a4  00000000  00000000  0010471c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080056fc 	.word	0x080056fc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	080056fc 	.word	0x080056fc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b087      	sub	sp, #28
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 80004d8:	2300      	movs	r3, #0
 80004da:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 80004e0:	4b9f      	ldr	r3, [pc, #636]	; (8000760 <dwt_initialise+0x290>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2200      	movs	r2, #0
 80004e6:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 80004e8:	4b9d      	ldr	r3, [pc, #628]	; (8000760 <dwt_initialise+0x290>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2200      	movs	r2, #0
 80004ee:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 80004f0:	4b9b      	ldr	r3, [pc, #620]	; (8000760 <dwt_initialise+0x290>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2200      	movs	r2, #0
 80004f6:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 80004f8:	4b99      	ldr	r3, [pc, #612]	; (8000760 <dwt_initialise+0x290>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2200      	movs	r2, #0
 80004fe:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 8000500:	4b97      	ldr	r3, [pc, #604]	; (8000760 <dwt_initialise+0x290>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2200      	movs	r2, #0
 8000506:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 8000508:	4b95      	ldr	r3, [pc, #596]	; (8000760 <dwt_initialise+0x290>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2200      	movs	r2, #0
 800050e:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 8000510:	4b93      	ldr	r3, [pc, #588]	; (8000760 <dwt_initialise+0x290>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2200      	movs	r2, #0
 8000516:	635a      	str	r2, [r3, #52]	; 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 8000518:	f000 f926 	bl	8000768 <dwt_readdevid>
 800051c:	4603      	mov	r3, r0
 800051e:	4a91      	ldr	r2, [pc, #580]	; (8000764 <dwt_initialise+0x294>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d002      	beq.n	800052a <dwt_initialise+0x5a>
    {
        return DWT_ERROR ;
 8000524:	f04f 33ff 	mov.w	r3, #4294967295
 8000528:	e115      	b.n	8000756 <dwt_initialise+0x286>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	f003 0302 	and.w	r3, r3, #2
 8000530:	2b00      	cmp	r3, #0
 8000532:	d101      	bne.n	8000538 <dwt_initialise+0x68>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 8000534:	f000 fe56 	bl	80011e4 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	f003 0302 	and.w	r3, r3, #2
 800053e:	2b00      	cmp	r3, #0
 8000540:	d004      	beq.n	800054c <dwt_initialise+0x7c>
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8000548:	2b00      	cmp	r3, #0
 800054a:	d102      	bne.n	8000552 <dwt_initialise+0x82>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 800054c:	2000      	movs	r0, #0
 800054e:	f000 fce9 	bl	8000f24 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 8000552:	2204      	movs	r2, #4
 8000554:	2100      	movs	r1, #0
 8000556:	2024      	movs	r0, #36	; 0x24
 8000558:	f000 fc12 	bl	8000d80 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f003 0302 	and.w	r3, r3, #2
 8000562:	2b00      	cmp	r3, #0
 8000564:	d116      	bne.n	8000594 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 8000566:	2004      	movs	r0, #4
 8000568:	f000 fc60 	bl	8000e2c <_dwt_otpread>
 800056c:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 800056e:	693b      	ldr	r3, [r7, #16]
 8000570:	b2db      	uxtb	r3, r3
 8000572:	2b00      	cmp	r3, #0
 8000574:	d01f      	beq.n	80005b6 <dwt_initialise+0xe6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 8000576:	2202      	movs	r2, #2
 8000578:	2112      	movs	r1, #18
 800057a:	202d      	movs	r0, #45	; 0x2d
 800057c:	f000 fc00 	bl	8000d80 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8000580:	4b77      	ldr	r3, [pc, #476]	; (8000760 <dwt_initialise+0x290>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	8ada      	ldrh	r2, [r3, #22]
 8000586:	4b76      	ldr	r3, [pc, #472]	; (8000760 <dwt_initialise+0x290>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800058e:	b292      	uxth	r2, r2
 8000590:	82da      	strh	r2, [r3, #22]
 8000592:	e010      	b.n	80005b6 <dwt_initialise+0xe6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 8000594:	2130      	movs	r1, #48	; 0x30
 8000596:	2028      	movs	r0, #40	; 0x28
 8000598:	f000 fb9b 	bl	8000cd2 <dwt_read32bitoffsetreg>
 800059c:	4603      	mov	r3, r0
 800059e:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 80005a2:	d008      	beq.n	80005b6 <dwt_initialise+0xe6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 80005a4:	4b6e      	ldr	r3, [pc, #440]	; (8000760 <dwt_initialise+0x290>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	8ada      	ldrh	r2, [r3, #22]
 80005aa:	4b6d      	ldr	r3, [pc, #436]	; (8000760 <dwt_initialise+0x290>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80005b2:	b292      	uxth	r2, r2
 80005b4:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	f003 0302 	and.w	r3, r3, #2
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d009      	beq.n	80005d4 <dwt_initialise+0x104>
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f003 0302 	and.w	r3, r3, #2
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d011      	beq.n	80005ee <dwt_initialise+0x11e>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	f003 0308 	and.w	r3, r3, #8
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d00c      	beq.n	80005ee <dwt_initialise+0x11e>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 80005d4:	201e      	movs	r0, #30
 80005d6:	f000 fc29 	bl	8000e2c <_dwt_otpread>
 80005da:	4603      	mov	r3, r0
 80005dc:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 80005de:	8afb      	ldrh	r3, [r7, #22]
 80005e0:	0a1b      	lsrs	r3, r3, #8
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	4b5e      	ldr	r3, [pc, #376]	; (8000760 <dwt_initialise+0x290>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	b2d2      	uxtb	r2, r2
 80005ea:	72da      	strb	r2, [r3, #11]
 80005ec:	e003      	b.n	80005f6 <dwt_initialise+0x126>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 80005ee:	4b5c      	ldr	r3, [pc, #368]	; (8000760 <dwt_initialise+0x290>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2200      	movs	r2, #0
 80005f4:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f003 0302 	and.w	r3, r3, #2
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d10b      	bne.n	8000618 <dwt_initialise+0x148>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 8000600:	8afb      	ldrh	r3, [r7, #22]
 8000602:	f003 031f 	and.w	r3, r3, #31
 8000606:	2b00      	cmp	r3, #0
 8000608:	d101      	bne.n	800060e <dwt_initialise+0x13e>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 800060a:	2310      	movs	r3, #16
 800060c:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 800060e:	8afb      	ldrh	r3, [r7, #22]
 8000610:	b2db      	uxtb	r3, r3
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fe0c 	bl	8001230 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f003 0310 	and.w	r3, r3, #16
 800061e:	2b00      	cmp	r3, #0
 8000620:	d007      	beq.n	8000632 <dwt_initialise+0x162>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 8000622:	4b4f      	ldr	r3, [pc, #316]	; (8000760 <dwt_initialise+0x290>)
 8000624:	681c      	ldr	r4, [r3, #0]
 8000626:	2006      	movs	r0, #6
 8000628:	f000 fc00 	bl	8000e2c <_dwt_otpread>
 800062c:	4603      	mov	r3, r0
 800062e:	6023      	str	r3, [r4, #0]
 8000630:	e003      	b.n	800063a <dwt_initialise+0x16a>
    }
    else
    {
        pdw1000local->partID = 0;
 8000632:	4b4b      	ldr	r3, [pc, #300]	; (8000760 <dwt_initialise+0x290>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	f003 0320 	and.w	r3, r3, #32
 8000640:	2b00      	cmp	r3, #0
 8000642:	d007      	beq.n	8000654 <dwt_initialise+0x184>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8000644:	4b46      	ldr	r3, [pc, #280]	; (8000760 <dwt_initialise+0x290>)
 8000646:	681c      	ldr	r4, [r3, #0]
 8000648:	2007      	movs	r0, #7
 800064a:	f000 fbef 	bl	8000e2c <_dwt_otpread>
 800064e:	4603      	mov	r3, r0
 8000650:	6063      	str	r3, [r4, #4]
 8000652:	e003      	b.n	800065c <dwt_initialise+0x18c>
    }
    else
    {
        pdw1000local->lotID = 0;
 8000654:	4b42      	ldr	r3, [pc, #264]	; (8000760 <dwt_initialise+0x290>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2200      	movs	r2, #0
 800065a:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000662:	2b00      	cmp	r3, #0
 8000664:	d008      	beq.n	8000678 <dwt_initialise+0x1a8>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 8000666:	2008      	movs	r0, #8
 8000668:	f000 fbe0 	bl	8000e2c <_dwt_otpread>
 800066c:	4602      	mov	r2, r0
 800066e:	4b3c      	ldr	r3, [pc, #240]	; (8000760 <dwt_initialise+0x290>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	b2d2      	uxtb	r2, r2
 8000674:	721a      	strb	r2, [r3, #8]
 8000676:	e003      	b.n	8000680 <dwt_initialise+0x1b0>
    }
    else
    {
        pdw1000local->vBatP = 0;
 8000678:	4b39      	ldr	r3, [pc, #228]	; (8000760 <dwt_initialise+0x290>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2200      	movs	r2, #0
 800067e:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000686:	2b00      	cmp	r3, #0
 8000688:	d008      	beq.n	800069c <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 800068a:	2009      	movs	r0, #9
 800068c:	f000 fbce 	bl	8000e2c <_dwt_otpread>
 8000690:	4602      	mov	r2, r0
 8000692:	4b33      	ldr	r3, [pc, #204]	; (8000760 <dwt_initialise+0x290>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	b2d2      	uxtb	r2, r2
 8000698:	725a      	strb	r2, [r3, #9]
 800069a:	e003      	b.n	80006a4 <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 800069c:	4b30      	ldr	r3, [pc, #192]	; (8000760 <dwt_initialise+0x290>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2200      	movs	r2, #0
 80006a2:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d121      	bne.n	80006f2 <dwt_initialise+0x222>
    {
        if(DWT_LOADUCODE & config)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f003 0301 	and.w	r3, r3, #1
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d00b      	beq.n	80006d0 <dwt_initialise+0x200>
        {
            _dwt_loaducodefromrom();
 80006b8:	f000 fc05 	bl	8000ec6 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <dwt_initialise+0x290>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	8ada      	ldrh	r2, [r3, #22]
 80006c2:	4b27      	ldr	r3, [pc, #156]	; (8000760 <dwt_initialise+0x290>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80006ca:	b292      	uxth	r2, r2
 80006cc:	82da      	strh	r2, [r3, #22]
 80006ce:	e01e      	b.n	800070e <dwt_initialise+0x23e>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 80006d0:	2105      	movs	r1, #5
 80006d2:	2036      	movs	r0, #54	; 0x36
 80006d4:	f000 fb24 	bl	8000d20 <dwt_read16bitoffsetreg>
 80006d8:	4603      	mov	r3, r0
 80006da:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 80006dc:	89fb      	ldrh	r3, [r7, #14]
 80006de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80006e2:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 80006e4:	89fb      	ldrh	r3, [r7, #14]
 80006e6:	461a      	mov	r2, r3
 80006e8:	2105      	movs	r1, #5
 80006ea:	2036      	movs	r0, #54	; 0x36
 80006ec:	f000 fb5b 	bl	8000da6 <dwt_write16bitoffsetreg>
 80006f0:	e00d      	b.n	800070e <dwt_initialise+0x23e>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f003 0304 	and.w	r3, r3, #4
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d108      	bne.n	800070e <dwt_initialise+0x23e>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 80006fc:	4b18      	ldr	r3, [pc, #96]	; (8000760 <dwt_initialise+0x290>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	8ada      	ldrh	r2, [r3, #22]
 8000702:	4b17      	ldr	r3, [pc, #92]	; (8000760 <dwt_initialise+0x290>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800070a:	b292      	uxth	r2, r2
 800070c:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800070e:	2001      	movs	r0, #1
 8000710:	f000 fc08 	bl	8000f24 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 8000714:	2200      	movs	r2, #0
 8000716:	210a      	movs	r1, #10
 8000718:	202c      	movs	r0, #44	; 0x2c
 800071a:	f000 fb31 	bl	8000d80 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <dwt_initialise+0x290>)
 8000720:	681c      	ldr	r4, [r3, #0]
 8000722:	2100      	movs	r1, #0
 8000724:	2004      	movs	r0, #4
 8000726:	f000 fad4 	bl	8000cd2 <dwt_read32bitoffsetreg>
 800072a:	4603      	mov	r3, r0
 800072c:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <dwt_initialise+0x290>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	691b      	ldr	r3, [r3, #16]
 8000734:	0c1b      	lsrs	r3, r3, #16
 8000736:	b2da      	uxtb	r2, r3
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <dwt_initialise+0x290>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f002 0203 	and.w	r2, r2, #3
 8000740:	b2d2      	uxtb	r2, r2
 8000742:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <dwt_initialise+0x290>)
 8000746:	681c      	ldr	r4, [r3, #0]
 8000748:	2100      	movs	r1, #0
 800074a:	2008      	movs	r0, #8
 800074c:	f000 fac1 	bl	8000cd2 <dwt_read32bitoffsetreg>
 8000750:	4603      	mov	r3, r0
 8000752:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 8000754:	2300      	movs	r3, #0

} // end dwt_initialise()
 8000756:	4618      	mov	r0, r3
 8000758:	371c      	adds	r7, #28
 800075a:	46bd      	mov	sp, r7
 800075c:	bd90      	pop	{r4, r7, pc}
 800075e:	bf00      	nop
 8000760:	20000000 	.word	0x20000000
 8000764:	deca0130 	.word	0xdeca0130

08000768 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 800076c:	2100      	movs	r1, #0
 800076e:	2000      	movs	r0, #0
 8000770:	f000 faaf 	bl	8000cd2 <dwt_read32bitoffsetreg>
 8000774:	4603      	mov	r3, r0
}
 8000776:	4618      	mov	r0, r3
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	795b      	ldrb	r3, [r3, #5]
 8000796:	461a      	mov	r2, r3
 8000798:	4ba1      	ldr	r3, [pc, #644]	; (8000a20 <dwt_configure+0x2a4>)
 800079a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800079e:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	785b      	ldrb	r3, [r3, #1]
 80007a4:	3b01      	subs	r3, #1
 80007a6:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 80007a8:	7cfb      	ldrb	r3, [r7, #19]
 80007aa:	2b04      	cmp	r3, #4
 80007ac:	d002      	beq.n	80007b4 <dwt_configure+0x38>
 80007ae:	7cfb      	ldrb	r3, [r7, #19]
 80007b0:	2b07      	cmp	r3, #7
 80007b2:	d101      	bne.n	80007b8 <dwt_configure+0x3c>
 80007b4:	2301      	movs	r3, #1
 80007b6:	e000      	b.n	80007ba <dwt_configure+0x3e>
 80007b8:	2300      	movs	r3, #0
 80007ba:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	79db      	ldrb	r3, [r3, #7]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d10b      	bne.n	80007dc <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 80007c4:	4b97      	ldr	r3, [pc, #604]	; (8000a24 <dwt_configure+0x2a8>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	691a      	ldr	r2, [r3, #16]
 80007ca:	4b96      	ldr	r3, [pc, #600]	; (8000a24 <dwt_configure+0x2a8>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80007d2:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 80007d4:	8abb      	ldrh	r3, [r7, #20]
 80007d6:	08db      	lsrs	r3, r3, #3
 80007d8:	82bb      	strh	r3, [r7, #20]
 80007da:	e007      	b.n	80007ec <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 80007dc:	4b91      	ldr	r3, [pc, #580]	; (8000a24 <dwt_configure+0x2a8>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	691a      	ldr	r2, [r3, #16]
 80007e2:	4b90      	ldr	r3, [pc, #576]	; (8000a24 <dwt_configure+0x2a8>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80007ea:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 80007ec:	4b8d      	ldr	r3, [pc, #564]	; (8000a24 <dwt_configure+0x2a8>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	687a      	ldr	r2, [r7, #4]
 80007f2:	7a12      	ldrb	r2, [r2, #8]
 80007f4:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 80007f6:	4b8b      	ldr	r3, [pc, #556]	; (8000a24 <dwt_configure+0x2a8>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	691a      	ldr	r2, [r3, #16]
 80007fc:	4b89      	ldr	r3, [pc, #548]	; (8000a24 <dwt_configure+0x2a8>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000804:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 8000806:	4b87      	ldr	r3, [pc, #540]	; (8000a24 <dwt_configure+0x2a8>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	6919      	ldr	r1, [r3, #16]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	7a1b      	ldrb	r3, [r3, #8]
 8000810:	041b      	lsls	r3, r3, #16
 8000812:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000816:	4b83      	ldr	r3, [pc, #524]	; (8000a24 <dwt_configure+0x2a8>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	430a      	orrs	r2, r1
 800081c:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 800081e:	4b81      	ldr	r3, [pc, #516]	; (8000a24 <dwt_configure+0x2a8>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	691b      	ldr	r3, [r3, #16]
 8000824:	461a      	mov	r2, r3
 8000826:	2100      	movs	r1, #0
 8000828:	2004      	movs	r0, #4
 800082a:	f000 fad8 	bl	8000dde <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 800082e:	8abb      	ldrh	r3, [r7, #20]
 8000830:	461a      	mov	r2, r3
 8000832:	f642 0104 	movw	r1, #10244	; 0x2804
 8000836:	202e      	movs	r0, #46	; 0x2e
 8000838:	f000 fab5 	bl	8000da6 <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 800083c:	7cbb      	ldrb	r3, [r7, #18]
 800083e:	4618      	mov	r0, r3
 8000840:	f000 fb21 	bl	8000e86 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 8000844:	7cfb      	ldrb	r3, [r7, #19]
 8000846:	4a78      	ldr	r2, [pc, #480]	; (8000a28 <dwt_configure+0x2ac>)
 8000848:	5cd3      	ldrb	r3, [r2, r3]
 800084a:	461a      	mov	r2, r3
 800084c:	4b77      	ldr	r3, [pc, #476]	; (8000a2c <dwt_configure+0x2b0>)
 800084e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000852:	461a      	mov	r2, r3
 8000854:	2107      	movs	r1, #7
 8000856:	202b      	movs	r0, #43	; 0x2b
 8000858:	f000 fac1 	bl	8000dde <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 800085c:	7cfb      	ldrb	r3, [r7, #19]
 800085e:	4a72      	ldr	r2, [pc, #456]	; (8000a28 <dwt_configure+0x2ac>)
 8000860:	5cd3      	ldrb	r3, [r2, r3]
 8000862:	461a      	mov	r2, r3
 8000864:	4b72      	ldr	r3, [pc, #456]	; (8000a30 <dwt_configure+0x2b4>)
 8000866:	5c9b      	ldrb	r3, [r3, r2]
 8000868:	461a      	mov	r2, r3
 800086a:	210b      	movs	r1, #11
 800086c:	202b      	movs	r0, #43	; 0x2b
 800086e:	f000 fa87 	bl	8000d80 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 8000872:	7c7b      	ldrb	r3, [r7, #17]
 8000874:	4a6f      	ldr	r2, [pc, #444]	; (8000a34 <dwt_configure+0x2b8>)
 8000876:	5cd3      	ldrb	r3, [r2, r3]
 8000878:	461a      	mov	r2, r3
 800087a:	210b      	movs	r1, #11
 800087c:	2028      	movs	r0, #40	; 0x28
 800087e:	f000 fa7f 	bl	8000d80 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 8000882:	7cfb      	ldrb	r3, [r7, #19]
 8000884:	4a68      	ldr	r2, [pc, #416]	; (8000a28 <dwt_configure+0x2ac>)
 8000886:	5cd3      	ldrb	r3, [r2, r3]
 8000888:	461a      	mov	r2, r3
 800088a:	4b6b      	ldr	r3, [pc, #428]	; (8000a38 <dwt_configure+0x2bc>)
 800088c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000890:	461a      	mov	r2, r3
 8000892:	210c      	movs	r1, #12
 8000894:	2028      	movs	r0, #40	; 0x28
 8000896:	f000 faa2 	bl	8000dde <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	79db      	ldrb	r3, [r3, #7]
 800089e:	4618      	mov	r0, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	799b      	ldrb	r3, [r3, #6]
 80008a4:	4619      	mov	r1, r3
 80008a6:	4a65      	ldr	r2, [pc, #404]	; (8000a3c <dwt_configure+0x2c0>)
 80008a8:	0043      	lsls	r3, r0, #1
 80008aa:	440b      	add	r3, r1
 80008ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008b0:	461a      	mov	r2, r3
 80008b2:	2102      	movs	r1, #2
 80008b4:	2027      	movs	r0, #39	; 0x27
 80008b6:	f000 fa76 	bl	8000da6 <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 80008ba:	7cbb      	ldrb	r3, [r7, #18]
 80008bc:	4a60      	ldr	r2, [pc, #384]	; (8000a40 <dwt_configure+0x2c4>)
 80008be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008c2:	461a      	mov	r2, r3
 80008c4:	2104      	movs	r1, #4
 80008c6:	2027      	movs	r0, #39	; 0x27
 80008c8:	f000 fa6d 	bl	8000da6 <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	79db      	ldrb	r3, [r3, #7]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d105      	bne.n	80008e0 <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 80008d4:	2264      	movs	r2, #100	; 0x64
 80008d6:	2106      	movs	r1, #6
 80008d8:	2027      	movs	r0, #39	; 0x27
 80008da:	f000 fa64 	bl	8000da6 <dwt_write16bitoffsetreg>
 80008de:	e018      	b.n	8000912 <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	789b      	ldrb	r3, [r3, #2]
 80008e4:	2b04      	cmp	r3, #4
 80008e6:	d10a      	bne.n	80008fe <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 80008e8:	2210      	movs	r2, #16
 80008ea:	2106      	movs	r1, #6
 80008ec:	2027      	movs	r0, #39	; 0x27
 80008ee:	f000 fa5a 	bl	8000da6 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 80008f2:	2210      	movs	r2, #16
 80008f4:	2126      	movs	r1, #38	; 0x26
 80008f6:	2027      	movs	r0, #39	; 0x27
 80008f8:	f000 fa42 	bl	8000d80 <dwt_write8bitoffsetreg>
 80008fc:	e009      	b.n	8000912 <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 80008fe:	2220      	movs	r2, #32
 8000900:	2106      	movs	r1, #6
 8000902:	2027      	movs	r0, #39	; 0x27
 8000904:	f000 fa4f 	bl	8000da6 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 8000908:	2228      	movs	r2, #40	; 0x28
 800090a:	2126      	movs	r1, #38	; 0x26
 800090c:	2027      	movs	r0, #39	; 0x27
 800090e:	f000 fa37 	bl	8000d80 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 8000912:	7cbb      	ldrb	r3, [r7, #18]
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	78d2      	ldrb	r2, [r2, #3]
 8000918:	4611      	mov	r1, r2
 800091a:	4a4a      	ldr	r2, [pc, #296]	; (8000a44 <dwt_configure+0x2c8>)
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	440b      	add	r3, r1
 8000920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000924:	461a      	mov	r2, r3
 8000926:	2108      	movs	r1, #8
 8000928:	2027      	movs	r0, #39	; 0x27
 800092a:	f000 fa58 	bl	8000dde <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	895b      	ldrh	r3, [r3, #10]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d103      	bne.n	800093e <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f241 0241 	movw	r2, #4161	; 0x1041
 800093c:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	895b      	ldrh	r3, [r3, #10]
 8000942:	461a      	mov	r2, r3
 8000944:	2120      	movs	r1, #32
 8000946:	2027      	movs	r0, #39	; 0x27
 8000948:	f000 fa2d 	bl	8000da6 <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 800094c:	4b3e      	ldr	r3, [pc, #248]	; (8000a48 <dwt_configure+0x2cc>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	461a      	mov	r2, r3
 8000952:	210c      	movs	r1, #12
 8000954:	2023      	movs	r0, #35	; 0x23
 8000956:	f000 fa42 	bl	8000dde <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 800095a:	7cbb      	ldrb	r3, [r7, #18]
 800095c:	4a3a      	ldr	r2, [pc, #232]	; (8000a48 <dwt_configure+0x2cc>)
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	4413      	add	r3, r2
 8000962:	889b      	ldrh	r3, [r3, #4]
 8000964:	461a      	mov	r2, r3
 8000966:	2104      	movs	r1, #4
 8000968:	2023      	movs	r0, #35	; 0x23
 800096a:	f000 fa1c 	bl	8000da6 <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	799b      	ldrb	r3, [r3, #6]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d00d      	beq.n	8000992 <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	79db      	ldrb	r3, [r3, #7]
 800097a:	461a      	mov	r2, r3
 800097c:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <dwt_configure+0x2d0>)
 800097e:	5c9b      	ldrb	r3, [r3, r2]
 8000980:	461a      	mov	r2, r3
 8000982:	2100      	movs	r1, #0
 8000984:	2021      	movs	r0, #33	; 0x21
 8000986:	f000 f9fb 	bl	8000d80 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 800098a:	2303      	movs	r3, #3
 800098c:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 800098e:	2301      	movs	r3, #1
 8000990:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000992:	7cfb      	ldrb	r3, [r7, #19]
 8000994:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8000998:	7cfb      	ldrb	r3, [r7, #19]
 800099a:	011b      	lsls	r3, r3, #4
 800099c:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800099e:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	785b      	ldrb	r3, [r3, #1]
 80009a4:	049b      	lsls	r3, r3, #18
 80009a6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80009aa:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80009ac:	7dfb      	ldrb	r3, [r7, #23]
 80009ae:	051b      	lsls	r3, r3, #20
 80009b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80009b4:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80009b6:	7dbb      	ldrb	r3, [r7, #22]
 80009b8:	045b      	lsls	r3, r3, #17
 80009ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80009be:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	791b      	ldrb	r3, [r3, #4]
 80009c4:	059b      	lsls	r3, r3, #22
 80009c6:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80009ca:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	795b      	ldrb	r3, [r3, #5]
 80009d0:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80009d2:	4313      	orrs	r3, r2
 80009d4:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 80009d6:	68fa      	ldr	r2, [r7, #12]
 80009d8:	2100      	movs	r1, #0
 80009da:	201f      	movs	r0, #31
 80009dc:	f000 f9ff 	bl	8000dde <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	789a      	ldrb	r2, [r3, #2]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	785b      	ldrb	r3, [r3, #1]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	0419      	lsls	r1, r3, #16
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	79db      	ldrb	r3, [r3, #7]
 80009f2:	035a      	lsls	r2, r3, #13
 80009f4:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <dwt_configure+0x2a8>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	430a      	orrs	r2, r1
 80009fa:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <dwt_configure+0x2a8>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	68db      	ldr	r3, [r3, #12]
 8000a02:	461a      	mov	r2, r3
 8000a04:	2100      	movs	r1, #0
 8000a06:	2008      	movs	r0, #8
 8000a08:	f000 f9e9 	bl	8000dde <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 8000a0c:	2242      	movs	r2, #66	; 0x42
 8000a0e:	2100      	movs	r1, #0
 8000a10:	200d      	movs	r0, #13
 8000a12:	f000 f9b5 	bl	8000d80 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8000a16:	bf00      	nop
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	080057d0 	.word	0x080057d0
 8000a24:	20000000 	.word	0x20000000
 8000a28:	08005750 	.word	0x08005750
 8000a2c:	08005770 	.word	0x08005770
 8000a30:	08005788 	.word	0x08005788
 8000a34:	08005790 	.word	0x08005790
 8000a38:	08005758 	.word	0x08005758
 8000a3c:	080057a0 	.word	0x080057a0
 8000a40:	080057ac 	.word	0x080057ac
 8000a44:	080057b0 	.word	0x080057b0
 8000a48:	08005794 	.word	0x08005794
 8000a4c:	0800579c 	.word	0x0800579c

08000a50 <dwt_setrxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxantennadelay(uint16 rxDelay)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	80fb      	strh	r3, [r7, #6]
    // Set the RX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
 8000a5a:	88fb      	ldrh	r3, [r7, #6]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	f641 0104 	movw	r1, #6148	; 0x1804
 8000a62:	202e      	movs	r0, #46	; 0x2e
 8000a64:	f000 f99f 	bl	8000da6 <dwt_write16bitoffsetreg>
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <dwt_settxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_settxantennadelay(uint16 txDelay)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	80fb      	strh	r3, [r7, #6]
    // Set the TX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
 8000a7a:	88fb      	ldrh	r3, [r7, #6]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2018      	movs	r0, #24
 8000a82:	f000 f990 	bl	8000da6 <dwt_write16bitoffsetreg>
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	4603      	mov	r3, r0
 8000a96:	6039      	str	r1, [r7, #0]
 8000a98:	80fb      	strh	r3, [r7, #6]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	80bb      	strh	r3, [r7, #4]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 8000a9e:	88ba      	ldrh	r2, [r7, #4]
 8000aa0:	88fb      	ldrh	r3, [r7, #6]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000aa8:	dc09      	bgt.n	8000abe <dwt_writetxdata+0x30>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 8000aaa:	88fb      	ldrh	r3, [r7, #6]
 8000aac:	3b02      	subs	r3, #2
 8000aae:	461a      	mov	r2, r3
 8000ab0:	88b9      	ldrh	r1, [r7, #4]
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	2009      	movs	r0, #9
 8000ab6:	f000 f857 	bl	8000b68 <dwt_writetodevice>
        return DWT_SUCCESS;
 8000aba:	2300      	movs	r3, #0
 8000abc:	e001      	b.n	8000ac2 <dwt_writetxdata+0x34>
    }
    else
    {
        return DWT_ERROR;
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295
    }
} // end dwt_writetxdata()
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	603a      	str	r2, [r7, #0]
 8000ad6:	80fb      	strh	r3, [r7, #6]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	80bb      	strh	r3, [r7, #4]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <dwt_writetxfctrl+0x3c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	68da      	ldr	r2, [r3, #12]
 8000ae2:	88fb      	ldrh	r3, [r7, #6]
 8000ae4:	431a      	orrs	r2, r3
 8000ae6:	88bb      	ldrh	r3, [r7, #4]
 8000ae8:	059b      	lsls	r3, r3, #22
 8000aea:	431a      	orrs	r2, r3
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	03db      	lsls	r3, r3, #15
 8000af0:	4313      	orrs	r3, r2
 8000af2:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 8000af4:	68fa      	ldr	r2, [r7, #12]
 8000af6:	2100      	movs	r1, #0
 8000af8:	2008      	movs	r0, #8
 8000afa:	f000 f970 	bl	8000dde <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000000 	.word	0x20000000

08000b0c <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	460b      	mov	r3, r1
 8000b16:	807b      	strh	r3, [r7, #2]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	803b      	strh	r3, [r7, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 8000b1c:	887a      	ldrh	r2, [r7, #2]
 8000b1e:	8839      	ldrh	r1, [r7, #0]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2011      	movs	r0, #17
 8000b24:	f000 f87c 	bl	8000c20 <dwt_readfromdevice>
}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <dwt_readtxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readtxtimestamp(uint8 * timestamp)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN, timestamp) ; // Read bytes directly into buffer
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2205      	movs	r2, #5
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2017      	movs	r0, #23
 8000b40:	f000 f86e 	bl	8000c20 <dwt_readfromdevice>
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <dwt_readrxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readrxtimestamp(uint8 * timestamp)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp) ; // Get the adjusted time of arrival
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2205      	movs	r2, #5
 8000b58:	2100      	movs	r1, #0
 8000b5a:	2015      	movs	r0, #21
 8000b5c:	f000 f860 	bl	8000c20 <dwt_readfromdevice>
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60ba      	str	r2, [r7, #8]
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	4603      	mov	r3, r0
 8000b74:	81fb      	strh	r3, [r7, #14]
 8000b76:	460b      	mov	r3, r1
 8000b78:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000b7e:	89bb      	ldrh	r3, [r7, #12]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d10d      	bne.n	8000ba0 <dwt_writetodevice+0x38>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000b84:	89fb      	ldrh	r3, [r7, #14]
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	1c59      	adds	r1, r3, #1
 8000b8c:	6179      	str	r1, [r7, #20]
 8000b8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000b92:	b2d2      	uxtb	r2, r2
 8000b94:	f107 0118 	add.w	r1, r7, #24
 8000b98:	440b      	add	r3, r1
 8000b9a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000b9e:	e033      	b.n	8000c08 <dwt_writetodevice+0xa0>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000ba0:	89fb      	ldrh	r3, [r7, #14]
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	1c59      	adds	r1, r3, #1
 8000ba8:	6179      	str	r1, [r7, #20]
 8000baa:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	f107 0118 	add.w	r1, r7, #24
 8000bb4:	440b      	add	r3, r1
 8000bb6:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000bba:	89bb      	ldrh	r3, [r7, #12]
 8000bbc:	2b7f      	cmp	r3, #127	; 0x7f
 8000bbe:	d80a      	bhi.n	8000bd6 <dwt_writetodevice+0x6e>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	1c5a      	adds	r2, r3, #1
 8000bc4:	617a      	str	r2, [r7, #20]
 8000bc6:	89ba      	ldrh	r2, [r7, #12]
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	f107 0118 	add.w	r1, r7, #24
 8000bce:	440b      	add	r3, r1
 8000bd0:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000bd4:	e018      	b.n	8000c08 <dwt_writetodevice+0xa0>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000bd6:	89bb      	ldrh	r3, [r7, #12]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	1c59      	adds	r1, r3, #1
 8000bde:	6179      	str	r1, [r7, #20]
 8000be0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000be4:	b2d2      	uxtb	r2, r2
 8000be6:	f107 0118 	add.w	r1, r7, #24
 8000bea:	440b      	add	r3, r1
 8000bec:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000bf0:	89bb      	ldrh	r3, [r7, #12]
 8000bf2:	09db      	lsrs	r3, r3, #7
 8000bf4:	b299      	uxth	r1, r3
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	1c5a      	adds	r2, r3, #1
 8000bfa:	617a      	str	r2, [r7, #20]
 8000bfc:	b2ca      	uxtb	r2, r1
 8000bfe:	f107 0118 	add.w	r1, r7, #24
 8000c02:	440b      	add	r3, r1
 8000c04:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	b298      	uxth	r0, r3
 8000c0c:	f107 0110 	add.w	r1, r7, #16
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	f000 fb4e 	bl	80012b4 <writetospi>
} // end dwt_writetodevice()
 8000c18:	bf00      	nop
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60ba      	str	r2, [r7, #8]
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	81fb      	strh	r3, [r7, #14]
 8000c2e:	460b      	mov	r3, r1
 8000c30:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000c36:	89bb      	ldrh	r3, [r7, #12]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d10a      	bne.n	8000c52 <dwt_readfromdevice+0x32>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	1c5a      	adds	r2, r3, #1
 8000c40:	617a      	str	r2, [r7, #20]
 8000c42:	89fa      	ldrh	r2, [r7, #14]
 8000c44:	b2d2      	uxtb	r2, r2
 8000c46:	f107 0118 	add.w	r1, r7, #24
 8000c4a:	440b      	add	r3, r1
 8000c4c:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000c50:	e033      	b.n	8000cba <dwt_readfromdevice+0x9a>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000c52:	89fb      	ldrh	r3, [r7, #14]
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	1c59      	adds	r1, r3, #1
 8000c5a:	6179      	str	r1, [r7, #20]
 8000c5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	f107 0118 	add.w	r1, r7, #24
 8000c66:	440b      	add	r3, r1
 8000c68:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000c6c:	89bb      	ldrh	r3, [r7, #12]
 8000c6e:	2b7f      	cmp	r3, #127	; 0x7f
 8000c70:	d80a      	bhi.n	8000c88 <dwt_readfromdevice+0x68>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	1c5a      	adds	r2, r3, #1
 8000c76:	617a      	str	r2, [r7, #20]
 8000c78:	89ba      	ldrh	r2, [r7, #12]
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	f107 0118 	add.w	r1, r7, #24
 8000c80:	440b      	add	r3, r1
 8000c82:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000c86:	e018      	b.n	8000cba <dwt_readfromdevice+0x9a>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000c88:	89bb      	ldrh	r3, [r7, #12]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	1c59      	adds	r1, r3, #1
 8000c90:	6179      	str	r1, [r7, #20]
 8000c92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000c96:	b2d2      	uxtb	r2, r2
 8000c98:	f107 0118 	add.w	r1, r7, #24
 8000c9c:	440b      	add	r3, r1
 8000c9e:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000ca2:	89bb      	ldrh	r3, [r7, #12]
 8000ca4:	09db      	lsrs	r3, r3, #7
 8000ca6:	b299      	uxth	r1, r3
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	1c5a      	adds	r2, r3, #1
 8000cac:	617a      	str	r2, [r7, #20]
 8000cae:	b2ca      	uxtb	r2, r1
 8000cb0:	f107 0118 	add.w	r1, r7, #24
 8000cb4:	440b      	add	r3, r1
 8000cb6:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	b298      	uxth	r0, r3
 8000cbe:	f107 0110 	add.w	r1, r7, #16
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	68ba      	ldr	r2, [r7, #8]
 8000cc6:	f000 fb29 	bl	800131c <readfromspi>
} // end dwt_readfromdevice()
 8000cca:	bf00      	nop
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b086      	sub	sp, #24
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
 8000cda:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	b298      	uxth	r0, r3
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b299      	uxth	r1, r3
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	2204      	movs	r2, #4
 8000cee:	f7ff ff97 	bl	8000c20 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	e00b      	b.n	8000d10 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	021b      	lsls	r3, r3, #8
 8000cfc:	f107 010c 	add.w	r1, r7, #12
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	440a      	add	r2, r1
 8000d04:	7812      	ldrb	r2, [r2, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	daf0      	bge.n	8000cf8 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8000d16:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	b298      	uxth	r0, r3
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	b299      	uxth	r1, r3
 8000d36:	f107 030c 	add.w	r3, r7, #12
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	f7ff ff70 	bl	8000c20 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8000d40:	7b7b      	ldrb	r3, [r7, #13]
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	021b      	lsls	r3, r3, #8
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	7b3b      	ldrb	r3, [r7, #12]
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	4413      	add	r3, r2
 8000d4e:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8000d50:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8000d52:	4618      	mov	r0, r3
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b084      	sub	sp, #16
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	b298      	uxth	r0, r3
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	b299      	uxth	r1, r3
 8000d6c:	f107 030f 	add.w	r3, r7, #15
 8000d70:	2201      	movs	r2, #1
 8000d72:	f7ff ff55 	bl	8000c20 <dwt_readfromdevice>

    return regval ;
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	b298      	uxth	r0, r3
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	b299      	uxth	r1, r3
 8000d96:	1dfb      	adds	r3, r7, #7
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f7ff fee5 	bl	8000b68 <dwt_writetodevice>
}
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b086      	sub	sp, #24
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	60f8      	str	r0, [r7, #12]
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	4613      	mov	r3, r2
 8000db2:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 8000dba:	88fb      	ldrh	r3, [r7, #6]
 8000dbc:	0a1b      	lsrs	r3, r3, #8
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	b298      	uxth	r0, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	b299      	uxth	r1, r3
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	f7ff fec9 	bl	8000b68 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8000dd6:	bf00      	nop
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	60f8      	str	r0, [r7, #12]
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	e00d      	b.n	8000e0c <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	b2d9      	uxtb	r1, r3
 8000df4:	f107 0210 	add.w	r2, r7, #16
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	460a      	mov	r2, r1
 8000dfe:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	0a1b      	lsrs	r3, r3, #8
 8000e04:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	2b03      	cmp	r3, #3
 8000e10:	ddee      	ble.n	8000df0 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	b298      	uxth	r0, r3
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	b299      	uxth	r1, r3
 8000e1a:	f107 0310 	add.w	r3, r7, #16
 8000e1e:	2204      	movs	r2, #4
 8000e20:	f7ff fea2 	bl	8000b68 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8000e24:	bf00      	nop
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	2104      	movs	r1, #4
 8000e3c:	202d      	movs	r0, #45	; 0x2d
 8000e3e:	f7ff ffb2 	bl	8000da6 <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8000e42:	2203      	movs	r2, #3
 8000e44:	2106      	movs	r1, #6
 8000e46:	202d      	movs	r0, #45	; 0x2d
 8000e48:	f7ff ff9a 	bl	8000d80 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2106      	movs	r1, #6
 8000e50:	202d      	movs	r0, #45	; 0x2d
 8000e52:	f7ff ff95 	bl	8000d80 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8000e56:	210a      	movs	r1, #10
 8000e58:	202d      	movs	r0, #45	; 0x2d
 8000e5a:	f7ff ff3a 	bl	8000cd2 <dwt_read32bitoffsetreg>
 8000e5e:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8000e60:	68fb      	ldr	r3, [r7, #12]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2102      	movs	r1, #2
 8000e72:	202c      	movs	r0, #44	; 0x2c
 8000e74:	f7ff ff84 	bl	8000d80 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 8000e78:	2202      	movs	r2, #2
 8000e7a:	2102      	movs	r1, #2
 8000e7c:	202c      	movs	r0, #44	; 0x2c
 8000e7e:	f7ff ff7f 	bl	8000d80 <dwt_write8bitoffsetreg>
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 8000e8e:	226d      	movs	r2, #109	; 0x6d
 8000e90:	f640 0106 	movw	r1, #2054	; 0x806
 8000e94:	202e      	movs	r0, #46	; 0x2e
 8000e96:	f7ff ff73 	bl	8000d80 <dwt_write8bitoffsetreg>

    if(prfIndex)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d007      	beq.n	8000eb0 <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8000ea0:	f240 6207 	movw	r2, #1543	; 0x607
 8000ea4:	f641 0106 	movw	r1, #6150	; 0x1806
 8000ea8:	202e      	movs	r0, #46	; 0x2e
 8000eaa:	f7ff ff7c 	bl	8000da6 <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8000eae:	e006      	b.n	8000ebe <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8000eb0:	f241 6207 	movw	r2, #5639	; 0x1607
 8000eb4:	f641 0106 	movw	r1, #6150	; 0x1806
 8000eb8:	202e      	movs	r0, #46	; 0x2e
 8000eba:	f7ff ff74 	bl	8000da6 <dwt_write16bitoffsetreg>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8000eca:	200e      	movs	r0, #14
 8000ecc:	f000 f82a 	bl	8000f24 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8000ed0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ed4:	2106      	movs	r1, #6
 8000ed6:	202d      	movs	r0, #45	; 0x2d
 8000ed8:	f7ff ff65 	bl	8000da6 <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8000edc:	2001      	movs	r0, #1
 8000ede:	f000 f9dd 	bl	800129c <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f000 f81e 	bl	8000f24 <_dwt_enableclocks>
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}

08000eec <dwt_setrxaftertxdelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxaftertxdelay(uint32 rxDelayTime)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
    uint32 val = dwt_read32bitreg(ACK_RESP_T_ID) ; // Read ACK_RESP_T_ID register
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	201a      	movs	r0, #26
 8000ef8:	f7ff feeb 	bl	8000cd2 <dwt_read32bitoffsetreg>
 8000efc:	60f8      	str	r0, [r7, #12]

    val &= ~(ACK_RESP_T_W4R_TIM_MASK) ; // Clear the timer (19:0)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	0d1b      	lsrs	r3, r3, #20
 8000f02:	051b      	lsls	r3, r3, #20
 8000f04:	60fb      	str	r3, [r7, #12]

    val |= (rxDelayTime & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000f0c:	68fa      	ldr	r2, [r7, #12]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(ACK_RESP_T_ID, val) ;
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	2100      	movs	r1, #0
 8000f16:	201a      	movs	r0, #26
 8000f18:	f7ff ff61 	bl	8000dde <dwt_write32bitoffsetreg>
}
 8000f1c:	bf00      	nop
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	2202      	movs	r2, #2
 8000f32:	2100      	movs	r1, #0
 8000f34:	2036      	movs	r0, #54	; 0x36
 8000f36:	f7ff fe73 	bl	8000c20 <dwt_readfromdevice>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b0e      	cmp	r3, #14
 8000f3e:	d876      	bhi.n	800102e <_dwt_enableclocks+0x10a>
 8000f40:	a201      	add	r2, pc, #4	; (adr r2, 8000f48 <_dwt_enableclocks+0x24>)
 8000f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f46:	bf00      	nop
 8000f48:	08000f95 	.word	0x08000f95
 8000f4c:	08000f85 	.word	0x08000f85
 8000f50:	08000fab 	.word	0x08000fab
 8000f54:	0800102f 	.word	0x0800102f
 8000f58:	0800102f 	.word	0x0800102f
 8000f5c:	0800102f 	.word	0x0800102f
 8000f60:	0800102f 	.word	0x0800102f
 8000f64:	08000fc1 	.word	0x08000fc1
 8000f68:	08000fe1 	.word	0x08000fe1
 8000f6c:	0800102f 	.word	0x0800102f
 8000f70:	0800102f 	.word	0x0800102f
 8000f74:	08000ff7 	.word	0x08000ff7
 8000f78:	08001003 	.word	0x08001003
 8000f7c:	0800100f 	.word	0x0800100f
 8000f80:	08001025 	.word	0x08001025
    switch(clocks)
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8000f84:	2300      	movs	r3, #0
 8000f86:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8000f88:	7b7b      	ldrb	r3, [r7, #13]
 8000f8a:	f023 0301 	bic.w	r3, r3, #1
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f92:	e04d      	b.n	8001030 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8000f94:	7b3b      	ldrb	r3, [r7, #12]
 8000f96:	b25b      	sxtb	r3, r3
 8000f98:	f023 0303 	bic.w	r3, r3, #3
 8000f9c:	b25b      	sxtb	r3, r3
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	b25b      	sxtb	r3, r3
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000fa8:	e042      	b.n	8001030 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8000faa:	7b3b      	ldrb	r3, [r7, #12]
 8000fac:	b25b      	sxtb	r3, r3
 8000fae:	f023 0303 	bic.w	r3, r3, #3
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	b25b      	sxtb	r3, r3
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000fbe:	e037      	b.n	8001030 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8000fc0:	7b3b      	ldrb	r3, [r7, #12]
 8000fc2:	b25b      	sxtb	r3, r3
 8000fc4:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000fc8:	b25b      	sxtb	r3, r3
 8000fca:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8000fce:	b25b      	sxtb	r3, r3
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8000fd4:	7b7b      	ldrb	r3, [r7, #13]
 8000fd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000fde:	e027      	b.n	8001030 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8000fe0:	7b3b      	ldrb	r3, [r7, #12]
 8000fe2:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8000fea:	7b7b      	ldrb	r3, [r7, #13]
 8000fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000ff4:	e01c      	b.n	8001030 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8000ff6:	7b7b      	ldrb	r3, [r7, #13]
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001000:	e016      	b.n	8001030 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8001002:	7b7b      	ldrb	r3, [r7, #13]
 8001004:	f023 0302 	bic.w	r3, r3, #2
 8001008:	b2db      	uxtb	r3, r3
 800100a:	737b      	strb	r3, [r7, #13]
        }
        break;
 800100c:	e010      	b.n	8001030 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 800100e:	7b3b      	ldrb	r3, [r7, #12]
 8001010:	b25b      	sxtb	r3, r3
 8001012:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001016:	b25b      	sxtb	r3, r3
 8001018:	f043 0320 	orr.w	r3, r3, #32
 800101c:	b25b      	sxtb	r3, r3
 800101e:	b2db      	uxtb	r3, r3
 8001020:	733b      	strb	r3, [r7, #12]
        }
        break;
 8001022:	e005      	b.n	8001030 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8001024:	2301      	movs	r3, #1
 8001026:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8001028:	2303      	movs	r3, #3
 800102a:	737b      	strb	r3, [r7, #13]
        }
        break;
 800102c:	e000      	b.n	8001030 <_dwt_enableclocks+0x10c>
        default:
        break;
 800102e:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	2201      	movs	r2, #1
 8001036:	2100      	movs	r1, #0
 8001038:	2036      	movs	r0, #54	; 0x36
 800103a:	f7ff fd95 	bl	8000b68 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	3301      	adds	r3, #1
 8001044:	2201      	movs	r2, #1
 8001046:	2101      	movs	r1, #1
 8001048:	2036      	movs	r0, #54	; 0x36
 800104a:	f7ff fd8d 	bl	8000b68 <dwt_writetodevice>

} // end _dwt_enableclocks()
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop

08001058 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 800105c:	2000      	movs	r0, #0
 800105e:	f7ff ff61 	bl	8000f24 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8001062:	2200      	movs	r2, #0
 8001064:	2104      	movs	r1, #4
 8001066:	2036      	movs	r0, #54	; 0x36
 8001068:	f7ff fe9d 	bl	8000da6 <dwt_write16bitoffsetreg>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <dwt_setdelayedtrxtime>:
 * output parameters none
 *
 * no return value
 */
void dwt_setdelayedtrxtime(uint32 starttime)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
    dwt_write32bitoffsetreg(DX_TIME_ID, 1, starttime); // Write at offset 1 as the lower 9 bits of this register are ignored
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	2101      	movs	r1, #1
 800107c:	200a      	movs	r0, #10
 800107e:	f7ff feae 	bl	8000dde <dwt_write32bitoffsetreg>

} // end dwt_setdelayedtrxtime()
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
    int retval = DWT_SUCCESS ;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 800109a:	2300      	movs	r3, #0
 800109c:	72fb      	strb	r3, [r7, #11]
    uint16 checkTxOK = 0 ;
 800109e:	2300      	movs	r3, #0
 80010a0:	813b      	strh	r3, [r7, #8]

    if(mode & DWT_RESPONSE_EXPECTED)
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d005      	beq.n	80010b8 <dwt_starttx+0x2c>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	72fb      	strb	r3, [r7, #11]
        pdw1000local->wait4resp = 1;
 80010b0:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <dwt_starttx+0x98>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2201      	movs	r2, #1
 80010b6:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d020      	beq.n	8001104 <dwt_starttx+0x78>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 80010c2:	7afb      	ldrb	r3, [r7, #11]
 80010c4:	f043 0306 	orr.w	r3, r3, #6
 80010c8:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 80010ca:	7afb      	ldrb	r3, [r7, #11]
 80010cc:	461a      	mov	r2, r3
 80010ce:	2100      	movs	r1, #0
 80010d0:	200d      	movs	r0, #13
 80010d2:	f7ff fe55 	bl	8000d80 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 80010d6:	2103      	movs	r1, #3
 80010d8:	200f      	movs	r0, #15
 80010da:	f7ff fe21 	bl	8000d20 <dwt_read16bitoffsetreg>
 80010de:	4603      	mov	r3, r0
 80010e0:	813b      	strh	r3, [r7, #8]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 80010e2:	893b      	ldrh	r3, [r7, #8]
 80010e4:	f403 6381 	and.w	r3, r3, #1032	; 0x408
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d102      	bne.n	80010f2 <dwt_starttx+0x66>
        {
            retval = DWT_SUCCESS ; // All okay
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	e012      	b.n	8001118 <dwt_starttx+0x8c>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 80010f2:	2240      	movs	r2, #64	; 0x40
 80010f4:	2100      	movs	r1, #0
 80010f6:	200d      	movs	r0, #13
 80010f8:	f7ff fe42 	bl	8000d80 <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 80010fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	e009      	b.n	8001118 <dwt_starttx+0x8c>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 8001104:	7afb      	ldrb	r3, [r7, #11]
 8001106:	f043 0302 	orr.w	r3, r3, #2
 800110a:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800110c:	7afb      	ldrb	r3, [r7, #11]
 800110e:	461a      	mov	r2, r3
 8001110:	2100      	movs	r1, #0
 8001112:	200d      	movs	r0, #13
 8001114:	f7ff fe34 	bl	8000d80 <dwt_write8bitoffsetreg>
    }

    return retval;
 8001118:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000000 	.word	0x20000000

08001128 <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	80fb      	strh	r3, [r7, #6]
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
 8001132:	2103      	movs	r1, #3
 8001134:	2004      	movs	r0, #4
 8001136:	f7ff fe10 	bl	8000d5a <dwt_read8bitoffsetreg>
 800113a:	4603      	mov	r3, r0
 800113c:	73fb      	strb	r3, [r7, #15]

    if(time > 0)
 800113e:	88fb      	ldrh	r3, [r7, #6]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d018      	beq.n	8001176 <dwt_setrxtimeout+0x4e>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
 8001144:	88fb      	ldrh	r3, [r7, #6]
 8001146:	461a      	mov	r2, r3
 8001148:	2100      	movs	r1, #0
 800114a:	200c      	movs	r0, #12
 800114c:	f7ff fe2b 	bl	8000da6 <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	f043 0310 	orr.w	r3, r3, #16
 8001156:	73fb      	strb	r3, [r7, #15]
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <dwt_setrxtimeout+0x7c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	691a      	ldr	r2, [r3, #16]
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <dwt_setrxtimeout+0x7c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001166:	611a      	str	r2, [r3, #16]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	461a      	mov	r2, r3
 800116c:	2103      	movs	r1, #3
 800116e:	2004      	movs	r0, #4
 8001170:	f7ff fe06 	bl	8000d80 <dwt_write8bitoffsetreg>
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
 8001174:	e011      	b.n	800119a <dwt_setrxtimeout+0x72>
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	f023 0310 	bic.w	r3, r3, #16
 800117c:	73fb      	strb	r3, [r7, #15]
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <dwt_setrxtimeout+0x7c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	691a      	ldr	r2, [r3, #16]
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <dwt_setrxtimeout+0x7c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800118c:	611a      	str	r2, [r3, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	461a      	mov	r2, r3
 8001192:	2103      	movs	r1, #3
 8001194:	2004      	movs	r0, #4
 8001196:	f7ff fdf3 	bl	8000d80 <dwt_write8bitoffsetreg>
} // end dwt_setrxtimeout()
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000000 	.word	0x20000000

080011a8 <dwt_setpreambledetecttimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setpreambledetecttimeout(uint16 timeout)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	80fb      	strh	r3, [r7, #6]
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_PRETOC_OFFSET, timeout);
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	461a      	mov	r2, r3
 80011b6:	2124      	movs	r1, #36	; 0x24
 80011b8:	2027      	movs	r0, #39	; 0x27
 80011ba:	f7ff fdf4 	bl	8000da6 <dwt_write16bitoffsetreg>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	af00      	add	r7, sp, #0
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 80011ca:	22e0      	movs	r2, #224	; 0xe0
 80011cc:	2103      	movs	r1, #3
 80011ce:	2036      	movs	r0, #54	; 0x36
 80011d0:	f7ff fdd6 	bl	8000d80 <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 80011d4:	22f0      	movs	r2, #240	; 0xf0
 80011d6:	2103      	movs	r1, #3
 80011d8:	2036      	movs	r0, #54	; 0x36
 80011da:	f7ff fdd1 	bl	8000d80 <dwt_write8bitoffsetreg>
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 80011e8:	f7ff ff36 	bl	8001058 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2100      	movs	r1, #0
 80011f0:	202c      	movs	r0, #44	; 0x2c
 80011f2:	f7ff fdd8 	bl	8000da6 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2106      	movs	r1, #6
 80011fa:	202c      	movs	r0, #44	; 0x2c
 80011fc:	f7ff fdc0 	bl	8000d80 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8001200:	f7ff fe33 	bl	8000e6a <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8001204:	2200      	movs	r2, #0
 8001206:	2103      	movs	r1, #3
 8001208:	2036      	movs	r0, #54	; 0x36
 800120a:	f7ff fdb9 	bl	8000d80 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 800120e:	2001      	movs	r0, #1
 8001210:	f000 f844 	bl	800129c <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8001214:	22f0      	movs	r2, #240	; 0xf0
 8001216:	2103      	movs	r1, #3
 8001218:	2036      	movs	r0, #54	; 0x36
 800121a:	f7ff fdb1 	bl	8000d80 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 800121e:	4b03      	ldr	r3, [pc, #12]	; (800122c <dwt_softreset+0x48>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2200      	movs	r2, #0
 8001224:	755a      	strb	r2, [r3, #21]
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000000 	.word	0x20000000

08001230 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	f003 031f 	and.w	r3, r3, #31
 8001242:	b25b      	sxtb	r3, r3
 8001244:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001248:	b25b      	sxtb	r3, r3
 800124a:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	461a      	mov	r2, r3
 8001250:	210e      	movs	r1, #14
 8001252:	202b      	movs	r0, #43	; 0x2b
 8001254:	f7ff fd94 	bl	8000d80 <dwt_write8bitoffsetreg>
}
 8001258:	bf00      	nop
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 8001266:	f000 f9e3 	bl	8001630 <port_GetEXT_IRQStatus>
 800126a:	4603      	mov	r3, r0
 800126c:	607b      	str	r3, [r7, #4]

	if(s) {
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 8001274:	f000 f9ce 	bl	8001614 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 8001278:	687b      	ldr	r3, [r7, #4]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 8001290:	f000 f9c7 	bl	8001622 <port_EnableEXT_IRQ>
	}
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 f8ef 	bl	8001488 <Sleep>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 80012b4:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80012b8:	4683      	mov	fp, r0
 80012ba:	468a      	mov	sl, r1
 80012bc:	4691      	mov	r9, r2
 80012be:	4698      	mov	r8, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 80012c0:	f7ff ffce 	bl	8001260 <decamutexon>

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80012c4:	4d13      	ldr	r5, [pc, #76]	; (8001314 <writetospi+0x60>)
    stat = decamutexon() ;
 80012c6:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80012c8:	4628      	mov	r0, r5
 80012ca:	f003 f99c 	bl	8004606 <HAL_SPI_GetState>
 80012ce:	2801      	cmp	r0, #1
 80012d0:	4604      	mov	r4, r0
 80012d2:	d1f9      	bne.n	80012c8 <writetospi+0x14>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 80012d4:	4810      	ldr	r0, [pc, #64]	; (8001318 <writetospi+0x64>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	2140      	movs	r1, #64	; 0x40
 80012da:	f001 fddb 	bl	8002e94 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 80012de:	465a      	mov	r2, fp
 80012e0:	4651      	mov	r1, sl
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
 80012e6:	480b      	ldr	r0, [pc, #44]	; (8001314 <writetospi+0x60>)
 80012e8:	f003 f851 	bl	800438e <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 80012ec:	f04f 33ff 	mov.w	r3, #4294967295
 80012f0:	fa1f f289 	uxth.w	r2, r9
 80012f4:	4641      	mov	r1, r8
 80012f6:	4807      	ldr	r0, [pc, #28]	; (8001314 <writetospi+0x60>)
 80012f8:	f003 f849 	bl	800438e <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80012fc:	4622      	mov	r2, r4
 80012fe:	2140      	movs	r1, #64	; 0x40
 8001300:	4805      	ldr	r0, [pc, #20]	; (8001318 <writetospi+0x64>)
 8001302:	f001 fdc7 	bl	8002e94 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8001306:	4630      	mov	r0, r6
 8001308:	f7ff ffbb 	bl	8001282 <decamutexoff>

    return 0;
} // end writetospi()
 800130c:	2000      	movs	r0, #0
 800130e:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 8001312:	bf00      	nop
 8001314:	2000055c 	.word	0x2000055c
 8001318:	40020400 	.word	0x40020400

0800131c <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 800131c:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 8001320:	4681      	mov	r9, r0
 8001322:	460c      	mov	r4, r1
 8001324:	4690      	mov	r8, r2
 8001326:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001328:	f7ff ff9a 	bl	8001260 <decamutexon>

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800132c:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80013ac <readfromspi+0x90>
    stat = decamutexon() ;
 8001330:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001332:	4650      	mov	r0, sl
 8001334:	f003 f967 	bl	8004606 <HAL_SPI_GetState>
 8001338:	2801      	cmp	r0, #1
 800133a:	d1fa      	bne.n	8001332 <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800133c:	481a      	ldr	r0, [pc, #104]	; (80013a8 <readfromspi+0x8c>)
 800133e:	2200      	movs	r2, #0
 8001340:	2140      	movs	r1, #64	; 0x40
 8001342:	f001 fda7 	bl	8002e94 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 8001346:	f1b9 0f00 	cmp.w	r9, #0
 800134a:	d00c      	beq.n	8001366 <readfromspi+0x4a>
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 800134c:	f8df a05c 	ldr.w	sl, [pc, #92]	; 80013ac <readfromspi+0x90>
 8001350:	44a1      	add	r9, r4
 8001352:	2201      	movs	r2, #1
 8001354:	4621      	mov	r1, r4
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
 800135a:	4414      	add	r4, r2
 800135c:	4650      	mov	r0, sl
 800135e:	f003 f816 	bl	800438e <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 8001362:	454c      	cmp	r4, r9
 8001364:	d1f5      	bne.n	8001352 <readfromspi+0x36>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 8001366:	f1b8 0f00 	cmp.w	r8, #0
 800136a:	d012      	beq.n	8001392 <readfromspi+0x76>
 800136c:	f8df c03c 	ldr.w	ip, [pc, #60]	; 80013ac <readfromspi+0x90>
 8001370:	eb05 0008 	add.w	r0, r5, r8
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8001374:	2400      	movs	r4, #0
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 8001376:	f8dc 2000 	ldr.w	r2, [ip]
 800137a:	6891      	ldr	r1, [r2, #8]
 800137c:	0789      	lsls	r1, r1, #30
 800137e:	d5fc      	bpl.n	800137a <readfromspi+0x5e>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8001380:	60d4      	str	r4, [r2, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 8001382:	6891      	ldr	r1, [r2, #8]
 8001384:	07cb      	lsls	r3, r1, #31
 8001386:	d5fc      	bpl.n	8001382 <readfromspi+0x66>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 8001388:	68d3      	ldr	r3, [r2, #12]
 800138a:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 800138e:	4285      	cmp	r5, r0
 8001390:	d1f1      	bne.n	8001376 <readfromspi+0x5a>
    }

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8001392:	2201      	movs	r2, #1
 8001394:	2140      	movs	r1, #64	; 0x40
 8001396:	4804      	ldr	r0, [pc, #16]	; (80013a8 <readfromspi+0x8c>)
 8001398:	f001 fd7c 	bl	8002e94 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800139c:	4630      	mov	r0, r6
 800139e:	f7ff ff70 	bl	8001282 <decamutexoff>

    return 0;
} // end readfromspi()
 80013a2:	2000      	movs	r0, #0
 80013a4:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 80013a8:	40020400 	.word	0x40020400
 80013ac:	2000055c 	.word	0x2000055c

080013b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	db0b      	blt.n	80013da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	f003 021f 	and.w	r2, r3, #31
 80013c8:	4907      	ldr	r1, [pc, #28]	; (80013e8 <__NVIC_EnableIRQ+0x38>)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	095b      	lsrs	r3, r3, #5
 80013d0:	2001      	movs	r0, #1
 80013d2:	fa00 f202 	lsl.w	r2, r0, r2
 80013d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000e100 	.word	0xe000e100

080013ec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	db12      	blt.n	8001424 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	f003 021f 	and.w	r2, r3, #31
 8001404:	490a      	ldr	r1, [pc, #40]	; (8001430 <__NVIC_DisableIRQ+0x44>)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	095b      	lsrs	r3, r3, #5
 800140c:	2001      	movs	r0, #1
 800140e:	fa00 f202 	lsl.w	r2, r0, r2
 8001412:	3320      	adds	r3, #32
 8001414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001418:	f3bf 8f4f 	dsb	sy
}
 800141c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800141e:	f3bf 8f6f 	isb	sy
}
 8001422:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000e100 	.word	0xe000e100

08001434 <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
int usleep(useconds_t usec)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	e012      	b.n	8001468 <usleep+0x34>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	e004      	b.n	8001452 <usleep+0x1e>
        {
            __NOP();
 8001448:	bf00      	nop
            __NOP();
 800144a:	bf00      	nop
        for(j=0;j<2;j++)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	3301      	adds	r3, #1
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	2b01      	cmp	r3, #1
 8001456:	bfd4      	ite	le
 8001458:	2301      	movle	r3, #1
 800145a:	2300      	movgt	r3, #0
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f2      	bne.n	8001448 <usleep+0x14>
    for(i=0;i<usec;i++)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	3301      	adds	r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	429a      	cmp	r2, r3
 800146e:	bf8c      	ite	hi
 8001470:	2301      	movhi	r3, #1
 8001472:	2300      	movls	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1e3      	bne.n	8001442 <usleep+0xe>
        }
    }
    return 0;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f001 f969 	bl	8002768 <HAL_Delay>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 80014a8:	4a0b      	ldr	r2, [pc, #44]	; (80014d8 <EXTI_GetITEnStatus+0x38>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	095b      	lsrs	r3, r3, #5
 80014ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f003 031f 	and.w	r3, r3, #31
 80014b8:	fa22 f303 	lsr.w	r3, r2, r3
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	bf14      	ite	ne
 80014c4:	2301      	movne	r3, #1
 80014c6:	2300      	moveq	r3, #0
 80014c8:	b2db      	uxtb	r3, r3
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000e100 	.word	0xe000e100

080014dc <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RST_Pin;
 80014e2:	2301      	movs	r3, #1
 80014e4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80014e6:	2311      	movs	r3, #17
 80014e8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	4619      	mov	r1, r3
 80014f2:	480a      	ldr	r0, [pc, #40]	; (800151c <reset_DW1000+0x40>)
 80014f4:	f001 fb32 	bl	8002b5c <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2101      	movs	r1, #1
 80014fc:	4807      	ldr	r0, [pc, #28]	; (800151c <reset_DW1000+0x40>)
 80014fe:	f001 fcc9 	bl	8002e94 <HAL_GPIO_WritePin>

    usleep(1);
 8001502:	2001      	movs	r0, #1
 8001504:	f7ff ff96 	bl	8001434 <usleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 8001508:	2000      	movs	r0, #0
 800150a:	f000 f809 	bl	8001520 <setup_DW1000RSTnIRQ>



    Sleep(2);
 800150e:	2002      	movs	r0, #2
 8001510:	f7ff ffba 	bl	8001488 <Sleep>
}
 8001514:	bf00      	nop
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40020000 	.word	0x40020000

08001520 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d015      	beq.n	800155a <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RST_Pin;
 800152e:	2301      	movs	r3, #1
 8001530:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001532:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001536:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	4619      	mov	r1, r3
 8001542:	4813      	ldr	r0, [pc, #76]	; (8001590 <setup_DW1000RSTnIRQ+0x70>)
 8001544:	f001 fb0a 	bl	8002b5c <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 8001548:	2006      	movs	r0, #6
 800154a:	f001 fa4c 	bl	80029e6 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	2105      	movs	r1, #5
 8001552:	2006      	movs	r0, #6
 8001554:	f001 fa2b 	bl	80029ae <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
    }
}
 8001558:	e015      	b.n	8001586 <setup_DW1000RSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 800155a:	2006      	movs	r0, #6
 800155c:	f001 fa51 	bl	8002a02 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8001560:	2301      	movs	r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001564:	2311      	movs	r3, #17
 8001566:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800156c:	2302      	movs	r3, #2
 800156e:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	4619      	mov	r1, r3
 8001576:	4806      	ldr	r0, [pc, #24]	; (8001590 <setup_DW1000RSTnIRQ+0x70>)
 8001578:	f001 faf0 	bl	8002b5c <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
 800157c:	2201      	movs	r2, #1
 800157e:	2101      	movs	r1, #1
 8001580:	4803      	ldr	r0, [pc, #12]	; (8001590 <setup_DW1000RSTnIRQ+0x70>)
 8001582:	f001 fc87 	bl	8002e94 <HAL_GPIO_WritePin>
}
 8001586:	bf00      	nop
 8001588:	3720      	adds	r7, #32
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40020000 	.word	0x40020000

08001594 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <port_set_dw1000_slowrate+0x14>)
 800159a:	2220      	movs	r2, #32
 800159c:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800159e:	4802      	ldr	r0, [pc, #8]	; (80015a8 <port_set_dw1000_slowrate+0x14>)
 80015a0:	f002 fe6c 	bl	800427c <HAL_SPI_Init>
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	2000055c 	.word	0x2000055c

080015ac <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80015b0:	4b03      	ldr	r3, [pc, #12]	; (80015c0 <port_set_dw1000_fastrate+0x14>)
 80015b2:	2208      	movs	r2, #8
 80015b4:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 80015b6:	4802      	ldr	r0, [pc, #8]	; (80015c0 <port_set_dw1000_fastrate+0x14>)
 80015b8:	f002 fe60 	bl	800427c <HAL_SPI_Init>
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	2000055c 	.word	0x2000055c

080015c4 <HAL_GPIO_EXTI_Callback>:
/* @fn      HAL_GPIO_EXTI_Callback
 * @brief   IRQ HAL call-back for all EXTI configured lines
 *          i.e. DW_RESET_Pin and DW_IRQn_Pin
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == DW_RST_Pin)
 80015ce:	88fb      	ldrh	r3, [r7, #6]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d103      	bne.n	80015dc <HAL_GPIO_EXTI_Callback+0x18>
    {
        signalResetDone = 1;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_GPIO_EXTI_Callback+0x2c>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	601a      	str	r2, [r3, #0]
        process_deca_irq();
    }
    else
    {
    }
}
 80015da:	e005      	b.n	80015e8 <HAL_GPIO_EXTI_Callback+0x24>
    else if (GPIO_Pin == DW_IRQ_Pin)
 80015dc:	88fb      	ldrh	r3, [r7, #6]
 80015de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015e2:	d101      	bne.n	80015e8 <HAL_GPIO_EXTI_Callback+0x24>
        process_deca_irq();
 80015e4:	f000 f806 	bl	80015f4 <process_deca_irq>
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	200000c8 	.word	0x200000c8

080015f4 <process_deca_irq>:
 * @brief   main call-back for processing of DW1000 IRQ
 *          it re-enters the IRQ routing and processes all events.
 *          After processing of all events, DW1000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
    while(port_CheckEXT_IRQ() != 0)
 80015f8:	e002      	b.n	8001600 <process_deca_irq+0xc>
    {

        port_deca_isr();
 80015fa:	4b05      	ldr	r3, [pc, #20]	; (8001610 <process_deca_irq+0x1c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4798      	blx	r3
    while(port_CheckEXT_IRQ() != 0)
 8001600:	f000 f81e 	bl	8001640 <port_CheckEXT_IRQ>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f7      	bne.n	80015fa <process_deca_irq+0x6>

    } //while DW1000 IRQ line active
}
 800160a:	bf00      	nop
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	200000c4 	.word	0x200000c4

08001614 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8001618:	2017      	movs	r0, #23
 800161a:	f7ff fee7 	bl	80013ec <__NVIC_DisableIRQ>
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}

08001622 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 8001626:	2017      	movs	r0, #23
 8001628:	f7ff fec2 	bl	80013b0 <__NVIC_EnableIRQ>
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}

08001630 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 8001634:	2017      	movs	r0, #23
 8001636:	f7ff ff33 	bl	80014a0 <EXTI_GetITEnStatus>
 800163a:	4603      	mov	r3, r0
}
 800163c:	4618      	mov	r0, r3
 800163e:	bd80      	pop	{r7, pc}

08001640 <port_CheckEXT_IRQ>:

/* @fn      port_CheckEXT_IRQ
 * @brief   wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(DW_IRQ_GPIO_Port, DW_IRQ_Pin);
 8001644:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <port_CheckEXT_IRQ+0x14>)
 800164a:	f001 fc0b 	bl	8002e64 <HAL_GPIO_ReadPin>
 800164e:	4603      	mov	r3, r0
}
 8001650:	4618      	mov	r0, r3
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40020000 	.word	0x40020000

08001658 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800165e:	f000 fa29 	bl	8001ab4 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001662:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001666:	2201      	movs	r2, #1
 8001668:	2178      	movs	r1, #120	; 0x78
 800166a:	485b      	ldr	r0, [pc, #364]	; (80017d8 <SSD1306_Init+0x180>)
 800166c:	f001 fe86 	bl	800337c <HAL_I2C_IsDeviceReady>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001676:	2300      	movs	r3, #0
 8001678:	e0a9      	b.n	80017ce <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800167a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800167e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001680:	e002      	b.n	8001688 <SSD1306_Init+0x30>
		p--;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3b01      	subs	r3, #1
 8001686:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f9      	bne.n	8001682 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800168e:	22ae      	movs	r2, #174	; 0xae
 8001690:	2100      	movs	r1, #0
 8001692:	2078      	movs	r0, #120	; 0x78
 8001694:	f000 fa6c 	bl	8001b70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001698:	2220      	movs	r2, #32
 800169a:	2100      	movs	r1, #0
 800169c:	2078      	movs	r0, #120	; 0x78
 800169e:	f000 fa67 	bl	8001b70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80016a2:	2210      	movs	r2, #16
 80016a4:	2100      	movs	r1, #0
 80016a6:	2078      	movs	r0, #120	; 0x78
 80016a8:	f000 fa62 	bl	8001b70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80016ac:	22b0      	movs	r2, #176	; 0xb0
 80016ae:	2100      	movs	r1, #0
 80016b0:	2078      	movs	r0, #120	; 0x78
 80016b2:	f000 fa5d 	bl	8001b70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80016b6:	22c8      	movs	r2, #200	; 0xc8
 80016b8:	2100      	movs	r1, #0
 80016ba:	2078      	movs	r0, #120	; 0x78
 80016bc:	f000 fa58 	bl	8001b70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80016c0:	2200      	movs	r2, #0
 80016c2:	2100      	movs	r1, #0
 80016c4:	2078      	movs	r0, #120	; 0x78
 80016c6:	f000 fa53 	bl	8001b70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80016ca:	2210      	movs	r2, #16
 80016cc:	2100      	movs	r1, #0
 80016ce:	2078      	movs	r0, #120	; 0x78
 80016d0:	f000 fa4e 	bl	8001b70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80016d4:	2240      	movs	r2, #64	; 0x40
 80016d6:	2100      	movs	r1, #0
 80016d8:	2078      	movs	r0, #120	; 0x78
 80016da:	f000 fa49 	bl	8001b70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80016de:	2281      	movs	r2, #129	; 0x81
 80016e0:	2100      	movs	r1, #0
 80016e2:	2078      	movs	r0, #120	; 0x78
 80016e4:	f000 fa44 	bl	8001b70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80016e8:	22ff      	movs	r2, #255	; 0xff
 80016ea:	2100      	movs	r1, #0
 80016ec:	2078      	movs	r0, #120	; 0x78
 80016ee:	f000 fa3f 	bl	8001b70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80016f2:	22a1      	movs	r2, #161	; 0xa1
 80016f4:	2100      	movs	r1, #0
 80016f6:	2078      	movs	r0, #120	; 0x78
 80016f8:	f000 fa3a 	bl	8001b70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80016fc:	22a6      	movs	r2, #166	; 0xa6
 80016fe:	2100      	movs	r1, #0
 8001700:	2078      	movs	r0, #120	; 0x78
 8001702:	f000 fa35 	bl	8001b70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001706:	22a8      	movs	r2, #168	; 0xa8
 8001708:	2100      	movs	r1, #0
 800170a:	2078      	movs	r0, #120	; 0x78
 800170c:	f000 fa30 	bl	8001b70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001710:	223f      	movs	r2, #63	; 0x3f
 8001712:	2100      	movs	r1, #0
 8001714:	2078      	movs	r0, #120	; 0x78
 8001716:	f000 fa2b 	bl	8001b70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800171a:	22a4      	movs	r2, #164	; 0xa4
 800171c:	2100      	movs	r1, #0
 800171e:	2078      	movs	r0, #120	; 0x78
 8001720:	f000 fa26 	bl	8001b70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001724:	22d3      	movs	r2, #211	; 0xd3
 8001726:	2100      	movs	r1, #0
 8001728:	2078      	movs	r0, #120	; 0x78
 800172a:	f000 fa21 	bl	8001b70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	2078      	movs	r0, #120	; 0x78
 8001734:	f000 fa1c 	bl	8001b70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001738:	22d5      	movs	r2, #213	; 0xd5
 800173a:	2100      	movs	r1, #0
 800173c:	2078      	movs	r0, #120	; 0x78
 800173e:	f000 fa17 	bl	8001b70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001742:	22f0      	movs	r2, #240	; 0xf0
 8001744:	2100      	movs	r1, #0
 8001746:	2078      	movs	r0, #120	; 0x78
 8001748:	f000 fa12 	bl	8001b70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800174c:	22d9      	movs	r2, #217	; 0xd9
 800174e:	2100      	movs	r1, #0
 8001750:	2078      	movs	r0, #120	; 0x78
 8001752:	f000 fa0d 	bl	8001b70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001756:	2222      	movs	r2, #34	; 0x22
 8001758:	2100      	movs	r1, #0
 800175a:	2078      	movs	r0, #120	; 0x78
 800175c:	f000 fa08 	bl	8001b70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001760:	22da      	movs	r2, #218	; 0xda
 8001762:	2100      	movs	r1, #0
 8001764:	2078      	movs	r0, #120	; 0x78
 8001766:	f000 fa03 	bl	8001b70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800176a:	2212      	movs	r2, #18
 800176c:	2100      	movs	r1, #0
 800176e:	2078      	movs	r0, #120	; 0x78
 8001770:	f000 f9fe 	bl	8001b70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001774:	22db      	movs	r2, #219	; 0xdb
 8001776:	2100      	movs	r1, #0
 8001778:	2078      	movs	r0, #120	; 0x78
 800177a:	f000 f9f9 	bl	8001b70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800177e:	2220      	movs	r2, #32
 8001780:	2100      	movs	r1, #0
 8001782:	2078      	movs	r0, #120	; 0x78
 8001784:	f000 f9f4 	bl	8001b70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001788:	228d      	movs	r2, #141	; 0x8d
 800178a:	2100      	movs	r1, #0
 800178c:	2078      	movs	r0, #120	; 0x78
 800178e:	f000 f9ef 	bl	8001b70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001792:	2214      	movs	r2, #20
 8001794:	2100      	movs	r1, #0
 8001796:	2078      	movs	r0, #120	; 0x78
 8001798:	f000 f9ea 	bl	8001b70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800179c:	22af      	movs	r2, #175	; 0xaf
 800179e:	2100      	movs	r1, #0
 80017a0:	2078      	movs	r0, #120	; 0x78
 80017a2:	f000 f9e5 	bl	8001b70 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80017a6:	222e      	movs	r2, #46	; 0x2e
 80017a8:	2100      	movs	r1, #0
 80017aa:	2078      	movs	r0, #120	; 0x78
 80017ac:	f000 f9e0 	bl	8001b70 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80017b0:	2000      	movs	r0, #0
 80017b2:	f000 f843 	bl	800183c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80017b6:	f000 f813 	bl	80017e0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <SSD1306_Init+0x184>)
 80017bc:	2200      	movs	r2, #0
 80017be:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <SSD1306_Init+0x184>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80017c6:	4b05      	ldr	r3, [pc, #20]	; (80017dc <SSD1306_Init+0x184>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80017cc:	2301      	movs	r3, #1
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000508 	.word	0x20000508
 80017dc:	200004cc 	.word	0x200004cc

080017e0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80017e6:	2300      	movs	r3, #0
 80017e8:	71fb      	strb	r3, [r7, #7]
 80017ea:	e01d      	b.n	8001828 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	3b50      	subs	r3, #80	; 0x50
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	461a      	mov	r2, r3
 80017f4:	2100      	movs	r1, #0
 80017f6:	2078      	movs	r0, #120	; 0x78
 80017f8:	f000 f9ba 	bl	8001b70 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80017fc:	2200      	movs	r2, #0
 80017fe:	2100      	movs	r1, #0
 8001800:	2078      	movs	r0, #120	; 0x78
 8001802:	f000 f9b5 	bl	8001b70 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001806:	2210      	movs	r2, #16
 8001808:	2100      	movs	r1, #0
 800180a:	2078      	movs	r0, #120	; 0x78
 800180c:	f000 f9b0 	bl	8001b70 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	01db      	lsls	r3, r3, #7
 8001814:	4a08      	ldr	r2, [pc, #32]	; (8001838 <SSD1306_UpdateScreen+0x58>)
 8001816:	441a      	add	r2, r3
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	2140      	movs	r1, #64	; 0x40
 800181c:	2078      	movs	r0, #120	; 0x78
 800181e:	f000 f95f 	bl	8001ae0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	3301      	adds	r3, #1
 8001826:	71fb      	strb	r3, [r7, #7]
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	2b07      	cmp	r3, #7
 800182c:	d9de      	bls.n	80017ec <SSD1306_UpdateScreen+0xc>
	}
}
 800182e:	bf00      	nop
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	200000cc 	.word	0x200000cc

0800183c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <SSD1306_Fill+0x14>
 800184c:	2300      	movs	r3, #0
 800184e:	e000      	b.n	8001852 <SSD1306_Fill+0x16>
 8001850:	23ff      	movs	r3, #255	; 0xff
 8001852:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001856:	4619      	mov	r1, r3
 8001858:	4803      	ldr	r0, [pc, #12]	; (8001868 <SSD1306_Fill+0x2c>)
 800185a:	f003 ff47 	bl	80056ec <memset>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	200000cc 	.word	0x200000cc

0800186c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	80fb      	strh	r3, [r7, #6]
 8001876:	460b      	mov	r3, r1
 8001878:	80bb      	strh	r3, [r7, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	70fb      	strb	r3, [r7, #3]
	if (
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	2b7f      	cmp	r3, #127	; 0x7f
 8001882:	d848      	bhi.n	8001916 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001884:	88bb      	ldrh	r3, [r7, #4]
 8001886:	2b3f      	cmp	r3, #63	; 0x3f
 8001888:	d845      	bhi.n	8001916 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800188a:	4b26      	ldr	r3, [pc, #152]	; (8001924 <SSD1306_DrawPixel+0xb8>)
 800188c:	791b      	ldrb	r3, [r3, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d006      	beq.n	80018a0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001892:	78fb      	ldrb	r3, [r7, #3]
 8001894:	2b00      	cmp	r3, #0
 8001896:	bf0c      	ite	eq
 8001898:	2301      	moveq	r3, #1
 800189a:	2300      	movne	r3, #0
 800189c:	b2db      	uxtb	r3, r3
 800189e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d11a      	bne.n	80018dc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80018a6:	88fa      	ldrh	r2, [r7, #6]
 80018a8:	88bb      	ldrh	r3, [r7, #4]
 80018aa:	08db      	lsrs	r3, r3, #3
 80018ac:	b298      	uxth	r0, r3
 80018ae:	4603      	mov	r3, r0
 80018b0:	01db      	lsls	r3, r3, #7
 80018b2:	4413      	add	r3, r2
 80018b4:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <SSD1306_DrawPixel+0xbc>)
 80018b6:	5cd3      	ldrb	r3, [r2, r3]
 80018b8:	b25a      	sxtb	r2, r3
 80018ba:	88bb      	ldrh	r3, [r7, #4]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	2101      	movs	r1, #1
 80018c2:	fa01 f303 	lsl.w	r3, r1, r3
 80018c6:	b25b      	sxtb	r3, r3
 80018c8:	4313      	orrs	r3, r2
 80018ca:	b259      	sxtb	r1, r3
 80018cc:	88fa      	ldrh	r2, [r7, #6]
 80018ce:	4603      	mov	r3, r0
 80018d0:	01db      	lsls	r3, r3, #7
 80018d2:	4413      	add	r3, r2
 80018d4:	b2c9      	uxtb	r1, r1
 80018d6:	4a14      	ldr	r2, [pc, #80]	; (8001928 <SSD1306_DrawPixel+0xbc>)
 80018d8:	54d1      	strb	r1, [r2, r3]
 80018da:	e01d      	b.n	8001918 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80018dc:	88fa      	ldrh	r2, [r7, #6]
 80018de:	88bb      	ldrh	r3, [r7, #4]
 80018e0:	08db      	lsrs	r3, r3, #3
 80018e2:	b298      	uxth	r0, r3
 80018e4:	4603      	mov	r3, r0
 80018e6:	01db      	lsls	r3, r3, #7
 80018e8:	4413      	add	r3, r2
 80018ea:	4a0f      	ldr	r2, [pc, #60]	; (8001928 <SSD1306_DrawPixel+0xbc>)
 80018ec:	5cd3      	ldrb	r3, [r2, r3]
 80018ee:	b25a      	sxtb	r2, r3
 80018f0:	88bb      	ldrh	r3, [r7, #4]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	2101      	movs	r1, #1
 80018f8:	fa01 f303 	lsl.w	r3, r1, r3
 80018fc:	b25b      	sxtb	r3, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	b25b      	sxtb	r3, r3
 8001902:	4013      	ands	r3, r2
 8001904:	b259      	sxtb	r1, r3
 8001906:	88fa      	ldrh	r2, [r7, #6]
 8001908:	4603      	mov	r3, r0
 800190a:	01db      	lsls	r3, r3, #7
 800190c:	4413      	add	r3, r2
 800190e:	b2c9      	uxtb	r1, r1
 8001910:	4a05      	ldr	r2, [pc, #20]	; (8001928 <SSD1306_DrawPixel+0xbc>)
 8001912:	54d1      	strb	r1, [r2, r3]
 8001914:	e000      	b.n	8001918 <SSD1306_DrawPixel+0xac>
		return;
 8001916:	bf00      	nop
	}
}
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	200004cc 	.word	0x200004cc
 8001928:	200000cc 	.word	0x200000cc

0800192c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	460a      	mov	r2, r1
 8001936:	80fb      	strh	r3, [r7, #6]
 8001938:	4613      	mov	r3, r2
 800193a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800193c:	4a05      	ldr	r2, [pc, #20]	; (8001954 <SSD1306_GotoXY+0x28>)
 800193e:	88fb      	ldrh	r3, [r7, #6]
 8001940:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001942:	4a04      	ldr	r2, [pc, #16]	; (8001954 <SSD1306_GotoXY+0x28>)
 8001944:	88bb      	ldrh	r3, [r7, #4]
 8001946:	8053      	strh	r3, [r2, #2]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	200004cc 	.word	0x200004cc

08001958 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	6039      	str	r1, [r7, #0]
 8001962:	71fb      	strb	r3, [r7, #7]
 8001964:	4613      	mov	r3, r2
 8001966:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001968:	4b3a      	ldr	r3, [pc, #232]	; (8001a54 <SSD1306_Putc+0xfc>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	461a      	mov	r2, r3
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	4413      	add	r3, r2
	if (
 8001974:	2b7f      	cmp	r3, #127	; 0x7f
 8001976:	dc07      	bgt.n	8001988 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001978:	4b36      	ldr	r3, [pc, #216]	; (8001a54 <SSD1306_Putc+0xfc>)
 800197a:	885b      	ldrh	r3, [r3, #2]
 800197c:	461a      	mov	r2, r3
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	785b      	ldrb	r3, [r3, #1]
 8001982:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001984:	2b3f      	cmp	r3, #63	; 0x3f
 8001986:	dd01      	ble.n	800198c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001988:	2300      	movs	r3, #0
 800198a:	e05e      	b.n	8001a4a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	e04b      	b.n	8001a2a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	3b20      	subs	r3, #32
 800199a:	6839      	ldr	r1, [r7, #0]
 800199c:	7849      	ldrb	r1, [r1, #1]
 800199e:	fb01 f303 	mul.w	r3, r1, r3
 80019a2:	4619      	mov	r1, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	440b      	add	r3, r1
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4413      	add	r3, r2
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80019b0:	2300      	movs	r3, #0
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	e030      	b.n	8001a18 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d010      	beq.n	80019e8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80019c6:	4b23      	ldr	r3, [pc, #140]	; (8001a54 <SSD1306_Putc+0xfc>)
 80019c8:	881a      	ldrh	r2, [r3, #0]
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	4413      	add	r3, r2
 80019d0:	b298      	uxth	r0, r3
 80019d2:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <SSD1306_Putc+0xfc>)
 80019d4:	885a      	ldrh	r2, [r3, #2]
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	4413      	add	r3, r2
 80019dc:	b29b      	uxth	r3, r3
 80019de:	79ba      	ldrb	r2, [r7, #6]
 80019e0:	4619      	mov	r1, r3
 80019e2:	f7ff ff43 	bl	800186c <SSD1306_DrawPixel>
 80019e6:	e014      	b.n	8001a12 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80019e8:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <SSD1306_Putc+0xfc>)
 80019ea:	881a      	ldrh	r2, [r3, #0]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	b298      	uxth	r0, r3
 80019f4:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <SSD1306_Putc+0xfc>)
 80019f6:	885a      	ldrh	r2, [r3, #2]
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	4413      	add	r3, r2
 80019fe:	b299      	uxth	r1, r3
 8001a00:	79bb      	ldrb	r3, [r7, #6]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	bf0c      	ite	eq
 8001a06:	2301      	moveq	r3, #1
 8001a08:	2300      	movne	r3, #0
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	f7ff ff2d 	bl	800186c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	3301      	adds	r3, #1
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d3c8      	bcc.n	80019b6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	3301      	adds	r3, #1
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	785b      	ldrb	r3, [r3, #1]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d3ad      	bcc.n	8001992 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <SSD1306_Putc+0xfc>)
 8001a38:	881a      	ldrh	r2, [r3, #0]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <SSD1306_Putc+0xfc>)
 8001a46:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001a48:	79fb      	ldrb	r3, [r7, #7]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	200004cc 	.word	0x200004cc

08001a58 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	4613      	mov	r3, r2
 8001a64:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001a66:	e012      	b.n	8001a8e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	79fa      	ldrb	r2, [r7, #7]
 8001a6e:	68b9      	ldr	r1, [r7, #8]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff71 	bl	8001958 <SSD1306_Putc>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461a      	mov	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d002      	beq.n	8001a88 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	e008      	b.n	8001a9a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1e8      	bne.n	8001a68 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	781b      	ldrb	r3, [r3, #0]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f7ff fec8 	bl	800183c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001aac:	f7ff fe98 	bl	80017e0 <SSD1306_UpdateScreen>
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <ssd1306_I2C_Init+0x28>)
 8001abc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001abe:	e002      	b.n	8001ac6 <ssd1306_I2C_Init+0x12>
		p--;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1f9      	bne.n	8001ac0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	0003d090 	.word	0x0003d090

08001ae0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001ae0:	b590      	push	{r4, r7, lr}
 8001ae2:	b0c7      	sub	sp, #284	; 0x11c
 8001ae4:	af02      	add	r7, sp, #8
 8001ae6:	4604      	mov	r4, r0
 8001ae8:	4608      	mov	r0, r1
 8001aea:	4639      	mov	r1, r7
 8001aec:	600a      	str	r2, [r1, #0]
 8001aee:	4619      	mov	r1, r3
 8001af0:	1dfb      	adds	r3, r7, #7
 8001af2:	4622      	mov	r2, r4
 8001af4:	701a      	strb	r2, [r3, #0]
 8001af6:	1dbb      	adds	r3, r7, #6
 8001af8:	4602      	mov	r2, r0
 8001afa:	701a      	strb	r2, [r3, #0]
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	460a      	mov	r2, r1
 8001b00:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001b02:	f107 030c 	add.w	r3, r7, #12
 8001b06:	1dba      	adds	r2, r7, #6
 8001b08:	7812      	ldrb	r2, [r2, #0]
 8001b0a:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001b12:	e010      	b.n	8001b36 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001b14:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b18:	463a      	mov	r2, r7
 8001b1a:	6812      	ldr	r2, [r2, #0]
 8001b1c:	441a      	add	r2, r3
 8001b1e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b22:	3301      	adds	r3, #1
 8001b24:	7811      	ldrb	r1, [r2, #0]
 8001b26:	f107 020c 	add.w	r2, r7, #12
 8001b2a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001b2c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b30:	3301      	adds	r3, #1
 8001b32:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001b36:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	1d3a      	adds	r2, r7, #4
 8001b3e:	8812      	ldrh	r2, [r2, #0]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d8e7      	bhi.n	8001b14 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001b44:	1dfb      	adds	r3, r7, #7
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	b299      	uxth	r1, r3
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	f107 020c 	add.w	r2, r7, #12
 8001b56:	200a      	movs	r0, #10
 8001b58:	9000      	str	r0, [sp, #0]
 8001b5a:	4804      	ldr	r0, [pc, #16]	; (8001b6c <ssd1306_I2C_WriteMulti+0x8c>)
 8001b5c:	f001 fb10 	bl	8003180 <HAL_I2C_Master_Transmit>
}
 8001b60:	bf00      	nop
 8001b62:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd90      	pop	{r4, r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000508 	.word	0x20000508

08001b70 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af02      	add	r7, sp, #8
 8001b76:	4603      	mov	r3, r0
 8001b78:	71fb      	strb	r3, [r7, #7]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	71bb      	strb	r3, [r7, #6]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001b82:	79bb      	ldrb	r3, [r7, #6]
 8001b84:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001b86:	797b      	ldrb	r3, [r7, #5]
 8001b88:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	b299      	uxth	r1, r3
 8001b8e:	f107 020c 	add.w	r2, r7, #12
 8001b92:	230a      	movs	r3, #10
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	2302      	movs	r3, #2
 8001b98:	4803      	ldr	r0, [pc, #12]	; (8001ba8 <ssd1306_I2C_Write+0x38>)
 8001b9a:	f001 faf1 	bl	8003180 <HAL_I2C_Master_Transmit>
}
 8001b9e:	bf00      	nop
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000508 	.word	0x20000508

08001bac <ssd1306_write>:

void ssd1306_write(uint32_t buff, FontDef_t Font)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	e883 0006 	stmia.w	r3, {r1, r2}
//	SSD1306_Clear ();
//	SSD1306_Fill(SSD1306_COLOR_BLACK);
	SSD1306_Puts(buff, &Font, 1);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1d39      	adds	r1, r7, #4
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff49 	bl	8001a58 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001bc6:	f7ff fe0b 	bl	80017e0 <SSD1306_UpdateScreen>
}
 8001bca:	bf00      	nop
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08a      	sub	sp, #40	; 0x28
 8001bd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
 8001be8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	4b3c      	ldr	r3, [pc, #240]	; (8001ce0 <MX_GPIO_Init+0x10c>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	4a3b      	ldr	r2, [pc, #236]	; (8001ce0 <MX_GPIO_Init+0x10c>)
 8001bf4:	f043 0304 	orr.w	r3, r3, #4
 8001bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfa:	4b39      	ldr	r3, [pc, #228]	; (8001ce0 <MX_GPIO_Init+0x10c>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	4b35      	ldr	r3, [pc, #212]	; (8001ce0 <MX_GPIO_Init+0x10c>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	4a34      	ldr	r2, [pc, #208]	; (8001ce0 <MX_GPIO_Init+0x10c>)
 8001c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c14:	6313      	str	r3, [r2, #48]	; 0x30
 8001c16:	4b32      	ldr	r3, [pc, #200]	; (8001ce0 <MX_GPIO_Init+0x10c>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	4b2e      	ldr	r3, [pc, #184]	; (8001ce0 <MX_GPIO_Init+0x10c>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a2d      	ldr	r2, [pc, #180]	; (8001ce0 <MX_GPIO_Init+0x10c>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <MX_GPIO_Init+0x10c>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	4b27      	ldr	r3, [pc, #156]	; (8001ce0 <MX_GPIO_Init+0x10c>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a26      	ldr	r2, [pc, #152]	; (8001ce0 <MX_GPIO_Init+0x10c>)
 8001c48:	f043 0302 	orr.w	r3, r3, #2
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b24      	ldr	r3, [pc, #144]	; (8001ce0 <MX_GPIO_Init+0x10c>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET);
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	2140      	movs	r1, #64	; 0x40
 8001c5e:	4821      	ldr	r0, [pc, #132]	; (8001ce4 <MX_GPIO_Init+0x110>)
 8001c60:	f001 f918 	bl	8002e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_RST_Pin;
 8001c64:	2301      	movs	r3, #1
 8001c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c68:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001c72:	f107 0314 	add.w	r3, r7, #20
 8001c76:	4619      	mov	r1, r3
 8001c78:	481b      	ldr	r0, [pc, #108]	; (8001ce8 <MX_GPIO_Init+0x114>)
 8001c7a:	f000 ff6f 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_IRQ_Pin;
 8001c7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c84:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DW_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4619      	mov	r1, r3
 8001c94:	4814      	ldr	r0, [pc, #80]	; (8001ce8 <MX_GPIO_Init+0x114>)
 8001c96:	f000 ff61 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_CS_Pin;
 8001c9a:	2340      	movs	r3, #64	; 0x40
 8001c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	480c      	ldr	r0, [pc, #48]	; (8001ce4 <MX_GPIO_Init+0x110>)
 8001cb2:	f000 ff53 	bl	8002b5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2103      	movs	r1, #3
 8001cba:	2006      	movs	r0, #6
 8001cbc:	f000 fe77 	bl	80029ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001cc0:	2006      	movs	r0, #6
 8001cc2:	f000 fe90 	bl	80029e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2104      	movs	r1, #4
 8001cca:	2028      	movs	r0, #40	; 0x28
 8001ccc:	f000 fe6f 	bl	80029ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cd0:	2028      	movs	r0, #40	; 0x28
 8001cd2:	f000 fe88 	bl	80029e6 <HAL_NVIC_EnableIRQ>

}
 8001cd6:	bf00      	nop
 8001cd8:	3728      	adds	r7, #40	; 0x28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40020400 	.word	0x40020400
 8001ce8:	40020000 	.word	0x40020000

08001cec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001cf2:	4a13      	ldr	r2, [pc, #76]	; (8001d40 <MX_I2C1_Init+0x54>)
 8001cf4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001cf6:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001cf8:	4a12      	ldr	r2, [pc, #72]	; (8001d44 <MX_I2C1_Init+0x58>)
 8001cfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001d0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d10:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d1c:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d28:	4804      	ldr	r0, [pc, #16]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001d2a:	f001 f8e5 	bl	8002ef8 <HAL_I2C_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d34:	f000 fb00 	bl	8002338 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000508 	.word	0x20000508
 8001d40:	40005400 	.word	0x40005400
 8001d44:	00061a80 	.word	0x00061a80

08001d48 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	; 0x28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a19      	ldr	r2, [pc, #100]	; (8001dcc <HAL_I2C_MspInit+0x84>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d12c      	bne.n	8001dc4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <HAL_I2C_MspInit+0x88>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a17      	ldr	r2, [pc, #92]	; (8001dd0 <HAL_I2C_MspInit+0x88>)
 8001d74:	f043 0302 	orr.w	r3, r3, #2
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <HAL_I2C_MspInit+0x88>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d8c:	2312      	movs	r3, #18
 8001d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d94:	2303      	movs	r3, #3
 8001d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d98:	2304      	movs	r3, #4
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	4619      	mov	r1, r3
 8001da2:	480c      	ldr	r0, [pc, #48]	; (8001dd4 <HAL_I2C_MspInit+0x8c>)
 8001da4:	f000 feda 	bl	8002b5c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <HAL_I2C_MspInit+0x88>)
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	4a07      	ldr	r2, [pc, #28]	; (8001dd0 <HAL_I2C_MspInit+0x88>)
 8001db2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001db6:	6413      	str	r3, [r2, #64]	; 0x40
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <HAL_I2C_MspInit+0x88>)
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	3728      	adds	r7, #40	; 0x28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40005400 	.word	0x40005400
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40020400 	.word	0x40020400

08001dd8 <dw_main>:
 * @param  none
 *
 * @return none
 */
int dw_main(void)
{
 8001dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ddc:	b086      	sub	sp, #24
 8001dde:	af00      	add	r7, sp, #0
    /* Display application name on LCD. */
   HAL_UART_Transmit(&huart2, app_name, sizeof(app_name), HAL_MAX_DELAY);
 8001de0:	f04f 33ff 	mov.w	r3, #4294967295
 8001de4:	2211      	movs	r2, #17
 8001de6:	49b1      	ldr	r1, [pc, #708]	; (80020ac <dw_main+0x2d4>)
 8001de8:	48b1      	ldr	r0, [pc, #708]	; (80020b0 <dw_main+0x2d8>)
 8001dea:	f002 fd32 	bl	8004852 <HAL_UART_Transmit>
   ssd1306_write(app_name, Font_7x10);
 8001dee:	48af      	ldr	r0, [pc, #700]	; (80020ac <dw_main+0x2d4>)
 8001df0:	4bb0      	ldr	r3, [pc, #704]	; (80020b4 <dw_main+0x2dc>)
 8001df2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001df6:	f7ff fed9 	bl	8001bac <ssd1306_write>

    /* Reset and initialise DW1000.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8001dfa:	f7ff fb6f 	bl	80014dc <reset_DW1000>
    port_set_dw1000_slowrate();
 8001dfe:	f7ff fbc9 	bl	8001594 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR)
 8001e02:	2001      	movs	r0, #1
 8001e04:	f7fe fb64 	bl	80004d0 <dwt_initialise>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e0e:	d111      	bne.n	8001e34 <dw_main+0x5c>
    {
//        lcd_display_str("INIT FAILED");
    	HAL_UART_Transmit(&huart2, "Init Failed!!!", 15, HAL_MAX_DELAY);
 8001e10:	f04f 33ff 	mov.w	r3, #4294967295
 8001e14:	220f      	movs	r2, #15
 8001e16:	49a8      	ldr	r1, [pc, #672]	; (80020b8 <dw_main+0x2e0>)
 8001e18:	48a5      	ldr	r0, [pc, #660]	; (80020b0 <dw_main+0x2d8>)
 8001e1a:	f002 fd1a 	bl	8004852 <HAL_UART_Transmit>
    	SSD1306_GotoXY(0, 10);
 8001e1e:	210a      	movs	r1, #10
 8001e20:	2000      	movs	r0, #0
 8001e22:	f7ff fd83 	bl	800192c <SSD1306_GotoXY>
    	ssd1306_write("INIT FAILED!!!", Font_7x10);
 8001e26:	48a5      	ldr	r0, [pc, #660]	; (80020bc <dw_main+0x2e4>)
 8001e28:	4ba2      	ldr	r3, [pc, #648]	; (80020b4 <dw_main+0x2dc>)
 8001e2a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001e2e:	f7ff febd 	bl	8001bac <ssd1306_write>
        while (1)
 8001e32:	e7fe      	b.n	8001e32 <dw_main+0x5a>
        { };
    }
    port_set_dw1000_fastrate();
 8001e34:	f7ff fbba 	bl	80015ac <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 7 below. */
    dwt_configure(&config);
 8001e38:	48a1      	ldr	r0, [pc, #644]	; (80020c0 <dw_main+0x2e8>)
 8001e3a:	f7fe fc9f 	bl	800077c <dwt_configure>

    /* Apply default antenna delay value. See NOTE 1 below. */
    dwt_setrxantennadelay(RX_ANT_DLY);
 8001e3e:	f244 0034 	movw	r0, #16436	; 0x4034
 8001e42:	f7fe fe05 	bl	8000a50 <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 8001e46:	f244 0034 	movw	r0, #16436	; 0x4034
 8001e4a:	f7fe fe11 	bl	8000a70 <dwt_settxantennadelay>

    /* Set expected response's delay and timeout. See NOTE 4, 5 and 6 below.
     * As this example only handles one incoming frame with always the same delay and timeout, those values can be set here once for all. */
    dwt_setrxaftertxdelay(POLL_TX_TO_RESP_RX_DLY_UUS);
 8001e4e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e52:	f7ff f84b 	bl	8000eec <dwt_setrxaftertxdelay>
    dwt_setrxtimeout(RESP_RX_TIMEOUT_UUS);
 8001e56:	f640 208c 	movw	r0, #2700	; 0xa8c
 8001e5a:	f7ff f965 	bl	8001128 <dwt_setrxtimeout>
    dwt_setpreambledetecttimeout(PRE_TIMEOUT);
 8001e5e:	2008      	movs	r0, #8
 8001e60:	f7ff f9a2 	bl	80011a8 <dwt_setpreambledetecttimeout>

    /* Loop forever initiating ranging exchanges. */
    while (1)
    {
    	SSD1306_Clear ();
 8001e64:	f7ff fe1d 	bl	8001aa2 <SSD1306_Clear>
    	SSD1306_GotoXY(0, 0);  ssd1306_write("Transmitted :", Font_7x10);
 8001e68:	2100      	movs	r1, #0
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f7ff fd5e 	bl	800192c <SSD1306_GotoXY>
 8001e70:	4894      	ldr	r0, [pc, #592]	; (80020c4 <dw_main+0x2ec>)
 8001e72:	4b90      	ldr	r3, [pc, #576]	; (80020b4 <dw_main+0x2dc>)
 8001e74:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001e78:	f7ff fe98 	bl	8001bac <ssd1306_write>
    	SSD1306_GotoXY(0, 20);  ssd1306_write("Received :", Font_7x10);
 8001e7c:	2114      	movs	r1, #20
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f7ff fd54 	bl	800192c <SSD1306_GotoXY>
 8001e84:	4890      	ldr	r0, [pc, #576]	; (80020c8 <dw_main+0x2f0>)
 8001e86:	4b8b      	ldr	r3, [pc, #556]	; (80020b4 <dw_main+0x2dc>)
 8001e88:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001e8c:	f7ff fe8e 	bl	8001bac <ssd1306_write>
        /* Write frame data to DW1000 and prepare transmission. See NOTE 8 below. */
        tx_poll_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8001e90:	4b8e      	ldr	r3, [pc, #568]	; (80020cc <dw_main+0x2f4>)
 8001e92:	781a      	ldrb	r2, [r3, #0]
 8001e94:	4b8e      	ldr	r3, [pc, #568]	; (80020d0 <dw_main+0x2f8>)
 8001e96:	709a      	strb	r2, [r3, #2]
        dwt_writetxdata(sizeof(tx_poll_msg), tx_poll_msg, 0); /* Zero offset in TX buffer. */
 8001e98:	2200      	movs	r2, #0
 8001e9a:	498d      	ldr	r1, [pc, #564]	; (80020d0 <dw_main+0x2f8>)
 8001e9c:	200c      	movs	r0, #12
 8001e9e:	f7fe fdf6 	bl	8000a8e <dwt_writetxdata>
        dwt_writetxfctrl(sizeof(tx_poll_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	200c      	movs	r0, #12
 8001ea8:	f7fe fe10 	bl	8000acc <dwt_writetxfctrl>

        /* Start transmission, indicating that a response is expected so that reception is enabled automatically after the frame is sent and the delay
         * set by dwt_setrxaftertxdelay() has elapsed. */
        dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED);
 8001eac:	2002      	movs	r0, #2
 8001eae:	f7ff f8ed 	bl	800108c <dwt_starttx>
        SSD1306_GotoXY(0, 10); ssd1306_write(tx_poll_msg, Font_7x10);
 8001eb2:	210a      	movs	r1, #10
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f7ff fd39 	bl	800192c <SSD1306_GotoXY>
 8001eba:	4885      	ldr	r0, [pc, #532]	; (80020d0 <dw_main+0x2f8>)
 8001ebc:	4b7d      	ldr	r3, [pc, #500]	; (80020b4 <dw_main+0x2dc>)
 8001ebe:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001ec2:	f7ff fe73 	bl	8001bac <ssd1306_write>
        HAL_UART_Transmit(&huart2, tx_poll_msg, sizeof(tx_poll_msg), HAL_MAX_DELAY);
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eca:	220c      	movs	r2, #12
 8001ecc:	4980      	ldr	r1, [pc, #512]	; (80020d0 <dw_main+0x2f8>)
 8001ece:	4878      	ldr	r0, [pc, #480]	; (80020b0 <dw_main+0x2d8>)
 8001ed0:	f002 fcbf 	bl	8004852 <HAL_UART_Transmit>
        /* We assume that the transmission is achieved correctly, poll for reception of a frame or error/timeout. See NOTE 9 below. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8001ed4:	bf00      	nop
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	200f      	movs	r0, #15
 8001eda:	f7fe fefa 	bl	8000cd2 <dwt_read32bitoffsetreg>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	4a7c      	ldr	r2, [pc, #496]	; (80020d4 <dw_main+0x2fc>)
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	4b7b      	ldr	r3, [pc, #492]	; (80020d4 <dw_main+0x2fc>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4b7b      	ldr	r3, [pc, #492]	; (80020d8 <dw_main+0x300>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0f2      	beq.n	8001ed6 <dw_main+0xfe>
        { };

        /* Increment frame sequence number after transmission of the poll message (modulo 256). */
        frame_seq_nb++;
 8001ef0:	4b76      	ldr	r3, [pc, #472]	; (80020cc <dw_main+0x2f4>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	4b74      	ldr	r3, [pc, #464]	; (80020cc <dw_main+0x2f4>)
 8001efa:	701a      	strb	r2, [r3, #0]

        if (status_reg & SYS_STATUS_RXFCG)
 8001efc:	4b75      	ldr	r3, [pc, #468]	; (80020d4 <dw_main+0x2fc>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 80c5 	beq.w	8002094 <dw_main+0x2bc>
        {
            uint32 frame_len;

            /* Clear good RX frame event and TX frame sent in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG | SYS_STATUS_TXFRS);
 8001f0a:	f44f 4281 	mov.w	r2, #16512	; 0x4080
 8001f0e:	2100      	movs	r1, #0
 8001f10:	200f      	movs	r0, #15
 8001f12:	f7fe ff64 	bl	8000dde <dwt_write32bitoffsetreg>

            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_MASK;
 8001f16:	2100      	movs	r1, #0
 8001f18:	2010      	movs	r0, #16
 8001f1a:	f7fe feda 	bl	8000cd2 <dwt_read32bitoffsetreg>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f24:	617b      	str	r3, [r7, #20]
            if (frame_len <= RX_BUF_LEN)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	2b14      	cmp	r3, #20
 8001f2a:	d806      	bhi.n	8001f3a <dw_main+0x162>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	2200      	movs	r2, #0
 8001f32:	4619      	mov	r1, r3
 8001f34:	4869      	ldr	r0, [pc, #420]	; (80020dc <dw_main+0x304>)
 8001f36:	f7fe fde9 	bl	8000b0c <dwt_readrxdata>
            }
            HAL_UART_Transmit(&huart2, rx_buffer, sizeof(rx_buffer), HAL_MAX_DELAY);
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3e:	2214      	movs	r2, #20
 8001f40:	4966      	ldr	r1, [pc, #408]	; (80020dc <dw_main+0x304>)
 8001f42:	485b      	ldr	r0, [pc, #364]	; (80020b0 <dw_main+0x2d8>)
 8001f44:	f002 fc85 	bl	8004852 <HAL_UART_Transmit>
            SSD1306_GotoXY(0, 30); ssd1306_write(rx_buffer, Font_7x10);
 8001f48:	211e      	movs	r1, #30
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f7ff fcee 	bl	800192c <SSD1306_GotoXY>
 8001f50:	4862      	ldr	r0, [pc, #392]	; (80020dc <dw_main+0x304>)
 8001f52:	4b58      	ldr	r3, [pc, #352]	; (80020b4 <dw_main+0x2dc>)
 8001f54:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f58:	f7ff fe28 	bl	8001bac <ssd1306_write>
            /* Check that the frame is the expected response from the companion "DS TWR responder" example.
             * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
            rx_buffer[ALL_MSG_SN_IDX] = 0;
 8001f5c:	4b5f      	ldr	r3, [pc, #380]	; (80020dc <dw_main+0x304>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	709a      	strb	r2, [r3, #2]
            if (memcmp(rx_buffer, rx_resp_msg, ALL_MSG_COMMON_LEN) == 0)
 8001f62:	220a      	movs	r2, #10
 8001f64:	495e      	ldr	r1, [pc, #376]	; (80020e0 <dw_main+0x308>)
 8001f66:	485d      	ldr	r0, [pc, #372]	; (80020dc <dw_main+0x304>)
 8001f68:	f003 fbb2 	bl	80056d0 <memcmp>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f040 8097 	bne.w	80020a2 <dw_main+0x2ca>
            {
                uint32 final_tx_time;
                int ret;

                /* Retrieve poll transmission and response reception timestamp. */
                poll_tx_ts = get_tx_timestamp_u64();
 8001f74:	f000 f8ca 	bl	800210c <get_tx_timestamp_u64>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4959      	ldr	r1, [pc, #356]	; (80020e4 <dw_main+0x30c>)
 8001f7e:	e9c1 2300 	strd	r2, r3, [r1]
                resp_rx_ts = get_rx_timestamp_u64();
 8001f82:	f000 f8fb 	bl	800217c <get_rx_timestamp_u64>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4957      	ldr	r1, [pc, #348]	; (80020e8 <dw_main+0x310>)
 8001f8c:	e9c1 2300 	strd	r2, r3, [r1]

                /* Compute final message transmission time. See NOTE 10 below. */
                final_tx_time = (resp_rx_ts + (RESP_RX_TO_FINAL_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
 8001f90:	4b55      	ldr	r3, [pc, #340]	; (80020e8 <dw_main+0x310>)
 8001f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f96:	4855      	ldr	r0, [pc, #340]	; (80020ec <dw_main+0x314>)
 8001f98:	f04f 0100 	mov.w	r1, #0
 8001f9c:	1814      	adds	r4, r2, r0
 8001f9e:	eb43 0501 	adc.w	r5, r3, r1
 8001fa2:	f04f 0200 	mov.w	r2, #0
 8001fa6:	f04f 0300 	mov.w	r3, #0
 8001faa:	0a22      	lsrs	r2, r4, #8
 8001fac:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 8001fb0:	0a2b      	lsrs	r3, r5, #8
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
                dwt_setdelayedtrxtime(final_tx_time);
 8001fb6:	6938      	ldr	r0, [r7, #16]
 8001fb8:	f7ff f85a 	bl	8001070 <dwt_setdelayedtrxtime>

                /* Final TX timestamp is the transmission time we programmed plus the TX antenna delay. */
                final_tx_ts = (((uint64)(final_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY;
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	f04f 0300 	mov.w	r3, #0
 8001fc4:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8001fc8:	ea4f 2802 	mov.w	r8, r2, lsl #8
 8001fcc:	4a48      	ldr	r2, [pc, #288]	; (80020f0 <dw_main+0x318>)
 8001fce:	f04f 03ff 	mov.w	r3, #255	; 0xff
 8001fd2:	ea08 0a02 	and.w	sl, r8, r2
 8001fd6:	ea09 0b03 	and.w	fp, r9, r3
 8001fda:	f244 0234 	movw	r2, #16436	; 0x4034
 8001fde:	f04f 0300 	mov.w	r3, #0
 8001fe2:	eb1a 0102 	adds.w	r1, sl, r2
 8001fe6:	6039      	str	r1, [r7, #0]
 8001fe8:	eb4b 0303 	adc.w	r3, fp, r3
 8001fec:	607b      	str	r3, [r7, #4]
 8001fee:	4b41      	ldr	r3, [pc, #260]	; (80020f4 <dw_main+0x31c>)
 8001ff0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001ff4:	e9c3 1200 	strd	r1, r2, [r3]

                /* Write all timestamps in the final message. See NOTE 11 below. */
                final_msg_set_ts(&tx_final_msg[FINAL_MSG_POLL_TX_TS_IDX], poll_tx_ts);
 8001ff8:	4b3a      	ldr	r3, [pc, #232]	; (80020e4 <dw_main+0x30c>)
 8001ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffe:	483e      	ldr	r0, [pc, #248]	; (80020f8 <dw_main+0x320>)
 8002000:	f000 f8f4 	bl	80021ec <final_msg_set_ts>
                final_msg_set_ts(&tx_final_msg[FINAL_MSG_RESP_RX_TS_IDX], resp_rx_ts);
 8002004:	4b38      	ldr	r3, [pc, #224]	; (80020e8 <dw_main+0x310>)
 8002006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200a:	483c      	ldr	r0, [pc, #240]	; (80020fc <dw_main+0x324>)
 800200c:	f000 f8ee 	bl	80021ec <final_msg_set_ts>
                final_msg_set_ts(&tx_final_msg[FINAL_MSG_FINAL_TX_TS_IDX], final_tx_ts);
 8002010:	4b38      	ldr	r3, [pc, #224]	; (80020f4 <dw_main+0x31c>)
 8002012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002016:	483a      	ldr	r0, [pc, #232]	; (8002100 <dw_main+0x328>)
 8002018:	f000 f8e8 	bl	80021ec <final_msg_set_ts>

                /* Write and send final message. See NOTE 8 below. */
                tx_final_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 800201c:	4b2b      	ldr	r3, [pc, #172]	; (80020cc <dw_main+0x2f4>)
 800201e:	781a      	ldrb	r2, [r3, #0]
 8002020:	4b38      	ldr	r3, [pc, #224]	; (8002104 <dw_main+0x32c>)
 8002022:	709a      	strb	r2, [r3, #2]
                dwt_writetxdata(sizeof(tx_final_msg), tx_final_msg, 0); /* Zero offset in TX buffer. */
 8002024:	2200      	movs	r2, #0
 8002026:	4937      	ldr	r1, [pc, #220]	; (8002104 <dw_main+0x32c>)
 8002028:	2018      	movs	r0, #24
 800202a:	f7fe fd30 	bl	8000a8e <dwt_writetxdata>
                dwt_writetxfctrl(sizeof(tx_final_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
 800202e:	2201      	movs	r2, #1
 8002030:	2100      	movs	r1, #0
 8002032:	2018      	movs	r0, #24
 8002034:	f7fe fd4a 	bl	8000acc <dwt_writetxfctrl>
                ret = dwt_starttx(DWT_START_TX_DELAYED);
 8002038:	2001      	movs	r0, #1
 800203a:	f7ff f827 	bl	800108c <dwt_starttx>
 800203e:	60f8      	str	r0, [r7, #12]
                HAL_UART_Transmit(&huart2, tx_final_msg, sizeof(tx_final_msg), HAL_MAX_DELAY);
 8002040:	f04f 33ff 	mov.w	r3, #4294967295
 8002044:	2218      	movs	r2, #24
 8002046:	492f      	ldr	r1, [pc, #188]	; (8002104 <dw_main+0x32c>)
 8002048:	4819      	ldr	r0, [pc, #100]	; (80020b0 <dw_main+0x2d8>)
 800204a:	f002 fc02 	bl	8004852 <HAL_UART_Transmit>
                SSD1306_GotoXY(0, 20); ssd1306_write(tx_final_msg, Font_7x10);
 800204e:	2114      	movs	r1, #20
 8002050:	2000      	movs	r0, #0
 8002052:	f7ff fc6b 	bl	800192c <SSD1306_GotoXY>
 8002056:	482b      	ldr	r0, [pc, #172]	; (8002104 <dw_main+0x32c>)
 8002058:	4b16      	ldr	r3, [pc, #88]	; (80020b4 <dw_main+0x2dc>)
 800205a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800205e:	f7ff fda5 	bl	8001bac <ssd1306_write>
                /* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 12 below. */
                if (ret == DWT_SUCCESS)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d11c      	bne.n	80020a2 <dw_main+0x2ca>
                {
                    /* Poll DW1000 until TX frame sent event set. See NOTE 9 below. */
                    while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS))
 8002068:	bf00      	nop
 800206a:	2100      	movs	r1, #0
 800206c:	200f      	movs	r0, #15
 800206e:	f7fe fe30 	bl	8000cd2 <dwt_read32bitoffsetreg>
 8002072:	4603      	mov	r3, r0
 8002074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0f6      	beq.n	800206a <dw_main+0x292>
                    { };

                    /* Clear TXFRS event. */
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
 800207c:	2280      	movs	r2, #128	; 0x80
 800207e:	2100      	movs	r1, #0
 8002080:	200f      	movs	r0, #15
 8002082:	f7fe feac 	bl	8000dde <dwt_write32bitoffsetreg>

                    /* Increment frame sequence number after transmission of the final message (modulo 256). */
                    frame_seq_nb++;
 8002086:	4b11      	ldr	r3, [pc, #68]	; (80020cc <dw_main+0x2f4>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	3301      	adds	r3, #1
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <dw_main+0x2f4>)
 8002090:	701a      	strb	r2, [r3, #0]
 8002092:	e006      	b.n	80020a2 <dw_main+0x2ca>
            }
        }
        else
        {
            /* Clear RX error/timeout events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8002094:	4a1c      	ldr	r2, [pc, #112]	; (8002108 <dw_main+0x330>)
 8002096:	2100      	movs	r1, #0
 8002098:	200f      	movs	r0, #15
 800209a:	f7fe fea0 	bl	8000dde <dwt_write32bitoffsetreg>

            /* Reset RX to properly reinitialise LDE operation. */
            dwt_rxreset();
 800209e:	f7ff f892 	bl	80011c6 <dwt_rxreset>
        }

        /* Execute a delay between ranging exchanges. */
        Sleep(RNG_DELAY_MS);
 80020a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020a6:	f7ff f9ef 	bl	8001488 <Sleep>
    	SSD1306_Clear ();
 80020aa:	e6db      	b.n	8001e64 <dw_main+0x8c>
 80020ac:	2000000c 	.word	0x2000000c
 80020b0:	200005b4 	.word	0x200005b4
 80020b4:	20000004 	.word	0x20000004
 80020b8:	08005714 	.word	0x08005714
 80020bc:	08005724 	.word	0x08005724
 80020c0:	20000020 	.word	0x20000020
 80020c4:	08005734 	.word	0x08005734
 80020c8:	08005744 	.word	0x08005744
 80020cc:	200004d2 	.word	0x200004d2
 80020d0:	2000002c 	.word	0x2000002c
 80020d4:	200004e8 	.word	0x200004e8
 80020d8:	2427d000 	.word	0x2427d000
 80020dc:	200004d4 	.word	0x200004d4
 80020e0:	20000038 	.word	0x20000038
 80020e4:	200004f0 	.word	0x200004f0
 80020e8:	200004f8 	.word	0x200004f8
 80020ec:	0c1c0000 	.word	0x0c1c0000
 80020f0:	fffffe00 	.word	0xfffffe00
 80020f4:	20000500 	.word	0x20000500
 80020f8:	20000052 	.word	0x20000052
 80020fc:	20000056 	.word	0x20000056
 8002100:	2000005a 	.word	0x2000005a
 8002104:	20000048 	.word	0x20000048
 8002108:	24279000 	.word	0x24279000

0800210c <get_tx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_tx_timestamp_u64(void)
{
 800210c:	b5b0      	push	{r4, r5, r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int i;
    dwt_readtxtimestamp(ts_tab);
 800211e:	1d3b      	adds	r3, r7, #4
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe fd05 	bl	8000b30 <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--)
 8002126:	2304      	movs	r3, #4
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	e01d      	b.n	8002168 <get_tx_timestamp_u64+0x5c>
    {
        ts <<= 8;
 800212c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002130:	f04f 0200 	mov.w	r2, #0
 8002134:	f04f 0300 	mov.w	r3, #0
 8002138:	020b      	lsls	r3, r1, #8
 800213a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800213e:	0202      	lsls	r2, r0, #8
 8002140:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ts |= ts_tab[i];
 8002144:	1d3a      	adds	r2, r7, #4
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4413      	add	r3, r2
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	b2da      	uxtb	r2, r3
 800214e:	f04f 0300 	mov.w	r3, #0
 8002152:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002156:	ea40 0402 	orr.w	r4, r0, r2
 800215a:	ea41 0503 	orr.w	r5, r1, r3
 800215e:	e9c7 4504 	strd	r4, r5, [r7, #16]
    for (i = 4; i >= 0; i--)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	3b01      	subs	r3, #1
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2b00      	cmp	r3, #0
 800216c:	dade      	bge.n	800212c <get_tx_timestamp_u64+0x20>
    }
    return ts;
 800216e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bdb0      	pop	{r4, r5, r7, pc}

0800217c <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_rx_timestamp_u64(void)
{
 800217c:	b5b0      	push	{r4, r5, r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	f04f 0300 	mov.w	r3, #0
 800218a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int i;
    dwt_readrxtimestamp(ts_tab);
 800218e:	1d3b      	adds	r3, r7, #4
 8002190:	4618      	mov	r0, r3
 8002192:	f7fe fcdb 	bl	8000b4c <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
 8002196:	2304      	movs	r3, #4
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	e01d      	b.n	80021d8 <get_rx_timestamp_u64+0x5c>
    {
        ts <<= 8;
 800219c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	f04f 0300 	mov.w	r3, #0
 80021a8:	020b      	lsls	r3, r1, #8
 80021aa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80021ae:	0202      	lsls	r2, r0, #8
 80021b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ts |= ts_tab[i];
 80021b4:	1d3a      	adds	r2, r7, #4
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4413      	add	r3, r2
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	f04f 0300 	mov.w	r3, #0
 80021c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021c6:	ea40 0402 	orr.w	r4, r0, r2
 80021ca:	ea41 0503 	orr.w	r5, r1, r3
 80021ce:	e9c7 4504 	strd	r4, r5, [r7, #16]
    for (i = 4; i >= 0; i--)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	3b01      	subs	r3, #1
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	dade      	bge.n	800219c <get_rx_timestamp_u64+0x20>
    }
    return ts;
 80021de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bdb0      	pop	{r4, r5, r7, pc}

080021ec <final_msg_set_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
static void final_msg_set_ts(uint8 *ts_field, uint64 ts)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b087      	sub	sp, #28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	e9c7 2300 	strd	r2, r3, [r7]
    int i;
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	e013      	b.n	8002226 <final_msg_set_ts+0x3a>
    {
        ts_field[i] = (uint8) ts;
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	4413      	add	r3, r2
 8002204:	783a      	ldrb	r2, [r7, #0]
 8002206:	701a      	strb	r2, [r3, #0]
        ts >>= 8;
 8002208:	e9d7 0100 	ldrd	r0, r1, [r7]
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	f04f 0300 	mov.w	r3, #0
 8002214:	0a02      	lsrs	r2, r0, #8
 8002216:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800221a:	0a0b      	lsrs	r3, r1, #8
 800221c:	e9c7 2300 	strd	r2, r3, [r7]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	3301      	adds	r3, #1
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2b03      	cmp	r3, #3
 800222a:	dde8      	ble.n	80021fe <final_msg_set_ts+0x12>
    }
}
 800222c:	bf00      	nop
 800222e:	bf00      	nop
 8002230:	371c      	adds	r7, #28
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800223e:	f000 fa21 	bl	8002684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002242:	f000 f811 	bl	8002268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002246:	f7ff fcc5 	bl	8001bd4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800224a:	f000 f977 	bl	800253c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800224e:	f7ff fd4d 	bl	8001cec <MX_I2C1_Init>
  MX_SPI1_Init();
 8002252:	f000 f877 	bl	8002344 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  setup_DW1000RSTnIRQ(0);
 8002256:	2000      	movs	r0, #0
 8002258:	f7ff f962 	bl	8001520 <setup_DW1000RSTnIRQ>
  SSD1306_Init();
 800225c:	f7ff f9fc 	bl	8001658 <SSD1306_Init>
  dw_main();
 8002260:	f7ff fdba 	bl	8001dd8 <dw_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002264:	e7fe      	b.n	8002264 <main+0x2a>
	...

08002268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b094      	sub	sp, #80	; 0x50
 800226c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800226e:	f107 0320 	add.w	r3, r7, #32
 8002272:	2230      	movs	r2, #48	; 0x30
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f003 fa38 	bl	80056ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800227c:	f107 030c 	add.w	r3, r7, #12
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800228c:	2300      	movs	r3, #0
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	4b27      	ldr	r3, [pc, #156]	; (8002330 <SystemClock_Config+0xc8>)
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	4a26      	ldr	r2, [pc, #152]	; (8002330 <SystemClock_Config+0xc8>)
 8002296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229a:	6413      	str	r3, [r2, #64]	; 0x40
 800229c:	4b24      	ldr	r3, [pc, #144]	; (8002330 <SystemClock_Config+0xc8>)
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022a8:	2300      	movs	r3, #0
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	4b21      	ldr	r3, [pc, #132]	; (8002334 <SystemClock_Config+0xcc>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a20      	ldr	r2, [pc, #128]	; (8002334 <SystemClock_Config+0xcc>)
 80022b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <SystemClock_Config+0xcc>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022c0:	607b      	str	r3, [r7, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022c4:	2301      	movs	r3, #1
 80022c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022ce:	2302      	movs	r3, #2
 80022d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 80022d8:	230d      	movs	r3, #13
 80022da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80022dc:	2364      	movs	r3, #100	; 0x64
 80022de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022e0:	2302      	movs	r3, #2
 80022e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80022e4:	2304      	movs	r3, #4
 80022e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022e8:	f107 0320 	add.w	r3, r7, #32
 80022ec:	4618      	mov	r0, r3
 80022ee:	f001 fb7d 	bl	80039ec <HAL_RCC_OscConfig>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80022f8:	f000 f81e 	bl	8002338 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022fc:	230f      	movs	r3, #15
 80022fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002300:	2302      	movs	r3, #2
 8002302:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800230c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002312:	f107 030c 	add.w	r3, r7, #12
 8002316:	2103      	movs	r1, #3
 8002318:	4618      	mov	r0, r3
 800231a:	f001 fddf 	bl	8003edc <HAL_RCC_ClockConfig>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002324:	f000 f808 	bl	8002338 <Error_Handler>
  }
}
 8002328:	bf00      	nop
 800232a:	3750      	adds	r7, #80	; 0x50
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40023800 	.word	0x40023800
 8002334:	40007000 	.word	0x40007000

08002338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800233c:	b672      	cpsid	i
}
 800233e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002340:	e7fe      	b.n	8002340 <Error_Handler+0x8>
	...

08002344 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002348:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <MX_SPI1_Init+0x64>)
 800234a:	4a18      	ldr	r2, [pc, #96]	; (80023ac <MX_SPI1_Init+0x68>)
 800234c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800234e:	4b16      	ldr	r3, [pc, #88]	; (80023a8 <MX_SPI1_Init+0x64>)
 8002350:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002354:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002356:	4b14      	ldr	r3, [pc, #80]	; (80023a8 <MX_SPI1_Init+0x64>)
 8002358:	2200      	movs	r2, #0
 800235a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800235c:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <MX_SPI1_Init+0x64>)
 800235e:	2200      	movs	r2, #0
 8002360:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002362:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <MX_SPI1_Init+0x64>)
 8002364:	2200      	movs	r2, #0
 8002366:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002368:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <MX_SPI1_Init+0x64>)
 800236a:	2200      	movs	r2, #0
 800236c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800236e:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <MX_SPI1_Init+0x64>)
 8002370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002374:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002376:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <MX_SPI1_Init+0x64>)
 8002378:	2200      	movs	r2, #0
 800237a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800237c:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <MX_SPI1_Init+0x64>)
 800237e:	2200      	movs	r2, #0
 8002380:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002382:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <MX_SPI1_Init+0x64>)
 8002384:	2200      	movs	r2, #0
 8002386:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002388:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <MX_SPI1_Init+0x64>)
 800238a:	2200      	movs	r2, #0
 800238c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800238e:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <MX_SPI1_Init+0x64>)
 8002390:	220a      	movs	r2, #10
 8002392:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002394:	4804      	ldr	r0, [pc, #16]	; (80023a8 <MX_SPI1_Init+0x64>)
 8002396:	f001 ff71 	bl	800427c <HAL_SPI_Init>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80023a0:	f7ff ffca 	bl	8002338 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023a4:	bf00      	nop
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	2000055c 	.word	0x2000055c
 80023ac:	40013000 	.word	0x40013000

080023b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08a      	sub	sp, #40	; 0x28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b8:	f107 0314 	add.w	r3, r7, #20
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a19      	ldr	r2, [pc, #100]	; (8002434 <HAL_SPI_MspInit+0x84>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d12b      	bne.n	800242a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
 80023d6:	4b18      	ldr	r3, [pc, #96]	; (8002438 <HAL_SPI_MspInit+0x88>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	4a17      	ldr	r2, [pc, #92]	; (8002438 <HAL_SPI_MspInit+0x88>)
 80023dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023e0:	6453      	str	r3, [r2, #68]	; 0x44
 80023e2:	4b15      	ldr	r3, [pc, #84]	; (8002438 <HAL_SPI_MspInit+0x88>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	4b11      	ldr	r3, [pc, #68]	; (8002438 <HAL_SPI_MspInit+0x88>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	4a10      	ldr	r2, [pc, #64]	; (8002438 <HAL_SPI_MspInit+0x88>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	6313      	str	r3, [r2, #48]	; 0x30
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <HAL_SPI_MspInit+0x88>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800240a:	23e0      	movs	r3, #224	; 0xe0
 800240c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240e:	2302      	movs	r3, #2
 8002410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002416:	2303      	movs	r3, #3
 8002418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800241a:	2305      	movs	r3, #5
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241e:	f107 0314 	add.w	r3, r7, #20
 8002422:	4619      	mov	r1, r3
 8002424:	4805      	ldr	r0, [pc, #20]	; (800243c <HAL_SPI_MspInit+0x8c>)
 8002426:	f000 fb99 	bl	8002b5c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800242a:	bf00      	nop
 800242c:	3728      	adds	r7, #40	; 0x28
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40013000 	.word	0x40013000
 8002438:	40023800 	.word	0x40023800
 800243c:	40020000 	.word	0x40020000

08002440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	607b      	str	r3, [r7, #4]
 800244a:	4b10      	ldr	r3, [pc, #64]	; (800248c <HAL_MspInit+0x4c>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	4a0f      	ldr	r2, [pc, #60]	; (800248c <HAL_MspInit+0x4c>)
 8002450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002454:	6453      	str	r3, [r2, #68]	; 0x44
 8002456:	4b0d      	ldr	r3, [pc, #52]	; (800248c <HAL_MspInit+0x4c>)
 8002458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800245e:	607b      	str	r3, [r7, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	603b      	str	r3, [r7, #0]
 8002466:	4b09      	ldr	r3, [pc, #36]	; (800248c <HAL_MspInit+0x4c>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	4a08      	ldr	r2, [pc, #32]	; (800248c <HAL_MspInit+0x4c>)
 800246c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002470:	6413      	str	r3, [r2, #64]	; 0x40
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_MspInit+0x4c>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247a:	603b      	str	r3, [r7, #0]
 800247c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40023800 	.word	0x40023800

08002490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002494:	e7fe      	b.n	8002494 <NMI_Handler+0x4>

08002496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800249a:	e7fe      	b.n	800249a <HardFault_Handler+0x4>

0800249c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024a0:	e7fe      	b.n	80024a0 <MemManage_Handler+0x4>

080024a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024a6:	e7fe      	b.n	80024a6 <BusFault_Handler+0x4>

080024a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024ac:	e7fe      	b.n	80024ac <UsageFault_Handler+0x4>

080024ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024dc:	f000 f924 	bl	8002728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024e0:	bf00      	nop
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_RST_Pin);
 80024e8:	2001      	movs	r0, #1
 80024ea:	f000 fced 	bl	8002ec8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024f8:	4802      	ldr	r0, [pc, #8]	; (8002504 <USART2_IRQHandler+0x10>)
 80024fa:	f002 fa3d 	bl	8004978 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	200005b4 	.word	0x200005b4

08002508 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_IRQ_Pin);
 800250c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002510:	f000 fcda 	bl	8002ec8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}

08002518 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800251c:	4b06      	ldr	r3, [pc, #24]	; (8002538 <SystemInit+0x20>)
 800251e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002522:	4a05      	ldr	r2, [pc, #20]	; (8002538 <SystemInit+0x20>)
 8002524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	e000ed00 	.word	0xe000ed00

0800253c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002540:	4b11      	ldr	r3, [pc, #68]	; (8002588 <MX_USART2_UART_Init+0x4c>)
 8002542:	4a12      	ldr	r2, [pc, #72]	; (800258c <MX_USART2_UART_Init+0x50>)
 8002544:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002546:	4b10      	ldr	r3, [pc, #64]	; (8002588 <MX_USART2_UART_Init+0x4c>)
 8002548:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800254c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800254e:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <MX_USART2_UART_Init+0x4c>)
 8002550:	2200      	movs	r2, #0
 8002552:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002554:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <MX_USART2_UART_Init+0x4c>)
 8002556:	2200      	movs	r2, #0
 8002558:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800255a:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <MX_USART2_UART_Init+0x4c>)
 800255c:	2200      	movs	r2, #0
 800255e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002560:	4b09      	ldr	r3, [pc, #36]	; (8002588 <MX_USART2_UART_Init+0x4c>)
 8002562:	220c      	movs	r2, #12
 8002564:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002566:	4b08      	ldr	r3, [pc, #32]	; (8002588 <MX_USART2_UART_Init+0x4c>)
 8002568:	2200      	movs	r2, #0
 800256a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <MX_USART2_UART_Init+0x4c>)
 800256e:	2200      	movs	r2, #0
 8002570:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002572:	4805      	ldr	r0, [pc, #20]	; (8002588 <MX_USART2_UART_Init+0x4c>)
 8002574:	f002 f920 	bl	80047b8 <HAL_UART_Init>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800257e:	f7ff fedb 	bl	8002338 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	200005b4 	.word	0x200005b4
 800258c:	40004400 	.word	0x40004400

08002590 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08a      	sub	sp, #40	; 0x28
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002598:	f107 0314 	add.w	r3, r7, #20
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	605a      	str	r2, [r3, #4]
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	60da      	str	r2, [r3, #12]
 80025a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a1d      	ldr	r2, [pc, #116]	; (8002624 <HAL_UART_MspInit+0x94>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d133      	bne.n	800261a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	4b1c      	ldr	r3, [pc, #112]	; (8002628 <HAL_UART_MspInit+0x98>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	4a1b      	ldr	r2, [pc, #108]	; (8002628 <HAL_UART_MspInit+0x98>)
 80025bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c0:	6413      	str	r3, [r2, #64]	; 0x40
 80025c2:	4b19      	ldr	r3, [pc, #100]	; (8002628 <HAL_UART_MspInit+0x98>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	613b      	str	r3, [r7, #16]
 80025cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	4b15      	ldr	r3, [pc, #84]	; (8002628 <HAL_UART_MspInit+0x98>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	4a14      	ldr	r2, [pc, #80]	; (8002628 <HAL_UART_MspInit+0x98>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	6313      	str	r3, [r2, #48]	; 0x30
 80025de:	4b12      	ldr	r3, [pc, #72]	; (8002628 <HAL_UART_MspInit+0x98>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025ea:	230c      	movs	r3, #12
 80025ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ee:	2302      	movs	r3, #2
 80025f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f6:	2303      	movs	r3, #3
 80025f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025fa:	2307      	movs	r3, #7
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fe:	f107 0314 	add.w	r3, r7, #20
 8002602:	4619      	mov	r1, r3
 8002604:	4809      	ldr	r0, [pc, #36]	; (800262c <HAL_UART_MspInit+0x9c>)
 8002606:	f000 faa9 	bl	8002b5c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800260a:	2200      	movs	r2, #0
 800260c:	2100      	movs	r1, #0
 800260e:	2026      	movs	r0, #38	; 0x26
 8002610:	f000 f9cd 	bl	80029ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002614:	2026      	movs	r0, #38	; 0x26
 8002616:	f000 f9e6 	bl	80029e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800261a:	bf00      	nop
 800261c:	3728      	adds	r7, #40	; 0x28
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40004400 	.word	0x40004400
 8002628:	40023800 	.word	0x40023800
 800262c:	40020000 	.word	0x40020000

08002630 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002630:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002668 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002634:	480d      	ldr	r0, [pc, #52]	; (800266c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002636:	490e      	ldr	r1, [pc, #56]	; (8002670 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002638:	4a0e      	ldr	r2, [pc, #56]	; (8002674 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800263a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800263c:	e002      	b.n	8002644 <LoopCopyDataInit>

0800263e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800263e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002642:	3304      	adds	r3, #4

08002644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002648:	d3f9      	bcc.n	800263e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800264a:	4a0b      	ldr	r2, [pc, #44]	; (8002678 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800264c:	4c0b      	ldr	r4, [pc, #44]	; (800267c <LoopFillZerobss+0x26>)
  movs r3, #0
 800264e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002650:	e001      	b.n	8002656 <LoopFillZerobss>

08002652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002654:	3204      	adds	r2, #4

08002656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002658:	d3fb      	bcc.n	8002652 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800265a:	f7ff ff5d 	bl	8002518 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800265e:	f003 f813 	bl	8005688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002662:	f7ff fdea 	bl	800223a <main>
  bx  lr    
 8002666:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002668:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800266c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002670:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002674:	08005f98 	.word	0x08005f98
  ldr r2, =_sbss
 8002678:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800267c:	200005fc 	.word	0x200005fc

08002680 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002680:	e7fe      	b.n	8002680 <ADC_IRQHandler>
	...

08002684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002688:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <HAL_Init+0x40>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a0d      	ldr	r2, [pc, #52]	; (80026c4 <HAL_Init+0x40>)
 800268e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002692:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_Init+0x40>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <HAL_Init+0x40>)
 800269a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800269e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026a0:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <HAL_Init+0x40>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a07      	ldr	r2, [pc, #28]	; (80026c4 <HAL_Init+0x40>)
 80026a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026ac:	2003      	movs	r0, #3
 80026ae:	f000 f973 	bl	8002998 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026b2:	2000      	movs	r0, #0
 80026b4:	f000 f808 	bl	80026c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026b8:	f7ff fec2 	bl	8002440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40023c00 	.word	0x40023c00

080026c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026d0:	4b12      	ldr	r3, [pc, #72]	; (800271c <HAL_InitTick+0x54>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b12      	ldr	r3, [pc, #72]	; (8002720 <HAL_InitTick+0x58>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	4619      	mov	r1, r3
 80026da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026de:	fbb3 f3f1 	udiv	r3, r3, r1
 80026e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 f999 	bl	8002a1e <HAL_SYSTICK_Config>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e00e      	b.n	8002714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b0f      	cmp	r3, #15
 80026fa:	d80a      	bhi.n	8002712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026fc:	2200      	movs	r2, #0
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	f04f 30ff 	mov.w	r0, #4294967295
 8002704:	f000 f953 	bl	80029ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002708:	4a06      	ldr	r2, [pc, #24]	; (8002724 <HAL_InitTick+0x5c>)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	e000      	b.n	8002714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
}
 8002714:	4618      	mov	r0, r3
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20000060 	.word	0x20000060
 8002720:	20000068 	.word	0x20000068
 8002724:	20000064 	.word	0x20000064

08002728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800272c:	4b06      	ldr	r3, [pc, #24]	; (8002748 <HAL_IncTick+0x20>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_IncTick+0x24>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4413      	add	r3, r2
 8002738:	4a04      	ldr	r2, [pc, #16]	; (800274c <HAL_IncTick+0x24>)
 800273a:	6013      	str	r3, [r2, #0]
}
 800273c:	bf00      	nop
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	20000068 	.word	0x20000068
 800274c:	200005f8 	.word	0x200005f8

08002750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return uwTick;
 8002754:	4b03      	ldr	r3, [pc, #12]	; (8002764 <HAL_GetTick+0x14>)
 8002756:	681b      	ldr	r3, [r3, #0]
}
 8002758:	4618      	mov	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	200005f8 	.word	0x200005f8

08002768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002770:	f7ff ffee 	bl	8002750 <HAL_GetTick>
 8002774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002780:	d005      	beq.n	800278e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002782:	4b0a      	ldr	r3, [pc, #40]	; (80027ac <HAL_Delay+0x44>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4413      	add	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800278e:	bf00      	nop
 8002790:	f7ff ffde 	bl	8002750 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	429a      	cmp	r2, r3
 800279e:	d8f7      	bhi.n	8002790 <HAL_Delay+0x28>
  {
  }
}
 80027a0:	bf00      	nop
 80027a2:	bf00      	nop
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000068 	.word	0x20000068

080027b0 <__NVIC_SetPriorityGrouping>:
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027c0:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <__NVIC_SetPriorityGrouping+0x44>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027cc:	4013      	ands	r3, r2
 80027ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027e2:	4a04      	ldr	r2, [pc, #16]	; (80027f4 <__NVIC_SetPriorityGrouping+0x44>)
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	60d3      	str	r3, [r2, #12]
}
 80027e8:	bf00      	nop
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	e000ed00 	.word	0xe000ed00

080027f8 <__NVIC_GetPriorityGrouping>:
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027fc:	4b04      	ldr	r3, [pc, #16]	; (8002810 <__NVIC_GetPriorityGrouping+0x18>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	0a1b      	lsrs	r3, r3, #8
 8002802:	f003 0307 	and.w	r3, r3, #7
}
 8002806:	4618      	mov	r0, r3
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <__NVIC_EnableIRQ>:
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800281e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002822:	2b00      	cmp	r3, #0
 8002824:	db0b      	blt.n	800283e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	f003 021f 	and.w	r2, r3, #31
 800282c:	4907      	ldr	r1, [pc, #28]	; (800284c <__NVIC_EnableIRQ+0x38>)
 800282e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002832:	095b      	lsrs	r3, r3, #5
 8002834:	2001      	movs	r0, #1
 8002836:	fa00 f202 	lsl.w	r2, r0, r2
 800283a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	e000e100 	.word	0xe000e100

08002850 <__NVIC_DisableIRQ>:
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	2b00      	cmp	r3, #0
 8002860:	db12      	blt.n	8002888 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	f003 021f 	and.w	r2, r3, #31
 8002868:	490a      	ldr	r1, [pc, #40]	; (8002894 <__NVIC_DisableIRQ+0x44>)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	095b      	lsrs	r3, r3, #5
 8002870:	2001      	movs	r0, #1
 8002872:	fa00 f202 	lsl.w	r2, r0, r2
 8002876:	3320      	adds	r3, #32
 8002878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800287c:	f3bf 8f4f 	dsb	sy
}
 8002880:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002882:	f3bf 8f6f 	isb	sy
}
 8002886:	bf00      	nop
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000e100 	.word	0xe000e100

08002898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	6039      	str	r1, [r7, #0]
 80028a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	db0a      	blt.n	80028c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	490c      	ldr	r1, [pc, #48]	; (80028e4 <__NVIC_SetPriority+0x4c>)
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	0112      	lsls	r2, r2, #4
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	440b      	add	r3, r1
 80028bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028c0:	e00a      	b.n	80028d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	4908      	ldr	r1, [pc, #32]	; (80028e8 <__NVIC_SetPriority+0x50>)
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	3b04      	subs	r3, #4
 80028d0:	0112      	lsls	r2, r2, #4
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	440b      	add	r3, r1
 80028d6:	761a      	strb	r2, [r3, #24]
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	e000e100 	.word	0xe000e100
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b089      	sub	sp, #36	; 0x24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f1c3 0307 	rsb	r3, r3, #7
 8002906:	2b04      	cmp	r3, #4
 8002908:	bf28      	it	cs
 800290a:	2304      	movcs	r3, #4
 800290c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3304      	adds	r3, #4
 8002912:	2b06      	cmp	r3, #6
 8002914:	d902      	bls.n	800291c <NVIC_EncodePriority+0x30>
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3b03      	subs	r3, #3
 800291a:	e000      	b.n	800291e <NVIC_EncodePriority+0x32>
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002920:	f04f 32ff 	mov.w	r2, #4294967295
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43da      	mvns	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	401a      	ands	r2, r3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002934:	f04f 31ff 	mov.w	r1, #4294967295
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	fa01 f303 	lsl.w	r3, r1, r3
 800293e:	43d9      	mvns	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002944:	4313      	orrs	r3, r2
         );
}
 8002946:	4618      	mov	r0, r3
 8002948:	3724      	adds	r7, #36	; 0x24
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3b01      	subs	r3, #1
 8002960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002964:	d301      	bcc.n	800296a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002966:	2301      	movs	r3, #1
 8002968:	e00f      	b.n	800298a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800296a:	4a0a      	ldr	r2, [pc, #40]	; (8002994 <SysTick_Config+0x40>)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3b01      	subs	r3, #1
 8002970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002972:	210f      	movs	r1, #15
 8002974:	f04f 30ff 	mov.w	r0, #4294967295
 8002978:	f7ff ff8e 	bl	8002898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800297c:	4b05      	ldr	r3, [pc, #20]	; (8002994 <SysTick_Config+0x40>)
 800297e:	2200      	movs	r2, #0
 8002980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002982:	4b04      	ldr	r3, [pc, #16]	; (8002994 <SysTick_Config+0x40>)
 8002984:	2207      	movs	r2, #7
 8002986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	e000e010 	.word	0xe000e010

08002998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff ff05 	bl	80027b0 <__NVIC_SetPriorityGrouping>
}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b086      	sub	sp, #24
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	4603      	mov	r3, r0
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	607a      	str	r2, [r7, #4]
 80029ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029c0:	f7ff ff1a 	bl	80027f8 <__NVIC_GetPriorityGrouping>
 80029c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	68b9      	ldr	r1, [r7, #8]
 80029ca:	6978      	ldr	r0, [r7, #20]
 80029cc:	f7ff ff8e 	bl	80028ec <NVIC_EncodePriority>
 80029d0:	4602      	mov	r2, r0
 80029d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff ff5d 	bl	8002898 <__NVIC_SetPriority>
}
 80029de:	bf00      	nop
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	4603      	mov	r3, r0
 80029ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff0d 	bl	8002814 <__NVIC_EnableIRQ>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff ff1d 	bl	8002850 <__NVIC_DisableIRQ>
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff ff94 	bl	8002954 <SysTick_Config>
 8002a2c:	4603      	mov	r3, r0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b084      	sub	sp, #16
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a42:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a44:	f7ff fe84 	bl	8002750 <HAL_GetTick>
 8002a48:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d008      	beq.n	8002a68 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2280      	movs	r2, #128	; 0x80
 8002a5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e052      	b.n	8002b0e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0216 	bic.w	r2, r2, #22
 8002a76:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695a      	ldr	r2, [r3, #20]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a86:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d103      	bne.n	8002a98 <HAL_DMA_Abort+0x62>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d007      	beq.n	8002aa8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0208 	bic.w	r2, r2, #8
 8002aa6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0201 	bic.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ab8:	e013      	b.n	8002ae2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aba:	f7ff fe49 	bl	8002750 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b05      	cmp	r3, #5
 8002ac6:	d90c      	bls.n	8002ae2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2220      	movs	r2, #32
 8002acc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e015      	b.n	8002b0e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1e4      	bne.n	8002aba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af4:	223f      	movs	r2, #63	; 0x3f
 8002af6:	409a      	lsls	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d004      	beq.n	8002b34 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2280      	movs	r2, #128	; 0x80
 8002b2e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e00c      	b.n	8002b4e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2205      	movs	r2, #5
 8002b38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0201 	bic.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b089      	sub	sp, #36	; 0x24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
 8002b76:	e159      	b.n	8002e2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b78:	2201      	movs	r2, #1
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	f040 8148 	bne.w	8002e26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d005      	beq.n	8002bae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d130      	bne.n	8002c10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	2203      	movs	r2, #3
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002be4:	2201      	movs	r2, #1
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	43db      	mvns	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	091b      	lsrs	r3, r3, #4
 8002bfa:	f003 0201 	and.w	r2, r3, #1
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d017      	beq.n	8002c4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	2203      	movs	r2, #3
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d123      	bne.n	8002ca0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	08da      	lsrs	r2, r3, #3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3208      	adds	r2, #8
 8002c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	220f      	movs	r2, #15
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	08da      	lsrs	r2, r3, #3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3208      	adds	r2, #8
 8002c9a:	69b9      	ldr	r1, [r7, #24]
 8002c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	2203      	movs	r2, #3
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 0203 	and.w	r2, r3, #3
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80a2 	beq.w	8002e26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	4b57      	ldr	r3, [pc, #348]	; (8002e44 <HAL_GPIO_Init+0x2e8>)
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	4a56      	ldr	r2, [pc, #344]	; (8002e44 <HAL_GPIO_Init+0x2e8>)
 8002cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf2:	4b54      	ldr	r3, [pc, #336]	; (8002e44 <HAL_GPIO_Init+0x2e8>)
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cfe:	4a52      	ldr	r2, [pc, #328]	; (8002e48 <HAL_GPIO_Init+0x2ec>)
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	089b      	lsrs	r3, r3, #2
 8002d04:	3302      	adds	r3, #2
 8002d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	220f      	movs	r2, #15
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a49      	ldr	r2, [pc, #292]	; (8002e4c <HAL_GPIO_Init+0x2f0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d019      	beq.n	8002d5e <HAL_GPIO_Init+0x202>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a48      	ldr	r2, [pc, #288]	; (8002e50 <HAL_GPIO_Init+0x2f4>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d013      	beq.n	8002d5a <HAL_GPIO_Init+0x1fe>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a47      	ldr	r2, [pc, #284]	; (8002e54 <HAL_GPIO_Init+0x2f8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d00d      	beq.n	8002d56 <HAL_GPIO_Init+0x1fa>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a46      	ldr	r2, [pc, #280]	; (8002e58 <HAL_GPIO_Init+0x2fc>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d007      	beq.n	8002d52 <HAL_GPIO_Init+0x1f6>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a45      	ldr	r2, [pc, #276]	; (8002e5c <HAL_GPIO_Init+0x300>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d101      	bne.n	8002d4e <HAL_GPIO_Init+0x1f2>
 8002d4a:	2304      	movs	r3, #4
 8002d4c:	e008      	b.n	8002d60 <HAL_GPIO_Init+0x204>
 8002d4e:	2307      	movs	r3, #7
 8002d50:	e006      	b.n	8002d60 <HAL_GPIO_Init+0x204>
 8002d52:	2303      	movs	r3, #3
 8002d54:	e004      	b.n	8002d60 <HAL_GPIO_Init+0x204>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e002      	b.n	8002d60 <HAL_GPIO_Init+0x204>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <HAL_GPIO_Init+0x204>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	69fa      	ldr	r2, [r7, #28]
 8002d62:	f002 0203 	and.w	r2, r2, #3
 8002d66:	0092      	lsls	r2, r2, #2
 8002d68:	4093      	lsls	r3, r2
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d70:	4935      	ldr	r1, [pc, #212]	; (8002e48 <HAL_GPIO_Init+0x2ec>)
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	089b      	lsrs	r3, r3, #2
 8002d76:	3302      	adds	r3, #2
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d7e:	4b38      	ldr	r3, [pc, #224]	; (8002e60 <HAL_GPIO_Init+0x304>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002da2:	4a2f      	ldr	r2, [pc, #188]	; (8002e60 <HAL_GPIO_Init+0x304>)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002da8:	4b2d      	ldr	r3, [pc, #180]	; (8002e60 <HAL_GPIO_Init+0x304>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	43db      	mvns	r3, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4013      	ands	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dcc:	4a24      	ldr	r2, [pc, #144]	; (8002e60 <HAL_GPIO_Init+0x304>)
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dd2:	4b23      	ldr	r3, [pc, #140]	; (8002e60 <HAL_GPIO_Init+0x304>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4013      	ands	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002df6:	4a1a      	ldr	r2, [pc, #104]	; (8002e60 <HAL_GPIO_Init+0x304>)
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dfc:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <HAL_GPIO_Init+0x304>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e20:	4a0f      	ldr	r2, [pc, #60]	; (8002e60 <HAL_GPIO_Init+0x304>)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	61fb      	str	r3, [r7, #28]
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	2b0f      	cmp	r3, #15
 8002e30:	f67f aea2 	bls.w	8002b78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e34:	bf00      	nop
 8002e36:	bf00      	nop
 8002e38:	3724      	adds	r7, #36	; 0x24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	40023800 	.word	0x40023800
 8002e48:	40013800 	.word	0x40013800
 8002e4c:	40020000 	.word	0x40020000
 8002e50:	40020400 	.word	0x40020400
 8002e54:	40020800 	.word	0x40020800
 8002e58:	40020c00 	.word	0x40020c00
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40013c00 	.word	0x40013c00

08002e64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	887b      	ldrh	r3, [r7, #2]
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d002      	beq.n	8002e82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	73fb      	strb	r3, [r7, #15]
 8002e80:	e001      	b.n	8002e86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e82:	2300      	movs	r3, #0
 8002e84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	807b      	strh	r3, [r7, #2]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ea4:	787b      	ldrb	r3, [r7, #1]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eaa:	887a      	ldrh	r2, [r7, #2]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002eb0:	e003      	b.n	8002eba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eb2:	887b      	ldrh	r3, [r7, #2]
 8002eb4:	041a      	lsls	r2, r3, #16
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	619a      	str	r2, [r3, #24]
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
	...

08002ec8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ed2:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ed4:	695a      	ldr	r2, [r3, #20]
 8002ed6:	88fb      	ldrh	r3, [r7, #6]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d006      	beq.n	8002eec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ede:	4a05      	ldr	r2, [pc, #20]	; (8002ef4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ee4:	88fb      	ldrh	r3, [r7, #6]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fe fb6c 	bl	80015c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002eec:	bf00      	nop
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40013c00 	.word	0x40013c00

08002ef8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e12b      	b.n	8003162 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d106      	bne.n	8002f24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7fe ff12 	bl	8001d48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2224      	movs	r2, #36	; 0x24
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0201 	bic.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f5c:	f001 f966 	bl	800422c <HAL_RCC_GetPCLK1Freq>
 8002f60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	4a81      	ldr	r2, [pc, #516]	; (800316c <HAL_I2C_Init+0x274>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d807      	bhi.n	8002f7c <HAL_I2C_Init+0x84>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4a80      	ldr	r2, [pc, #512]	; (8003170 <HAL_I2C_Init+0x278>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	bf94      	ite	ls
 8002f74:	2301      	movls	r3, #1
 8002f76:	2300      	movhi	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	e006      	b.n	8002f8a <HAL_I2C_Init+0x92>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4a7d      	ldr	r2, [pc, #500]	; (8003174 <HAL_I2C_Init+0x27c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	bf94      	ite	ls
 8002f84:	2301      	movls	r3, #1
 8002f86:	2300      	movhi	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e0e7      	b.n	8003162 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	4a78      	ldr	r2, [pc, #480]	; (8003178 <HAL_I2C_Init+0x280>)
 8002f96:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9a:	0c9b      	lsrs	r3, r3, #18
 8002f9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	4a6a      	ldr	r2, [pc, #424]	; (800316c <HAL_I2C_Init+0x274>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d802      	bhi.n	8002fcc <HAL_I2C_Init+0xd4>
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	e009      	b.n	8002fe0 <HAL_I2C_Init+0xe8>
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fd2:	fb02 f303 	mul.w	r3, r2, r3
 8002fd6:	4a69      	ldr	r2, [pc, #420]	; (800317c <HAL_I2C_Init+0x284>)
 8002fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fdc:	099b      	lsrs	r3, r3, #6
 8002fde:	3301      	adds	r3, #1
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	430b      	orrs	r3, r1
 8002fe6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ff2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	495c      	ldr	r1, [pc, #368]	; (800316c <HAL_I2C_Init+0x274>)
 8002ffc:	428b      	cmp	r3, r1
 8002ffe:	d819      	bhi.n	8003034 <HAL_I2C_Init+0x13c>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1e59      	subs	r1, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	fbb1 f3f3 	udiv	r3, r1, r3
 800300e:	1c59      	adds	r1, r3, #1
 8003010:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003014:	400b      	ands	r3, r1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <HAL_I2C_Init+0x138>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1e59      	subs	r1, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	fbb1 f3f3 	udiv	r3, r1, r3
 8003028:	3301      	adds	r3, #1
 800302a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800302e:	e051      	b.n	80030d4 <HAL_I2C_Init+0x1dc>
 8003030:	2304      	movs	r3, #4
 8003032:	e04f      	b.n	80030d4 <HAL_I2C_Init+0x1dc>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d111      	bne.n	8003060 <HAL_I2C_Init+0x168>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	1e58      	subs	r0, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6859      	ldr	r1, [r3, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	440b      	add	r3, r1
 800304a:	fbb0 f3f3 	udiv	r3, r0, r3
 800304e:	3301      	adds	r3, #1
 8003050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003054:	2b00      	cmp	r3, #0
 8003056:	bf0c      	ite	eq
 8003058:	2301      	moveq	r3, #1
 800305a:	2300      	movne	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	e012      	b.n	8003086 <HAL_I2C_Init+0x18e>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	1e58      	subs	r0, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6859      	ldr	r1, [r3, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	0099      	lsls	r1, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	fbb0 f3f3 	udiv	r3, r0, r3
 8003076:	3301      	adds	r3, #1
 8003078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800307c:	2b00      	cmp	r3, #0
 800307e:	bf0c      	ite	eq
 8003080:	2301      	moveq	r3, #1
 8003082:	2300      	movne	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_I2C_Init+0x196>
 800308a:	2301      	movs	r3, #1
 800308c:	e022      	b.n	80030d4 <HAL_I2C_Init+0x1dc>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10e      	bne.n	80030b4 <HAL_I2C_Init+0x1bc>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	1e58      	subs	r0, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6859      	ldr	r1, [r3, #4]
 800309e:	460b      	mov	r3, r1
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	440b      	add	r3, r1
 80030a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80030a8:	3301      	adds	r3, #1
 80030aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030b2:	e00f      	b.n	80030d4 <HAL_I2C_Init+0x1dc>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	1e58      	subs	r0, r3, #1
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6859      	ldr	r1, [r3, #4]
 80030bc:	460b      	mov	r3, r1
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	0099      	lsls	r1, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ca:	3301      	adds	r3, #1
 80030cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	6809      	ldr	r1, [r1, #0]
 80030d8:	4313      	orrs	r3, r2
 80030da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69da      	ldr	r2, [r3, #28]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003102:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6911      	ldr	r1, [r2, #16]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	68d2      	ldr	r2, [r2, #12]
 800310e:	4311      	orrs	r1, r2
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	430b      	orrs	r3, r1
 8003116:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	000186a0 	.word	0x000186a0
 8003170:	001e847f 	.word	0x001e847f
 8003174:	003d08ff 	.word	0x003d08ff
 8003178:	431bde83 	.word	0x431bde83
 800317c:	10624dd3 	.word	0x10624dd3

08003180 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af02      	add	r7, sp, #8
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	607a      	str	r2, [r7, #4]
 800318a:	461a      	mov	r2, r3
 800318c:	460b      	mov	r3, r1
 800318e:	817b      	strh	r3, [r7, #10]
 8003190:	4613      	mov	r3, r2
 8003192:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003194:	f7ff fadc 	bl	8002750 <HAL_GetTick>
 8003198:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b20      	cmp	r3, #32
 80031a4:	f040 80e0 	bne.w	8003368 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	2319      	movs	r3, #25
 80031ae:	2201      	movs	r2, #1
 80031b0:	4970      	ldr	r1, [pc, #448]	; (8003374 <HAL_I2C_Master_Transmit+0x1f4>)
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 fa92 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80031be:	2302      	movs	r3, #2
 80031c0:	e0d3      	b.n	800336a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d101      	bne.n	80031d0 <HAL_I2C_Master_Transmit+0x50>
 80031cc:	2302      	movs	r3, #2
 80031ce:	e0cc      	b.n	800336a <HAL_I2C_Master_Transmit+0x1ea>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d007      	beq.n	80031f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 0201 	orr.w	r2, r2, #1
 80031f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003204:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2221      	movs	r2, #33	; 0x21
 800320a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2210      	movs	r2, #16
 8003212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	893a      	ldrh	r2, [r7, #8]
 8003226:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4a50      	ldr	r2, [pc, #320]	; (8003378 <HAL_I2C_Master_Transmit+0x1f8>)
 8003236:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003238:	8979      	ldrh	r1, [r7, #10]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	6a3a      	ldr	r2, [r7, #32]
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 f9ca 	bl	80035d8 <I2C_MasterRequestWrite>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e08d      	b.n	800336a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800324e:	2300      	movs	r3, #0
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	613b      	str	r3, [r7, #16]
 8003262:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003264:	e066      	b.n	8003334 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	6a39      	ldr	r1, [r7, #32]
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 fb0c 	bl	8003888 <I2C_WaitOnTXEFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00d      	beq.n	8003292 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	2b04      	cmp	r3, #4
 800327c:	d107      	bne.n	800328e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800328c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e06b      	b.n	800336a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	781a      	ldrb	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d11b      	bne.n	8003308 <HAL_I2C_Master_Transmit+0x188>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d017      	beq.n	8003308 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	781a      	ldrb	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	6a39      	ldr	r1, [r7, #32]
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 fafc 	bl	800390a <I2C_WaitOnBTFFlagUntilTimeout>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00d      	beq.n	8003334 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	2b04      	cmp	r3, #4
 800331e:	d107      	bne.n	8003330 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800332e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e01a      	b.n	800336a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003338:	2b00      	cmp	r3, #0
 800333a:	d194      	bne.n	8003266 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800334a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	e000      	b.n	800336a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003368:	2302      	movs	r3, #2
  }
}
 800336a:	4618      	mov	r0, r3
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	00100002 	.word	0x00100002
 8003378:	ffff0000 	.word	0xffff0000

0800337c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b08a      	sub	sp, #40	; 0x28
 8003380:	af02      	add	r7, sp, #8
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	607a      	str	r2, [r7, #4]
 8003386:	603b      	str	r3, [r7, #0]
 8003388:	460b      	mov	r3, r1
 800338a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800338c:	f7ff f9e0 	bl	8002750 <HAL_GetTick>
 8003390:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003392:	2300      	movs	r3, #0
 8003394:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b20      	cmp	r3, #32
 80033a0:	f040 8111 	bne.w	80035c6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	2319      	movs	r3, #25
 80033aa:	2201      	movs	r2, #1
 80033ac:	4988      	ldr	r1, [pc, #544]	; (80035d0 <HAL_I2C_IsDeviceReady+0x254>)
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 f994 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80033ba:	2302      	movs	r3, #2
 80033bc:	e104      	b.n	80035c8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d101      	bne.n	80033cc <HAL_I2C_IsDeviceReady+0x50>
 80033c8:	2302      	movs	r3, #2
 80033ca:	e0fd      	b.n	80035c8 <HAL_I2C_IsDeviceReady+0x24c>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d007      	beq.n	80033f2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f042 0201 	orr.w	r2, r2, #1
 80033f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003400:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2224      	movs	r2, #36	; 0x24
 8003406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4a70      	ldr	r2, [pc, #448]	; (80035d4 <HAL_I2C_IsDeviceReady+0x258>)
 8003414:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003424:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2200      	movs	r2, #0
 800342e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 f952 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00d      	beq.n	800345a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800344c:	d103      	bne.n	8003456 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003454:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e0b6      	b.n	80035c8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800345a:	897b      	ldrh	r3, [r7, #10]
 800345c:	b2db      	uxtb	r3, r3
 800345e:	461a      	mov	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003468:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800346a:	f7ff f971 	bl	8002750 <HAL_GetTick>
 800346e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b02      	cmp	r3, #2
 800347c:	bf0c      	ite	eq
 800347e:	2301      	moveq	r3, #1
 8003480:	2300      	movne	r3, #0
 8003482:	b2db      	uxtb	r3, r3
 8003484:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003494:	bf0c      	ite	eq
 8003496:	2301      	moveq	r3, #1
 8003498:	2300      	movne	r3, #0
 800349a:	b2db      	uxtb	r3, r3
 800349c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800349e:	e025      	b.n	80034ec <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034a0:	f7ff f956 	bl	8002750 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d302      	bcc.n	80034b6 <HAL_I2C_IsDeviceReady+0x13a>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d103      	bne.n	80034be <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	22a0      	movs	r2, #160	; 0xa0
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	bf0c      	ite	eq
 80034cc:	2301      	moveq	r3, #1
 80034ce:	2300      	movne	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e2:	bf0c      	ite	eq
 80034e4:	2301      	moveq	r3, #1
 80034e6:	2300      	movne	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2ba0      	cmp	r3, #160	; 0xa0
 80034f6:	d005      	beq.n	8003504 <HAL_I2C_IsDeviceReady+0x188>
 80034f8:	7dfb      	ldrb	r3, [r7, #23]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d102      	bne.n	8003504 <HAL_I2C_IsDeviceReady+0x188>
 80034fe:	7dbb      	ldrb	r3, [r7, #22]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0cd      	beq.n	80034a0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b02      	cmp	r3, #2
 8003518:	d129      	bne.n	800356e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003528:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800352a:	2300      	movs	r3, #0
 800352c:	613b      	str	r3, [r7, #16]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	613b      	str	r3, [r7, #16]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	613b      	str	r3, [r7, #16]
 800353e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	2319      	movs	r3, #25
 8003546:	2201      	movs	r2, #1
 8003548:	4921      	ldr	r1, [pc, #132]	; (80035d0 <HAL_I2C_IsDeviceReady+0x254>)
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 f8c6 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e036      	b.n	80035c8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800356a:	2300      	movs	r3, #0
 800356c:	e02c      	b.n	80035c8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800357c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003586:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	2319      	movs	r3, #25
 800358e:	2201      	movs	r2, #1
 8003590:	490f      	ldr	r1, [pc, #60]	; (80035d0 <HAL_I2C_IsDeviceReady+0x254>)
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 f8a2 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e012      	b.n	80035c8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	3301      	adds	r3, #1
 80035a6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	f4ff af32 	bcc.w	8003416 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2220      	movs	r2, #32
 80035b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e000      	b.n	80035c8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80035c6:	2302      	movs	r3, #2
  }
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3720      	adds	r7, #32
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	00100002 	.word	0x00100002
 80035d4:	ffff0000 	.word	0xffff0000

080035d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b088      	sub	sp, #32
 80035dc:	af02      	add	r7, sp, #8
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	607a      	str	r2, [r7, #4]
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	460b      	mov	r3, r1
 80035e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d006      	beq.n	8003602 <I2C_MasterRequestWrite+0x2a>
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d003      	beq.n	8003602 <I2C_MasterRequestWrite+0x2a>
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003600:	d108      	bne.n	8003614 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	e00b      	b.n	800362c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003618:	2b12      	cmp	r3, #18
 800361a:	d107      	bne.n	800362c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800362a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 f84f 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00d      	beq.n	8003660 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003652:	d103      	bne.n	800365c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800365a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e035      	b.n	80036cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003668:	d108      	bne.n	800367c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800366a:	897b      	ldrh	r3, [r7, #10]
 800366c:	b2db      	uxtb	r3, r3
 800366e:	461a      	mov	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003678:	611a      	str	r2, [r3, #16]
 800367a:	e01b      	b.n	80036b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800367c:	897b      	ldrh	r3, [r7, #10]
 800367e:	11db      	asrs	r3, r3, #7
 8003680:	b2db      	uxtb	r3, r3
 8003682:	f003 0306 	and.w	r3, r3, #6
 8003686:	b2db      	uxtb	r3, r3
 8003688:	f063 030f 	orn	r3, r3, #15
 800368c:	b2da      	uxtb	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	490e      	ldr	r1, [pc, #56]	; (80036d4 <I2C_MasterRequestWrite+0xfc>)
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f875 	bl	800378a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e010      	b.n	80036cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036aa:	897b      	ldrh	r3, [r7, #10]
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	4907      	ldr	r1, [pc, #28]	; (80036d8 <I2C_MasterRequestWrite+0x100>)
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 f865 	bl	800378a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	00010008 	.word	0x00010008
 80036d8:	00010002 	.word	0x00010002

080036dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	4613      	mov	r3, r2
 80036ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036ec:	e025      	b.n	800373a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f4:	d021      	beq.n	800373a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036f6:	f7ff f82b 	bl	8002750 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d302      	bcc.n	800370c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d116      	bne.n	800373a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2220      	movs	r2, #32
 8003716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	f043 0220 	orr.w	r2, r3, #32
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e023      	b.n	8003782 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	0c1b      	lsrs	r3, r3, #16
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b01      	cmp	r3, #1
 8003742:	d10d      	bne.n	8003760 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	43da      	mvns	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4013      	ands	r3, r2
 8003750:	b29b      	uxth	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	bf0c      	ite	eq
 8003756:	2301      	moveq	r3, #1
 8003758:	2300      	movne	r3, #0
 800375a:	b2db      	uxtb	r3, r3
 800375c:	461a      	mov	r2, r3
 800375e:	e00c      	b.n	800377a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	43da      	mvns	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4013      	ands	r3, r2
 800376c:	b29b      	uxth	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	bf0c      	ite	eq
 8003772:	2301      	moveq	r3, #1
 8003774:	2300      	movne	r3, #0
 8003776:	b2db      	uxtb	r3, r3
 8003778:	461a      	mov	r2, r3
 800377a:	79fb      	ldrb	r3, [r7, #7]
 800377c:	429a      	cmp	r2, r3
 800377e:	d0b6      	beq.n	80036ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b084      	sub	sp, #16
 800378e:	af00      	add	r7, sp, #0
 8003790:	60f8      	str	r0, [r7, #12]
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	607a      	str	r2, [r7, #4]
 8003796:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003798:	e051      	b.n	800383e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a8:	d123      	bne.n	80037f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	f043 0204 	orr.w	r2, r3, #4
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e046      	b.n	8003880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f8:	d021      	beq.n	800383e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fa:	f7fe ffa9 	bl	8002750 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	429a      	cmp	r2, r3
 8003808:	d302      	bcc.n	8003810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d116      	bne.n	800383e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	f043 0220 	orr.w	r2, r3, #32
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e020      	b.n	8003880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	0c1b      	lsrs	r3, r3, #16
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b01      	cmp	r3, #1
 8003846:	d10c      	bne.n	8003862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	43da      	mvns	r2, r3
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	4013      	ands	r3, r2
 8003854:	b29b      	uxth	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	bf14      	ite	ne
 800385a:	2301      	movne	r3, #1
 800385c:	2300      	moveq	r3, #0
 800385e:	b2db      	uxtb	r3, r3
 8003860:	e00b      	b.n	800387a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	43da      	mvns	r2, r3
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	4013      	ands	r3, r2
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	bf14      	ite	ne
 8003874:	2301      	movne	r3, #1
 8003876:	2300      	moveq	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d18d      	bne.n	800379a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003894:	e02d      	b.n	80038f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 f878 	bl	800398c <I2C_IsAcknowledgeFailed>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e02d      	b.n	8003902 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ac:	d021      	beq.n	80038f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ae:	f7fe ff4f 	bl	8002750 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d302      	bcc.n	80038c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d116      	bne.n	80038f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f043 0220 	orr.w	r2, r3, #32
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e007      	b.n	8003902 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fc:	2b80      	cmp	r3, #128	; 0x80
 80038fe:	d1ca      	bne.n	8003896 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b084      	sub	sp, #16
 800390e:	af00      	add	r7, sp, #0
 8003910:	60f8      	str	r0, [r7, #12]
 8003912:	60b9      	str	r1, [r7, #8]
 8003914:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003916:	e02d      	b.n	8003974 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 f837 	bl	800398c <I2C_IsAcknowledgeFailed>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e02d      	b.n	8003984 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392e:	d021      	beq.n	8003974 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003930:	f7fe ff0e 	bl	8002750 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	429a      	cmp	r2, r3
 800393e:	d302      	bcc.n	8003946 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d116      	bne.n	8003974 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2220      	movs	r2, #32
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	f043 0220 	orr.w	r2, r3, #32
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e007      	b.n	8003984 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b04      	cmp	r3, #4
 8003980:	d1ca      	bne.n	8003918 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800399e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039a2:	d11b      	bne.n	80039dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	f043 0204 	orr.w	r2, r3, #4
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e000      	b.n	80039de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
	...

080039ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e264      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d075      	beq.n	8003af6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a0a:	4ba3      	ldr	r3, [pc, #652]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 030c 	and.w	r3, r3, #12
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d00c      	beq.n	8003a30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a16:	4ba0      	ldr	r3, [pc, #640]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d112      	bne.n	8003a48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a22:	4b9d      	ldr	r3, [pc, #628]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a2e:	d10b      	bne.n	8003a48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a30:	4b99      	ldr	r3, [pc, #612]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d05b      	beq.n	8003af4 <HAL_RCC_OscConfig+0x108>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d157      	bne.n	8003af4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e23f      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a50:	d106      	bne.n	8003a60 <HAL_RCC_OscConfig+0x74>
 8003a52:	4b91      	ldr	r3, [pc, #580]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a90      	ldr	r2, [pc, #576]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	e01d      	b.n	8003a9c <HAL_RCC_OscConfig+0xb0>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a68:	d10c      	bne.n	8003a84 <HAL_RCC_OscConfig+0x98>
 8003a6a:	4b8b      	ldr	r3, [pc, #556]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a8a      	ldr	r2, [pc, #552]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	4b88      	ldr	r3, [pc, #544]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a87      	ldr	r2, [pc, #540]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	e00b      	b.n	8003a9c <HAL_RCC_OscConfig+0xb0>
 8003a84:	4b84      	ldr	r3, [pc, #528]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a83      	ldr	r2, [pc, #524]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	4b81      	ldr	r3, [pc, #516]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a80      	ldr	r2, [pc, #512]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d013      	beq.n	8003acc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa4:	f7fe fe54 	bl	8002750 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aac:	f7fe fe50 	bl	8002750 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b64      	cmp	r3, #100	; 0x64
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e204      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003abe:	4b76      	ldr	r3, [pc, #472]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0f0      	beq.n	8003aac <HAL_RCC_OscConfig+0xc0>
 8003aca:	e014      	b.n	8003af6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003acc:	f7fe fe40 	bl	8002750 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ad4:	f7fe fe3c 	bl	8002750 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b64      	cmp	r3, #100	; 0x64
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e1f0      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ae6:	4b6c      	ldr	r3, [pc, #432]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f0      	bne.n	8003ad4 <HAL_RCC_OscConfig+0xe8>
 8003af2:	e000      	b.n	8003af6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d063      	beq.n	8003bca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b02:	4b65      	ldr	r3, [pc, #404]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 030c 	and.w	r3, r3, #12
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00b      	beq.n	8003b26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b0e:	4b62      	ldr	r3, [pc, #392]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d11c      	bne.n	8003b54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b1a:	4b5f      	ldr	r3, [pc, #380]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d116      	bne.n	8003b54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b26:	4b5c      	ldr	r3, [pc, #368]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d005      	beq.n	8003b3e <HAL_RCC_OscConfig+0x152>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d001      	beq.n	8003b3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e1c4      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b3e:	4b56      	ldr	r3, [pc, #344]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	4952      	ldr	r1, [pc, #328]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b52:	e03a      	b.n	8003bca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d020      	beq.n	8003b9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b5c:	4b4f      	ldr	r3, [pc, #316]	; (8003c9c <HAL_RCC_OscConfig+0x2b0>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b62:	f7fe fdf5 	bl	8002750 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b6a:	f7fe fdf1 	bl	8002750 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e1a5      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b7c:	4b46      	ldr	r3, [pc, #280]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b88:	4b43      	ldr	r3, [pc, #268]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	4940      	ldr	r1, [pc, #256]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	600b      	str	r3, [r1, #0]
 8003b9c:	e015      	b.n	8003bca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b9e:	4b3f      	ldr	r3, [pc, #252]	; (8003c9c <HAL_RCC_OscConfig+0x2b0>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba4:	f7fe fdd4 	bl	8002750 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bac:	f7fe fdd0 	bl	8002750 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e184      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bbe:	4b36      	ldr	r3, [pc, #216]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d030      	beq.n	8003c38 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d016      	beq.n	8003c0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bde:	4b30      	ldr	r3, [pc, #192]	; (8003ca0 <HAL_RCC_OscConfig+0x2b4>)
 8003be0:	2201      	movs	r2, #1
 8003be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be4:	f7fe fdb4 	bl	8002750 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bec:	f7fe fdb0 	bl	8002750 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e164      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bfe:	4b26      	ldr	r3, [pc, #152]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0f0      	beq.n	8003bec <HAL_RCC_OscConfig+0x200>
 8003c0a:	e015      	b.n	8003c38 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c0c:	4b24      	ldr	r3, [pc, #144]	; (8003ca0 <HAL_RCC_OscConfig+0x2b4>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c12:	f7fe fd9d 	bl	8002750 <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c1a:	f7fe fd99 	bl	8002750 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e14d      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c2c:	4b1a      	ldr	r3, [pc, #104]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1f0      	bne.n	8003c1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 80a0 	beq.w	8003d86 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c46:	2300      	movs	r3, #0
 8003c48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c4a:	4b13      	ldr	r3, [pc, #76]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10f      	bne.n	8003c76 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c56:	2300      	movs	r3, #0
 8003c58:	60bb      	str	r3, [r7, #8]
 8003c5a:	4b0f      	ldr	r3, [pc, #60]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	4a0e      	ldr	r2, [pc, #56]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c64:	6413      	str	r3, [r2, #64]	; 0x40
 8003c66:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <HAL_RCC_OscConfig+0x2ac>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6e:	60bb      	str	r3, [r7, #8]
 8003c70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c72:	2301      	movs	r3, #1
 8003c74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c76:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <HAL_RCC_OscConfig+0x2b8>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d121      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c82:	4b08      	ldr	r3, [pc, #32]	; (8003ca4 <HAL_RCC_OscConfig+0x2b8>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a07      	ldr	r2, [pc, #28]	; (8003ca4 <HAL_RCC_OscConfig+0x2b8>)
 8003c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c8e:	f7fe fd5f 	bl	8002750 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c94:	e011      	b.n	8003cba <HAL_RCC_OscConfig+0x2ce>
 8003c96:	bf00      	nop
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	42470000 	.word	0x42470000
 8003ca0:	42470e80 	.word	0x42470e80
 8003ca4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ca8:	f7fe fd52 	bl	8002750 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e106      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cba:	4b85      	ldr	r3, [pc, #532]	; (8003ed0 <HAL_RCC_OscConfig+0x4e4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0f0      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d106      	bne.n	8003cdc <HAL_RCC_OscConfig+0x2f0>
 8003cce:	4b81      	ldr	r3, [pc, #516]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd2:	4a80      	ldr	r2, [pc, #512]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003cd4:	f043 0301 	orr.w	r3, r3, #1
 8003cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cda:	e01c      	b.n	8003d16 <HAL_RCC_OscConfig+0x32a>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	2b05      	cmp	r3, #5
 8003ce2:	d10c      	bne.n	8003cfe <HAL_RCC_OscConfig+0x312>
 8003ce4:	4b7b      	ldr	r3, [pc, #492]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce8:	4a7a      	ldr	r2, [pc, #488]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003cea:	f043 0304 	orr.w	r3, r3, #4
 8003cee:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf0:	4b78      	ldr	r3, [pc, #480]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf4:	4a77      	ldr	r2, [pc, #476]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003cf6:	f043 0301 	orr.w	r3, r3, #1
 8003cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8003cfc:	e00b      	b.n	8003d16 <HAL_RCC_OscConfig+0x32a>
 8003cfe:	4b75      	ldr	r3, [pc, #468]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d02:	4a74      	ldr	r2, [pc, #464]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003d04:	f023 0301 	bic.w	r3, r3, #1
 8003d08:	6713      	str	r3, [r2, #112]	; 0x70
 8003d0a:	4b72      	ldr	r3, [pc, #456]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0e:	4a71      	ldr	r2, [pc, #452]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003d10:	f023 0304 	bic.w	r3, r3, #4
 8003d14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d015      	beq.n	8003d4a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1e:	f7fe fd17 	bl	8002750 <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d24:	e00a      	b.n	8003d3c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d26:	f7fe fd13 	bl	8002750 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e0c5      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d3c:	4b65      	ldr	r3, [pc, #404]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0ee      	beq.n	8003d26 <HAL_RCC_OscConfig+0x33a>
 8003d48:	e014      	b.n	8003d74 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d4a:	f7fe fd01 	bl	8002750 <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d50:	e00a      	b.n	8003d68 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d52:	f7fe fcfd 	bl	8002750 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e0af      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d68:	4b5a      	ldr	r3, [pc, #360]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1ee      	bne.n	8003d52 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d74:	7dfb      	ldrb	r3, [r7, #23]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d105      	bne.n	8003d86 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d7a:	4b56      	ldr	r3, [pc, #344]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	4a55      	ldr	r2, [pc, #340]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 809b 	beq.w	8003ec6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d90:	4b50      	ldr	r3, [pc, #320]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f003 030c 	and.w	r3, r3, #12
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d05c      	beq.n	8003e56 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d141      	bne.n	8003e28 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da4:	4b4c      	ldr	r3, [pc, #304]	; (8003ed8 <HAL_RCC_OscConfig+0x4ec>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003daa:	f7fe fcd1 	bl	8002750 <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db2:	f7fe fccd 	bl	8002750 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e081      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc4:	4b43      	ldr	r3, [pc, #268]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1f0      	bne.n	8003db2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	019b      	lsls	r3, r3, #6
 8003de0:	431a      	orrs	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de6:	085b      	lsrs	r3, r3, #1
 8003de8:	3b01      	subs	r3, #1
 8003dea:	041b      	lsls	r3, r3, #16
 8003dec:	431a      	orrs	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df2:	061b      	lsls	r3, r3, #24
 8003df4:	4937      	ldr	r1, [pc, #220]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dfa:	4b37      	ldr	r3, [pc, #220]	; (8003ed8 <HAL_RCC_OscConfig+0x4ec>)
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e00:	f7fe fca6 	bl	8002750 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e08:	f7fe fca2 	bl	8002750 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e056      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e1a:	4b2e      	ldr	r3, [pc, #184]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCC_OscConfig+0x41c>
 8003e26:	e04e      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e28:	4b2b      	ldr	r3, [pc, #172]	; (8003ed8 <HAL_RCC_OscConfig+0x4ec>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2e:	f7fe fc8f 	bl	8002750 <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e36:	f7fe fc8b 	bl	8002750 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e03f      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e48:	4b22      	ldr	r3, [pc, #136]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1f0      	bne.n	8003e36 <HAL_RCC_OscConfig+0x44a>
 8003e54:	e037      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d101      	bne.n	8003e62 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e032      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e62:	4b1c      	ldr	r3, [pc, #112]	; (8003ed4 <HAL_RCC_OscConfig+0x4e8>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d028      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d121      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d11a      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e92:	4013      	ands	r3, r2
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e98:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d111      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea8:	085b      	lsrs	r3, r3, #1
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d107      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d001      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e000      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40007000 	.word	0x40007000
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	42470060 	.word	0x42470060

08003edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e0cc      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ef0:	4b68      	ldr	r3, [pc, #416]	; (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d90c      	bls.n	8003f18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003efe:	4b65      	ldr	r3, [pc, #404]	; (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f06:	4b63      	ldr	r3, [pc, #396]	; (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d001      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e0b8      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d020      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d005      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f30:	4b59      	ldr	r3, [pc, #356]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	4a58      	ldr	r2, [pc, #352]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f48:	4b53      	ldr	r3, [pc, #332]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	4a52      	ldr	r2, [pc, #328]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f54:	4b50      	ldr	r3, [pc, #320]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	494d      	ldr	r1, [pc, #308]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d044      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d107      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f7a:	4b47      	ldr	r3, [pc, #284]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d119      	bne.n	8003fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e07f      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d003      	beq.n	8003f9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f96:	2b03      	cmp	r3, #3
 8003f98:	d107      	bne.n	8003faa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f9a:	4b3f      	ldr	r3, [pc, #252]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d109      	bne.n	8003fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e06f      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003faa:	4b3b      	ldr	r3, [pc, #236]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e067      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fba:	4b37      	ldr	r3, [pc, #220]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f023 0203 	bic.w	r2, r3, #3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	4934      	ldr	r1, [pc, #208]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fcc:	f7fe fbc0 	bl	8002750 <HAL_GetTick>
 8003fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd2:	e00a      	b.n	8003fea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fd4:	f7fe fbbc 	bl	8002750 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e04f      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fea:	4b2b      	ldr	r3, [pc, #172]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 020c 	and.w	r2, r3, #12
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d1eb      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ffc:	4b25      	ldr	r3, [pc, #148]	; (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d20c      	bcs.n	8004024 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400a:	4b22      	ldr	r3, [pc, #136]	; (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004012:	4b20      	ldr	r3, [pc, #128]	; (8004094 <HAL_RCC_ClockConfig+0x1b8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	429a      	cmp	r2, r3
 800401e:	d001      	beq.n	8004024 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e032      	b.n	800408a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b00      	cmp	r3, #0
 800402e:	d008      	beq.n	8004042 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004030:	4b19      	ldr	r3, [pc, #100]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	4916      	ldr	r1, [pc, #88]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	4313      	orrs	r3, r2
 8004040:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	d009      	beq.n	8004062 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800404e:	4b12      	ldr	r3, [pc, #72]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	490e      	ldr	r1, [pc, #56]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 800405e:	4313      	orrs	r3, r2
 8004060:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004062:	f000 f821 	bl	80040a8 <HAL_RCC_GetSysClockFreq>
 8004066:	4602      	mov	r2, r0
 8004068:	4b0b      	ldr	r3, [pc, #44]	; (8004098 <HAL_RCC_ClockConfig+0x1bc>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	091b      	lsrs	r3, r3, #4
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	490a      	ldr	r1, [pc, #40]	; (800409c <HAL_RCC_ClockConfig+0x1c0>)
 8004074:	5ccb      	ldrb	r3, [r1, r3]
 8004076:	fa22 f303 	lsr.w	r3, r2, r3
 800407a:	4a09      	ldr	r2, [pc, #36]	; (80040a0 <HAL_RCC_ClockConfig+0x1c4>)
 800407c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800407e:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7fe fb20 	bl	80026c8 <HAL_InitTick>

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40023c00 	.word	0x40023c00
 8004098:	40023800 	.word	0x40023800
 800409c:	08005f70 	.word	0x08005f70
 80040a0:	20000060 	.word	0x20000060
 80040a4:	20000064 	.word	0x20000064

080040a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a8:	b5b0      	push	{r4, r5, r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040ae:	2100      	movs	r1, #0
 80040b0:	6079      	str	r1, [r7, #4]
 80040b2:	2100      	movs	r1, #0
 80040b4:	60f9      	str	r1, [r7, #12]
 80040b6:	2100      	movs	r1, #0
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80040ba:	2100      	movs	r1, #0
 80040bc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040be:	4952      	ldr	r1, [pc, #328]	; (8004208 <HAL_RCC_GetSysClockFreq+0x160>)
 80040c0:	6889      	ldr	r1, [r1, #8]
 80040c2:	f001 010c 	and.w	r1, r1, #12
 80040c6:	2908      	cmp	r1, #8
 80040c8:	d00d      	beq.n	80040e6 <HAL_RCC_GetSysClockFreq+0x3e>
 80040ca:	2908      	cmp	r1, #8
 80040cc:	f200 8094 	bhi.w	80041f8 <HAL_RCC_GetSysClockFreq+0x150>
 80040d0:	2900      	cmp	r1, #0
 80040d2:	d002      	beq.n	80040da <HAL_RCC_GetSysClockFreq+0x32>
 80040d4:	2904      	cmp	r1, #4
 80040d6:	d003      	beq.n	80040e0 <HAL_RCC_GetSysClockFreq+0x38>
 80040d8:	e08e      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040da:	4b4c      	ldr	r3, [pc, #304]	; (800420c <HAL_RCC_GetSysClockFreq+0x164>)
 80040dc:	60bb      	str	r3, [r7, #8]
       break;
 80040de:	e08e      	b.n	80041fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040e0:	4b4b      	ldr	r3, [pc, #300]	; (8004210 <HAL_RCC_GetSysClockFreq+0x168>)
 80040e2:	60bb      	str	r3, [r7, #8]
      break;
 80040e4:	e08b      	b.n	80041fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040e6:	4948      	ldr	r1, [pc, #288]	; (8004208 <HAL_RCC_GetSysClockFreq+0x160>)
 80040e8:	6849      	ldr	r1, [r1, #4]
 80040ea:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80040ee:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040f0:	4945      	ldr	r1, [pc, #276]	; (8004208 <HAL_RCC_GetSysClockFreq+0x160>)
 80040f2:	6849      	ldr	r1, [r1, #4]
 80040f4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80040f8:	2900      	cmp	r1, #0
 80040fa:	d024      	beq.n	8004146 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040fc:	4942      	ldr	r1, [pc, #264]	; (8004208 <HAL_RCC_GetSysClockFreq+0x160>)
 80040fe:	6849      	ldr	r1, [r1, #4]
 8004100:	0989      	lsrs	r1, r1, #6
 8004102:	4608      	mov	r0, r1
 8004104:	f04f 0100 	mov.w	r1, #0
 8004108:	f240 14ff 	movw	r4, #511	; 0x1ff
 800410c:	f04f 0500 	mov.w	r5, #0
 8004110:	ea00 0204 	and.w	r2, r0, r4
 8004114:	ea01 0305 	and.w	r3, r1, r5
 8004118:	493d      	ldr	r1, [pc, #244]	; (8004210 <HAL_RCC_GetSysClockFreq+0x168>)
 800411a:	fb01 f003 	mul.w	r0, r1, r3
 800411e:	2100      	movs	r1, #0
 8004120:	fb01 f102 	mul.w	r1, r1, r2
 8004124:	1844      	adds	r4, r0, r1
 8004126:	493a      	ldr	r1, [pc, #232]	; (8004210 <HAL_RCC_GetSysClockFreq+0x168>)
 8004128:	fba2 0101 	umull	r0, r1, r2, r1
 800412c:	1863      	adds	r3, r4, r1
 800412e:	4619      	mov	r1, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	461a      	mov	r2, r3
 8004134:	f04f 0300 	mov.w	r3, #0
 8004138:	f7fc f84e 	bl	80001d8 <__aeabi_uldivmod>
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	4613      	mov	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	e04a      	b.n	80041dc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004146:	4b30      	ldr	r3, [pc, #192]	; (8004208 <HAL_RCC_GetSysClockFreq+0x160>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	099b      	lsrs	r3, r3, #6
 800414c:	461a      	mov	r2, r3
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004156:	f04f 0100 	mov.w	r1, #0
 800415a:	ea02 0400 	and.w	r4, r2, r0
 800415e:	ea03 0501 	and.w	r5, r3, r1
 8004162:	4620      	mov	r0, r4
 8004164:	4629      	mov	r1, r5
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	014b      	lsls	r3, r1, #5
 8004170:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004174:	0142      	lsls	r2, r0, #5
 8004176:	4610      	mov	r0, r2
 8004178:	4619      	mov	r1, r3
 800417a:	1b00      	subs	r0, r0, r4
 800417c:	eb61 0105 	sbc.w	r1, r1, r5
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	018b      	lsls	r3, r1, #6
 800418a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800418e:	0182      	lsls	r2, r0, #6
 8004190:	1a12      	subs	r2, r2, r0
 8004192:	eb63 0301 	sbc.w	r3, r3, r1
 8004196:	f04f 0000 	mov.w	r0, #0
 800419a:	f04f 0100 	mov.w	r1, #0
 800419e:	00d9      	lsls	r1, r3, #3
 80041a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041a4:	00d0      	lsls	r0, r2, #3
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
 80041aa:	1912      	adds	r2, r2, r4
 80041ac:	eb45 0303 	adc.w	r3, r5, r3
 80041b0:	f04f 0000 	mov.w	r0, #0
 80041b4:	f04f 0100 	mov.w	r1, #0
 80041b8:	0299      	lsls	r1, r3, #10
 80041ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80041be:	0290      	lsls	r0, r2, #10
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4610      	mov	r0, r2
 80041c6:	4619      	mov	r1, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	461a      	mov	r2, r3
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	f7fc f802 	bl	80001d8 <__aeabi_uldivmod>
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	4613      	mov	r3, r2
 80041da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041dc:	4b0a      	ldr	r3, [pc, #40]	; (8004208 <HAL_RCC_GetSysClockFreq+0x160>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	0c1b      	lsrs	r3, r3, #16
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	3301      	adds	r3, #1
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f4:	60bb      	str	r3, [r7, #8]
      break;
 80041f6:	e002      	b.n	80041fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041f8:	4b04      	ldr	r3, [pc, #16]	; (800420c <HAL_RCC_GetSysClockFreq+0x164>)
 80041fa:	60bb      	str	r3, [r7, #8]
      break;
 80041fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041fe:	68bb      	ldr	r3, [r7, #8]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bdb0      	pop	{r4, r5, r7, pc}
 8004208:	40023800 	.word	0x40023800
 800420c:	00f42400 	.word	0x00f42400
 8004210:	018cba80 	.word	0x018cba80

08004214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004218:	4b03      	ldr	r3, [pc, #12]	; (8004228 <HAL_RCC_GetHCLKFreq+0x14>)
 800421a:	681b      	ldr	r3, [r3, #0]
}
 800421c:	4618      	mov	r0, r3
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	20000060 	.word	0x20000060

0800422c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004230:	f7ff fff0 	bl	8004214 <HAL_RCC_GetHCLKFreq>
 8004234:	4602      	mov	r2, r0
 8004236:	4b05      	ldr	r3, [pc, #20]	; (800424c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	0a9b      	lsrs	r3, r3, #10
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	4903      	ldr	r1, [pc, #12]	; (8004250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004242:	5ccb      	ldrb	r3, [r1, r3]
 8004244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004248:	4618      	mov	r0, r3
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40023800 	.word	0x40023800
 8004250:	08005f80 	.word	0x08005f80

08004254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004258:	f7ff ffdc 	bl	8004214 <HAL_RCC_GetHCLKFreq>
 800425c:	4602      	mov	r2, r0
 800425e:	4b05      	ldr	r3, [pc, #20]	; (8004274 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	0b5b      	lsrs	r3, r3, #13
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	4903      	ldr	r1, [pc, #12]	; (8004278 <HAL_RCC_GetPCLK2Freq+0x24>)
 800426a:	5ccb      	ldrb	r3, [r1, r3]
 800426c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004270:	4618      	mov	r0, r3
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40023800 	.word	0x40023800
 8004278:	08005f80 	.word	0x08005f80

0800427c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e07b      	b.n	8004386 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	2b00      	cmp	r3, #0
 8004294:	d108      	bne.n	80042a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800429e:	d009      	beq.n	80042b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	61da      	str	r2, [r3, #28]
 80042a6:	e005      	b.n	80042b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d106      	bne.n	80042d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7fe f86e 	bl	80023b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042fc:	431a      	orrs	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004306:	431a      	orrs	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	431a      	orrs	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004324:	431a      	orrs	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004338:	ea42 0103 	orr.w	r1, r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	0c1b      	lsrs	r3, r3, #16
 8004352:	f003 0104 	and.w	r1, r3, #4
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	f003 0210 	and.w	r2, r3, #16
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	69da      	ldr	r2, [r3, #28]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004374:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b088      	sub	sp, #32
 8004392:	af00      	add	r7, sp, #0
 8004394:	60f8      	str	r0, [r7, #12]
 8004396:	60b9      	str	r1, [r7, #8]
 8004398:	603b      	str	r3, [r7, #0]
 800439a:	4613      	mov	r3, r2
 800439c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d101      	bne.n	80043b0 <HAL_SPI_Transmit+0x22>
 80043ac:	2302      	movs	r3, #2
 80043ae:	e126      	b.n	80045fe <HAL_SPI_Transmit+0x270>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043b8:	f7fe f9ca 	bl	8002750 <HAL_GetTick>
 80043bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80043be:	88fb      	ldrh	r3, [r7, #6]
 80043c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d002      	beq.n	80043d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80043ce:	2302      	movs	r3, #2
 80043d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043d2:	e10b      	b.n	80045ec <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d002      	beq.n	80043e0 <HAL_SPI_Transmit+0x52>
 80043da:	88fb      	ldrh	r3, [r7, #6]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d102      	bne.n	80043e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043e4:	e102      	b.n	80045ec <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2203      	movs	r2, #3
 80043ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	88fa      	ldrh	r2, [r7, #6]
 80043fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	88fa      	ldrh	r2, [r7, #6]
 8004404:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800442c:	d10f      	bne.n	800444e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800443c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800444c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004458:	2b40      	cmp	r3, #64	; 0x40
 800445a:	d007      	beq.n	800446c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800446a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004474:	d14b      	bne.n	800450e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <HAL_SPI_Transmit+0xf6>
 800447e:	8afb      	ldrh	r3, [r7, #22]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d13e      	bne.n	8004502 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004488:	881a      	ldrh	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004494:	1c9a      	adds	r2, r3, #2
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800449e:	b29b      	uxth	r3, r3
 80044a0:	3b01      	subs	r3, #1
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80044a8:	e02b      	b.n	8004502 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d112      	bne.n	80044de <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044bc:	881a      	ldrh	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	1c9a      	adds	r2, r3, #2
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	86da      	strh	r2, [r3, #54]	; 0x36
 80044dc:	e011      	b.n	8004502 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044de:	f7fe f937 	bl	8002750 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d803      	bhi.n	80044f6 <HAL_SPI_Transmit+0x168>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f4:	d102      	bne.n	80044fc <HAL_SPI_Transmit+0x16e>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d102      	bne.n	8004502 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004500:	e074      	b.n	80045ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004506:	b29b      	uxth	r3, r3
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1ce      	bne.n	80044aa <HAL_SPI_Transmit+0x11c>
 800450c:	e04c      	b.n	80045a8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <HAL_SPI_Transmit+0x18e>
 8004516:	8afb      	ldrh	r3, [r7, #22]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d140      	bne.n	800459e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	330c      	adds	r3, #12
 8004526:	7812      	ldrb	r2, [r2, #0]
 8004528:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452e:	1c5a      	adds	r2, r3, #1
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004538:	b29b      	uxth	r3, r3
 800453a:	3b01      	subs	r3, #1
 800453c:	b29a      	uxth	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004542:	e02c      	b.n	800459e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b02      	cmp	r3, #2
 8004550:	d113      	bne.n	800457a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	330c      	adds	r3, #12
 800455c:	7812      	ldrb	r2, [r2, #0]
 800455e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800456e:	b29b      	uxth	r3, r3
 8004570:	3b01      	subs	r3, #1
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	86da      	strh	r2, [r3, #54]	; 0x36
 8004578:	e011      	b.n	800459e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800457a:	f7fe f8e9 	bl	8002750 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	d803      	bhi.n	8004592 <HAL_SPI_Transmit+0x204>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004590:	d102      	bne.n	8004598 <HAL_SPI_Transmit+0x20a>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d102      	bne.n	800459e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800459c:	e026      	b.n	80045ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1cd      	bne.n	8004544 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	6839      	ldr	r1, [r7, #0]
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 f8c1 	bl	8004734 <SPI_EndRxTxTransaction>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2220      	movs	r2, #32
 80045bc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10a      	bne.n	80045dc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045c6:	2300      	movs	r3, #0
 80045c8:	613b      	str	r3, [r7, #16]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	613b      	str	r3, [r7, #16]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	613b      	str	r3, [r7, #16]
 80045da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d002      	beq.n	80045ea <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	77fb      	strb	r3, [r7, #31]
 80045e8:	e000      	b.n	80045ec <HAL_SPI_Transmit+0x25e>
  }

error:
 80045ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3720      	adds	r7, #32
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004606:	b480      	push	{r7}
 8004608:	b083      	sub	sp, #12
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004614:	b2db      	uxtb	r3, r3
}
 8004616:	4618      	mov	r0, r3
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
	...

08004624 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b088      	sub	sp, #32
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	603b      	str	r3, [r7, #0]
 8004630:	4613      	mov	r3, r2
 8004632:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004634:	f7fe f88c 	bl	8002750 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463c:	1a9b      	subs	r3, r3, r2
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	4413      	add	r3, r2
 8004642:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004644:	f7fe f884 	bl	8002750 <HAL_GetTick>
 8004648:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800464a:	4b39      	ldr	r3, [pc, #228]	; (8004730 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	015b      	lsls	r3, r3, #5
 8004650:	0d1b      	lsrs	r3, r3, #20
 8004652:	69fa      	ldr	r2, [r7, #28]
 8004654:	fb02 f303 	mul.w	r3, r2, r3
 8004658:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800465a:	e054      	b.n	8004706 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004662:	d050      	beq.n	8004706 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004664:	f7fe f874 	bl	8002750 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	69fa      	ldr	r2, [r7, #28]
 8004670:	429a      	cmp	r2, r3
 8004672:	d902      	bls.n	800467a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d13d      	bne.n	80046f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004688:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004692:	d111      	bne.n	80046b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800469c:	d004      	beq.n	80046a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a6:	d107      	bne.n	80046b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c0:	d10f      	bne.n	80046e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e017      	b.n	8004726 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	3b01      	subs	r3, #1
 8004704:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	4013      	ands	r3, r2
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	429a      	cmp	r2, r3
 8004714:	bf0c      	ite	eq
 8004716:	2301      	moveq	r3, #1
 8004718:	2300      	movne	r3, #0
 800471a:	b2db      	uxtb	r3, r3
 800471c:	461a      	mov	r2, r3
 800471e:	79fb      	ldrb	r3, [r7, #7]
 8004720:	429a      	cmp	r2, r3
 8004722:	d19b      	bne.n	800465c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3720      	adds	r7, #32
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	20000060 	.word	0x20000060

08004734 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b088      	sub	sp, #32
 8004738:	af02      	add	r7, sp, #8
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004740:	4b1b      	ldr	r3, [pc, #108]	; (80047b0 <SPI_EndRxTxTransaction+0x7c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a1b      	ldr	r2, [pc, #108]	; (80047b4 <SPI_EndRxTxTransaction+0x80>)
 8004746:	fba2 2303 	umull	r2, r3, r2, r3
 800474a:	0d5b      	lsrs	r3, r3, #21
 800474c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004750:	fb02 f303 	mul.w	r3, r2, r3
 8004754:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800475e:	d112      	bne.n	8004786 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2200      	movs	r2, #0
 8004768:	2180      	movs	r1, #128	; 0x80
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f7ff ff5a 	bl	8004624 <SPI_WaitFlagStateUntilTimeout>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d016      	beq.n	80047a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477a:	f043 0220 	orr.w	r2, r3, #32
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e00f      	b.n	80047a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00a      	beq.n	80047a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	3b01      	subs	r3, #1
 8004790:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800479c:	2b80      	cmp	r3, #128	; 0x80
 800479e:	d0f2      	beq.n	8004786 <SPI_EndRxTxTransaction+0x52>
 80047a0:	e000      	b.n	80047a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80047a2:	bf00      	nop
  }

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20000060 	.word	0x20000060
 80047b4:	165e9f81 	.word	0x165e9f81

080047b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e03f      	b.n	800484a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d106      	bne.n	80047e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7fd fed6 	bl	8002590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2224      	movs	r2, #36	; 0x24
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fd7b 	bl	80052f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	691a      	ldr	r2, [r3, #16]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004810:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	695a      	ldr	r2, [r3, #20]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004820:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004830:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2220      	movs	r2, #32
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2220      	movs	r2, #32
 8004844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b08a      	sub	sp, #40	; 0x28
 8004856:	af02      	add	r7, sp, #8
 8004858:	60f8      	str	r0, [r7, #12]
 800485a:	60b9      	str	r1, [r7, #8]
 800485c:	603b      	str	r3, [r7, #0]
 800485e:	4613      	mov	r3, r2
 8004860:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004862:	2300      	movs	r3, #0
 8004864:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b20      	cmp	r3, #32
 8004870:	d17c      	bne.n	800496c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d002      	beq.n	800487e <HAL_UART_Transmit+0x2c>
 8004878:	88fb      	ldrh	r3, [r7, #6]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e075      	b.n	800496e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004888:	2b01      	cmp	r3, #1
 800488a:	d101      	bne.n	8004890 <HAL_UART_Transmit+0x3e>
 800488c:	2302      	movs	r3, #2
 800488e:	e06e      	b.n	800496e <HAL_UART_Transmit+0x11c>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2221      	movs	r2, #33	; 0x21
 80048a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048a6:	f7fd ff53 	bl	8002750 <HAL_GetTick>
 80048aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	88fa      	ldrh	r2, [r7, #6]
 80048b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	88fa      	ldrh	r2, [r7, #6]
 80048b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048c0:	d108      	bne.n	80048d4 <HAL_UART_Transmit+0x82>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d104      	bne.n	80048d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80048ca:	2300      	movs	r3, #0
 80048cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	61bb      	str	r3, [r7, #24]
 80048d2:	e003      	b.n	80048dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048d8:	2300      	movs	r3, #0
 80048da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80048e4:	e02a      	b.n	800493c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2200      	movs	r2, #0
 80048ee:	2180      	movs	r1, #128	; 0x80
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 faf9 	bl	8004ee8 <UART_WaitOnFlagUntilTimeout>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e036      	b.n	800496e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10b      	bne.n	800491e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004914:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	3302      	adds	r3, #2
 800491a:	61bb      	str	r3, [r7, #24]
 800491c:	e007      	b.n	800492e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	781a      	ldrb	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	3301      	adds	r3, #1
 800492c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004932:	b29b      	uxth	r3, r3
 8004934:	3b01      	subs	r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004940:	b29b      	uxth	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1cf      	bne.n	80048e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	2200      	movs	r2, #0
 800494e:	2140      	movs	r1, #64	; 0x40
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 fac9 	bl	8004ee8 <UART_WaitOnFlagUntilTimeout>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e006      	b.n	800496e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2220      	movs	r2, #32
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004968:	2300      	movs	r3, #0
 800496a:	e000      	b.n	800496e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800496c:	2302      	movs	r3, #2
  }
}
 800496e:	4618      	mov	r0, r3
 8004970:	3720      	adds	r7, #32
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
	...

08004978 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b0ba      	sub	sp, #232	; 0xe8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800499e:	2300      	movs	r3, #0
 80049a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80049b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10f      	bne.n	80049de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049c2:	f003 0320 	and.w	r3, r3, #32
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d009      	beq.n	80049de <HAL_UART_IRQHandler+0x66>
 80049ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049ce:	f003 0320 	and.w	r3, r3, #32
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 fbd3 	bl	8005182 <UART_Receive_IT>
      return;
 80049dc:	e256      	b.n	8004e8c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 80de 	beq.w	8004ba4 <HAL_UART_IRQHandler+0x22c>
 80049e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d106      	bne.n	8004a02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f000 80d1 	beq.w	8004ba4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00b      	beq.n	8004a26 <HAL_UART_IRQHandler+0xae>
 8004a0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d005      	beq.n	8004a26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	f043 0201 	orr.w	r2, r3, #1
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a2a:	f003 0304 	and.w	r3, r3, #4
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00b      	beq.n	8004a4a <HAL_UART_IRQHandler+0xd2>
 8004a32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d005      	beq.n	8004a4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f043 0202 	orr.w	r2, r3, #2
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00b      	beq.n	8004a6e <HAL_UART_IRQHandler+0xf6>
 8004a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d005      	beq.n	8004a6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	f043 0204 	orr.w	r2, r3, #4
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a72:	f003 0308 	and.w	r3, r3, #8
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d011      	beq.n	8004a9e <HAL_UART_IRQHandler+0x126>
 8004a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a7e:	f003 0320 	and.w	r3, r3, #32
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d105      	bne.n	8004a92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d005      	beq.n	8004a9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	f043 0208 	orr.w	r2, r3, #8
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 81ed 	beq.w	8004e82 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aac:	f003 0320 	and.w	r3, r3, #32
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d008      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x14e>
 8004ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ab8:	f003 0320 	and.w	r3, r3, #32
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 fb5e 	bl	8005182 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad0:	2b40      	cmp	r3, #64	; 0x40
 8004ad2:	bf0c      	ite	eq
 8004ad4:	2301      	moveq	r3, #1
 8004ad6:	2300      	movne	r3, #0
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d103      	bne.n	8004af2 <HAL_UART_IRQHandler+0x17a>
 8004aea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d04f      	beq.n	8004b92 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 fa66 	bl	8004fc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b02:	2b40      	cmp	r3, #64	; 0x40
 8004b04:	d141      	bne.n	8004b8a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	3314      	adds	r3, #20
 8004b0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b14:	e853 3f00 	ldrex	r3, [r3]
 8004b18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	3314      	adds	r3, #20
 8004b2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b42:	e841 2300 	strex	r3, r2, [r1]
 8004b46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1d9      	bne.n	8004b06 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d013      	beq.n	8004b82 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5e:	4a7d      	ldr	r2, [pc, #500]	; (8004d54 <HAL_UART_IRQHandler+0x3dc>)
 8004b60:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fd ffd5 	bl	8002b16 <HAL_DMA_Abort_IT>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d016      	beq.n	8004ba0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b80:	e00e      	b.n	8004ba0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f99a 	bl	8004ebc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b88:	e00a      	b.n	8004ba0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f996 	bl	8004ebc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b90:	e006      	b.n	8004ba0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f992 	bl	8004ebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004b9e:	e170      	b.n	8004e82 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba0:	bf00      	nop
    return;
 8004ba2:	e16e      	b.n	8004e82 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	f040 814a 	bne.w	8004e42 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bb2:	f003 0310 	and.w	r3, r3, #16
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 8143 	beq.w	8004e42 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bc0:	f003 0310 	and.w	r3, r3, #16
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 813c 	beq.w	8004e42 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60bb      	str	r3, [r7, #8]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	60bb      	str	r3, [r7, #8]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	60bb      	str	r3, [r7, #8]
 8004bde:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bea:	2b40      	cmp	r3, #64	; 0x40
 8004bec:	f040 80b4 	bne.w	8004d58 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004bfc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 8140 	beq.w	8004e86 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	f080 8139 	bcs.w	8004e86 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c1a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c26:	f000 8088 	beq.w	8004d3a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	330c      	adds	r3, #12
 8004c30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c38:	e853 3f00 	ldrex	r3, [r3]
 8004c3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	330c      	adds	r3, #12
 8004c52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004c56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c66:	e841 2300 	strex	r3, r2, [r1]
 8004c6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1d9      	bne.n	8004c2a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	3314      	adds	r3, #20
 8004c7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c80:	e853 3f00 	ldrex	r3, [r3]
 8004c84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c88:	f023 0301 	bic.w	r3, r3, #1
 8004c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3314      	adds	r3, #20
 8004c96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ca2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ca6:	e841 2300 	strex	r3, r2, [r1]
 8004caa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004cac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1e1      	bne.n	8004c76 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3314      	adds	r3, #20
 8004cb8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cbc:	e853 3f00 	ldrex	r3, [r3]
 8004cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004cc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3314      	adds	r3, #20
 8004cd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004cd6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004cd8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cda:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004cdc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004cde:	e841 2300 	strex	r3, r2, [r1]
 8004ce2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ce4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1e3      	bne.n	8004cb2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	330c      	adds	r3, #12
 8004cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d02:	e853 3f00 	ldrex	r3, [r3]
 8004d06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d0a:	f023 0310 	bic.w	r3, r3, #16
 8004d0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	330c      	adds	r3, #12
 8004d18:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004d1c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d1e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d24:	e841 2300 	strex	r3, r2, [r1]
 8004d28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e3      	bne.n	8004cf8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7fd fe7e 	bl	8002a36 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	4619      	mov	r1, r3
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f8c0 	bl	8004ed0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d50:	e099      	b.n	8004e86 <HAL_UART_IRQHandler+0x50e>
 8004d52:	bf00      	nop
 8004d54:	0800508b 	.word	0x0800508b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 808b 	beq.w	8004e8a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004d74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 8086 	beq.w	8004e8a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	330c      	adds	r3, #12
 8004d84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d88:	e853 3f00 	ldrex	r3, [r3]
 8004d8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	330c      	adds	r3, #12
 8004d9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004da2:	647a      	str	r2, [r7, #68]	; 0x44
 8004da4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004da8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004daa:	e841 2300 	strex	r3, r2, [r1]
 8004dae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1e3      	bne.n	8004d7e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	3314      	adds	r3, #20
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	e853 3f00 	ldrex	r3, [r3]
 8004dc4:	623b      	str	r3, [r7, #32]
   return(result);
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	f023 0301 	bic.w	r3, r3, #1
 8004dcc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3314      	adds	r3, #20
 8004dd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004dda:	633a      	str	r2, [r7, #48]	; 0x30
 8004ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004de2:	e841 2300 	strex	r3, r2, [r1]
 8004de6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1e3      	bne.n	8004db6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2220      	movs	r2, #32
 8004df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	330c      	adds	r3, #12
 8004e02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	e853 3f00 	ldrex	r3, [r3]
 8004e0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 0310 	bic.w	r3, r3, #16
 8004e12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	330c      	adds	r3, #12
 8004e1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004e20:	61fa      	str	r2, [r7, #28]
 8004e22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e24:	69b9      	ldr	r1, [r7, #24]
 8004e26:	69fa      	ldr	r2, [r7, #28]
 8004e28:	e841 2300 	strex	r3, r2, [r1]
 8004e2c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1e3      	bne.n	8004dfc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e38:	4619      	mov	r1, r3
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f848 	bl	8004ed0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e40:	e023      	b.n	8004e8a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d009      	beq.n	8004e62 <HAL_UART_IRQHandler+0x4ea>
 8004e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f929 	bl	80050b2 <UART_Transmit_IT>
    return;
 8004e60:	e014      	b.n	8004e8c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00e      	beq.n	8004e8c <HAL_UART_IRQHandler+0x514>
 8004e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d008      	beq.n	8004e8c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f969 	bl	8005152 <UART_EndTransmit_IT>
    return;
 8004e80:	e004      	b.n	8004e8c <HAL_UART_IRQHandler+0x514>
    return;
 8004e82:	bf00      	nop
 8004e84:	e002      	b.n	8004e8c <HAL_UART_IRQHandler+0x514>
      return;
 8004e86:	bf00      	nop
 8004e88:	e000      	b.n	8004e8c <HAL_UART_IRQHandler+0x514>
      return;
 8004e8a:	bf00      	nop
  }
}
 8004e8c:	37e8      	adds	r7, #232	; 0xe8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop

08004e94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	460b      	mov	r3, r1
 8004eda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b090      	sub	sp, #64	; 0x40
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	603b      	str	r3, [r7, #0]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ef8:	e050      	b.n	8004f9c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f00:	d04c      	beq.n	8004f9c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d007      	beq.n	8004f18 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f08:	f7fd fc22 	bl	8002750 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d241      	bcs.n	8004f9c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	330c      	adds	r3, #12
 8004f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f22:	e853 3f00 	ldrex	r3, [r3]
 8004f26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	330c      	adds	r3, #12
 8004f36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f38:	637a      	str	r2, [r7, #52]	; 0x34
 8004f3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f40:	e841 2300 	strex	r3, r2, [r1]
 8004f44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1e5      	bne.n	8004f18 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3314      	adds	r3, #20
 8004f52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	e853 3f00 	ldrex	r3, [r3]
 8004f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f023 0301 	bic.w	r3, r3, #1
 8004f62:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	3314      	adds	r3, #20
 8004f6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f6c:	623a      	str	r2, [r7, #32]
 8004f6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f70:	69f9      	ldr	r1, [r7, #28]
 8004f72:	6a3a      	ldr	r2, [r7, #32]
 8004f74:	e841 2300 	strex	r3, r2, [r1]
 8004f78:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1e5      	bne.n	8004f4c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e00f      	b.n	8004fbc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	bf0c      	ite	eq
 8004fac:	2301      	moveq	r3, #1
 8004fae:	2300      	movne	r3, #0
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	79fb      	ldrb	r3, [r7, #7]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d09f      	beq.n	8004efa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3740      	adds	r7, #64	; 0x40
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b095      	sub	sp, #84	; 0x54
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	330c      	adds	r3, #12
 8004fd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd6:	e853 3f00 	ldrex	r3, [r3]
 8004fda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	330c      	adds	r3, #12
 8004fea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fec:	643a      	str	r2, [r7, #64]	; 0x40
 8004fee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ff2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ff4:	e841 2300 	strex	r3, r2, [r1]
 8004ff8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1e5      	bne.n	8004fcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3314      	adds	r3, #20
 8005006:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005008:	6a3b      	ldr	r3, [r7, #32]
 800500a:	e853 3f00 	ldrex	r3, [r3]
 800500e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	f023 0301 	bic.w	r3, r3, #1
 8005016:	64bb      	str	r3, [r7, #72]	; 0x48
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3314      	adds	r3, #20
 800501e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005020:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005022:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005024:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005026:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005028:	e841 2300 	strex	r3, r2, [r1]
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1e5      	bne.n	8005000 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005038:	2b01      	cmp	r3, #1
 800503a:	d119      	bne.n	8005070 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	330c      	adds	r3, #12
 8005042:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	e853 3f00 	ldrex	r3, [r3]
 800504a:	60bb      	str	r3, [r7, #8]
   return(result);
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f023 0310 	bic.w	r3, r3, #16
 8005052:	647b      	str	r3, [r7, #68]	; 0x44
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	330c      	adds	r3, #12
 800505a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800505c:	61ba      	str	r2, [r7, #24]
 800505e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005060:	6979      	ldr	r1, [r7, #20]
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	e841 2300 	strex	r3, r2, [r1]
 8005068:	613b      	str	r3, [r7, #16]
   return(result);
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1e5      	bne.n	800503c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2220      	movs	r2, #32
 8005074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800507e:	bf00      	nop
 8005080:	3754      	adds	r7, #84	; 0x54
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b084      	sub	sp, #16
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005096:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f7ff ff09 	bl	8004ebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050aa:	bf00      	nop
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b085      	sub	sp, #20
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b21      	cmp	r3, #33	; 0x21
 80050c4:	d13e      	bne.n	8005144 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ce:	d114      	bne.n	80050fa <UART_Transmit_IT+0x48>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d110      	bne.n	80050fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	881b      	ldrh	r3, [r3, #0]
 80050e2:	461a      	mov	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	1c9a      	adds	r2, r3, #2
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	621a      	str	r2, [r3, #32]
 80050f8:	e008      	b.n	800510c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	1c59      	adds	r1, r3, #1
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6211      	str	r1, [r2, #32]
 8005104:	781a      	ldrb	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005110:	b29b      	uxth	r3, r3
 8005112:	3b01      	subs	r3, #1
 8005114:	b29b      	uxth	r3, r3
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	4619      	mov	r1, r3
 800511a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10f      	bne.n	8005140 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68da      	ldr	r2, [r3, #12]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800512e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68da      	ldr	r2, [r3, #12]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800513e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005140:	2300      	movs	r3, #0
 8005142:	e000      	b.n	8005146 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005144:	2302      	movs	r3, #2
  }
}
 8005146:	4618      	mov	r0, r3
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b082      	sub	sp, #8
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68da      	ldr	r2, [r3, #12]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005168:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2220      	movs	r2, #32
 800516e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff fe8e 	bl	8004e94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b08c      	sub	sp, #48	; 0x30
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b22      	cmp	r3, #34	; 0x22
 8005194:	f040 80ab 	bne.w	80052ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a0:	d117      	bne.n	80051d2 <UART_Receive_IT+0x50>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d113      	bne.n	80051d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051aa:	2300      	movs	r3, #0
 80051ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ca:	1c9a      	adds	r2, r3, #2
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	629a      	str	r2, [r3, #40]	; 0x28
 80051d0:	e026      	b.n	8005220 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80051d8:	2300      	movs	r3, #0
 80051da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e4:	d007      	beq.n	80051f6 <UART_Receive_IT+0x74>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10a      	bne.n	8005204 <UART_Receive_IT+0x82>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d106      	bne.n	8005204 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005200:	701a      	strb	r2, [r3, #0]
 8005202:	e008      	b.n	8005216 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	b2db      	uxtb	r3, r3
 800520c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005210:	b2da      	uxtb	r2, r3
 8005212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005214:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521a:	1c5a      	adds	r2, r3, #1
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005224:	b29b      	uxth	r3, r3
 8005226:	3b01      	subs	r3, #1
 8005228:	b29b      	uxth	r3, r3
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	4619      	mov	r1, r3
 800522e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005230:	2b00      	cmp	r3, #0
 8005232:	d15a      	bne.n	80052ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0220 	bic.w	r2, r2, #32
 8005242:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005252:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	695a      	ldr	r2, [r3, #20]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0201 	bic.w	r2, r2, #1
 8005262:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2220      	movs	r2, #32
 8005268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005270:	2b01      	cmp	r3, #1
 8005272:	d135      	bne.n	80052e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	330c      	adds	r3, #12
 8005280:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	e853 3f00 	ldrex	r3, [r3]
 8005288:	613b      	str	r3, [r7, #16]
   return(result);
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	f023 0310 	bic.w	r3, r3, #16
 8005290:	627b      	str	r3, [r7, #36]	; 0x24
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	330c      	adds	r3, #12
 8005298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800529a:	623a      	str	r2, [r7, #32]
 800529c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529e:	69f9      	ldr	r1, [r7, #28]
 80052a0:	6a3a      	ldr	r2, [r7, #32]
 80052a2:	e841 2300 	strex	r3, r2, [r1]
 80052a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1e5      	bne.n	800527a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0310 	and.w	r3, r3, #16
 80052b8:	2b10      	cmp	r3, #16
 80052ba:	d10a      	bne.n	80052d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052bc:	2300      	movs	r3, #0
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	60fb      	str	r3, [r7, #12]
 80052d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052d6:	4619      	mov	r1, r3
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f7ff fdf9 	bl	8004ed0 <HAL_UARTEx_RxEventCallback>
 80052de:	e002      	b.n	80052e6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7ff fde1 	bl	8004ea8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	e002      	b.n	80052f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80052ea:	2300      	movs	r3, #0
 80052ec:	e000      	b.n	80052f0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80052ee:	2302      	movs	r3, #2
  }
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3730      	adds	r7, #48	; 0x30
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052fc:	b09f      	sub	sp, #124	; 0x7c
 80052fe:	af00      	add	r7, sp, #0
 8005300:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800530c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800530e:	68d9      	ldr	r1, [r3, #12]
 8005310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	ea40 0301 	orr.w	r3, r0, r1
 8005318:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800531a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800531c:	689a      	ldr	r2, [r3, #8]
 800531e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	431a      	orrs	r2, r3
 8005324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	431a      	orrs	r2, r3
 800532a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	4313      	orrs	r3, r2
 8005330:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800533c:	f021 010c 	bic.w	r1, r1, #12
 8005340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005346:	430b      	orrs	r3, r1
 8005348:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800534a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005356:	6999      	ldr	r1, [r3, #24]
 8005358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	ea40 0301 	orr.w	r3, r0, r1
 8005360:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	4bc5      	ldr	r3, [pc, #788]	; (800567c <UART_SetConfig+0x384>)
 8005368:	429a      	cmp	r2, r3
 800536a:	d004      	beq.n	8005376 <UART_SetConfig+0x7e>
 800536c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	4bc3      	ldr	r3, [pc, #780]	; (8005680 <UART_SetConfig+0x388>)
 8005372:	429a      	cmp	r2, r3
 8005374:	d103      	bne.n	800537e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005376:	f7fe ff6d 	bl	8004254 <HAL_RCC_GetPCLK2Freq>
 800537a:	6778      	str	r0, [r7, #116]	; 0x74
 800537c:	e002      	b.n	8005384 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800537e:	f7fe ff55 	bl	800422c <HAL_RCC_GetPCLK1Freq>
 8005382:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800538c:	f040 80b6 	bne.w	80054fc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005390:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005392:	461c      	mov	r4, r3
 8005394:	f04f 0500 	mov.w	r5, #0
 8005398:	4622      	mov	r2, r4
 800539a:	462b      	mov	r3, r5
 800539c:	1891      	adds	r1, r2, r2
 800539e:	6439      	str	r1, [r7, #64]	; 0x40
 80053a0:	415b      	adcs	r3, r3
 80053a2:	647b      	str	r3, [r7, #68]	; 0x44
 80053a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053a8:	1912      	adds	r2, r2, r4
 80053aa:	eb45 0303 	adc.w	r3, r5, r3
 80053ae:	f04f 0000 	mov.w	r0, #0
 80053b2:	f04f 0100 	mov.w	r1, #0
 80053b6:	00d9      	lsls	r1, r3, #3
 80053b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053bc:	00d0      	lsls	r0, r2, #3
 80053be:	4602      	mov	r2, r0
 80053c0:	460b      	mov	r3, r1
 80053c2:	1911      	adds	r1, r2, r4
 80053c4:	6639      	str	r1, [r7, #96]	; 0x60
 80053c6:	416b      	adcs	r3, r5
 80053c8:	667b      	str	r3, [r7, #100]	; 0x64
 80053ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	461a      	mov	r2, r3
 80053d0:	f04f 0300 	mov.w	r3, #0
 80053d4:	1891      	adds	r1, r2, r2
 80053d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80053d8:	415b      	adcs	r3, r3
 80053da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80053e0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80053e4:	f7fa fef8 	bl	80001d8 <__aeabi_uldivmod>
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	4ba5      	ldr	r3, [pc, #660]	; (8005684 <UART_SetConfig+0x38c>)
 80053ee:	fba3 2302 	umull	r2, r3, r3, r2
 80053f2:	095b      	lsrs	r3, r3, #5
 80053f4:	011e      	lsls	r6, r3, #4
 80053f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053f8:	461c      	mov	r4, r3
 80053fa:	f04f 0500 	mov.w	r5, #0
 80053fe:	4622      	mov	r2, r4
 8005400:	462b      	mov	r3, r5
 8005402:	1891      	adds	r1, r2, r2
 8005404:	6339      	str	r1, [r7, #48]	; 0x30
 8005406:	415b      	adcs	r3, r3
 8005408:	637b      	str	r3, [r7, #52]	; 0x34
 800540a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800540e:	1912      	adds	r2, r2, r4
 8005410:	eb45 0303 	adc.w	r3, r5, r3
 8005414:	f04f 0000 	mov.w	r0, #0
 8005418:	f04f 0100 	mov.w	r1, #0
 800541c:	00d9      	lsls	r1, r3, #3
 800541e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005422:	00d0      	lsls	r0, r2, #3
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	1911      	adds	r1, r2, r4
 800542a:	65b9      	str	r1, [r7, #88]	; 0x58
 800542c:	416b      	adcs	r3, r5
 800542e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	461a      	mov	r2, r3
 8005436:	f04f 0300 	mov.w	r3, #0
 800543a:	1891      	adds	r1, r2, r2
 800543c:	62b9      	str	r1, [r7, #40]	; 0x28
 800543e:	415b      	adcs	r3, r3
 8005440:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005442:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005446:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800544a:	f7fa fec5 	bl	80001d8 <__aeabi_uldivmod>
 800544e:	4602      	mov	r2, r0
 8005450:	460b      	mov	r3, r1
 8005452:	4b8c      	ldr	r3, [pc, #560]	; (8005684 <UART_SetConfig+0x38c>)
 8005454:	fba3 1302 	umull	r1, r3, r3, r2
 8005458:	095b      	lsrs	r3, r3, #5
 800545a:	2164      	movs	r1, #100	; 0x64
 800545c:	fb01 f303 	mul.w	r3, r1, r3
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	00db      	lsls	r3, r3, #3
 8005464:	3332      	adds	r3, #50	; 0x32
 8005466:	4a87      	ldr	r2, [pc, #540]	; (8005684 <UART_SetConfig+0x38c>)
 8005468:	fba2 2303 	umull	r2, r3, r2, r3
 800546c:	095b      	lsrs	r3, r3, #5
 800546e:	005b      	lsls	r3, r3, #1
 8005470:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005474:	441e      	add	r6, r3
 8005476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005478:	4618      	mov	r0, r3
 800547a:	f04f 0100 	mov.w	r1, #0
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	1894      	adds	r4, r2, r2
 8005484:	623c      	str	r4, [r7, #32]
 8005486:	415b      	adcs	r3, r3
 8005488:	627b      	str	r3, [r7, #36]	; 0x24
 800548a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800548e:	1812      	adds	r2, r2, r0
 8005490:	eb41 0303 	adc.w	r3, r1, r3
 8005494:	f04f 0400 	mov.w	r4, #0
 8005498:	f04f 0500 	mov.w	r5, #0
 800549c:	00dd      	lsls	r5, r3, #3
 800549e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80054a2:	00d4      	lsls	r4, r2, #3
 80054a4:	4622      	mov	r2, r4
 80054a6:	462b      	mov	r3, r5
 80054a8:	1814      	adds	r4, r2, r0
 80054aa:	653c      	str	r4, [r7, #80]	; 0x50
 80054ac:	414b      	adcs	r3, r1
 80054ae:	657b      	str	r3, [r7, #84]	; 0x54
 80054b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	461a      	mov	r2, r3
 80054b6:	f04f 0300 	mov.w	r3, #0
 80054ba:	1891      	adds	r1, r2, r2
 80054bc:	61b9      	str	r1, [r7, #24]
 80054be:	415b      	adcs	r3, r3
 80054c0:	61fb      	str	r3, [r7, #28]
 80054c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80054ca:	f7fa fe85 	bl	80001d8 <__aeabi_uldivmod>
 80054ce:	4602      	mov	r2, r0
 80054d0:	460b      	mov	r3, r1
 80054d2:	4b6c      	ldr	r3, [pc, #432]	; (8005684 <UART_SetConfig+0x38c>)
 80054d4:	fba3 1302 	umull	r1, r3, r3, r2
 80054d8:	095b      	lsrs	r3, r3, #5
 80054da:	2164      	movs	r1, #100	; 0x64
 80054dc:	fb01 f303 	mul.w	r3, r1, r3
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	3332      	adds	r3, #50	; 0x32
 80054e6:	4a67      	ldr	r2, [pc, #412]	; (8005684 <UART_SetConfig+0x38c>)
 80054e8:	fba2 2303 	umull	r2, r3, r2, r3
 80054ec:	095b      	lsrs	r3, r3, #5
 80054ee:	f003 0207 	and.w	r2, r3, #7
 80054f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4432      	add	r2, r6
 80054f8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054fa:	e0b9      	b.n	8005670 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054fe:	461c      	mov	r4, r3
 8005500:	f04f 0500 	mov.w	r5, #0
 8005504:	4622      	mov	r2, r4
 8005506:	462b      	mov	r3, r5
 8005508:	1891      	adds	r1, r2, r2
 800550a:	6139      	str	r1, [r7, #16]
 800550c:	415b      	adcs	r3, r3
 800550e:	617b      	str	r3, [r7, #20]
 8005510:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005514:	1912      	adds	r2, r2, r4
 8005516:	eb45 0303 	adc.w	r3, r5, r3
 800551a:	f04f 0000 	mov.w	r0, #0
 800551e:	f04f 0100 	mov.w	r1, #0
 8005522:	00d9      	lsls	r1, r3, #3
 8005524:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005528:	00d0      	lsls	r0, r2, #3
 800552a:	4602      	mov	r2, r0
 800552c:	460b      	mov	r3, r1
 800552e:	eb12 0804 	adds.w	r8, r2, r4
 8005532:	eb43 0905 	adc.w	r9, r3, r5
 8005536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	4618      	mov	r0, r3
 800553c:	f04f 0100 	mov.w	r1, #0
 8005540:	f04f 0200 	mov.w	r2, #0
 8005544:	f04f 0300 	mov.w	r3, #0
 8005548:	008b      	lsls	r3, r1, #2
 800554a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800554e:	0082      	lsls	r2, r0, #2
 8005550:	4640      	mov	r0, r8
 8005552:	4649      	mov	r1, r9
 8005554:	f7fa fe40 	bl	80001d8 <__aeabi_uldivmod>
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	4b49      	ldr	r3, [pc, #292]	; (8005684 <UART_SetConfig+0x38c>)
 800555e:	fba3 2302 	umull	r2, r3, r3, r2
 8005562:	095b      	lsrs	r3, r3, #5
 8005564:	011e      	lsls	r6, r3, #4
 8005566:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005568:	4618      	mov	r0, r3
 800556a:	f04f 0100 	mov.w	r1, #0
 800556e:	4602      	mov	r2, r0
 8005570:	460b      	mov	r3, r1
 8005572:	1894      	adds	r4, r2, r2
 8005574:	60bc      	str	r4, [r7, #8]
 8005576:	415b      	adcs	r3, r3
 8005578:	60fb      	str	r3, [r7, #12]
 800557a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800557e:	1812      	adds	r2, r2, r0
 8005580:	eb41 0303 	adc.w	r3, r1, r3
 8005584:	f04f 0400 	mov.w	r4, #0
 8005588:	f04f 0500 	mov.w	r5, #0
 800558c:	00dd      	lsls	r5, r3, #3
 800558e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005592:	00d4      	lsls	r4, r2, #3
 8005594:	4622      	mov	r2, r4
 8005596:	462b      	mov	r3, r5
 8005598:	1814      	adds	r4, r2, r0
 800559a:	64bc      	str	r4, [r7, #72]	; 0x48
 800559c:	414b      	adcs	r3, r1
 800559e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	4618      	mov	r0, r3
 80055a6:	f04f 0100 	mov.w	r1, #0
 80055aa:	f04f 0200 	mov.w	r2, #0
 80055ae:	f04f 0300 	mov.w	r3, #0
 80055b2:	008b      	lsls	r3, r1, #2
 80055b4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80055b8:	0082      	lsls	r2, r0, #2
 80055ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80055be:	f7fa fe0b 	bl	80001d8 <__aeabi_uldivmod>
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	4b2f      	ldr	r3, [pc, #188]	; (8005684 <UART_SetConfig+0x38c>)
 80055c8:	fba3 1302 	umull	r1, r3, r3, r2
 80055cc:	095b      	lsrs	r3, r3, #5
 80055ce:	2164      	movs	r1, #100	; 0x64
 80055d0:	fb01 f303 	mul.w	r3, r1, r3
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	3332      	adds	r3, #50	; 0x32
 80055da:	4a2a      	ldr	r2, [pc, #168]	; (8005684 <UART_SetConfig+0x38c>)
 80055dc:	fba2 2303 	umull	r2, r3, r2, r3
 80055e0:	095b      	lsrs	r3, r3, #5
 80055e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055e6:	441e      	add	r6, r3
 80055e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055ea:	4618      	mov	r0, r3
 80055ec:	f04f 0100 	mov.w	r1, #0
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	1894      	adds	r4, r2, r2
 80055f6:	603c      	str	r4, [r7, #0]
 80055f8:	415b      	adcs	r3, r3
 80055fa:	607b      	str	r3, [r7, #4]
 80055fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005600:	1812      	adds	r2, r2, r0
 8005602:	eb41 0303 	adc.w	r3, r1, r3
 8005606:	f04f 0400 	mov.w	r4, #0
 800560a:	f04f 0500 	mov.w	r5, #0
 800560e:	00dd      	lsls	r5, r3, #3
 8005610:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005614:	00d4      	lsls	r4, r2, #3
 8005616:	4622      	mov	r2, r4
 8005618:	462b      	mov	r3, r5
 800561a:	eb12 0a00 	adds.w	sl, r2, r0
 800561e:	eb43 0b01 	adc.w	fp, r3, r1
 8005622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	4618      	mov	r0, r3
 8005628:	f04f 0100 	mov.w	r1, #0
 800562c:	f04f 0200 	mov.w	r2, #0
 8005630:	f04f 0300 	mov.w	r3, #0
 8005634:	008b      	lsls	r3, r1, #2
 8005636:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800563a:	0082      	lsls	r2, r0, #2
 800563c:	4650      	mov	r0, sl
 800563e:	4659      	mov	r1, fp
 8005640:	f7fa fdca 	bl	80001d8 <__aeabi_uldivmod>
 8005644:	4602      	mov	r2, r0
 8005646:	460b      	mov	r3, r1
 8005648:	4b0e      	ldr	r3, [pc, #56]	; (8005684 <UART_SetConfig+0x38c>)
 800564a:	fba3 1302 	umull	r1, r3, r3, r2
 800564e:	095b      	lsrs	r3, r3, #5
 8005650:	2164      	movs	r1, #100	; 0x64
 8005652:	fb01 f303 	mul.w	r3, r1, r3
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	011b      	lsls	r3, r3, #4
 800565a:	3332      	adds	r3, #50	; 0x32
 800565c:	4a09      	ldr	r2, [pc, #36]	; (8005684 <UART_SetConfig+0x38c>)
 800565e:	fba2 2303 	umull	r2, r3, r2, r3
 8005662:	095b      	lsrs	r3, r3, #5
 8005664:	f003 020f 	and.w	r2, r3, #15
 8005668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4432      	add	r2, r6
 800566e:	609a      	str	r2, [r3, #8]
}
 8005670:	bf00      	nop
 8005672:	377c      	adds	r7, #124	; 0x7c
 8005674:	46bd      	mov	sp, r7
 8005676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800567a:	bf00      	nop
 800567c:	40011000 	.word	0x40011000
 8005680:	40011400 	.word	0x40011400
 8005684:	51eb851f 	.word	0x51eb851f

08005688 <__libc_init_array>:
 8005688:	b570      	push	{r4, r5, r6, lr}
 800568a:	4d0d      	ldr	r5, [pc, #52]	; (80056c0 <__libc_init_array+0x38>)
 800568c:	4c0d      	ldr	r4, [pc, #52]	; (80056c4 <__libc_init_array+0x3c>)
 800568e:	1b64      	subs	r4, r4, r5
 8005690:	10a4      	asrs	r4, r4, #2
 8005692:	2600      	movs	r6, #0
 8005694:	42a6      	cmp	r6, r4
 8005696:	d109      	bne.n	80056ac <__libc_init_array+0x24>
 8005698:	4d0b      	ldr	r5, [pc, #44]	; (80056c8 <__libc_init_array+0x40>)
 800569a:	4c0c      	ldr	r4, [pc, #48]	; (80056cc <__libc_init_array+0x44>)
 800569c:	f000 f82e 	bl	80056fc <_init>
 80056a0:	1b64      	subs	r4, r4, r5
 80056a2:	10a4      	asrs	r4, r4, #2
 80056a4:	2600      	movs	r6, #0
 80056a6:	42a6      	cmp	r6, r4
 80056a8:	d105      	bne.n	80056b6 <__libc_init_array+0x2e>
 80056aa:	bd70      	pop	{r4, r5, r6, pc}
 80056ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80056b0:	4798      	blx	r3
 80056b2:	3601      	adds	r6, #1
 80056b4:	e7ee      	b.n	8005694 <__libc_init_array+0xc>
 80056b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80056ba:	4798      	blx	r3
 80056bc:	3601      	adds	r6, #1
 80056be:	e7f2      	b.n	80056a6 <__libc_init_array+0x1e>
 80056c0:	08005f90 	.word	0x08005f90
 80056c4:	08005f90 	.word	0x08005f90
 80056c8:	08005f90 	.word	0x08005f90
 80056cc:	08005f94 	.word	0x08005f94

080056d0 <memcmp>:
 80056d0:	b530      	push	{r4, r5, lr}
 80056d2:	3901      	subs	r1, #1
 80056d4:	2400      	movs	r4, #0
 80056d6:	42a2      	cmp	r2, r4
 80056d8:	d101      	bne.n	80056de <memcmp+0xe>
 80056da:	2000      	movs	r0, #0
 80056dc:	e005      	b.n	80056ea <memcmp+0x1a>
 80056de:	5d03      	ldrb	r3, [r0, r4]
 80056e0:	3401      	adds	r4, #1
 80056e2:	5d0d      	ldrb	r5, [r1, r4]
 80056e4:	42ab      	cmp	r3, r5
 80056e6:	d0f6      	beq.n	80056d6 <memcmp+0x6>
 80056e8:	1b58      	subs	r0, r3, r5
 80056ea:	bd30      	pop	{r4, r5, pc}

080056ec <memset>:
 80056ec:	4402      	add	r2, r0
 80056ee:	4603      	mov	r3, r0
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d100      	bne.n	80056f6 <memset+0xa>
 80056f4:	4770      	bx	lr
 80056f6:	f803 1b01 	strb.w	r1, [r3], #1
 80056fa:	e7f9      	b.n	80056f0 <memset+0x4>

080056fc <_init>:
 80056fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056fe:	bf00      	nop
 8005700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005702:	bc08      	pop	{r3}
 8005704:	469e      	mov	lr, r3
 8005706:	4770      	bx	lr

08005708 <_fini>:
 8005708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570a:	bf00      	nop
 800570c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800570e:	bc08      	pop	{r3}
 8005710:	469e      	mov	lr, r3
 8005712:	4770      	bx	lr
