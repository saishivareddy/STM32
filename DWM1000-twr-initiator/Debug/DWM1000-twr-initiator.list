
DWM1000-twr-initiator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004750  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015b0  080048e8  080048e8  000148e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e98  08005e98  0002004c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e98  08005e98  00015e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ea0  08005ea0  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ea0  08005ea0  00015ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ea4  08005ea4  00015ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08005ea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  2000004c  08005ef4  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005a4  08005ef4  000205a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001133f  00000000  00000000  000200bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ed4  00000000  00000000  000313fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001110  00000000  00000000  000342d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d0b  00000000  00000000  000353e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a840  00000000  00000000  000360f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000165b9  00000000  00000000  00050933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091ce5  00000000  00000000  00066eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004448  00000000  00000000  000f8bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000fd01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000004c 	.word	0x2000004c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080048d0 	.word	0x080048d0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000050 	.word	0x20000050
 80001d4:	080048d0 	.word	0x080048d0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b087      	sub	sp, #28
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 80004e0:	2300      	movs	r3, #0
 80004e2:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 80004e4:	4b9f      	ldr	r3, [pc, #636]	; (8000764 <dwt_initialise+0x290>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2200      	movs	r2, #0
 80004ea:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 80004ec:	4b9d      	ldr	r3, [pc, #628]	; (8000764 <dwt_initialise+0x290>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2200      	movs	r2, #0
 80004f2:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 80004f4:	4b9b      	ldr	r3, [pc, #620]	; (8000764 <dwt_initialise+0x290>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2200      	movs	r2, #0
 80004fa:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 80004fc:	4b99      	ldr	r3, [pc, #612]	; (8000764 <dwt_initialise+0x290>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2200      	movs	r2, #0
 8000502:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 8000504:	4b97      	ldr	r3, [pc, #604]	; (8000764 <dwt_initialise+0x290>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2200      	movs	r2, #0
 800050a:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 800050c:	4b95      	ldr	r3, [pc, #596]	; (8000764 <dwt_initialise+0x290>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2200      	movs	r2, #0
 8000512:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 8000514:	4b93      	ldr	r3, [pc, #588]	; (8000764 <dwt_initialise+0x290>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2200      	movs	r2, #0
 800051a:	635a      	str	r2, [r3, #52]	; 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 800051c:	f000 f926 	bl	800076c <dwt_readdevid>
 8000520:	4603      	mov	r3, r0
 8000522:	4a91      	ldr	r2, [pc, #580]	; (8000768 <dwt_initialise+0x294>)
 8000524:	4293      	cmp	r3, r2
 8000526:	d002      	beq.n	800052e <dwt_initialise+0x5a>
    {
        return DWT_ERROR ;
 8000528:	f04f 33ff 	mov.w	r3, #4294967295
 800052c:	e115      	b.n	800075a <dwt_initialise+0x286>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	f003 0302 	and.w	r3, r3, #2
 8000534:	2b00      	cmp	r3, #0
 8000536:	d101      	bne.n	800053c <dwt_initialise+0x68>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 8000538:	f000 fd64 	bl	8001004 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	f003 0302 	and.w	r3, r3, #2
 8000542:	2b00      	cmp	r3, #0
 8000544:	d004      	beq.n	8000550 <dwt_initialise+0x7c>
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800054c:	2b00      	cmp	r3, #0
 800054e:	d102      	bne.n	8000556 <dwt_initialise+0x82>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8000550:	2000      	movs	r0, #0
 8000552:	f000 fc63 	bl	8000e1c <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 8000556:	2204      	movs	r2, #4
 8000558:	2100      	movs	r1, #0
 800055a:	2024      	movs	r0, #36	; 0x24
 800055c:	f000 fba7 	bl	8000cae <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	2b00      	cmp	r3, #0
 8000568:	d116      	bne.n	8000598 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 800056a:	2004      	movs	r0, #4
 800056c:	f000 fbf5 	bl	8000d5a <_dwt_otpread>
 8000570:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 8000572:	693b      	ldr	r3, [r7, #16]
 8000574:	b2db      	uxtb	r3, r3
 8000576:	2b00      	cmp	r3, #0
 8000578:	d01f      	beq.n	80005ba <dwt_initialise+0xe6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 800057a:	2202      	movs	r2, #2
 800057c:	2112      	movs	r1, #18
 800057e:	202d      	movs	r0, #45	; 0x2d
 8000580:	f000 fb95 	bl	8000cae <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8000584:	4b77      	ldr	r3, [pc, #476]	; (8000764 <dwt_initialise+0x290>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	8ada      	ldrh	r2, [r3, #22]
 800058a:	4b76      	ldr	r3, [pc, #472]	; (8000764 <dwt_initialise+0x290>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000592:	b292      	uxth	r2, r2
 8000594:	82da      	strh	r2, [r3, #22]
 8000596:	e010      	b.n	80005ba <dwt_initialise+0xe6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 8000598:	2130      	movs	r1, #48	; 0x30
 800059a:	2028      	movs	r0, #40	; 0x28
 800059c:	f000 fb43 	bl	8000c26 <dwt_read32bitoffsetreg>
 80005a0:	4603      	mov	r3, r0
 80005a2:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 80005a6:	d008      	beq.n	80005ba <dwt_initialise+0xe6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 80005a8:	4b6e      	ldr	r3, [pc, #440]	; (8000764 <dwt_initialise+0x290>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	8ada      	ldrh	r2, [r3, #22]
 80005ae:	4b6d      	ldr	r3, [pc, #436]	; (8000764 <dwt_initialise+0x290>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80005b6:	b292      	uxth	r2, r2
 80005b8:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	f003 0302 	and.w	r3, r3, #2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d009      	beq.n	80005d8 <dwt_initialise+0x104>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f003 0302 	and.w	r3, r3, #2
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d011      	beq.n	80005f2 <dwt_initialise+0x11e>
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	f003 0308 	and.w	r3, r3, #8
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d00c      	beq.n	80005f2 <dwt_initialise+0x11e>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 80005d8:	201e      	movs	r0, #30
 80005da:	f000 fbbe 	bl	8000d5a <_dwt_otpread>
 80005de:	4603      	mov	r3, r0
 80005e0:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 80005e2:	8afb      	ldrh	r3, [r7, #22]
 80005e4:	0a1b      	lsrs	r3, r3, #8
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	4b5e      	ldr	r3, [pc, #376]	; (8000764 <dwt_initialise+0x290>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	b2d2      	uxtb	r2, r2
 80005ee:	72da      	strb	r2, [r3, #11]
 80005f0:	e003      	b.n	80005fa <dwt_initialise+0x126>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 80005f2:	4b5c      	ldr	r3, [pc, #368]	; (8000764 <dwt_initialise+0x290>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2200      	movs	r2, #0
 80005f8:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	f003 0302 	and.w	r3, r3, #2
 8000600:	2b00      	cmp	r3, #0
 8000602:	d10b      	bne.n	800061c <dwt_initialise+0x148>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 8000604:	8afb      	ldrh	r3, [r7, #22]
 8000606:	f003 031f 	and.w	r3, r3, #31
 800060a:	2b00      	cmp	r3, #0
 800060c:	d101      	bne.n	8000612 <dwt_initialise+0x13e>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 800060e:	2310      	movs	r3, #16
 8000610:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 8000612:	8afb      	ldrh	r3, [r7, #22]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	4618      	mov	r0, r3
 8000618:	f000 fd1a 	bl	8001050 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f003 0310 	and.w	r3, r3, #16
 8000622:	2b00      	cmp	r3, #0
 8000624:	d007      	beq.n	8000636 <dwt_initialise+0x162>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 8000626:	4b4f      	ldr	r3, [pc, #316]	; (8000764 <dwt_initialise+0x290>)
 8000628:	681c      	ldr	r4, [r3, #0]
 800062a:	2006      	movs	r0, #6
 800062c:	f000 fb95 	bl	8000d5a <_dwt_otpread>
 8000630:	4603      	mov	r3, r0
 8000632:	6023      	str	r3, [r4, #0]
 8000634:	e003      	b.n	800063e <dwt_initialise+0x16a>
    }
    else
    {
        pdw1000local->partID = 0;
 8000636:	4b4b      	ldr	r3, [pc, #300]	; (8000764 <dwt_initialise+0x290>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f003 0320 	and.w	r3, r3, #32
 8000644:	2b00      	cmp	r3, #0
 8000646:	d007      	beq.n	8000658 <dwt_initialise+0x184>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8000648:	4b46      	ldr	r3, [pc, #280]	; (8000764 <dwt_initialise+0x290>)
 800064a:	681c      	ldr	r4, [r3, #0]
 800064c:	2007      	movs	r0, #7
 800064e:	f000 fb84 	bl	8000d5a <_dwt_otpread>
 8000652:	4603      	mov	r3, r0
 8000654:	6063      	str	r3, [r4, #4]
 8000656:	e003      	b.n	8000660 <dwt_initialise+0x18c>
    }
    else
    {
        pdw1000local->lotID = 0;
 8000658:	4b42      	ldr	r3, [pc, #264]	; (8000764 <dwt_initialise+0x290>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2200      	movs	r2, #0
 800065e:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000666:	2b00      	cmp	r3, #0
 8000668:	d008      	beq.n	800067c <dwt_initialise+0x1a8>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 800066a:	2008      	movs	r0, #8
 800066c:	f000 fb75 	bl	8000d5a <_dwt_otpread>
 8000670:	4602      	mov	r2, r0
 8000672:	4b3c      	ldr	r3, [pc, #240]	; (8000764 <dwt_initialise+0x290>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	b2d2      	uxtb	r2, r2
 8000678:	721a      	strb	r2, [r3, #8]
 800067a:	e003      	b.n	8000684 <dwt_initialise+0x1b0>
    }
    else
    {
        pdw1000local->vBatP = 0;
 800067c:	4b39      	ldr	r3, [pc, #228]	; (8000764 <dwt_initialise+0x290>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2200      	movs	r2, #0
 8000682:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800068a:	2b00      	cmp	r3, #0
 800068c:	d008      	beq.n	80006a0 <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 800068e:	2009      	movs	r0, #9
 8000690:	f000 fb63 	bl	8000d5a <_dwt_otpread>
 8000694:	4602      	mov	r2, r0
 8000696:	4b33      	ldr	r3, [pc, #204]	; (8000764 <dwt_initialise+0x290>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	b2d2      	uxtb	r2, r2
 800069c:	725a      	strb	r2, [r3, #9]
 800069e:	e003      	b.n	80006a8 <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 80006a0:	4b30      	ldr	r3, [pc, #192]	; (8000764 <dwt_initialise+0x290>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2200      	movs	r2, #0
 80006a6:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f003 0302 	and.w	r3, r3, #2
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d121      	bne.n	80006f6 <dwt_initialise+0x222>
    {
        if(DWT_LOADUCODE & config)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	f003 0301 	and.w	r3, r3, #1
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d00b      	beq.n	80006d4 <dwt_initialise+0x200>
        {
            _dwt_loaducodefromrom();
 80006bc:	f000 fb9a 	bl	8000df4 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 80006c0:	4b28      	ldr	r3, [pc, #160]	; (8000764 <dwt_initialise+0x290>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	8ada      	ldrh	r2, [r3, #22]
 80006c6:	4b27      	ldr	r3, [pc, #156]	; (8000764 <dwt_initialise+0x290>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80006ce:	b292      	uxth	r2, r2
 80006d0:	82da      	strh	r2, [r3, #22]
 80006d2:	e01e      	b.n	8000712 <dwt_initialise+0x23e>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 80006d4:	2105      	movs	r1, #5
 80006d6:	2036      	movs	r0, #54	; 0x36
 80006d8:	f000 facc 	bl	8000c74 <dwt_read16bitoffsetreg>
 80006dc:	4603      	mov	r3, r0
 80006de:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 80006e0:	89fb      	ldrh	r3, [r7, #14]
 80006e2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80006e6:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 80006e8:	89fb      	ldrh	r3, [r7, #14]
 80006ea:	461a      	mov	r2, r3
 80006ec:	2105      	movs	r1, #5
 80006ee:	2036      	movs	r0, #54	; 0x36
 80006f0:	f000 faf0 	bl	8000cd4 <dwt_write16bitoffsetreg>
 80006f4:	e00d      	b.n	8000712 <dwt_initialise+0x23e>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f003 0304 	and.w	r3, r3, #4
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d108      	bne.n	8000712 <dwt_initialise+0x23e>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 8000700:	4b18      	ldr	r3, [pc, #96]	; (8000764 <dwt_initialise+0x290>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	8ada      	ldrh	r2, [r3, #22]
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <dwt_initialise+0x290>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800070e:	b292      	uxth	r2, r2
 8000710:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8000712:	2001      	movs	r0, #1
 8000714:	f000 fb82 	bl	8000e1c <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 8000718:	2200      	movs	r2, #0
 800071a:	210a      	movs	r1, #10
 800071c:	202c      	movs	r0, #44	; 0x2c
 800071e:	f000 fac6 	bl	8000cae <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <dwt_initialise+0x290>)
 8000724:	681c      	ldr	r4, [r3, #0]
 8000726:	2100      	movs	r1, #0
 8000728:	2004      	movs	r0, #4
 800072a:	f000 fa7c 	bl	8000c26 <dwt_read32bitoffsetreg>
 800072e:	4603      	mov	r3, r0
 8000730:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <dwt_initialise+0x290>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	691b      	ldr	r3, [r3, #16]
 8000738:	0c1b      	lsrs	r3, r3, #16
 800073a:	b2da      	uxtb	r2, r3
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <dwt_initialise+0x290>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f002 0203 	and.w	r2, r2, #3
 8000744:	b2d2      	uxtb	r2, r2
 8000746:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <dwt_initialise+0x290>)
 800074a:	681c      	ldr	r4, [r3, #0]
 800074c:	2100      	movs	r1, #0
 800074e:	2008      	movs	r0, #8
 8000750:	f000 fa69 	bl	8000c26 <dwt_read32bitoffsetreg>
 8000754:	4603      	mov	r3, r0
 8000756:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 8000758:	2300      	movs	r3, #0

} // end dwt_initialise()
 800075a:	4618      	mov	r0, r3
 800075c:	371c      	adds	r7, #28
 800075e:	46bd      	mov	sp, r7
 8000760:	bd90      	pop	{r4, r7, pc}
 8000762:	bf00      	nop
 8000764:	20000000 	.word	0x20000000
 8000768:	deca0130 	.word	0xdeca0130

0800076c <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 8000770:	2100      	movs	r1, #0
 8000772:	2000      	movs	r0, #0
 8000774:	f000 fa57 	bl	8000c26 <dwt_read32bitoffsetreg>
 8000778:	4603      	mov	r3, r0
}
 800077a:	4618      	mov	r0, r3
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	795b      	ldrb	r3, [r3, #5]
 800079a:	461a      	mov	r2, r3
 800079c:	4ba1      	ldr	r3, [pc, #644]	; (8000a24 <dwt_configure+0x2a4>)
 800079e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007a2:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	785b      	ldrb	r3, [r3, #1]
 80007a8:	3b01      	subs	r3, #1
 80007aa:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 80007ac:	7cfb      	ldrb	r3, [r7, #19]
 80007ae:	2b04      	cmp	r3, #4
 80007b0:	d002      	beq.n	80007b8 <dwt_configure+0x38>
 80007b2:	7cfb      	ldrb	r3, [r7, #19]
 80007b4:	2b07      	cmp	r3, #7
 80007b6:	d101      	bne.n	80007bc <dwt_configure+0x3c>
 80007b8:	2301      	movs	r3, #1
 80007ba:	e000      	b.n	80007be <dwt_configure+0x3e>
 80007bc:	2300      	movs	r3, #0
 80007be:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	79db      	ldrb	r3, [r3, #7]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d10b      	bne.n	80007e0 <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 80007c8:	4b97      	ldr	r3, [pc, #604]	; (8000a28 <dwt_configure+0x2a8>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	691a      	ldr	r2, [r3, #16]
 80007ce:	4b96      	ldr	r3, [pc, #600]	; (8000a28 <dwt_configure+0x2a8>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80007d6:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 80007d8:	8abb      	ldrh	r3, [r7, #20]
 80007da:	08db      	lsrs	r3, r3, #3
 80007dc:	82bb      	strh	r3, [r7, #20]
 80007de:	e007      	b.n	80007f0 <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 80007e0:	4b91      	ldr	r3, [pc, #580]	; (8000a28 <dwt_configure+0x2a8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	691a      	ldr	r2, [r3, #16]
 80007e6:	4b90      	ldr	r3, [pc, #576]	; (8000a28 <dwt_configure+0x2a8>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80007ee:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 80007f0:	4b8d      	ldr	r3, [pc, #564]	; (8000a28 <dwt_configure+0x2a8>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	687a      	ldr	r2, [r7, #4]
 80007f6:	7a12      	ldrb	r2, [r2, #8]
 80007f8:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 80007fa:	4b8b      	ldr	r3, [pc, #556]	; (8000a28 <dwt_configure+0x2a8>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	691a      	ldr	r2, [r3, #16]
 8000800:	4b89      	ldr	r3, [pc, #548]	; (8000a28 <dwt_configure+0x2a8>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000808:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 800080a:	4b87      	ldr	r3, [pc, #540]	; (8000a28 <dwt_configure+0x2a8>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	6919      	ldr	r1, [r3, #16]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	7a1b      	ldrb	r3, [r3, #8]
 8000814:	041b      	lsls	r3, r3, #16
 8000816:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800081a:	4b83      	ldr	r3, [pc, #524]	; (8000a28 <dwt_configure+0x2a8>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	430a      	orrs	r2, r1
 8000820:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 8000822:	4b81      	ldr	r3, [pc, #516]	; (8000a28 <dwt_configure+0x2a8>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	691b      	ldr	r3, [r3, #16]
 8000828:	461a      	mov	r2, r3
 800082a:	2100      	movs	r1, #0
 800082c:	2004      	movs	r0, #4
 800082e:	f000 fa6d 	bl	8000d0c <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 8000832:	8abb      	ldrh	r3, [r7, #20]
 8000834:	461a      	mov	r2, r3
 8000836:	f642 0104 	movw	r1, #10244	; 0x2804
 800083a:	202e      	movs	r0, #46	; 0x2e
 800083c:	f000 fa4a 	bl	8000cd4 <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 8000840:	7cbb      	ldrb	r3, [r7, #18]
 8000842:	4618      	mov	r0, r3
 8000844:	f000 fab6 	bl	8000db4 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 8000848:	7cfb      	ldrb	r3, [r7, #19]
 800084a:	4a78      	ldr	r2, [pc, #480]	; (8000a2c <dwt_configure+0x2ac>)
 800084c:	5cd3      	ldrb	r3, [r2, r3]
 800084e:	461a      	mov	r2, r3
 8000850:	4b77      	ldr	r3, [pc, #476]	; (8000a30 <dwt_configure+0x2b0>)
 8000852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000856:	461a      	mov	r2, r3
 8000858:	2107      	movs	r1, #7
 800085a:	202b      	movs	r0, #43	; 0x2b
 800085c:	f000 fa56 	bl	8000d0c <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8000860:	7cfb      	ldrb	r3, [r7, #19]
 8000862:	4a72      	ldr	r2, [pc, #456]	; (8000a2c <dwt_configure+0x2ac>)
 8000864:	5cd3      	ldrb	r3, [r2, r3]
 8000866:	461a      	mov	r2, r3
 8000868:	4b72      	ldr	r3, [pc, #456]	; (8000a34 <dwt_configure+0x2b4>)
 800086a:	5c9b      	ldrb	r3, [r3, r2]
 800086c:	461a      	mov	r2, r3
 800086e:	210b      	movs	r1, #11
 8000870:	202b      	movs	r0, #43	; 0x2b
 8000872:	f000 fa1c 	bl	8000cae <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 8000876:	7c7b      	ldrb	r3, [r7, #17]
 8000878:	4a6f      	ldr	r2, [pc, #444]	; (8000a38 <dwt_configure+0x2b8>)
 800087a:	5cd3      	ldrb	r3, [r2, r3]
 800087c:	461a      	mov	r2, r3
 800087e:	210b      	movs	r1, #11
 8000880:	2028      	movs	r0, #40	; 0x28
 8000882:	f000 fa14 	bl	8000cae <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 8000886:	7cfb      	ldrb	r3, [r7, #19]
 8000888:	4a68      	ldr	r2, [pc, #416]	; (8000a2c <dwt_configure+0x2ac>)
 800088a:	5cd3      	ldrb	r3, [r2, r3]
 800088c:	461a      	mov	r2, r3
 800088e:	4b6b      	ldr	r3, [pc, #428]	; (8000a3c <dwt_configure+0x2bc>)
 8000890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000894:	461a      	mov	r2, r3
 8000896:	210c      	movs	r1, #12
 8000898:	2028      	movs	r0, #40	; 0x28
 800089a:	f000 fa37 	bl	8000d0c <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	79db      	ldrb	r3, [r3, #7]
 80008a2:	4618      	mov	r0, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	799b      	ldrb	r3, [r3, #6]
 80008a8:	4619      	mov	r1, r3
 80008aa:	4a65      	ldr	r2, [pc, #404]	; (8000a40 <dwt_configure+0x2c0>)
 80008ac:	0043      	lsls	r3, r0, #1
 80008ae:	440b      	add	r3, r1
 80008b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008b4:	461a      	mov	r2, r3
 80008b6:	2102      	movs	r1, #2
 80008b8:	2027      	movs	r0, #39	; 0x27
 80008ba:	f000 fa0b 	bl	8000cd4 <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 80008be:	7cbb      	ldrb	r3, [r7, #18]
 80008c0:	4a60      	ldr	r2, [pc, #384]	; (8000a44 <dwt_configure+0x2c4>)
 80008c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008c6:	461a      	mov	r2, r3
 80008c8:	2104      	movs	r1, #4
 80008ca:	2027      	movs	r0, #39	; 0x27
 80008cc:	f000 fa02 	bl	8000cd4 <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	79db      	ldrb	r3, [r3, #7]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d105      	bne.n	80008e4 <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 80008d8:	2264      	movs	r2, #100	; 0x64
 80008da:	2106      	movs	r1, #6
 80008dc:	2027      	movs	r0, #39	; 0x27
 80008de:	f000 f9f9 	bl	8000cd4 <dwt_write16bitoffsetreg>
 80008e2:	e018      	b.n	8000916 <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	789b      	ldrb	r3, [r3, #2]
 80008e8:	2b04      	cmp	r3, #4
 80008ea:	d10a      	bne.n	8000902 <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 80008ec:	2210      	movs	r2, #16
 80008ee:	2106      	movs	r1, #6
 80008f0:	2027      	movs	r0, #39	; 0x27
 80008f2:	f000 f9ef 	bl	8000cd4 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 80008f6:	2210      	movs	r2, #16
 80008f8:	2126      	movs	r1, #38	; 0x26
 80008fa:	2027      	movs	r0, #39	; 0x27
 80008fc:	f000 f9d7 	bl	8000cae <dwt_write8bitoffsetreg>
 8000900:	e009      	b.n	8000916 <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 8000902:	2220      	movs	r2, #32
 8000904:	2106      	movs	r1, #6
 8000906:	2027      	movs	r0, #39	; 0x27
 8000908:	f000 f9e4 	bl	8000cd4 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 800090c:	2228      	movs	r2, #40	; 0x28
 800090e:	2126      	movs	r1, #38	; 0x26
 8000910:	2027      	movs	r0, #39	; 0x27
 8000912:	f000 f9cc 	bl	8000cae <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 8000916:	7cbb      	ldrb	r3, [r7, #18]
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	78d2      	ldrb	r2, [r2, #3]
 800091c:	4611      	mov	r1, r2
 800091e:	4a4a      	ldr	r2, [pc, #296]	; (8000a48 <dwt_configure+0x2c8>)
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	440b      	add	r3, r1
 8000924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000928:	461a      	mov	r2, r3
 800092a:	2108      	movs	r1, #8
 800092c:	2027      	movs	r0, #39	; 0x27
 800092e:	f000 f9ed 	bl	8000d0c <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	895b      	ldrh	r3, [r3, #10]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d103      	bne.n	8000942 <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	f241 0241 	movw	r2, #4161	; 0x1041
 8000940:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	895b      	ldrh	r3, [r3, #10]
 8000946:	461a      	mov	r2, r3
 8000948:	2120      	movs	r1, #32
 800094a:	2027      	movs	r0, #39	; 0x27
 800094c:	f000 f9c2 	bl	8000cd4 <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 8000950:	4b3e      	ldr	r3, [pc, #248]	; (8000a4c <dwt_configure+0x2cc>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	461a      	mov	r2, r3
 8000956:	210c      	movs	r1, #12
 8000958:	2023      	movs	r0, #35	; 0x23
 800095a:	f000 f9d7 	bl	8000d0c <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 800095e:	7cbb      	ldrb	r3, [r7, #18]
 8000960:	4a3a      	ldr	r2, [pc, #232]	; (8000a4c <dwt_configure+0x2cc>)
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	4413      	add	r3, r2
 8000966:	889b      	ldrh	r3, [r3, #4]
 8000968:	461a      	mov	r2, r3
 800096a:	2104      	movs	r1, #4
 800096c:	2023      	movs	r0, #35	; 0x23
 800096e:	f000 f9b1 	bl	8000cd4 <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	799b      	ldrb	r3, [r3, #6]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d00d      	beq.n	8000996 <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	79db      	ldrb	r3, [r3, #7]
 800097e:	461a      	mov	r2, r3
 8000980:	4b33      	ldr	r3, [pc, #204]	; (8000a50 <dwt_configure+0x2d0>)
 8000982:	5c9b      	ldrb	r3, [r3, r2]
 8000984:	461a      	mov	r2, r3
 8000986:	2100      	movs	r1, #0
 8000988:	2021      	movs	r0, #33	; 0x21
 800098a:	f000 f990 	bl	8000cae <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 800098e:	2303      	movs	r3, #3
 8000990:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 8000992:	2301      	movs	r3, #1
 8000994:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000996:	7cfb      	ldrb	r3, [r7, #19]
 8000998:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800099c:	7cfb      	ldrb	r3, [r7, #19]
 800099e:	011b      	lsls	r3, r3, #4
 80009a0:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80009a2:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	785b      	ldrb	r3, [r3, #1]
 80009a8:	049b      	lsls	r3, r3, #18
 80009aa:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80009ae:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80009b0:	7dfb      	ldrb	r3, [r7, #23]
 80009b2:	051b      	lsls	r3, r3, #20
 80009b4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80009b8:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80009ba:	7dbb      	ldrb	r3, [r7, #22]
 80009bc:	045b      	lsls	r3, r3, #17
 80009be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80009c2:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	791b      	ldrb	r3, [r3, #4]
 80009c8:	059b      	lsls	r3, r3, #22
 80009ca:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80009ce:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	795b      	ldrb	r3, [r3, #5]
 80009d4:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80009d6:	4313      	orrs	r3, r2
 80009d8:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	2100      	movs	r1, #0
 80009de:	201f      	movs	r0, #31
 80009e0:	f000 f994 	bl	8000d0c <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	789a      	ldrb	r2, [r3, #2]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	785b      	ldrb	r3, [r3, #1]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	0419      	lsls	r1, r3, #16
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	79db      	ldrb	r3, [r3, #7]
 80009f6:	035a      	lsls	r2, r3, #13
 80009f8:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <dwt_configure+0x2a8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	430a      	orrs	r2, r1
 80009fe:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <dwt_configure+0x2a8>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	68db      	ldr	r3, [r3, #12]
 8000a06:	461a      	mov	r2, r3
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2008      	movs	r0, #8
 8000a0c:	f000 f97e 	bl	8000d0c <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 8000a10:	2242      	movs	r2, #66	; 0x42
 8000a12:	2100      	movs	r1, #0
 8000a14:	200d      	movs	r0, #13
 8000a16:	f000 f94a 	bl	8000cae <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8000a1a:	bf00      	nop
 8000a1c:	3718      	adds	r7, #24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	08004984 	.word	0x08004984
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	08004904 	.word	0x08004904
 8000a30:	08004924 	.word	0x08004924
 8000a34:	0800493c 	.word	0x0800493c
 8000a38:	08004944 	.word	0x08004944
 8000a3c:	0800490c 	.word	0x0800490c
 8000a40:	08004954 	.word	0x08004954
 8000a44:	08004960 	.word	0x08004960
 8000a48:	08004964 	.word	0x08004964
 8000a4c:	08004948 	.word	0x08004948
 8000a50:	08004950 	.word	0x08004950

08000a54 <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	6039      	str	r1, [r7, #0]
 8000a5e:	80fb      	strh	r3, [r7, #6]
 8000a60:	4613      	mov	r3, r2
 8000a62:	80bb      	strh	r3, [r7, #4]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 8000a64:	88ba      	ldrh	r2, [r7, #4]
 8000a66:	88fb      	ldrh	r3, [r7, #6]
 8000a68:	4413      	add	r3, r2
 8000a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a6e:	dc09      	bgt.n	8000a84 <dwt_writetxdata+0x30>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 8000a70:	88fb      	ldrh	r3, [r7, #6]
 8000a72:	3b02      	subs	r3, #2
 8000a74:	461a      	mov	r2, r3
 8000a76:	88b9      	ldrh	r1, [r7, #4]
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	2009      	movs	r0, #9
 8000a7c:	f000 f828 	bl	8000ad0 <dwt_writetodevice>
        return DWT_SUCCESS;
 8000a80:	2300      	movs	r3, #0
 8000a82:	e001      	b.n	8000a88 <dwt_writetxdata+0x34>
    }
    else
    {
        return DWT_ERROR;
 8000a84:	f04f 33ff 	mov.w	r3, #4294967295
    }
} // end dwt_writetxdata()
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	603a      	str	r2, [r7, #0]
 8000a9a:	80fb      	strh	r3, [r7, #6]
 8000a9c:	460b      	mov	r3, r1
 8000a9e:	80bb      	strh	r3, [r7, #4]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <dwt_writetxfctrl+0x3c>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	68da      	ldr	r2, [r3, #12]
 8000aa6:	88fb      	ldrh	r3, [r7, #6]
 8000aa8:	431a      	orrs	r2, r3
 8000aaa:	88bb      	ldrh	r3, [r7, #4]
 8000aac:	059b      	lsls	r3, r3, #22
 8000aae:	431a      	orrs	r2, r3
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	03db      	lsls	r3, r3, #15
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 8000ab8:	68fa      	ldr	r2, [r7, #12]
 8000aba:	2100      	movs	r1, #0
 8000abc:	2008      	movs	r0, #8
 8000abe:	f000 f925 	bl	8000d0c <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000000 	.word	0x20000000

08000ad0 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60ba      	str	r2, [r7, #8]
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4603      	mov	r3, r0
 8000adc:	81fb      	strh	r3, [r7, #14]
 8000ade:	460b      	mov	r3, r1
 8000ae0:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000ae6:	89bb      	ldrh	r3, [r7, #12]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d10c      	bne.n	8000b06 <dwt_writetodevice+0x36>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000aec:	89fb      	ldrh	r3, [r7, #14]
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	1c59      	adds	r1, r3, #1
 8000af4:	6179      	str	r1, [r7, #20]
 8000af6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000afa:	b2d2      	uxtb	r2, r2
 8000afc:	3318      	adds	r3, #24
 8000afe:	443b      	add	r3, r7
 8000b00:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000b04:	e02f      	b.n	8000b66 <dwt_writetodevice+0x96>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000b06:	89fb      	ldrh	r3, [r7, #14]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	1c59      	adds	r1, r3, #1
 8000b0e:	6179      	str	r1, [r7, #20]
 8000b10:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8000b14:	b2d2      	uxtb	r2, r2
 8000b16:	3318      	adds	r3, #24
 8000b18:	443b      	add	r3, r7
 8000b1a:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000b1e:	89bb      	ldrh	r3, [r7, #12]
 8000b20:	2b7f      	cmp	r3, #127	; 0x7f
 8000b22:	d809      	bhi.n	8000b38 <dwt_writetodevice+0x68>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	1c5a      	adds	r2, r3, #1
 8000b28:	617a      	str	r2, [r7, #20]
 8000b2a:	89ba      	ldrh	r2, [r7, #12]
 8000b2c:	b2d2      	uxtb	r2, r2
 8000b2e:	3318      	adds	r3, #24
 8000b30:	443b      	add	r3, r7
 8000b32:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000b36:	e016      	b.n	8000b66 <dwt_writetodevice+0x96>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000b38:	89bb      	ldrh	r3, [r7, #12]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	1c59      	adds	r1, r3, #1
 8000b40:	6179      	str	r1, [r7, #20]
 8000b42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000b46:	b2d2      	uxtb	r2, r2
 8000b48:	3318      	adds	r3, #24
 8000b4a:	443b      	add	r3, r7
 8000b4c:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000b50:	89bb      	ldrh	r3, [r7, #12]
 8000b52:	09db      	lsrs	r3, r3, #7
 8000b54:	b299      	uxth	r1, r3
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	1c5a      	adds	r2, r3, #1
 8000b5a:	617a      	str	r2, [r7, #20]
 8000b5c:	b2ca      	uxtb	r2, r1
 8000b5e:	3318      	adds	r3, #24
 8000b60:	443b      	add	r3, r7
 8000b62:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	b298      	uxth	r0, r3
 8000b6a:	f107 0110 	add.w	r1, r7, #16
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	68ba      	ldr	r2, [r7, #8]
 8000b72:	f000 faaf 	bl	80010d4 <writetospi>
} // end dwt_writetodevice()
 8000b76:	bf00      	nop
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b086      	sub	sp, #24
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	60ba      	str	r2, [r7, #8]
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	4603      	mov	r3, r0
 8000b8a:	81fb      	strh	r3, [r7, #14]
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000b94:	89bb      	ldrh	r3, [r7, #12]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d109      	bne.n	8000bae <dwt_readfromdevice+0x30>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	1c5a      	adds	r2, r3, #1
 8000b9e:	617a      	str	r2, [r7, #20]
 8000ba0:	89fa      	ldrh	r2, [r7, #14]
 8000ba2:	b2d2      	uxtb	r2, r2
 8000ba4:	3318      	adds	r3, #24
 8000ba6:	443b      	add	r3, r7
 8000ba8:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000bac:	e02f      	b.n	8000c0e <dwt_readfromdevice+0x90>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000bae:	89fb      	ldrh	r3, [r7, #14]
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	1c59      	adds	r1, r3, #1
 8000bb6:	6179      	str	r1, [r7, #20]
 8000bb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	3318      	adds	r3, #24
 8000bc0:	443b      	add	r3, r7
 8000bc2:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000bc6:	89bb      	ldrh	r3, [r7, #12]
 8000bc8:	2b7f      	cmp	r3, #127	; 0x7f
 8000bca:	d809      	bhi.n	8000be0 <dwt_readfromdevice+0x62>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	617a      	str	r2, [r7, #20]
 8000bd2:	89ba      	ldrh	r2, [r7, #12]
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	3318      	adds	r3, #24
 8000bd8:	443b      	add	r3, r7
 8000bda:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000bde:	e016      	b.n	8000c0e <dwt_readfromdevice+0x90>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000be0:	89bb      	ldrh	r3, [r7, #12]
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	1c59      	adds	r1, r3, #1
 8000be8:	6179      	str	r1, [r7, #20]
 8000bea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	3318      	adds	r3, #24
 8000bf2:	443b      	add	r3, r7
 8000bf4:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000bf8:	89bb      	ldrh	r3, [r7, #12]
 8000bfa:	09db      	lsrs	r3, r3, #7
 8000bfc:	b299      	uxth	r1, r3
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	1c5a      	adds	r2, r3, #1
 8000c02:	617a      	str	r2, [r7, #20]
 8000c04:	b2ca      	uxtb	r2, r1
 8000c06:	3318      	adds	r3, #24
 8000c08:	443b      	add	r3, r7
 8000c0a:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	b298      	uxth	r0, r3
 8000c12:	f107 0110 	add.w	r1, r7, #16
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	68ba      	ldr	r2, [r7, #8]
 8000c1a:	f000 fa8f 	bl	800113c <readfromspi>
} // end dwt_readfromdevice()
 8000c1e:	bf00      	nop
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b086      	sub	sp, #24
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
 8000c2e:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	b298      	uxth	r0, r3
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	b299      	uxth	r1, r3
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	2204      	movs	r2, #4
 8000c42:	f7ff ff9c 	bl	8000b7e <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8000c46:	2303      	movs	r3, #3
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	e00b      	b.n	8000c64 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	021b      	lsls	r3, r3, #8
 8000c50:	f107 010c 	add.w	r1, r7, #12
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	440a      	add	r2, r1
 8000c58:	7812      	ldrb	r2, [r2, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	daf0      	bge.n	8000c4c <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8000c6a:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	b298      	uxth	r0, r3
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	b299      	uxth	r1, r3
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	2202      	movs	r2, #2
 8000c90:	f7ff ff75 	bl	8000b7e <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8000c94:	7b7b      	ldrb	r3, [r7, #13]
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	021b      	lsls	r3, r3, #8
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	7b3b      	ldrb	r3, [r7, #12]
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	4413      	add	r3, r2
 8000ca2:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8000ca4:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b084      	sub	sp, #16
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	60f8      	str	r0, [r7, #12]
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	b298      	uxth	r0, r3
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	b299      	uxth	r1, r3
 8000cc4:	1dfb      	adds	r3, r7, #7
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f7ff ff02 	bl	8000ad0 <dwt_writetodevice>
}
 8000ccc:	bf00      	nop
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8000ce2:	88fb      	ldrh	r3, [r7, #6]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 8000ce8:	88fb      	ldrh	r3, [r7, #6]
 8000cea:	0a1b      	lsrs	r3, r3, #8
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	b298      	uxth	r0, r3
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	b299      	uxth	r1, r3
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	2202      	movs	r2, #2
 8000d00:	f7ff fee6 	bl	8000ad0 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8000d04:	bf00      	nop
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	e00d      	b.n	8000d3a <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	b2d9      	uxtb	r1, r3
 8000d22:	f107 0210 	add.w	r2, r7, #16
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	4413      	add	r3, r2
 8000d2a:	460a      	mov	r2, r1
 8000d2c:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	0a1b      	lsrs	r3, r3, #8
 8000d32:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	3301      	adds	r3, #1
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	2b03      	cmp	r3, #3
 8000d3e:	ddee      	ble.n	8000d1e <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	b298      	uxth	r0, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	b299      	uxth	r1, r3
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	2204      	movs	r2, #4
 8000d4e:	f7ff febf 	bl	8000ad0 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b084      	sub	sp, #16
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	461a      	mov	r2, r3
 8000d68:	2104      	movs	r1, #4
 8000d6a:	202d      	movs	r0, #45	; 0x2d
 8000d6c:	f7ff ffb2 	bl	8000cd4 <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8000d70:	2203      	movs	r2, #3
 8000d72:	2106      	movs	r1, #6
 8000d74:	202d      	movs	r0, #45	; 0x2d
 8000d76:	f7ff ff9a 	bl	8000cae <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2106      	movs	r1, #6
 8000d7e:	202d      	movs	r0, #45	; 0x2d
 8000d80:	f7ff ff95 	bl	8000cae <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8000d84:	210a      	movs	r1, #10
 8000d86:	202d      	movs	r0, #45	; 0x2d
 8000d88:	f7ff ff4d 	bl	8000c26 <dwt_read32bitoffsetreg>
 8000d8c:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2102      	movs	r1, #2
 8000da0:	202c      	movs	r0, #44	; 0x2c
 8000da2:	f7ff ff84 	bl	8000cae <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 8000da6:	2202      	movs	r2, #2
 8000da8:	2102      	movs	r1, #2
 8000daa:	202c      	movs	r0, #44	; 0x2c
 8000dac:	f7ff ff7f 	bl	8000cae <dwt_write8bitoffsetreg>
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 8000dbc:	226d      	movs	r2, #109	; 0x6d
 8000dbe:	f640 0106 	movw	r1, #2054	; 0x806
 8000dc2:	202e      	movs	r0, #46	; 0x2e
 8000dc4:	f7ff ff73 	bl	8000cae <dwt_write8bitoffsetreg>

    if(prfIndex)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d007      	beq.n	8000dde <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8000dce:	f240 6207 	movw	r2, #1543	; 0x607
 8000dd2:	f641 0106 	movw	r1, #6150	; 0x1806
 8000dd6:	202e      	movs	r0, #46	; 0x2e
 8000dd8:	f7ff ff7c 	bl	8000cd4 <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8000ddc:	e006      	b.n	8000dec <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8000dde:	f241 6207 	movw	r2, #5639	; 0x1607
 8000de2:	f641 0106 	movw	r1, #6150	; 0x1806
 8000de6:	202e      	movs	r0, #46	; 0x2e
 8000de8:	f7ff ff74 	bl	8000cd4 <dwt_write16bitoffsetreg>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8000df8:	200e      	movs	r0, #14
 8000dfa:	f000 f80f 	bl	8000e1c <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8000dfe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e02:	2106      	movs	r1, #6
 8000e04:	202d      	movs	r0, #45	; 0x2d
 8000e06:	f7ff ff65 	bl	8000cd4 <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	f000 f956 	bl	80010bc <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8000e10:	2001      	movs	r0, #1
 8000e12:	f000 f803 	bl	8000e1c <_dwt_enableclocks>
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	2202      	movs	r2, #2
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	2036      	movs	r0, #54	; 0x36
 8000e2e:	f7ff fea6 	bl	8000b7e <dwt_readfromdevice>
    switch(clocks)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2b0e      	cmp	r3, #14
 8000e36:	d876      	bhi.n	8000f26 <_dwt_enableclocks+0x10a>
 8000e38:	a201      	add	r2, pc, #4	; (adr r2, 8000e40 <_dwt_enableclocks+0x24>)
 8000e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3e:	bf00      	nop
 8000e40:	08000e8d 	.word	0x08000e8d
 8000e44:	08000e7d 	.word	0x08000e7d
 8000e48:	08000ea3 	.word	0x08000ea3
 8000e4c:	08000f27 	.word	0x08000f27
 8000e50:	08000f27 	.word	0x08000f27
 8000e54:	08000f27 	.word	0x08000f27
 8000e58:	08000f27 	.word	0x08000f27
 8000e5c:	08000eb9 	.word	0x08000eb9
 8000e60:	08000ed9 	.word	0x08000ed9
 8000e64:	08000f27 	.word	0x08000f27
 8000e68:	08000f27 	.word	0x08000f27
 8000e6c:	08000eef 	.word	0x08000eef
 8000e70:	08000efb 	.word	0x08000efb
 8000e74:	08000f07 	.word	0x08000f07
 8000e78:	08000f1d 	.word	0x08000f1d
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8000e80:	7b7b      	ldrb	r3, [r7, #13]
 8000e82:	f023 0301 	bic.w	r3, r3, #1
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000e8a:	e04d      	b.n	8000f28 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8000e8c:	7b3b      	ldrb	r3, [r7, #12]
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	f023 0303 	bic.w	r3, r3, #3
 8000e94:	b25b      	sxtb	r3, r3
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	b25b      	sxtb	r3, r3
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000ea0:	e042      	b.n	8000f28 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8000ea2:	7b3b      	ldrb	r3, [r7, #12]
 8000ea4:	b25b      	sxtb	r3, r3
 8000ea6:	f023 0303 	bic.w	r3, r3, #3
 8000eaa:	b25b      	sxtb	r3, r3
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	b25b      	sxtb	r3, r3
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000eb6:	e037      	b.n	8000f28 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8000eb8:	7b3b      	ldrb	r3, [r7, #12]
 8000eba:	b25b      	sxtb	r3, r3
 8000ebc:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000ec0:	b25b      	sxtb	r3, r3
 8000ec2:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8000ec6:	b25b      	sxtb	r3, r3
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8000ecc:	7b7b      	ldrb	r3, [r7, #13]
 8000ece:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000ed6:	e027      	b.n	8000f28 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8000ed8:	7b3b      	ldrb	r3, [r7, #12]
 8000eda:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8000ee2:	7b7b      	ldrb	r3, [r7, #13]
 8000ee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000eec:	e01c      	b.n	8000f28 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8000eee:	7b7b      	ldrb	r3, [r7, #13]
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000ef8:	e016      	b.n	8000f28 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8000efa:	7b7b      	ldrb	r3, [r7, #13]
 8000efc:	f023 0302 	bic.w	r3, r3, #2
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f04:	e010      	b.n	8000f28 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8000f06:	7b3b      	ldrb	r3, [r7, #12]
 8000f08:	b25b      	sxtb	r3, r3
 8000f0a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f0e:	b25b      	sxtb	r3, r3
 8000f10:	f043 0320 	orr.w	r3, r3, #32
 8000f14:	b25b      	sxtb	r3, r3
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000f1a:	e005      	b.n	8000f28 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8000f20:	2303      	movs	r3, #3
 8000f22:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f24:	e000      	b.n	8000f28 <_dwt_enableclocks+0x10c>
        default:
        break;
 8000f26:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2100      	movs	r1, #0
 8000f30:	2036      	movs	r0, #54	; 0x36
 8000f32:	f7ff fdcd 	bl	8000ad0 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8000f36:	f107 030c 	add.w	r3, r7, #12
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	2101      	movs	r1, #1
 8000f40:	2036      	movs	r0, #54	; 0x36
 8000f42:	f7ff fdc5 	bl	8000ad0 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop

08000f50 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8000f54:	2000      	movs	r0, #0
 8000f56:	f7ff ff61 	bl	8000e1c <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2104      	movs	r1, #4
 8000f5e:	2036      	movs	r0, #54	; 0x36
 8000f60:	f7ff feb8 	bl	8000cd4 <dwt_write16bitoffsetreg>
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
    int retval = DWT_SUCCESS ;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 8000f76:	2300      	movs	r3, #0
 8000f78:	72fb      	strb	r3, [r7, #11]
    uint16 checkTxOK = 0 ;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	813b      	strh	r3, [r7, #8]

    if(mode & DWT_RESPONSE_EXPECTED)
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d005      	beq.n	8000f94 <dwt_starttx+0x2c>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8000f88:	2380      	movs	r3, #128	; 0x80
 8000f8a:	72fb      	strb	r3, [r7, #11]
        pdw1000local->wait4resp = 1;
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <dwt_starttx+0x98>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2201      	movs	r2, #1
 8000f92:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d020      	beq.n	8000fe0 <dwt_starttx+0x78>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 8000f9e:	7afb      	ldrb	r3, [r7, #11]
 8000fa0:	f043 0306 	orr.w	r3, r3, #6
 8000fa4:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8000fa6:	7afb      	ldrb	r3, [r7, #11]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	2100      	movs	r1, #0
 8000fac:	200d      	movs	r0, #13
 8000fae:	f7ff fe7e 	bl	8000cae <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 8000fb2:	2103      	movs	r1, #3
 8000fb4:	200f      	movs	r0, #15
 8000fb6:	f7ff fe5d 	bl	8000c74 <dwt_read16bitoffsetreg>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	813b      	strh	r3, [r7, #8]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 8000fbe:	893b      	ldrh	r3, [r7, #8]
 8000fc0:	f403 6381 	and.w	r3, r3, #1032	; 0x408
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d102      	bne.n	8000fce <dwt_starttx+0x66>
        {
            retval = DWT_SUCCESS ; // All okay
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	e012      	b.n	8000ff4 <dwt_starttx+0x8c>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 8000fce:	2240      	movs	r2, #64	; 0x40
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	200d      	movs	r0, #13
 8000fd4:	f7ff fe6b 	bl	8000cae <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 8000fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	e009      	b.n	8000ff4 <dwt_starttx+0x8c>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 8000fe0:	7afb      	ldrb	r3, [r7, #11]
 8000fe2:	f043 0302 	orr.w	r3, r3, #2
 8000fe6:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8000fe8:	7afb      	ldrb	r3, [r7, #11]
 8000fea:	461a      	mov	r2, r3
 8000fec:	2100      	movs	r1, #0
 8000fee:	200d      	movs	r0, #13
 8000ff0:	f7ff fe5d 	bl	8000cae <dwt_write8bitoffsetreg>
    }

    return retval;
 8000ff4:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000000 	.word	0x20000000

08001004 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 8001008:	f7ff ffa2 	bl	8000f50 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 800100c:	2200      	movs	r2, #0
 800100e:	2100      	movs	r1, #0
 8001010:	202c      	movs	r0, #44	; 0x2c
 8001012:	f7ff fe5f 	bl	8000cd4 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 8001016:	2200      	movs	r2, #0
 8001018:	2106      	movs	r1, #6
 800101a:	202c      	movs	r0, #44	; 0x2c
 800101c:	f7ff fe47 	bl	8000cae <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8001020:	f7ff feba 	bl	8000d98 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8001024:	2200      	movs	r2, #0
 8001026:	2103      	movs	r1, #3
 8001028:	2036      	movs	r0, #54	; 0x36
 800102a:	f7ff fe40 	bl	8000cae <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 800102e:	2001      	movs	r0, #1
 8001030:	f000 f844 	bl	80010bc <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8001034:	22f0      	movs	r2, #240	; 0xf0
 8001036:	2103      	movs	r1, #3
 8001038:	2036      	movs	r0, #54	; 0x36
 800103a:	f7ff fe38 	bl	8000cae <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 800103e:	4b03      	ldr	r3, [pc, #12]	; (800104c <dwt_softreset+0x48>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2200      	movs	r2, #0
 8001044:	755a      	strb	r2, [r3, #21]
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000000 	.word	0x20000000

08001050 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	f003 031f 	and.w	r3, r3, #31
 8001062:	b25b      	sxtb	r3, r3
 8001064:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001068:	b25b      	sxtb	r3, r3
 800106a:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	461a      	mov	r2, r3
 8001070:	210e      	movs	r1, #14
 8001072:	202b      	movs	r0, #43	; 0x2b
 8001074:	f7ff fe1b 	bl	8000cae <dwt_write8bitoffsetreg>
}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 8001086:	f000 f9bf 	bl	8001408 <port_GetEXT_IRQStatus>
 800108a:	4603      	mov	r3, r0
 800108c:	607b      	str	r3, [r7, #4]

	if(s) {
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 8001094:	f000 f9aa 	bl	80013ec <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 8001098:	687b      	ldr	r3, [r7, #4]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 80010b0:	f000 f9a3 	bl	80013fa <port_EnableEXT_IRQ>
	}
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f000 f8c5 	bl	8001254 <Sleep>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 80010d4:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80010d8:	4683      	mov	fp, r0
 80010da:	468a      	mov	sl, r1
 80010dc:	4690      	mov	r8, r2
 80010de:	4699      	mov	r9, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 80010e0:	f7ff ffce 	bl	8001080 <decamutexon>

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80010e4:	4d13      	ldr	r5, [pc, #76]	; (8001134 <writetospi+0x60>)
    stat = decamutexon() ;
 80010e6:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80010e8:	4628      	mov	r0, r5
 80010ea:	f002 ff2a 	bl	8003f42 <HAL_SPI_GetState>
 80010ee:	2801      	cmp	r0, #1
 80010f0:	4604      	mov	r4, r0
 80010f2:	d1f9      	bne.n	80010e8 <writetospi+0x14>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 80010f4:	4810      	ldr	r0, [pc, #64]	; (8001138 <writetospi+0x64>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	2140      	movs	r1, #64	; 0x40
 80010fa:	f001 fb59 	bl	80027b0 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 80010fe:	465a      	mov	r2, fp
 8001100:	4651      	mov	r1, sl
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	480b      	ldr	r0, [pc, #44]	; (8001134 <writetospi+0x60>)
 8001108:	f002 fddf 	bl	8003cca <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 800110c:	f04f 33ff 	mov.w	r3, #4294967295
 8001110:	4649      	mov	r1, r9
 8001112:	fa1f f288 	uxth.w	r2, r8
 8001116:	4807      	ldr	r0, [pc, #28]	; (8001134 <writetospi+0x60>)
 8001118:	f002 fdd7 	bl	8003cca <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800111c:	4622      	mov	r2, r4
 800111e:	2140      	movs	r1, #64	; 0x40
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <writetospi+0x64>)
 8001122:	f001 fb45 	bl	80027b0 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8001126:	4630      	mov	r0, r6
 8001128:	f7ff ffbb 	bl	80010a2 <decamutexoff>

    return 0;
} // end writetospi()
 800112c:	2000      	movs	r0, #0
 800112e:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 8001132:	bf00      	nop
 8001134:	20000504 	.word	0x20000504
 8001138:	40020400 	.word	0x40020400

0800113c <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 800113c:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 8001140:	4681      	mov	r9, r0
 8001142:	460c      	mov	r4, r1
 8001144:	4690      	mov	r8, r2
 8001146:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001148:	f7ff ff9a 	bl	8001080 <decamutexon>

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800114c:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80011cc <readfromspi+0x90>
    stat = decamutexon() ;
 8001150:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001152:	4650      	mov	r0, sl
 8001154:	f002 fef5 	bl	8003f42 <HAL_SPI_GetState>
 8001158:	2801      	cmp	r0, #1
 800115a:	d1fa      	bne.n	8001152 <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800115c:	481a      	ldr	r0, [pc, #104]	; (80011c8 <readfromspi+0x8c>)
 800115e:	2200      	movs	r2, #0
 8001160:	2140      	movs	r1, #64	; 0x40
 8001162:	f001 fb25 	bl	80027b0 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 8001166:	f1b9 0f00 	cmp.w	r9, #0
 800116a:	d00c      	beq.n	8001186 <readfromspi+0x4a>
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 800116c:	f8df a05c 	ldr.w	sl, [pc, #92]	; 80011cc <readfromspi+0x90>
 8001170:	44a1      	add	r9, r4
 8001172:	2201      	movs	r2, #1
 8001174:	4621      	mov	r1, r4
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
    for(i=0; i<headerLength; i++)
 800117a:	4414      	add	r4, r2
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 800117c:	4650      	mov	r0, sl
 800117e:	f002 fda4 	bl	8003cca <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 8001182:	45a1      	cmp	r9, r4
 8001184:	d1f5      	bne.n	8001172 <readfromspi+0x36>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 8001186:	f1b8 0f00 	cmp.w	r8, #0
 800118a:	d012      	beq.n	80011b2 <readfromspi+0x76>
 800118c:	f8df c03c 	ldr.w	ip, [pc, #60]	; 80011cc <readfromspi+0x90>
 8001190:	eb05 0008 	add.w	r0, r5, r8
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8001194:	2400      	movs	r4, #0
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 8001196:	f8dc 1000 	ldr.w	r1, [ip]
 800119a:	688a      	ldr	r2, [r1, #8]
 800119c:	0792      	lsls	r2, r2, #30
 800119e:	d5fc      	bpl.n	800119a <readfromspi+0x5e>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 80011a0:	60cc      	str	r4, [r1, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 80011a2:	688a      	ldr	r2, [r1, #8]
 80011a4:	07d3      	lsls	r3, r2, #31
 80011a6:	d5fc      	bpl.n	80011a2 <readfromspi+0x66>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 80011a8:	68cb      	ldr	r3, [r1, #12]
 80011aa:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 80011ae:	4285      	cmp	r5, r0
 80011b0:	d1f1      	bne.n	8001196 <readfromspi+0x5a>
    }

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80011b2:	2201      	movs	r2, #1
 80011b4:	2140      	movs	r1, #64	; 0x40
 80011b6:	4804      	ldr	r0, [pc, #16]	; (80011c8 <readfromspi+0x8c>)
 80011b8:	f001 fafa 	bl	80027b0 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80011bc:	4630      	mov	r0, r6
 80011be:	f7ff ff70 	bl	80010a2 <decamutexoff>

    return 0;
} // end readfromspi()
 80011c2:	2000      	movs	r0, #0
 80011c4:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 80011c8:	40020400 	.word	0x40020400
 80011cc:	20000504 	.word	0x20000504

080011d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	db0b      	blt.n	80011fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	f003 021f 	and.w	r2, r3, #31
 80011e8:	4907      	ldr	r1, [pc, #28]	; (8001208 <__NVIC_EnableIRQ+0x38>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	095b      	lsrs	r3, r3, #5
 80011f0:	2001      	movs	r0, #1
 80011f2:	fa00 f202 	lsl.w	r2, r0, r2
 80011f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000e100 	.word	0xe000e100

0800120c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	2b00      	cmp	r3, #0
 800121c:	db12      	blt.n	8001244 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	f003 021f 	and.w	r2, r3, #31
 8001224:	490a      	ldr	r1, [pc, #40]	; (8001250 <__NVIC_DisableIRQ+0x44>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	095b      	lsrs	r3, r3, #5
 800122c:	2001      	movs	r0, #1
 800122e:	fa00 f202 	lsl.w	r2, r0, r2
 8001232:	3320      	adds	r3, #32
 8001234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001238:	f3bf 8f4f 	dsb	sy
}
 800123c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800123e:	f3bf 8f6f 	isb	sy
}
 8001242:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000e100 	.word	0xe000e100

08001254 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f000 ffa3 	bl	80021a8 <HAL_Delay>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 8001274:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <EXTI_GetITEnStatus+0x38>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	095b      	lsrs	r3, r3, #5
 800127a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f003 031f 	and.w	r3, r3, #31
 8001284:	fa22 f303 	lsr.w	r3, r2, r3
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	2b00      	cmp	r3, #0
 800128e:	bf14      	ite	ne
 8001290:	2301      	movne	r3, #1
 8001292:	2300      	moveq	r3, #0
 8001294:	b2db      	uxtb	r3, r3
}
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000e100 	.word	0xe000e100

080012a8 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RST_Pin;
 80012ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012b2:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80012b4:	2311      	movs	r3, #17
 80012b6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	4619      	mov	r1, r3
 80012c0:	480a      	ldr	r0, [pc, #40]	; (80012ec <reset_DW1000+0x44>)
 80012c2:	f001 f8d9 	bl	8002478 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012cc:	4807      	ldr	r0, [pc, #28]	; (80012ec <reset_DW1000+0x44>)
 80012ce:	f001 fa6f 	bl	80027b0 <HAL_GPIO_WritePin>

    Sleep(1);
 80012d2:	2001      	movs	r0, #1
 80012d4:	f7ff ffbe 	bl	8001254 <Sleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 80012d8:	2000      	movs	r0, #0
 80012da:	f000 f809 	bl	80012f0 <setup_DW1000RSTnIRQ>



    Sleep(2);
 80012de:	2002      	movs	r0, #2
 80012e0:	f7ff ffb8 	bl	8001254 <Sleep>
}
 80012e4:	bf00      	nop
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40020000 	.word	0x40020000

080012f0 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d016      	beq.n	800132c <setup_DW1000RSTnIRQ+0x3c>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RST_Pin;
 80012fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001302:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001304:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001308:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	4619      	mov	r1, r3
 8001314:	4813      	ldr	r0, [pc, #76]	; (8001364 <setup_DW1000RSTnIRQ+0x74>)
 8001316:	f001 f8af 	bl	8002478 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 800131a:	2006      	movs	r0, #6
 800131c:	f001 f883 	bl	8002426 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	2105      	movs	r1, #5
 8001324:	2006      	movs	r0, #6
 8001326:	f001 f862 	bl	80023ee <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
    }
}
 800132a:	e017      	b.n	800135c <setup_DW1000RSTnIRQ+0x6c>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 800132c:	2006      	movs	r0, #6
 800132e:	f001 f888 	bl	8002442 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8001332:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001336:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001338:	2311      	movs	r3, #17
 800133a:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001340:	2302      	movs	r3, #2
 8001342:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	4619      	mov	r1, r3
 800134a:	4806      	ldr	r0, [pc, #24]	; (8001364 <setup_DW1000RSTnIRQ+0x74>)
 800134c:	f001 f894 	bl	8002478 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
 8001350:	2201      	movs	r2, #1
 8001352:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001356:	4803      	ldr	r0, [pc, #12]	; (8001364 <setup_DW1000RSTnIRQ+0x74>)
 8001358:	f001 fa2a 	bl	80027b0 <HAL_GPIO_WritePin>
}
 800135c:	bf00      	nop
 800135e:	3720      	adds	r7, #32
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40020000 	.word	0x40020000

08001368 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800136c:	4b03      	ldr	r3, [pc, #12]	; (800137c <port_set_dw1000_slowrate+0x14>)
 800136e:	2220      	movs	r2, #32
 8001370:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8001372:	4802      	ldr	r0, [pc, #8]	; (800137c <port_set_dw1000_slowrate+0x14>)
 8001374:	f002 fc20 	bl	8003bb8 <HAL_SPI_Init>
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000504 	.word	0x20000504

08001380 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <port_set_dw1000_fastrate+0x14>)
 8001386:	2208      	movs	r2, #8
 8001388:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800138a:	4802      	ldr	r0, [pc, #8]	; (8001394 <port_set_dw1000_fastrate+0x14>)
 800138c:	f002 fc14 	bl	8003bb8 <HAL_SPI_Init>
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000504 	.word	0x20000504

08001398 <HAL_GPIO_EXTI_Callback>:
/* @fn      HAL_GPIO_EXTI_Callback
 * @brief   IRQ HAL call-back for all EXTI configured lines
 *          i.e. DW_RESET_Pin and DW_IRQn_Pin
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == DW_RST_Pin)
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013a8:	d103      	bne.n	80013b2 <HAL_GPIO_EXTI_Callback+0x1a>
    {
        signalResetDone = 1;
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <HAL_GPIO_EXTI_Callback+0x30>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	601a      	str	r2, [r3, #0]
        process_deca_irq();
    }
    else
    {
    }
}
 80013b0:	e005      	b.n	80013be <HAL_GPIO_EXTI_Callback+0x26>
    else if (GPIO_Pin == DW_IRQ_Pin)
 80013b2:	88fb      	ldrh	r3, [r7, #6]
 80013b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013b8:	d101      	bne.n	80013be <HAL_GPIO_EXTI_Callback+0x26>
        process_deca_irq();
 80013ba:	f000 f807 	bl	80013cc <process_deca_irq>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200000a0 	.word	0x200000a0

080013cc <process_deca_irq>:
 * @brief   main call-back for processing of DW1000 IRQ
 *          it re-enters the IRQ routing and processes all events.
 *          After processing of all events, DW1000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
    while(port_CheckEXT_IRQ() != 0)
 80013d0:	e002      	b.n	80013d8 <process_deca_irq+0xc>
    {

        port_deca_isr();
 80013d2:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <process_deca_irq+0x1c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4798      	blx	r3
    while(port_CheckEXT_IRQ() != 0)
 80013d8:	f000 f81e 	bl	8001418 <port_CheckEXT_IRQ>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f7      	bne.n	80013d2 <process_deca_irq+0x6>

    } //while DW1000 IRQ line active
}
 80013e2:	bf00      	nop
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	200000a4 	.word	0x200000a4

080013ec <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 80013f0:	2017      	movs	r0, #23
 80013f2:	f7ff ff0b 	bl	800120c <__NVIC_DisableIRQ>
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}

080013fa <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 80013fe:	2017      	movs	r0, #23
 8001400:	f7ff fee6 	bl	80011d0 <__NVIC_EnableIRQ>
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}

08001408 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 800140c:	2017      	movs	r0, #23
 800140e:	f7ff ff2d 	bl	800126c <EXTI_GetITEnStatus>
 8001412:	4603      	mov	r3, r0
}
 8001414:	4618      	mov	r0, r3
 8001416:	bd80      	pop	{r7, pc}

08001418 <port_CheckEXT_IRQ>:

/* @fn      port_CheckEXT_IRQ
 * @brief   wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(DW_IRQ_GPIO_Port, DW_IRQ_Pin);
 800141c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <port_CheckEXT_IRQ+0x14>)
 8001422:	f001 f9ad 	bl	8002780 <HAL_GPIO_ReadPin>
 8001426:	4603      	mov	r3, r0
}
 8001428:	4618      	mov	r0, r3
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40020000 	.word	0x40020000

08001430 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001436:	f000 fa21 	bl	800187c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800143a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800143e:	2201      	movs	r2, #1
 8001440:	2178      	movs	r1, #120	; 0x78
 8001442:	485b      	ldr	r0, [pc, #364]	; (80015b0 <SSD1306_Init+0x180>)
 8001444:	f001 fc28 	bl	8002c98 <HAL_I2C_IsDeviceReady>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800144e:	2300      	movs	r3, #0
 8001450:	e0a9      	b.n	80015a6 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001452:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001456:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001458:	e002      	b.n	8001460 <SSD1306_Init+0x30>
		p--;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3b01      	subs	r3, #1
 800145e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f9      	bne.n	800145a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001466:	22ae      	movs	r2, #174	; 0xae
 8001468:	2100      	movs	r1, #0
 800146a:	2078      	movs	r0, #120	; 0x78
 800146c:	f000 fa82 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001470:	2220      	movs	r2, #32
 8001472:	2100      	movs	r1, #0
 8001474:	2078      	movs	r0, #120	; 0x78
 8001476:	f000 fa7d 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800147a:	2210      	movs	r2, #16
 800147c:	2100      	movs	r1, #0
 800147e:	2078      	movs	r0, #120	; 0x78
 8001480:	f000 fa78 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001484:	22b0      	movs	r2, #176	; 0xb0
 8001486:	2100      	movs	r1, #0
 8001488:	2078      	movs	r0, #120	; 0x78
 800148a:	f000 fa73 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800148e:	22c8      	movs	r2, #200	; 0xc8
 8001490:	2100      	movs	r1, #0
 8001492:	2078      	movs	r0, #120	; 0x78
 8001494:	f000 fa6e 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001498:	2200      	movs	r2, #0
 800149a:	2100      	movs	r1, #0
 800149c:	2078      	movs	r0, #120	; 0x78
 800149e:	f000 fa69 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80014a2:	2210      	movs	r2, #16
 80014a4:	2100      	movs	r1, #0
 80014a6:	2078      	movs	r0, #120	; 0x78
 80014a8:	f000 fa64 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80014ac:	2240      	movs	r2, #64	; 0x40
 80014ae:	2100      	movs	r1, #0
 80014b0:	2078      	movs	r0, #120	; 0x78
 80014b2:	f000 fa5f 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80014b6:	2281      	movs	r2, #129	; 0x81
 80014b8:	2100      	movs	r1, #0
 80014ba:	2078      	movs	r0, #120	; 0x78
 80014bc:	f000 fa5a 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80014c0:	22ff      	movs	r2, #255	; 0xff
 80014c2:	2100      	movs	r1, #0
 80014c4:	2078      	movs	r0, #120	; 0x78
 80014c6:	f000 fa55 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80014ca:	22a1      	movs	r2, #161	; 0xa1
 80014cc:	2100      	movs	r1, #0
 80014ce:	2078      	movs	r0, #120	; 0x78
 80014d0:	f000 fa50 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80014d4:	22a6      	movs	r2, #166	; 0xa6
 80014d6:	2100      	movs	r1, #0
 80014d8:	2078      	movs	r0, #120	; 0x78
 80014da:	f000 fa4b 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80014de:	22a8      	movs	r2, #168	; 0xa8
 80014e0:	2100      	movs	r1, #0
 80014e2:	2078      	movs	r0, #120	; 0x78
 80014e4:	f000 fa46 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80014e8:	223f      	movs	r2, #63	; 0x3f
 80014ea:	2100      	movs	r1, #0
 80014ec:	2078      	movs	r0, #120	; 0x78
 80014ee:	f000 fa41 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80014f2:	22a4      	movs	r2, #164	; 0xa4
 80014f4:	2100      	movs	r1, #0
 80014f6:	2078      	movs	r0, #120	; 0x78
 80014f8:	f000 fa3c 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80014fc:	22d3      	movs	r2, #211	; 0xd3
 80014fe:	2100      	movs	r1, #0
 8001500:	2078      	movs	r0, #120	; 0x78
 8001502:	f000 fa37 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	2078      	movs	r0, #120	; 0x78
 800150c:	f000 fa32 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001510:	22d5      	movs	r2, #213	; 0xd5
 8001512:	2100      	movs	r1, #0
 8001514:	2078      	movs	r0, #120	; 0x78
 8001516:	f000 fa2d 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800151a:	22f0      	movs	r2, #240	; 0xf0
 800151c:	2100      	movs	r1, #0
 800151e:	2078      	movs	r0, #120	; 0x78
 8001520:	f000 fa28 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001524:	22d9      	movs	r2, #217	; 0xd9
 8001526:	2100      	movs	r1, #0
 8001528:	2078      	movs	r0, #120	; 0x78
 800152a:	f000 fa23 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800152e:	2222      	movs	r2, #34	; 0x22
 8001530:	2100      	movs	r1, #0
 8001532:	2078      	movs	r0, #120	; 0x78
 8001534:	f000 fa1e 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001538:	22da      	movs	r2, #218	; 0xda
 800153a:	2100      	movs	r1, #0
 800153c:	2078      	movs	r0, #120	; 0x78
 800153e:	f000 fa19 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001542:	2212      	movs	r2, #18
 8001544:	2100      	movs	r1, #0
 8001546:	2078      	movs	r0, #120	; 0x78
 8001548:	f000 fa14 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800154c:	22db      	movs	r2, #219	; 0xdb
 800154e:	2100      	movs	r1, #0
 8001550:	2078      	movs	r0, #120	; 0x78
 8001552:	f000 fa0f 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001556:	2220      	movs	r2, #32
 8001558:	2100      	movs	r1, #0
 800155a:	2078      	movs	r0, #120	; 0x78
 800155c:	f000 fa0a 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001560:	228d      	movs	r2, #141	; 0x8d
 8001562:	2100      	movs	r1, #0
 8001564:	2078      	movs	r0, #120	; 0x78
 8001566:	f000 fa05 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800156a:	2214      	movs	r2, #20
 800156c:	2100      	movs	r1, #0
 800156e:	2078      	movs	r0, #120	; 0x78
 8001570:	f000 fa00 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001574:	22af      	movs	r2, #175	; 0xaf
 8001576:	2100      	movs	r1, #0
 8001578:	2078      	movs	r0, #120	; 0x78
 800157a:	f000 f9fb 	bl	8001974 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800157e:	222e      	movs	r2, #46	; 0x2e
 8001580:	2100      	movs	r1, #0
 8001582:	2078      	movs	r0, #120	; 0x78
 8001584:	f000 f9f6 	bl	8001974 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001588:	2000      	movs	r0, #0
 800158a:	f000 f843 	bl	8001614 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800158e:	f000 f813 	bl	80015b8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <SSD1306_Init+0x184>)
 8001594:	2200      	movs	r2, #0
 8001596:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <SSD1306_Init+0x184>)
 800159a:	2200      	movs	r2, #0
 800159c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800159e:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <SSD1306_Init+0x184>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80015a4:	2301      	movs	r3, #1
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200004b0 	.word	0x200004b0
 80015b4:	200004a8 	.word	0x200004a8

080015b8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80015be:	2300      	movs	r3, #0
 80015c0:	71fb      	strb	r3, [r7, #7]
 80015c2:	e01d      	b.n	8001600 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	3b50      	subs	r3, #80	; 0x50
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	461a      	mov	r2, r3
 80015cc:	2100      	movs	r1, #0
 80015ce:	2078      	movs	r0, #120	; 0x78
 80015d0:	f000 f9d0 	bl	8001974 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2100      	movs	r1, #0
 80015d8:	2078      	movs	r0, #120	; 0x78
 80015da:	f000 f9cb 	bl	8001974 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80015de:	2210      	movs	r2, #16
 80015e0:	2100      	movs	r1, #0
 80015e2:	2078      	movs	r0, #120	; 0x78
 80015e4:	f000 f9c6 	bl	8001974 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	01db      	lsls	r3, r3, #7
 80015ec:	4a08      	ldr	r2, [pc, #32]	; (8001610 <SSD1306_UpdateScreen+0x58>)
 80015ee:	441a      	add	r2, r3
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	2140      	movs	r1, #64	; 0x40
 80015f4:	2078      	movs	r0, #120	; 0x78
 80015f6:	f000 f957 	bl	80018a8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	3301      	adds	r3, #1
 80015fe:	71fb      	strb	r3, [r7, #7]
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	2b07      	cmp	r3, #7
 8001604:	d9de      	bls.n	80015c4 <SSD1306_UpdateScreen+0xc>
	}
}
 8001606:	bf00      	nop
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	200000a8 	.word	0x200000a8

08001614 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <SSD1306_Fill+0x14>
 8001624:	2300      	movs	r3, #0
 8001626:	e000      	b.n	800162a <SSD1306_Fill+0x16>
 8001628:	23ff      	movs	r3, #255	; 0xff
 800162a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800162e:	4619      	mov	r1, r3
 8001630:	4803      	ldr	r0, [pc, #12]	; (8001640 <SSD1306_Fill+0x2c>)
 8001632:	f003 f921 	bl	8004878 <memset>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200000a8 	.word	0x200000a8

08001644 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	80fb      	strh	r3, [r7, #6]
 800164e:	460b      	mov	r3, r1
 8001650:	80bb      	strh	r3, [r7, #4]
 8001652:	4613      	mov	r3, r2
 8001654:	70fb      	strb	r3, [r7, #3]
	if (
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	2b7f      	cmp	r3, #127	; 0x7f
 800165a:	d848      	bhi.n	80016ee <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800165c:	88bb      	ldrh	r3, [r7, #4]
 800165e:	2b3f      	cmp	r3, #63	; 0x3f
 8001660:	d845      	bhi.n	80016ee <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001662:	4b26      	ldr	r3, [pc, #152]	; (80016fc <SSD1306_DrawPixel+0xb8>)
 8001664:	791b      	ldrb	r3, [r3, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d006      	beq.n	8001678 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800166a:	78fb      	ldrb	r3, [r7, #3]
 800166c:	2b00      	cmp	r3, #0
 800166e:	bf0c      	ite	eq
 8001670:	2301      	moveq	r3, #1
 8001672:	2300      	movne	r3, #0
 8001674:	b2db      	uxtb	r3, r3
 8001676:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001678:	78fb      	ldrb	r3, [r7, #3]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d11a      	bne.n	80016b4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800167e:	88fa      	ldrh	r2, [r7, #6]
 8001680:	88bb      	ldrh	r3, [r7, #4]
 8001682:	08db      	lsrs	r3, r3, #3
 8001684:	b298      	uxth	r0, r3
 8001686:	4603      	mov	r3, r0
 8001688:	01db      	lsls	r3, r3, #7
 800168a:	4413      	add	r3, r2
 800168c:	4a1c      	ldr	r2, [pc, #112]	; (8001700 <SSD1306_DrawPixel+0xbc>)
 800168e:	5cd3      	ldrb	r3, [r2, r3]
 8001690:	b25a      	sxtb	r2, r3
 8001692:	88bb      	ldrh	r3, [r7, #4]
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	2101      	movs	r1, #1
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	b25b      	sxtb	r3, r3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	b259      	sxtb	r1, r3
 80016a4:	88fa      	ldrh	r2, [r7, #6]
 80016a6:	4603      	mov	r3, r0
 80016a8:	01db      	lsls	r3, r3, #7
 80016aa:	4413      	add	r3, r2
 80016ac:	b2c9      	uxtb	r1, r1
 80016ae:	4a14      	ldr	r2, [pc, #80]	; (8001700 <SSD1306_DrawPixel+0xbc>)
 80016b0:	54d1      	strb	r1, [r2, r3]
 80016b2:	e01d      	b.n	80016f0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80016b4:	88fa      	ldrh	r2, [r7, #6]
 80016b6:	88bb      	ldrh	r3, [r7, #4]
 80016b8:	08db      	lsrs	r3, r3, #3
 80016ba:	b298      	uxth	r0, r3
 80016bc:	4603      	mov	r3, r0
 80016be:	01db      	lsls	r3, r3, #7
 80016c0:	4413      	add	r3, r2
 80016c2:	4a0f      	ldr	r2, [pc, #60]	; (8001700 <SSD1306_DrawPixel+0xbc>)
 80016c4:	5cd3      	ldrb	r3, [r2, r3]
 80016c6:	b25a      	sxtb	r2, r3
 80016c8:	88bb      	ldrh	r3, [r7, #4]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	2101      	movs	r1, #1
 80016d0:	fa01 f303 	lsl.w	r3, r1, r3
 80016d4:	b25b      	sxtb	r3, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	b25b      	sxtb	r3, r3
 80016da:	4013      	ands	r3, r2
 80016dc:	b259      	sxtb	r1, r3
 80016de:	88fa      	ldrh	r2, [r7, #6]
 80016e0:	4603      	mov	r3, r0
 80016e2:	01db      	lsls	r3, r3, #7
 80016e4:	4413      	add	r3, r2
 80016e6:	b2c9      	uxtb	r1, r1
 80016e8:	4a05      	ldr	r2, [pc, #20]	; (8001700 <SSD1306_DrawPixel+0xbc>)
 80016ea:	54d1      	strb	r1, [r2, r3]
 80016ec:	e000      	b.n	80016f0 <SSD1306_DrawPixel+0xac>
		return;
 80016ee:	bf00      	nop
	}
}
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	200004a8 	.word	0x200004a8
 8001700:	200000a8 	.word	0x200000a8

08001704 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	460a      	mov	r2, r1
 800170e:	80fb      	strh	r3, [r7, #6]
 8001710:	4613      	mov	r3, r2
 8001712:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001714:	4a05      	ldr	r2, [pc, #20]	; (800172c <SSD1306_GotoXY+0x28>)
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800171a:	4a04      	ldr	r2, [pc, #16]	; (800172c <SSD1306_GotoXY+0x28>)
 800171c:	88bb      	ldrh	r3, [r7, #4]
 800171e:	8053      	strh	r3, [r2, #2]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	200004a8 	.word	0x200004a8

08001730 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	6039      	str	r1, [r7, #0]
 800173a:	71fb      	strb	r3, [r7, #7]
 800173c:	4613      	mov	r3, r2
 800173e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001740:	4b3a      	ldr	r3, [pc, #232]	; (800182c <SSD1306_Putc+0xfc>)
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	4413      	add	r3, r2
	if (
 800174c:	2b7f      	cmp	r3, #127	; 0x7f
 800174e:	dc07      	bgt.n	8001760 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001750:	4b36      	ldr	r3, [pc, #216]	; (800182c <SSD1306_Putc+0xfc>)
 8001752:	885b      	ldrh	r3, [r3, #2]
 8001754:	461a      	mov	r2, r3
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	785b      	ldrb	r3, [r3, #1]
 800175a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800175c:	2b3f      	cmp	r3, #63	; 0x3f
 800175e:	dd01      	ble.n	8001764 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001760:	2300      	movs	r3, #0
 8001762:	e05e      	b.n	8001822 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	e04b      	b.n	8001802 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	3b20      	subs	r3, #32
 8001772:	6839      	ldr	r1, [r7, #0]
 8001774:	7849      	ldrb	r1, [r1, #1]
 8001776:	fb01 f303 	mul.w	r3, r1, r3
 800177a:	4619      	mov	r1, r3
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	440b      	add	r3, r1
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	4413      	add	r3, r2
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001788:	2300      	movs	r3, #0
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	e030      	b.n	80017f0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d010      	beq.n	80017c0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800179e:	4b23      	ldr	r3, [pc, #140]	; (800182c <SSD1306_Putc+0xfc>)
 80017a0:	881a      	ldrh	r2, [r3, #0]
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	4413      	add	r3, r2
 80017a8:	b298      	uxth	r0, r3
 80017aa:	4b20      	ldr	r3, [pc, #128]	; (800182c <SSD1306_Putc+0xfc>)
 80017ac:	885a      	ldrh	r2, [r3, #2]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	4413      	add	r3, r2
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	79ba      	ldrb	r2, [r7, #6]
 80017b8:	4619      	mov	r1, r3
 80017ba:	f7ff ff43 	bl	8001644 <SSD1306_DrawPixel>
 80017be:	e014      	b.n	80017ea <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80017c0:	4b1a      	ldr	r3, [pc, #104]	; (800182c <SSD1306_Putc+0xfc>)
 80017c2:	881a      	ldrh	r2, [r3, #0]
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	4413      	add	r3, r2
 80017ca:	b298      	uxth	r0, r3
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <SSD1306_Putc+0xfc>)
 80017ce:	885a      	ldrh	r2, [r3, #2]
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	4413      	add	r3, r2
 80017d6:	b299      	uxth	r1, r3
 80017d8:	79bb      	ldrb	r3, [r7, #6]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	bf0c      	ite	eq
 80017de:	2301      	moveq	r3, #1
 80017e0:	2300      	movne	r3, #0
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	461a      	mov	r2, r3
 80017e6:	f7ff ff2d 	bl	8001644 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	3301      	adds	r3, #1
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d3c8      	bcc.n	800178e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	3301      	adds	r3, #1
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	785b      	ldrb	r3, [r3, #1]
 8001806:	461a      	mov	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	4293      	cmp	r3, r2
 800180c:	d3ad      	bcc.n	800176a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800180e:	4b07      	ldr	r3, [pc, #28]	; (800182c <SSD1306_Putc+0xfc>)
 8001810:	881a      	ldrh	r2, [r3, #0]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	b29b      	uxth	r3, r3
 8001818:	4413      	add	r3, r2
 800181a:	b29a      	uxth	r2, r3
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <SSD1306_Putc+0xfc>)
 800181e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001820:	79fb      	ldrb	r3, [r7, #7]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200004a8 	.word	0x200004a8

08001830 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	4613      	mov	r3, r2
 800183c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800183e:	e012      	b.n	8001866 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	79fa      	ldrb	r2, [r7, #7]
 8001846:	68b9      	ldr	r1, [r7, #8]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff71 	bl	8001730 <SSD1306_Putc>
 800184e:	4603      	mov	r3, r0
 8001850:	461a      	mov	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d002      	beq.n	8001860 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	e008      	b.n	8001872 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3301      	adds	r3, #1
 8001864:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1e8      	bne.n	8001840 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	781b      	ldrb	r3, [r3, #0]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <ssd1306_I2C_Init+0x28>)
 8001884:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001886:	e002      	b.n	800188e <ssd1306_I2C_Init+0x12>
		p--;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3b01      	subs	r3, #1
 800188c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1f9      	bne.n	8001888 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	0003d090 	.word	0x0003d090

080018a8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b0c7      	sub	sp, #284	; 0x11c
 80018ac:	af02      	add	r7, sp, #8
 80018ae:	4604      	mov	r4, r0
 80018b0:	4608      	mov	r0, r1
 80018b2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80018b6:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80018ba:	600a      	str	r2, [r1, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018c2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80018c6:	4622      	mov	r2, r4
 80018c8:	701a      	strb	r2, [r3, #0]
 80018ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018ce:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80018d2:	4602      	mov	r2, r0
 80018d4:	701a      	strb	r2, [r3, #0]
 80018d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80018de:	460a      	mov	r2, r1
 80018e0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80018e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80018ea:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80018ee:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80018f2:	7812      	ldrb	r2, [r2, #0]
 80018f4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80018f6:	2300      	movs	r3, #0
 80018f8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80018fc:	e015      	b.n	800192a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80018fe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001902:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001906:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	441a      	add	r2, r3
 800190e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001912:	3301      	adds	r3, #1
 8001914:	7811      	ldrb	r1, [r2, #0]
 8001916:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800191a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800191e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001920:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001924:	3301      	adds	r3, #1
 8001926:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800192a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800192e:	b29b      	uxth	r3, r3
 8001930:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001934:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001938:	8812      	ldrh	r2, [r2, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d8df      	bhi.n	80018fe <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800193e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001942:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	b299      	uxth	r1, r3
 800194a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800194e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	3301      	adds	r3, #1
 8001956:	b29b      	uxth	r3, r3
 8001958:	f107 020c 	add.w	r2, r7, #12
 800195c:	200a      	movs	r0, #10
 800195e:	9000      	str	r0, [sp, #0]
 8001960:	4803      	ldr	r0, [pc, #12]	; (8001970 <ssd1306_I2C_WriteMulti+0xc8>)
 8001962:	f001 f89b 	bl	8002a9c <HAL_I2C_Master_Transmit>
}
 8001966:	bf00      	nop
 8001968:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800196c:	46bd      	mov	sp, r7
 800196e:	bd90      	pop	{r4, r7, pc}
 8001970:	200004b0 	.word	0x200004b0

08001974 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af02      	add	r7, sp, #8
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
 800197e:	460b      	mov	r3, r1
 8001980:	71bb      	strb	r3, [r7, #6]
 8001982:	4613      	mov	r3, r2
 8001984:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001986:	79bb      	ldrb	r3, [r7, #6]
 8001988:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800198a:	797b      	ldrb	r3, [r7, #5]
 800198c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	b299      	uxth	r1, r3
 8001992:	f107 020c 	add.w	r2, r7, #12
 8001996:	230a      	movs	r3, #10
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	2302      	movs	r3, #2
 800199c:	4803      	ldr	r0, [pc, #12]	; (80019ac <ssd1306_I2C_Write+0x38>)
 800199e:	f001 f87d 	bl	8002a9c <HAL_I2C_Master_Transmit>
}
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200004b0 	.word	0x200004b0

080019b0 <ssd1306_write>:

void ssd1306_write(uint32_t buff, FontDef_t Font)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	e883 0006 	stmia.w	r3, {r1, r2}
//	SSD1306_Clear ();
//	SSD1306_Fill(SSD1306_COLOR_BLACK);
	SSD1306_Puts(buff, &Font, 1);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	1d39      	adds	r1, r7, #4
 80019c2:	2201      	movs	r2, #1
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff33 	bl	8001830 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80019ca:	f7ff fdf5 	bl	80015b8 <SSD1306_UpdateScreen>
}
 80019ce:	bf00      	nop
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
 80019ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	4b38      	ldr	r3, [pc, #224]	; (8001ad4 <MX_GPIO_Init+0xfc>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a37      	ldr	r2, [pc, #220]	; (8001ad4 <MX_GPIO_Init+0xfc>)
 80019f8:	f043 0304 	orr.w	r3, r3, #4
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b35      	ldr	r3, [pc, #212]	; (8001ad4 <MX_GPIO_Init+0xfc>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0304 	and.w	r3, r3, #4
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b31      	ldr	r3, [pc, #196]	; (8001ad4 <MX_GPIO_Init+0xfc>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a30      	ldr	r2, [pc, #192]	; (8001ad4 <MX_GPIO_Init+0xfc>)
 8001a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b2e      	ldr	r3, [pc, #184]	; (8001ad4 <MX_GPIO_Init+0xfc>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	4b2a      	ldr	r3, [pc, #168]	; (8001ad4 <MX_GPIO_Init+0xfc>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a29      	ldr	r2, [pc, #164]	; (8001ad4 <MX_GPIO_Init+0xfc>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b27      	ldr	r3, [pc, #156]	; (8001ad4 <MX_GPIO_Init+0xfc>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	4b23      	ldr	r3, [pc, #140]	; (8001ad4 <MX_GPIO_Init+0xfc>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a22      	ldr	r2, [pc, #136]	; (8001ad4 <MX_GPIO_Init+0xfc>)
 8001a4c:	f043 0302 	orr.w	r3, r3, #2
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b20      	ldr	r3, [pc, #128]	; (8001ad4 <MX_GPIO_Init+0xfc>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2140      	movs	r1, #64	; 0x40
 8001a62:	481d      	ldr	r0, [pc, #116]	; (8001ad8 <MX_GPIO_Init+0x100>)
 8001a64:	f000 fea4 	bl	80027b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_RST_Pin;
 8001a68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4817      	ldr	r0, [pc, #92]	; (8001adc <MX_GPIO_Init+0x104>)
 8001a80:	f000 fcfa 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_IRQ_Pin;
 8001a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a90:	2302      	movs	r3, #2
 8001a92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DW_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4810      	ldr	r0, [pc, #64]	; (8001adc <MX_GPIO_Init+0x104>)
 8001a9c:	f000 fcec 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_CS_Pin;
 8001aa0:	2340      	movs	r3, #64	; 0x40
 8001aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aac:	2300      	movs	r3, #0
 8001aae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4808      	ldr	r0, [pc, #32]	; (8001ad8 <MX_GPIO_Init+0x100>)
 8001ab8:	f000 fcde 	bl	8002478 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 8001abc:	2200      	movs	r2, #0
 8001abe:	2104      	movs	r1, #4
 8001ac0:	2028      	movs	r0, #40	; 0x28
 8001ac2:	f000 fc94 	bl	80023ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ac6:	2028      	movs	r0, #40	; 0x28
 8001ac8:	f000 fcad 	bl	8002426 <HAL_NVIC_EnableIRQ>

}
 8001acc:	bf00      	nop
 8001ace:	3728      	adds	r7, #40	; 0x28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40020400 	.word	0x40020400
 8001adc:	40020000 	.word	0x40020000

08001ae0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <MX_I2C1_Init+0x50>)
 8001ae6:	4a13      	ldr	r2, [pc, #76]	; (8001b34 <MX_I2C1_Init+0x54>)
 8001ae8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <MX_I2C1_Init+0x50>)
 8001aec:	4a12      	ldr	r2, [pc, #72]	; (8001b38 <MX_I2C1_Init+0x58>)
 8001aee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001af0:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <MX_I2C1_Init+0x50>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <MX_I2C1_Init+0x50>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <MX_I2C1_Init+0x50>)
 8001afe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b04:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <MX_I2C1_Init+0x50>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <MX_I2C1_Init+0x50>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b10:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <MX_I2C1_Init+0x50>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <MX_I2C1_Init+0x50>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b1c:	4804      	ldr	r0, [pc, #16]	; (8001b30 <MX_I2C1_Init+0x50>)
 8001b1e:	f000 fe79 	bl	8002814 <HAL_I2C_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b28:	f000 f8ce 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	200004b0 	.word	0x200004b0
 8001b34:	40005400 	.word	0x40005400
 8001b38:	00061a80 	.word	0x00061a80

08001b3c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08a      	sub	sp, #40	; 0x28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a19      	ldr	r2, [pc, #100]	; (8001bc0 <HAL_I2C_MspInit+0x84>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d12c      	bne.n	8001bb8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	4b18      	ldr	r3, [pc, #96]	; (8001bc4 <HAL_I2C_MspInit+0x88>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a17      	ldr	r2, [pc, #92]	; (8001bc4 <HAL_I2C_MspInit+0x88>)
 8001b68:	f043 0302 	orr.w	r3, r3, #2
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <HAL_I2C_MspInit+0x88>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b80:	2312      	movs	r3, #18
 8001b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	4619      	mov	r1, r3
 8001b96:	480c      	ldr	r0, [pc, #48]	; (8001bc8 <HAL_I2C_MspInit+0x8c>)
 8001b98:	f000 fc6e 	bl	8002478 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <HAL_I2C_MspInit+0x88>)
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <HAL_I2C_MspInit+0x88>)
 8001ba6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001baa:	6413      	str	r3, [r2, #64]	; 0x40
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <HAL_I2C_MspInit+0x88>)
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001bb8:	bf00      	nop
 8001bba:	3728      	adds	r7, #40	; 0x28
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40005400 	.word	0x40005400
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40020400 	.word	0x40020400

08001bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bd0:	f000 fa78 	bl	80020c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bd4:	f000 f810 	bl	8001bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bd8:	f7ff fefe 	bl	80019d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001bdc:	f000 f9d6 	bl	8001f8c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001be0:	f7ff ff7e 	bl	8001ae0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001be4:	f000 f876 	bl	8001cd4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  setup_DW1000RSTnIRQ(0);
 8001be8:	2000      	movs	r0, #0
 8001bea:	f7ff fb81 	bl	80012f0 <setup_DW1000RSTnIRQ>
  SSD1306_Init();
 8001bee:	f7ff fc1f 	bl	8001430 <SSD1306_Init>
  dw_main();
 8001bf2:	f000 f95d 	bl	8001eb0 <dw_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bf6:	e7fe      	b.n	8001bf6 <main+0x2a>

08001bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b094      	sub	sp, #80	; 0x50
 8001bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bfe:	f107 0320 	add.w	r3, r7, #32
 8001c02:	2230      	movs	r2, #48	; 0x30
 8001c04:	2100      	movs	r1, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f002 fe36 	bl	8004878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c0c:	f107 030c 	add.w	r3, r7, #12
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	4b27      	ldr	r3, [pc, #156]	; (8001cc0 <SystemClock_Config+0xc8>)
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	4a26      	ldr	r2, [pc, #152]	; (8001cc0 <SystemClock_Config+0xc8>)
 8001c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2c:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <SystemClock_Config+0xc8>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c38:	2300      	movs	r3, #0
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <SystemClock_Config+0xcc>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a20      	ldr	r2, [pc, #128]	; (8001cc4 <SystemClock_Config+0xcc>)
 8001c42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <SystemClock_Config+0xcc>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c54:	2301      	movs	r3, #1
 8001c56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 8001c68:	230d      	movs	r3, #13
 8001c6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001c6c:	2348      	movs	r3, #72	; 0x48
 8001c6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c70:	2302      	movs	r3, #2
 8001c72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c74:	2304      	movs	r3, #4
 8001c76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c78:	f107 0320 	add.w	r3, r7, #32
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f001 fb43 	bl	8003308 <HAL_RCC_OscConfig>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c88:	f000 f81e 	bl	8001cc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c8c:	230f      	movs	r3, #15
 8001c8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c90:	2302      	movs	r3, #2
 8001c92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ca2:	f107 030c 	add.w	r3, r7, #12
 8001ca6:	2102      	movs	r1, #2
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f001 fda5 	bl	80037f8 <HAL_RCC_ClockConfig>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001cb4:	f000 f808 	bl	8001cc8 <Error_Handler>
  }
}
 8001cb8:	bf00      	nop
 8001cba:	3750      	adds	r7, #80	; 0x50
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40007000 	.word	0x40007000

08001cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ccc:	b672      	cpsid	i
}
 8001cce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <Error_Handler+0x8>
	...

08001cd4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001cd8:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <MX_SPI1_Init+0x64>)
 8001cda:	4a18      	ldr	r2, [pc, #96]	; (8001d3c <MX_SPI1_Init+0x68>)
 8001cdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cde:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <MX_SPI1_Init+0x64>)
 8001ce0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ce4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ce6:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <MX_SPI1_Init+0x64>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cec:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <MX_SPI1_Init+0x64>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cf2:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <MX_SPI1_Init+0x64>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <MX_SPI1_Init+0x64>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <MX_SPI1_Init+0x64>)
 8001d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001d06:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <MX_SPI1_Init+0x64>)
 8001d08:	2220      	movs	r2, #32
 8001d0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d0c:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <MX_SPI1_Init+0x64>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <MX_SPI1_Init+0x64>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d18:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <MX_SPI1_Init+0x64>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <MX_SPI1_Init+0x64>)
 8001d20:	220a      	movs	r2, #10
 8001d22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d24:	4804      	ldr	r0, [pc, #16]	; (8001d38 <MX_SPI1_Init+0x64>)
 8001d26:	f001 ff47 	bl	8003bb8 <HAL_SPI_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d30:	f7ff ffca 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000504 	.word	0x20000504
 8001d3c:	40013000 	.word	0x40013000

08001d40 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08a      	sub	sp, #40	; 0x28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a19      	ldr	r2, [pc, #100]	; (8001dc4 <HAL_SPI_MspInit+0x84>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d12b      	bne.n	8001dba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <HAL_SPI_MspInit+0x88>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	4a17      	ldr	r2, [pc, #92]	; (8001dc8 <HAL_SPI_MspInit+0x88>)
 8001d6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d70:	6453      	str	r3, [r2, #68]	; 0x44
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <HAL_SPI_MspInit+0x88>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <HAL_SPI_MspInit+0x88>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a10      	ldr	r2, [pc, #64]	; (8001dc8 <HAL_SPI_MspInit+0x88>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <HAL_SPI_MspInit+0x88>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d9a:	23e0      	movs	r3, #224	; 0xe0
 8001d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da6:	2303      	movs	r3, #3
 8001da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001daa:	2305      	movs	r3, #5
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dae:	f107 0314 	add.w	r3, r7, #20
 8001db2:	4619      	mov	r1, r3
 8001db4:	4805      	ldr	r0, [pc, #20]	; (8001dcc <HAL_SPI_MspInit+0x8c>)
 8001db6:	f000 fb5f 	bl	8002478 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001dba:	bf00      	nop
 8001dbc:	3728      	adds	r7, #40	; 0x28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40013000 	.word	0x40013000
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40020000 	.word	0x40020000

08001dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <HAL_MspInit+0x4c>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	4a0f      	ldr	r2, [pc, #60]	; (8001e1c <HAL_MspInit+0x4c>)
 8001de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de4:	6453      	str	r3, [r2, #68]	; 0x44
 8001de6:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <HAL_MspInit+0x4c>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	603b      	str	r3, [r7, #0]
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_MspInit+0x4c>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	4a08      	ldr	r2, [pc, #32]	; (8001e1c <HAL_MspInit+0x4c>)
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e00:	6413      	str	r3, [r2, #64]	; 0x40
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_MspInit+0x4c>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800

08001e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <NMI_Handler+0x4>

08001e26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e2a:	e7fe      	b.n	8001e2a <HardFault_Handler+0x4>

08001e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <MemManage_Handler+0x4>

08001e32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e36:	e7fe      	b.n	8001e36 <BusFault_Handler+0x4>

08001e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e3c:	e7fe      	b.n	8001e3c <UsageFault_Handler+0x4>

08001e3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e6c:	f000 f97c 	bl	8002168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_RST_Pin);
 8001e78:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001e7c:	f000 fcb2 	bl	80027e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DW_IRQ_Pin);
 8001e80:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e84:	f000 fcae 	bl	80027e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <SystemInit+0x20>)
 8001e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e96:	4a05      	ldr	r2, [pc, #20]	; (8001eac <SystemInit+0x20>)
 8001e98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <dw_main>:

/**
 * Application entry point.
 */
int dw_main(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
    /* Display application name on LCD. */
//dwt
	ssd1306_write(buff, Font_7x10);
 8001eb4:	482d      	ldr	r0, [pc, #180]	; (8001f6c <dw_main+0xbc>)
 8001eb6:	4b2e      	ldr	r3, [pc, #184]	; (8001f70 <dw_main+0xc0>)
 8001eb8:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001ebc:	f7ff fd78 	bl	80019b0 <ssd1306_write>
    /* Reset and initialise DW1000. See NOTE 2 below.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8001ec0:	f7ff f9f2 	bl	80012a8 <reset_DW1000>
    port_set_dw1000_slowrate();
 8001ec4:	f7ff fa50 	bl	8001368 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADNONE) == DWT_ERROR)
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f7fe fb03 	bl	80004d4 <dwt_initialise>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed4:	d10d      	bne.n	8001ef2 <dw_main+0x42>
    {
//        printf("INIT FAILED");
        HAL_UART_Transmit(&huart2, "Init Failed", sizeof(tx_msg), HAL_MAX_DELAY);
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eda:	220f      	movs	r2, #15
 8001edc:	4925      	ldr	r1, [pc, #148]	; (8001f74 <dw_main+0xc4>)
 8001ede:	4826      	ldr	r0, [pc, #152]	; (8001f78 <dw_main+0xc8>)
 8001ee0:	f002 f955 	bl	800418e <HAL_UART_Transmit>
        ssd1306_write("Init Failed", Font_11x18);
 8001ee4:	4823      	ldr	r0, [pc, #140]	; (8001f74 <dw_main+0xc4>)
 8001ee6:	4b25      	ldr	r3, [pc, #148]	; (8001f7c <dw_main+0xcc>)
 8001ee8:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001eec:	f7ff fd60 	bl	80019b0 <ssd1306_write>
        while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <dw_main+0x40>
        { };
    }
    port_set_dw1000_fastrate();
 8001ef2:	f7ff fa45 	bl	8001380 <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 3 below. */
    dwt_configure(&config);
 8001ef6:	4822      	ldr	r0, [pc, #136]	; (8001f80 <dw_main+0xd0>)
 8001ef8:	f7fe fc42 	bl	8000780 <dwt_configure>
    /* Loop forever sending frames periodically. */
    while(1)
    {

        /* Write frame data to DW1000 and prepare transmission. See NOTE 4 below.*/
        dwt_writetxdata(sizeof(tx_msg), tx_msg, 0); /* Zero offset in TX buffer. */
 8001efc:	2200      	movs	r2, #0
 8001efe:	4921      	ldr	r1, [pc, #132]	; (8001f84 <dw_main+0xd4>)
 8001f00:	200f      	movs	r0, #15
 8001f02:	f7fe fda7 	bl	8000a54 <dwt_writetxdata>
        dwt_writetxfctrl(sizeof(tx_msg), 0, 0); /* Zero offset in TX buffer, no ranging. */
 8001f06:	2200      	movs	r2, #0
 8001f08:	2100      	movs	r1, #0
 8001f0a:	200f      	movs	r0, #15
 8001f0c:	f7fe fdc0 	bl	8000a90 <dwt_writetxfctrl>

        /* Start transmission. */
        dwt_starttx(DWT_START_TX_IMMEDIATE);
 8001f10:	2000      	movs	r0, #0
 8001f12:	f7ff f829 	bl	8000f68 <dwt_starttx>
         * function to access it.*/
//        while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS))
//        { };

        /* Clear TX frame sent event. */
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
 8001f16:	2280      	movs	r2, #128	; 0x80
 8001f18:	2100      	movs	r1, #0
 8001f1a:	200f      	movs	r0, #15
 8001f1c:	f7fe fef6 	bl	8000d0c <dwt_write32bitoffsetreg>

        /* Execute a delay between transmissions. */
        Sleep(TX_DELAY_MS);
 8001f20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f24:	f7ff f996 	bl	8001254 <Sleep>
        HAL_UART_Transmit(&huart2, tx_msg, sizeof(tx_msg), HAL_MAX_DELAY);
 8001f28:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2c:	220f      	movs	r2, #15
 8001f2e:	4915      	ldr	r1, [pc, #84]	; (8001f84 <dw_main+0xd4>)
 8001f30:	4811      	ldr	r0, [pc, #68]	; (8001f78 <dw_main+0xc8>)
 8001f32:	f002 f92c 	bl	800418e <HAL_UART_Transmit>
        SSD1306_GotoXY(0, 10); ssd1306_write("Transmitted :", Font_7x10);
 8001f36:	210a      	movs	r1, #10
 8001f38:	2000      	movs	r0, #0
 8001f3a:	f7ff fbe3 	bl	8001704 <SSD1306_GotoXY>
 8001f3e:	4812      	ldr	r0, [pc, #72]	; (8001f88 <dw_main+0xd8>)
 8001f40:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <dw_main+0xc0>)
 8001f42:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f46:	f7ff fd33 	bl	80019b0 <ssd1306_write>
        SSD1306_GotoXY(0,30); ssd1306_write(tx_msg, Font_7x10);
 8001f4a:	211e      	movs	r1, #30
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f7ff fbd9 	bl	8001704 <SSD1306_GotoXY>
 8001f52:	480c      	ldr	r0, [pc, #48]	; (8001f84 <dw_main+0xd4>)
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <dw_main+0xc0>)
 8001f56:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f5a:	f7ff fd29 	bl	80019b0 <ssd1306_write>
        /* Increment the blink frame sequence number (modulo 256). */
        tx_msg[BLINK_FRAME_SN_IDX]++;
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <dw_main+0xd4>)
 8001f60:	785b      	ldrb	r3, [r3, #1]
 8001f62:	3301      	adds	r3, #1
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <dw_main+0xd4>)
 8001f68:	705a      	strb	r2, [r3, #1]
        dwt_writetxdata(sizeof(tx_msg), tx_msg, 0); /* Zero offset in TX buffer. */
 8001f6a:	e7c7      	b.n	8001efc <dw_main+0x4c>
 8001f6c:	20000018 	.word	0x20000018
 8001f70:	20000004 	.word	0x20000004
 8001f74:	080048e8 	.word	0x080048e8
 8001f78:	2000055c 	.word	0x2000055c
 8001f7c:	2000000c 	.word	0x2000000c
 8001f80:	20000028 	.word	0x20000028
 8001f84:	20000034 	.word	0x20000034
 8001f88:	080048f4 	.word	0x080048f4

08001f8c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f90:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001f92:	4a12      	ldr	r2, [pc, #72]	; (8001fdc <MX_USART2_UART_Init+0x50>)
 8001f94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f96:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001f98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001faa:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fc2:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fc4:	f002 f896 	bl	80040f4 <HAL_UART_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fce:	f7ff fe7b 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	2000055c 	.word	0x2000055c
 8001fdc:	40004400 	.word	0x40004400

08001fe0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08a      	sub	sp, #40	; 0x28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	f107 0314 	add.w	r3, r7, #20
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a19      	ldr	r2, [pc, #100]	; (8002064 <HAL_UART_MspInit+0x84>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d12b      	bne.n	800205a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	4b18      	ldr	r3, [pc, #96]	; (8002068 <HAL_UART_MspInit+0x88>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	4a17      	ldr	r2, [pc, #92]	; (8002068 <HAL_UART_MspInit+0x88>)
 800200c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002010:	6413      	str	r3, [r2, #64]	; 0x40
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <HAL_UART_MspInit+0x88>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	4b11      	ldr	r3, [pc, #68]	; (8002068 <HAL_UART_MspInit+0x88>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	4a10      	ldr	r2, [pc, #64]	; (8002068 <HAL_UART_MspInit+0x88>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	6313      	str	r3, [r2, #48]	; 0x30
 800202e:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <HAL_UART_MspInit+0x88>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800203a:	230c      	movs	r3, #12
 800203c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203e:	2302      	movs	r3, #2
 8002040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002046:	2303      	movs	r3, #3
 8002048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800204a:	2307      	movs	r3, #7
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204e:	f107 0314 	add.w	r3, r7, #20
 8002052:	4619      	mov	r1, r3
 8002054:	4805      	ldr	r0, [pc, #20]	; (800206c <HAL_UART_MspInit+0x8c>)
 8002056:	f000 fa0f 	bl	8002478 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800205a:	bf00      	nop
 800205c:	3728      	adds	r7, #40	; 0x28
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40004400 	.word	0x40004400
 8002068:	40023800 	.word	0x40023800
 800206c:	40020000 	.word	0x40020000

08002070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002074:	480d      	ldr	r0, [pc, #52]	; (80020ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002076:	490e      	ldr	r1, [pc, #56]	; (80020b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002078:	4a0e      	ldr	r2, [pc, #56]	; (80020b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800207a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800207c:	e002      	b.n	8002084 <LoopCopyDataInit>

0800207e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800207e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002082:	3304      	adds	r3, #4

08002084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002088:	d3f9      	bcc.n	800207e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800208a:	4a0b      	ldr	r2, [pc, #44]	; (80020b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800208c:	4c0b      	ldr	r4, [pc, #44]	; (80020bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800208e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002090:	e001      	b.n	8002096 <LoopFillZerobss>

08002092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002094:	3204      	adds	r2, #4

08002096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002098:	d3fb      	bcc.n	8002092 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800209a:	f7ff fef7 	bl	8001e8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800209e:	f002 fbf3 	bl	8004888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020a2:	f7ff fd93 	bl	8001bcc <main>
  bx  lr    
 80020a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020b0:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 80020b4:	08005ea8 	.word	0x08005ea8
  ldr r2, =_sbss
 80020b8:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 80020bc:	200005a4 	.word	0x200005a4

080020c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020c0:	e7fe      	b.n	80020c0 <ADC_IRQHandler>
	...

080020c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020c8:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <HAL_Init+0x40>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a0d      	ldr	r2, [pc, #52]	; (8002104 <HAL_Init+0x40>)
 80020ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_Init+0x40>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <HAL_Init+0x40>)
 80020da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020e0:	4b08      	ldr	r3, [pc, #32]	; (8002104 <HAL_Init+0x40>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a07      	ldr	r2, [pc, #28]	; (8002104 <HAL_Init+0x40>)
 80020e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ec:	2003      	movs	r0, #3
 80020ee:	f000 f973 	bl	80023d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020f2:	2000      	movs	r0, #0
 80020f4:	f000 f808 	bl	8002108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020f8:	f7ff fe6a 	bl	8001dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40023c00 	.word	0x40023c00

08002108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002110:	4b12      	ldr	r3, [pc, #72]	; (800215c <HAL_InitTick+0x54>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4b12      	ldr	r3, [pc, #72]	; (8002160 <HAL_InitTick+0x58>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	4619      	mov	r1, r3
 800211a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800211e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002122:	fbb2 f3f3 	udiv	r3, r2, r3
 8002126:	4618      	mov	r0, r3
 8002128:	f000 f999 	bl	800245e <HAL_SYSTICK_Config>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e00e      	b.n	8002154 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b0f      	cmp	r3, #15
 800213a:	d80a      	bhi.n	8002152 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800213c:	2200      	movs	r2, #0
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	f04f 30ff 	mov.w	r0, #4294967295
 8002144:	f000 f953 	bl	80023ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002148:	4a06      	ldr	r2, [pc, #24]	; (8002164 <HAL_InitTick+0x5c>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800214e:	2300      	movs	r3, #0
 8002150:	e000      	b.n	8002154 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
}
 8002154:	4618      	mov	r0, r3
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20000014 	.word	0x20000014
 8002160:	20000048 	.word	0x20000048
 8002164:	20000044 	.word	0x20000044

08002168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_IncTick+0x20>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	461a      	mov	r2, r3
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_IncTick+0x24>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4413      	add	r3, r2
 8002178:	4a04      	ldr	r2, [pc, #16]	; (800218c <HAL_IncTick+0x24>)
 800217a:	6013      	str	r3, [r2, #0]
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	20000048 	.word	0x20000048
 800218c:	200005a0 	.word	0x200005a0

08002190 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return uwTick;
 8002194:	4b03      	ldr	r3, [pc, #12]	; (80021a4 <HAL_GetTick+0x14>)
 8002196:	681b      	ldr	r3, [r3, #0]
}
 8002198:	4618      	mov	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	200005a0 	.word	0x200005a0

080021a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021b0:	f7ff ffee 	bl	8002190 <HAL_GetTick>
 80021b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c0:	d005      	beq.n	80021ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021c2:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <HAL_Delay+0x44>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4413      	add	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021ce:	bf00      	nop
 80021d0:	f7ff ffde 	bl	8002190 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d8f7      	bhi.n	80021d0 <HAL_Delay+0x28>
  {
  }
}
 80021e0:	bf00      	nop
 80021e2:	bf00      	nop
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000048 	.word	0x20000048

080021f0 <__NVIC_SetPriorityGrouping>:
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002200:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <__NVIC_SetPriorityGrouping+0x44>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800220c:	4013      	ands	r3, r2
 800220e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002218:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800221c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002222:	4a04      	ldr	r2, [pc, #16]	; (8002234 <__NVIC_SetPriorityGrouping+0x44>)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	60d3      	str	r3, [r2, #12]
}
 8002228:	bf00      	nop
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <__NVIC_GetPriorityGrouping>:
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800223c:	4b04      	ldr	r3, [pc, #16]	; (8002250 <__NVIC_GetPriorityGrouping+0x18>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	0a1b      	lsrs	r3, r3, #8
 8002242:	f003 0307 	and.w	r3, r3, #7
}
 8002246:	4618      	mov	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <__NVIC_EnableIRQ>:
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	2b00      	cmp	r3, #0
 8002264:	db0b      	blt.n	800227e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	f003 021f 	and.w	r2, r3, #31
 800226c:	4907      	ldr	r1, [pc, #28]	; (800228c <__NVIC_EnableIRQ+0x38>)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	2001      	movs	r0, #1
 8002276:	fa00 f202 	lsl.w	r2, r0, r2
 800227a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000e100 	.word	0xe000e100

08002290 <__NVIC_DisableIRQ>:
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	db12      	blt.n	80022c8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	f003 021f 	and.w	r2, r3, #31
 80022a8:	490a      	ldr	r1, [pc, #40]	; (80022d4 <__NVIC_DisableIRQ+0x44>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	2001      	movs	r0, #1
 80022b2:	fa00 f202 	lsl.w	r2, r0, r2
 80022b6:	3320      	adds	r3, #32
 80022b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80022bc:	f3bf 8f4f 	dsb	sy
}
 80022c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80022c2:	f3bf 8f6f 	isb	sy
}
 80022c6:	bf00      	nop
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000e100 	.word	0xe000e100

080022d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	6039      	str	r1, [r7, #0]
 80022e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	db0a      	blt.n	8002302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	490c      	ldr	r1, [pc, #48]	; (8002324 <__NVIC_SetPriority+0x4c>)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	0112      	lsls	r2, r2, #4
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	440b      	add	r3, r1
 80022fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002300:	e00a      	b.n	8002318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4908      	ldr	r1, [pc, #32]	; (8002328 <__NVIC_SetPriority+0x50>)
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	3b04      	subs	r3, #4
 8002310:	0112      	lsls	r2, r2, #4
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	440b      	add	r3, r1
 8002316:	761a      	strb	r2, [r3, #24]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000e100 	.word	0xe000e100
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800232c:	b480      	push	{r7}
 800232e:	b089      	sub	sp, #36	; 0x24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f1c3 0307 	rsb	r3, r3, #7
 8002346:	2b04      	cmp	r3, #4
 8002348:	bf28      	it	cs
 800234a:	2304      	movcs	r3, #4
 800234c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3304      	adds	r3, #4
 8002352:	2b06      	cmp	r3, #6
 8002354:	d902      	bls.n	800235c <NVIC_EncodePriority+0x30>
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3b03      	subs	r3, #3
 800235a:	e000      	b.n	800235e <NVIC_EncodePriority+0x32>
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002360:	f04f 32ff 	mov.w	r2, #4294967295
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43da      	mvns	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	401a      	ands	r2, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002374:	f04f 31ff 	mov.w	r1, #4294967295
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	fa01 f303 	lsl.w	r3, r1, r3
 800237e:	43d9      	mvns	r1, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002384:	4313      	orrs	r3, r2
         );
}
 8002386:	4618      	mov	r0, r3
 8002388:	3724      	adds	r7, #36	; 0x24
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3b01      	subs	r3, #1
 80023a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023a4:	d301      	bcc.n	80023aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023a6:	2301      	movs	r3, #1
 80023a8:	e00f      	b.n	80023ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023aa:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <SysTick_Config+0x40>)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023b2:	210f      	movs	r1, #15
 80023b4:	f04f 30ff 	mov.w	r0, #4294967295
 80023b8:	f7ff ff8e 	bl	80022d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <SysTick_Config+0x40>)
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023c2:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <SysTick_Config+0x40>)
 80023c4:	2207      	movs	r2, #7
 80023c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	e000e010 	.word	0xe000e010

080023d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7ff ff05 	bl	80021f0 <__NVIC_SetPriorityGrouping>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b086      	sub	sp, #24
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	4603      	mov	r3, r0
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002400:	f7ff ff1a 	bl	8002238 <__NVIC_GetPriorityGrouping>
 8002404:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	6978      	ldr	r0, [r7, #20]
 800240c:	f7ff ff8e 	bl	800232c <NVIC_EncodePriority>
 8002410:	4602      	mov	r2, r0
 8002412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff5d 	bl	80022d8 <__NVIC_SetPriority>
}
 800241e:	bf00      	nop
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	4603      	mov	r3, r0
 800242e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff ff0d 	bl	8002254 <__NVIC_EnableIRQ>
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	4603      	mov	r3, r0
 800244a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800244c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff ff1d 	bl	8002290 <__NVIC_DisableIRQ>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff ff94 	bl	8002394 <SysTick_Config>
 800246c:	4603      	mov	r3, r0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002478:	b480      	push	{r7}
 800247a:	b089      	sub	sp, #36	; 0x24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002486:	2300      	movs	r3, #0
 8002488:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800248a:	2300      	movs	r3, #0
 800248c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
 8002492:	e159      	b.n	8002748 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002494:	2201      	movs	r2, #1
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	f040 8148 	bne.w	8002742 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d005      	beq.n	80024ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d130      	bne.n	800252c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	2203      	movs	r2, #3
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4013      	ands	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002500:	2201      	movs	r2, #1
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	091b      	lsrs	r3, r3, #4
 8002516:	f003 0201 	and.w	r2, r3, #1
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 0303 	and.w	r3, r3, #3
 8002534:	2b03      	cmp	r3, #3
 8002536:	d017      	beq.n	8002568 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	2203      	movs	r2, #3
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d123      	bne.n	80025bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	08da      	lsrs	r2, r3, #3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3208      	adds	r2, #8
 800257c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002580:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	220f      	movs	r2, #15
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	08da      	lsrs	r2, r3, #3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3208      	adds	r2, #8
 80025b6:	69b9      	ldr	r1, [r7, #24]
 80025b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	2203      	movs	r2, #3
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 0203 	and.w	r2, r3, #3
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 80a2 	beq.w	8002742 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	4b57      	ldr	r3, [pc, #348]	; (8002760 <HAL_GPIO_Init+0x2e8>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002606:	4a56      	ldr	r2, [pc, #344]	; (8002760 <HAL_GPIO_Init+0x2e8>)
 8002608:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800260c:	6453      	str	r3, [r2, #68]	; 0x44
 800260e:	4b54      	ldr	r3, [pc, #336]	; (8002760 <HAL_GPIO_Init+0x2e8>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800261a:	4a52      	ldr	r2, [pc, #328]	; (8002764 <HAL_GPIO_Init+0x2ec>)
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	089b      	lsrs	r3, r3, #2
 8002620:	3302      	adds	r3, #2
 8002622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	220f      	movs	r2, #15
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a49      	ldr	r2, [pc, #292]	; (8002768 <HAL_GPIO_Init+0x2f0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d019      	beq.n	800267a <HAL_GPIO_Init+0x202>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a48      	ldr	r2, [pc, #288]	; (800276c <HAL_GPIO_Init+0x2f4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d013      	beq.n	8002676 <HAL_GPIO_Init+0x1fe>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a47      	ldr	r2, [pc, #284]	; (8002770 <HAL_GPIO_Init+0x2f8>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d00d      	beq.n	8002672 <HAL_GPIO_Init+0x1fa>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a46      	ldr	r2, [pc, #280]	; (8002774 <HAL_GPIO_Init+0x2fc>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d007      	beq.n	800266e <HAL_GPIO_Init+0x1f6>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a45      	ldr	r2, [pc, #276]	; (8002778 <HAL_GPIO_Init+0x300>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d101      	bne.n	800266a <HAL_GPIO_Init+0x1f2>
 8002666:	2304      	movs	r3, #4
 8002668:	e008      	b.n	800267c <HAL_GPIO_Init+0x204>
 800266a:	2307      	movs	r3, #7
 800266c:	e006      	b.n	800267c <HAL_GPIO_Init+0x204>
 800266e:	2303      	movs	r3, #3
 8002670:	e004      	b.n	800267c <HAL_GPIO_Init+0x204>
 8002672:	2302      	movs	r3, #2
 8002674:	e002      	b.n	800267c <HAL_GPIO_Init+0x204>
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <HAL_GPIO_Init+0x204>
 800267a:	2300      	movs	r3, #0
 800267c:	69fa      	ldr	r2, [r7, #28]
 800267e:	f002 0203 	and.w	r2, r2, #3
 8002682:	0092      	lsls	r2, r2, #2
 8002684:	4093      	lsls	r3, r2
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800268c:	4935      	ldr	r1, [pc, #212]	; (8002764 <HAL_GPIO_Init+0x2ec>)
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	089b      	lsrs	r3, r3, #2
 8002692:	3302      	adds	r3, #2
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800269a:	4b38      	ldr	r3, [pc, #224]	; (800277c <HAL_GPIO_Init+0x304>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4013      	ands	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026be:	4a2f      	ldr	r2, [pc, #188]	; (800277c <HAL_GPIO_Init+0x304>)
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026c4:	4b2d      	ldr	r3, [pc, #180]	; (800277c <HAL_GPIO_Init+0x304>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026e8:	4a24      	ldr	r2, [pc, #144]	; (800277c <HAL_GPIO_Init+0x304>)
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026ee:	4b23      	ldr	r3, [pc, #140]	; (800277c <HAL_GPIO_Init+0x304>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002712:	4a1a      	ldr	r2, [pc, #104]	; (800277c <HAL_GPIO_Init+0x304>)
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002718:	4b18      	ldr	r3, [pc, #96]	; (800277c <HAL_GPIO_Init+0x304>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800273c:	4a0f      	ldr	r2, [pc, #60]	; (800277c <HAL_GPIO_Init+0x304>)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	3301      	adds	r3, #1
 8002746:	61fb      	str	r3, [r7, #28]
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	2b0f      	cmp	r3, #15
 800274c:	f67f aea2 	bls.w	8002494 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002750:	bf00      	nop
 8002752:	bf00      	nop
 8002754:	3724      	adds	r7, #36	; 0x24
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40023800 	.word	0x40023800
 8002764:	40013800 	.word	0x40013800
 8002768:	40020000 	.word	0x40020000
 800276c:	40020400 	.word	0x40020400
 8002770:	40020800 	.word	0x40020800
 8002774:	40020c00 	.word	0x40020c00
 8002778:	40021000 	.word	0x40021000
 800277c:	40013c00 	.word	0x40013c00

08002780 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	887b      	ldrh	r3, [r7, #2]
 8002792:	4013      	ands	r3, r2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d002      	beq.n	800279e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
 800279c:	e001      	b.n	80027a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800279e:	2300      	movs	r3, #0
 80027a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	807b      	strh	r3, [r7, #2]
 80027bc:	4613      	mov	r3, r2
 80027be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027c0:	787b      	ldrb	r3, [r7, #1]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027c6:	887a      	ldrh	r2, [r7, #2]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027cc:	e003      	b.n	80027d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ce:	887b      	ldrh	r3, [r7, #2]
 80027d0:	041a      	lsls	r2, r3, #16
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	619a      	str	r2, [r3, #24]
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027ee:	4b08      	ldr	r3, [pc, #32]	; (8002810 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027f0:	695a      	ldr	r2, [r3, #20]
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d006      	beq.n	8002808 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027fa:	4a05      	ldr	r2, [pc, #20]	; (8002810 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027fc:	88fb      	ldrh	r3, [r7, #6]
 80027fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002800:	88fb      	ldrh	r3, [r7, #6]
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe fdc8 	bl	8001398 <HAL_GPIO_EXTI_Callback>
  }
}
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40013c00 	.word	0x40013c00

08002814 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e12b      	b.n	8002a7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d106      	bne.n	8002840 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff f97e 	bl	8001b3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2224      	movs	r2, #36	; 0x24
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0201 	bic.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002866:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002876:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002878:	f001 f976 	bl	8003b68 <HAL_RCC_GetPCLK1Freq>
 800287c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	4a81      	ldr	r2, [pc, #516]	; (8002a88 <HAL_I2C_Init+0x274>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d807      	bhi.n	8002898 <HAL_I2C_Init+0x84>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4a80      	ldr	r2, [pc, #512]	; (8002a8c <HAL_I2C_Init+0x278>)
 800288c:	4293      	cmp	r3, r2
 800288e:	bf94      	ite	ls
 8002890:	2301      	movls	r3, #1
 8002892:	2300      	movhi	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	e006      	b.n	80028a6 <HAL_I2C_Init+0x92>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4a7d      	ldr	r2, [pc, #500]	; (8002a90 <HAL_I2C_Init+0x27c>)
 800289c:	4293      	cmp	r3, r2
 800289e:	bf94      	ite	ls
 80028a0:	2301      	movls	r3, #1
 80028a2:	2300      	movhi	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e0e7      	b.n	8002a7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4a78      	ldr	r2, [pc, #480]	; (8002a94 <HAL_I2C_Init+0x280>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	0c9b      	lsrs	r3, r3, #18
 80028b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	4a6a      	ldr	r2, [pc, #424]	; (8002a88 <HAL_I2C_Init+0x274>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d802      	bhi.n	80028e8 <HAL_I2C_Init+0xd4>
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	3301      	adds	r3, #1
 80028e6:	e009      	b.n	80028fc <HAL_I2C_Init+0xe8>
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028ee:	fb02 f303 	mul.w	r3, r2, r3
 80028f2:	4a69      	ldr	r2, [pc, #420]	; (8002a98 <HAL_I2C_Init+0x284>)
 80028f4:	fba2 2303 	umull	r2, r3, r2, r3
 80028f8:	099b      	lsrs	r3, r3, #6
 80028fa:	3301      	adds	r3, #1
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	430b      	orrs	r3, r1
 8002902:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800290e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	495c      	ldr	r1, [pc, #368]	; (8002a88 <HAL_I2C_Init+0x274>)
 8002918:	428b      	cmp	r3, r1
 800291a:	d819      	bhi.n	8002950 <HAL_I2C_Init+0x13c>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	1e59      	subs	r1, r3, #1
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	fbb1 f3f3 	udiv	r3, r1, r3
 800292a:	1c59      	adds	r1, r3, #1
 800292c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002930:	400b      	ands	r3, r1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <HAL_I2C_Init+0x138>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	1e59      	subs	r1, r3, #1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	fbb1 f3f3 	udiv	r3, r1, r3
 8002944:	3301      	adds	r3, #1
 8002946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800294a:	e051      	b.n	80029f0 <HAL_I2C_Init+0x1dc>
 800294c:	2304      	movs	r3, #4
 800294e:	e04f      	b.n	80029f0 <HAL_I2C_Init+0x1dc>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d111      	bne.n	800297c <HAL_I2C_Init+0x168>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	1e58      	subs	r0, r3, #1
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6859      	ldr	r1, [r3, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	440b      	add	r3, r1
 8002966:	fbb0 f3f3 	udiv	r3, r0, r3
 800296a:	3301      	adds	r3, #1
 800296c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002970:	2b00      	cmp	r3, #0
 8002972:	bf0c      	ite	eq
 8002974:	2301      	moveq	r3, #1
 8002976:	2300      	movne	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	e012      	b.n	80029a2 <HAL_I2C_Init+0x18e>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	1e58      	subs	r0, r3, #1
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6859      	ldr	r1, [r3, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	0099      	lsls	r1, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002992:	3301      	adds	r3, #1
 8002994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002998:	2b00      	cmp	r3, #0
 800299a:	bf0c      	ite	eq
 800299c:	2301      	moveq	r3, #1
 800299e:	2300      	movne	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_I2C_Init+0x196>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e022      	b.n	80029f0 <HAL_I2C_Init+0x1dc>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10e      	bne.n	80029d0 <HAL_I2C_Init+0x1bc>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	1e58      	subs	r0, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6859      	ldr	r1, [r3, #4]
 80029ba:	460b      	mov	r3, r1
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	440b      	add	r3, r1
 80029c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c4:	3301      	adds	r3, #1
 80029c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ce:	e00f      	b.n	80029f0 <HAL_I2C_Init+0x1dc>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	1e58      	subs	r0, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6859      	ldr	r1, [r3, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	0099      	lsls	r1, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e6:	3301      	adds	r3, #1
 80029e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	6809      	ldr	r1, [r1, #0]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69da      	ldr	r2, [r3, #28]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6911      	ldr	r1, [r2, #16]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	68d2      	ldr	r2, [r2, #12]
 8002a2a:	4311      	orrs	r1, r2
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	430b      	orrs	r3, r1
 8002a32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	695a      	ldr	r2, [r3, #20]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	000186a0 	.word	0x000186a0
 8002a8c:	001e847f 	.word	0x001e847f
 8002a90:	003d08ff 	.word	0x003d08ff
 8002a94:	431bde83 	.word	0x431bde83
 8002a98:	10624dd3 	.word	0x10624dd3

08002a9c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af02      	add	r7, sp, #8
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	607a      	str	r2, [r7, #4]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	817b      	strh	r3, [r7, #10]
 8002aac:	4613      	mov	r3, r2
 8002aae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ab0:	f7ff fb6e 	bl	8002190 <HAL_GetTick>
 8002ab4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b20      	cmp	r3, #32
 8002ac0:	f040 80e0 	bne.w	8002c84 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	2319      	movs	r3, #25
 8002aca:	2201      	movs	r2, #1
 8002acc:	4970      	ldr	r1, [pc, #448]	; (8002c90 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 fa92 	bl	8002ff8 <I2C_WaitOnFlagUntilTimeout>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ada:	2302      	movs	r3, #2
 8002adc:	e0d3      	b.n	8002c86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d101      	bne.n	8002aec <HAL_I2C_Master_Transmit+0x50>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	e0cc      	b.n	8002c86 <HAL_I2C_Master_Transmit+0x1ea>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d007      	beq.n	8002b12 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f042 0201 	orr.w	r2, r2, #1
 8002b10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2221      	movs	r2, #33	; 0x21
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2210      	movs	r2, #16
 8002b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	893a      	ldrh	r2, [r7, #8]
 8002b42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4a50      	ldr	r2, [pc, #320]	; (8002c94 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b54:	8979      	ldrh	r1, [r7, #10]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	6a3a      	ldr	r2, [r7, #32]
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f9ca 	bl	8002ef4 <I2C_MasterRequestWrite>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e08d      	b.n	8002c86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b80:	e066      	b.n	8002c50 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	6a39      	ldr	r1, [r7, #32]
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 fb0c 	bl	80031a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00d      	beq.n	8002bae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d107      	bne.n	8002baa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e06b      	b.n	8002c86 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	781a      	ldrb	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d11b      	bne.n	8002c24 <HAL_I2C_Master_Transmit+0x188>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d017      	beq.n	8002c24 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	781a      	ldrb	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	6a39      	ldr	r1, [r7, #32]
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 fafc 	bl	8003226 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00d      	beq.n	8002c50 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d107      	bne.n	8002c4c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c4a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e01a      	b.n	8002c86 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d194      	bne.n	8002b82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	e000      	b.n	8002c86 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c84:	2302      	movs	r3, #2
  }
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	00100002 	.word	0x00100002
 8002c94:	ffff0000 	.word	0xffff0000

08002c98 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08a      	sub	sp, #40	; 0x28
 8002c9c:	af02      	add	r7, sp, #8
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	607a      	str	r2, [r7, #4]
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002ca8:	f7ff fa72 	bl	8002190 <HAL_GetTick>
 8002cac:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b20      	cmp	r3, #32
 8002cbc:	f040 8111 	bne.w	8002ee2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	2319      	movs	r3, #25
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	4988      	ldr	r1, [pc, #544]	; (8002eec <HAL_I2C_IsDeviceReady+0x254>)
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 f994 	bl	8002ff8 <I2C_WaitOnFlagUntilTimeout>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e104      	b.n	8002ee4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_I2C_IsDeviceReady+0x50>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e0fd      	b.n	8002ee4 <HAL_I2C_IsDeviceReady+0x24c>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d007      	beq.n	8002d0e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f042 0201 	orr.w	r2, r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2224      	movs	r2, #36	; 0x24
 8002d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4a70      	ldr	r2, [pc, #448]	; (8002ef0 <HAL_I2C_IsDeviceReady+0x258>)
 8002d30:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d40:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 f952 	bl	8002ff8 <I2C_WaitOnFlagUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00d      	beq.n	8002d76 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d68:	d103      	bne.n	8002d72 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d70:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e0b6      	b.n	8002ee4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d76:	897b      	ldrh	r3, [r7, #10]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d84:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002d86:	f7ff fa03 	bl	8002190 <HAL_GetTick>
 8002d8a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	bf0c      	ite	eq
 8002d9a:	2301      	moveq	r3, #1
 8002d9c:	2300      	movne	r3, #0
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db0:	bf0c      	ite	eq
 8002db2:	2301      	moveq	r3, #1
 8002db4:	2300      	movne	r3, #0
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002dba:	e025      	b.n	8002e08 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dbc:	f7ff f9e8 	bl	8002190 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d302      	bcc.n	8002dd2 <HAL_I2C_IsDeviceReady+0x13a>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d103      	bne.n	8002dda <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	22a0      	movs	r2, #160	; 0xa0
 8002dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	bf0c      	ite	eq
 8002de8:	2301      	moveq	r3, #1
 8002dea:	2300      	movne	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dfe:	bf0c      	ite	eq
 8002e00:	2301      	moveq	r3, #1
 8002e02:	2300      	movne	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2ba0      	cmp	r3, #160	; 0xa0
 8002e12:	d005      	beq.n	8002e20 <HAL_I2C_IsDeviceReady+0x188>
 8002e14:	7dfb      	ldrb	r3, [r7, #23]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d102      	bne.n	8002e20 <HAL_I2C_IsDeviceReady+0x188>
 8002e1a:	7dbb      	ldrb	r3, [r7, #22]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0cd      	beq.n	8002dbc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d129      	bne.n	8002e8a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e44:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e46:	2300      	movs	r3, #0
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	613b      	str	r3, [r7, #16]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	2319      	movs	r3, #25
 8002e62:	2201      	movs	r2, #1
 8002e64:	4921      	ldr	r1, [pc, #132]	; (8002eec <HAL_I2C_IsDeviceReady+0x254>)
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 f8c6 	bl	8002ff8 <I2C_WaitOnFlagUntilTimeout>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e036      	b.n	8002ee4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	e02c      	b.n	8002ee4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e98:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ea2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	2319      	movs	r3, #25
 8002eaa:	2201      	movs	r2, #1
 8002eac:	490f      	ldr	r1, [pc, #60]	; (8002eec <HAL_I2C_IsDeviceReady+0x254>)
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f8a2 	bl	8002ff8 <I2C_WaitOnFlagUntilTimeout>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e012      	b.n	8002ee4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	f4ff af32 	bcc.w	8002d32 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002ee2:	2302      	movs	r3, #2
  }
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3720      	adds	r7, #32
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	00100002 	.word	0x00100002
 8002ef0:	ffff0000 	.word	0xffff0000

08002ef4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b088      	sub	sp, #32
 8002ef8:	af02      	add	r7, sp, #8
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	607a      	str	r2, [r7, #4]
 8002efe:	603b      	str	r3, [r7, #0]
 8002f00:	460b      	mov	r3, r1
 8002f02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d006      	beq.n	8002f1e <I2C_MasterRequestWrite+0x2a>
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d003      	beq.n	8002f1e <I2C_MasterRequestWrite+0x2a>
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f1c:	d108      	bne.n	8002f30 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	e00b      	b.n	8002f48 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f34:	2b12      	cmp	r3, #18
 8002f36:	d107      	bne.n	8002f48 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 f84f 	bl	8002ff8 <I2C_WaitOnFlagUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00d      	beq.n	8002f7c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f6e:	d103      	bne.n	8002f78 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e035      	b.n	8002fe8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f84:	d108      	bne.n	8002f98 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f86:	897b      	ldrh	r3, [r7, #10]
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f94:	611a      	str	r2, [r3, #16]
 8002f96:	e01b      	b.n	8002fd0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f98:	897b      	ldrh	r3, [r7, #10]
 8002f9a:	11db      	asrs	r3, r3, #7
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	f003 0306 	and.w	r3, r3, #6
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	f063 030f 	orn	r3, r3, #15
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	490e      	ldr	r1, [pc, #56]	; (8002ff0 <I2C_MasterRequestWrite+0xfc>)
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 f875 	bl	80030a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e010      	b.n	8002fe8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002fc6:	897b      	ldrh	r3, [r7, #10]
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	4907      	ldr	r1, [pc, #28]	; (8002ff4 <I2C_MasterRequestWrite+0x100>)
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f865 	bl	80030a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	00010008 	.word	0x00010008
 8002ff4:	00010002 	.word	0x00010002

08002ff8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	4613      	mov	r3, r2
 8003006:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003008:	e025      	b.n	8003056 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003010:	d021      	beq.n	8003056 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003012:	f7ff f8bd 	bl	8002190 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d302      	bcc.n	8003028 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d116      	bne.n	8003056 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2220      	movs	r2, #32
 8003032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	f043 0220 	orr.w	r2, r3, #32
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e023      	b.n	800309e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	0c1b      	lsrs	r3, r3, #16
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b01      	cmp	r3, #1
 800305e:	d10d      	bne.n	800307c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	43da      	mvns	r2, r3
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	4013      	ands	r3, r2
 800306c:	b29b      	uxth	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	bf0c      	ite	eq
 8003072:	2301      	moveq	r3, #1
 8003074:	2300      	movne	r3, #0
 8003076:	b2db      	uxtb	r3, r3
 8003078:	461a      	mov	r2, r3
 800307a:	e00c      	b.n	8003096 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	43da      	mvns	r2, r3
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	4013      	ands	r3, r2
 8003088:	b29b      	uxth	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	bf0c      	ite	eq
 800308e:	2301      	moveq	r3, #1
 8003090:	2300      	movne	r3, #0
 8003092:	b2db      	uxtb	r3, r3
 8003094:	461a      	mov	r2, r3
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	429a      	cmp	r2, r3
 800309a:	d0b6      	beq.n	800300a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b084      	sub	sp, #16
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	607a      	str	r2, [r7, #4]
 80030b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030b4:	e051      	b.n	800315a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c4:	d123      	bne.n	800310e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2220      	movs	r2, #32
 80030ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	f043 0204 	orr.w	r2, r3, #4
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e046      	b.n	800319c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003114:	d021      	beq.n	800315a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003116:	f7ff f83b 	bl	8002190 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	429a      	cmp	r2, r3
 8003124:	d302      	bcc.n	800312c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d116      	bne.n	800315a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2220      	movs	r2, #32
 8003136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f043 0220 	orr.w	r2, r3, #32
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e020      	b.n	800319c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	0c1b      	lsrs	r3, r3, #16
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b01      	cmp	r3, #1
 8003162:	d10c      	bne.n	800317e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	43da      	mvns	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	4013      	ands	r3, r2
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	bf14      	ite	ne
 8003176:	2301      	movne	r3, #1
 8003178:	2300      	moveq	r3, #0
 800317a:	b2db      	uxtb	r3, r3
 800317c:	e00b      	b.n	8003196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	43da      	mvns	r2, r3
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	4013      	ands	r3, r2
 800318a:	b29b      	uxth	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	bf14      	ite	ne
 8003190:	2301      	movne	r3, #1
 8003192:	2300      	moveq	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d18d      	bne.n	80030b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031b0:	e02d      	b.n	800320e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 f878 	bl	80032a8 <I2C_IsAcknowledgeFailed>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e02d      	b.n	800321e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c8:	d021      	beq.n	800320e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ca:	f7fe ffe1 	bl	8002190 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d302      	bcc.n	80031e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d116      	bne.n	800320e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f043 0220 	orr.w	r2, r3, #32
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e007      	b.n	800321e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003218:	2b80      	cmp	r3, #128	; 0x80
 800321a:	d1ca      	bne.n	80031b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b084      	sub	sp, #16
 800322a:	af00      	add	r7, sp, #0
 800322c:	60f8      	str	r0, [r7, #12]
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003232:	e02d      	b.n	8003290 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 f837 	bl	80032a8 <I2C_IsAcknowledgeFailed>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e02d      	b.n	80032a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324a:	d021      	beq.n	8003290 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800324c:	f7fe ffa0 	bl	8002190 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	429a      	cmp	r2, r3
 800325a:	d302      	bcc.n	8003262 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d116      	bne.n	8003290 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	f043 0220 	orr.w	r2, r3, #32
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e007      	b.n	80032a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f003 0304 	and.w	r3, r3, #4
 800329a:	2b04      	cmp	r3, #4
 800329c:	d1ca      	bne.n	8003234 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032be:	d11b      	bne.n	80032f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e4:	f043 0204 	orr.w	r2, r3, #4
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e000      	b.n	80032fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
	...

08003308 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e267      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d075      	beq.n	8003412 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003326:	4b88      	ldr	r3, [pc, #544]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	2b04      	cmp	r3, #4
 8003330:	d00c      	beq.n	800334c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003332:	4b85      	ldr	r3, [pc, #532]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800333a:	2b08      	cmp	r3, #8
 800333c:	d112      	bne.n	8003364 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800333e:	4b82      	ldr	r3, [pc, #520]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800334a:	d10b      	bne.n	8003364 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334c:	4b7e      	ldr	r3, [pc, #504]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d05b      	beq.n	8003410 <HAL_RCC_OscConfig+0x108>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d157      	bne.n	8003410 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e242      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336c:	d106      	bne.n	800337c <HAL_RCC_OscConfig+0x74>
 800336e:	4b76      	ldr	r3, [pc, #472]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a75      	ldr	r2, [pc, #468]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e01d      	b.n	80033b8 <HAL_RCC_OscConfig+0xb0>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0x98>
 8003386:	4b70      	ldr	r3, [pc, #448]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a6f      	ldr	r2, [pc, #444]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800338c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	4b6d      	ldr	r3, [pc, #436]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a6c      	ldr	r2, [pc, #432]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	e00b      	b.n	80033b8 <HAL_RCC_OscConfig+0xb0>
 80033a0:	4b69      	ldr	r3, [pc, #420]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a68      	ldr	r2, [pc, #416]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	4b66      	ldr	r3, [pc, #408]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a65      	ldr	r2, [pc, #404]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d013      	beq.n	80033e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7fe fee6 	bl	8002190 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033c8:	f7fe fee2 	bl	8002190 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b64      	cmp	r3, #100	; 0x64
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e207      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033da:	4b5b      	ldr	r3, [pc, #364]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0xc0>
 80033e6:	e014      	b.n	8003412 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7fe fed2 	bl	8002190 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f0:	f7fe fece 	bl	8002190 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b64      	cmp	r3, #100	; 0x64
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e1f3      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003402:	4b51      	ldr	r3, [pc, #324]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0xe8>
 800340e:	e000      	b.n	8003412 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d063      	beq.n	80034e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800341e:	4b4a      	ldr	r3, [pc, #296]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00b      	beq.n	8003442 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800342a:	4b47      	ldr	r3, [pc, #284]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003432:	2b08      	cmp	r3, #8
 8003434:	d11c      	bne.n	8003470 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003436:	4b44      	ldr	r3, [pc, #272]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d116      	bne.n	8003470 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003442:	4b41      	ldr	r3, [pc, #260]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_RCC_OscConfig+0x152>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d001      	beq.n	800345a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e1c7      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345a:	4b3b      	ldr	r3, [pc, #236]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4937      	ldr	r1, [pc, #220]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800346a:	4313      	orrs	r3, r2
 800346c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800346e:	e03a      	b.n	80034e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d020      	beq.n	80034ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003478:	4b34      	ldr	r3, [pc, #208]	; (800354c <HAL_RCC_OscConfig+0x244>)
 800347a:	2201      	movs	r2, #1
 800347c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347e:	f7fe fe87 	bl	8002190 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003486:	f7fe fe83 	bl	8002190 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e1a8      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003498:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0f0      	beq.n	8003486 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a4:	4b28      	ldr	r3, [pc, #160]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4925      	ldr	r1, [pc, #148]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	600b      	str	r3, [r1, #0]
 80034b8:	e015      	b.n	80034e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ba:	4b24      	ldr	r3, [pc, #144]	; (800354c <HAL_RCC_OscConfig+0x244>)
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c0:	f7fe fe66 	bl	8002190 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034c8:	f7fe fe62 	bl	8002190 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e187      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034da:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d036      	beq.n	8003560 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d016      	beq.n	8003528 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034fa:	4b15      	ldr	r3, [pc, #84]	; (8003550 <HAL_RCC_OscConfig+0x248>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003500:	f7fe fe46 	bl	8002190 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003508:	f7fe fe42 	bl	8002190 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e167      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351a:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800351c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f0      	beq.n	8003508 <HAL_RCC_OscConfig+0x200>
 8003526:	e01b      	b.n	8003560 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003528:	4b09      	ldr	r3, [pc, #36]	; (8003550 <HAL_RCC_OscConfig+0x248>)
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352e:	f7fe fe2f 	bl	8002190 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003534:	e00e      	b.n	8003554 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003536:	f7fe fe2b 	bl	8002190 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d907      	bls.n	8003554 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e150      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
 8003548:	40023800 	.word	0x40023800
 800354c:	42470000 	.word	0x42470000
 8003550:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003554:	4b88      	ldr	r3, [pc, #544]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1ea      	bne.n	8003536 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 8097 	beq.w	800369c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800356e:	2300      	movs	r3, #0
 8003570:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003572:	4b81      	ldr	r3, [pc, #516]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10f      	bne.n	800359e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800357e:	2300      	movs	r3, #0
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	4b7d      	ldr	r3, [pc, #500]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	4a7c      	ldr	r2, [pc, #496]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800358c:	6413      	str	r3, [r2, #64]	; 0x40
 800358e:	4b7a      	ldr	r3, [pc, #488]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800359a:	2301      	movs	r3, #1
 800359c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359e:	4b77      	ldr	r3, [pc, #476]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d118      	bne.n	80035dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035aa:	4b74      	ldr	r3, [pc, #464]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a73      	ldr	r2, [pc, #460]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035b6:	f7fe fdeb 	bl	8002190 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035be:	f7fe fde7 	bl	8002190 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e10c      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d0:	4b6a      	ldr	r3, [pc, #424]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d106      	bne.n	80035f2 <HAL_RCC_OscConfig+0x2ea>
 80035e4:	4b64      	ldr	r3, [pc, #400]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80035e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e8:	4a63      	ldr	r2, [pc, #396]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	6713      	str	r3, [r2, #112]	; 0x70
 80035f0:	e01c      	b.n	800362c <HAL_RCC_OscConfig+0x324>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b05      	cmp	r3, #5
 80035f8:	d10c      	bne.n	8003614 <HAL_RCC_OscConfig+0x30c>
 80035fa:	4b5f      	ldr	r3, [pc, #380]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fe:	4a5e      	ldr	r2, [pc, #376]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003600:	f043 0304 	orr.w	r3, r3, #4
 8003604:	6713      	str	r3, [r2, #112]	; 0x70
 8003606:	4b5c      	ldr	r3, [pc, #368]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360a:	4a5b      	ldr	r2, [pc, #364]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	6713      	str	r3, [r2, #112]	; 0x70
 8003612:	e00b      	b.n	800362c <HAL_RCC_OscConfig+0x324>
 8003614:	4b58      	ldr	r3, [pc, #352]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003618:	4a57      	ldr	r2, [pc, #348]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 800361a:	f023 0301 	bic.w	r3, r3, #1
 800361e:	6713      	str	r3, [r2, #112]	; 0x70
 8003620:	4b55      	ldr	r3, [pc, #340]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003624:	4a54      	ldr	r2, [pc, #336]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003626:	f023 0304 	bic.w	r3, r3, #4
 800362a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d015      	beq.n	8003660 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003634:	f7fe fdac 	bl	8002190 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800363a:	e00a      	b.n	8003652 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800363c:	f7fe fda8 	bl	8002190 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	f241 3288 	movw	r2, #5000	; 0x1388
 800364a:	4293      	cmp	r3, r2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e0cb      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003652:	4b49      	ldr	r3, [pc, #292]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0ee      	beq.n	800363c <HAL_RCC_OscConfig+0x334>
 800365e:	e014      	b.n	800368a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003660:	f7fe fd96 	bl	8002190 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003666:	e00a      	b.n	800367e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003668:	f7fe fd92 	bl	8002190 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	f241 3288 	movw	r2, #5000	; 0x1388
 8003676:	4293      	cmp	r3, r2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e0b5      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800367e:	4b3e      	ldr	r3, [pc, #248]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1ee      	bne.n	8003668 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800368a:	7dfb      	ldrb	r3, [r7, #23]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d105      	bne.n	800369c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003690:	4b39      	ldr	r3, [pc, #228]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	4a38      	ldr	r2, [pc, #224]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800369a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80a1 	beq.w	80037e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036a6:	4b34      	ldr	r3, [pc, #208]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d05c      	beq.n	800376c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d141      	bne.n	800373e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ba:	4b31      	ldr	r3, [pc, #196]	; (8003780 <HAL_RCC_OscConfig+0x478>)
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c0:	f7fe fd66 	bl	8002190 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c8:	f7fe fd62 	bl	8002190 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e087      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036da:	4b27      	ldr	r3, [pc, #156]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69da      	ldr	r2, [r3, #28]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	019b      	lsls	r3, r3, #6
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fc:	085b      	lsrs	r3, r3, #1
 80036fe:	3b01      	subs	r3, #1
 8003700:	041b      	lsls	r3, r3, #16
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	061b      	lsls	r3, r3, #24
 800370a:	491b      	ldr	r1, [pc, #108]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 800370c:	4313      	orrs	r3, r2
 800370e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003710:	4b1b      	ldr	r3, [pc, #108]	; (8003780 <HAL_RCC_OscConfig+0x478>)
 8003712:	2201      	movs	r2, #1
 8003714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003716:	f7fe fd3b 	bl	8002190 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800371e:	f7fe fd37 	bl	8002190 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e05c      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003730:	4b11      	ldr	r3, [pc, #68]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0f0      	beq.n	800371e <HAL_RCC_OscConfig+0x416>
 800373c:	e054      	b.n	80037e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373e:	4b10      	ldr	r3, [pc, #64]	; (8003780 <HAL_RCC_OscConfig+0x478>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003744:	f7fe fd24 	bl	8002190 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374c:	f7fe fd20 	bl	8002190 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e045      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375e:	4b06      	ldr	r3, [pc, #24]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x444>
 800376a:	e03d      	b.n	80037e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d107      	bne.n	8003784 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e038      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
 8003778:	40023800 	.word	0x40023800
 800377c:	40007000 	.word	0x40007000
 8003780:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003784:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <HAL_RCC_OscConfig+0x4ec>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d028      	beq.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800379c:	429a      	cmp	r2, r3
 800379e:	d121      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d11a      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037b4:	4013      	ands	r3, r2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037bc:	4293      	cmp	r3, r2
 80037be:	d111      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ca:	085b      	lsrs	r3, r3, #1
 80037cc:	3b01      	subs	r3, #1
 80037ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d107      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d001      	beq.n	80037e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e000      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40023800 	.word	0x40023800

080037f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e0cc      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800380c:	4b68      	ldr	r3, [pc, #416]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d90c      	bls.n	8003834 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381a:	4b65      	ldr	r3, [pc, #404]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003822:	4b63      	ldr	r3, [pc, #396]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0b8      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d020      	beq.n	8003882 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800384c:	4b59      	ldr	r3, [pc, #356]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	4a58      	ldr	r2, [pc, #352]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003856:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003864:	4b53      	ldr	r3, [pc, #332]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	4a52      	ldr	r2, [pc, #328]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800386e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003870:	4b50      	ldr	r3, [pc, #320]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	494d      	ldr	r1, [pc, #308]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	4313      	orrs	r3, r2
 8003880:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d044      	beq.n	8003918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d107      	bne.n	80038a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003896:	4b47      	ldr	r3, [pc, #284]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d119      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e07f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d003      	beq.n	80038b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d107      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b6:	4b3f      	ldr	r3, [pc, #252]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d109      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e06f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c6:	4b3b      	ldr	r3, [pc, #236]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e067      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038d6:	4b37      	ldr	r3, [pc, #220]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f023 0203 	bic.w	r2, r3, #3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	4934      	ldr	r1, [pc, #208]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038e8:	f7fe fc52 	bl	8002190 <HAL_GetTick>
 80038ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ee:	e00a      	b.n	8003906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f0:	f7fe fc4e 	bl	8002190 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fe:	4293      	cmp	r3, r2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e04f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003906:	4b2b      	ldr	r3, [pc, #172]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 020c 	and.w	r2, r3, #12
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	429a      	cmp	r2, r3
 8003916:	d1eb      	bne.n	80038f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003918:	4b25      	ldr	r3, [pc, #148]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d20c      	bcs.n	8003940 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003926:	4b22      	ldr	r3, [pc, #136]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800392e:	4b20      	ldr	r3, [pc, #128]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d001      	beq.n	8003940 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e032      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800394c:	4b19      	ldr	r3, [pc, #100]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4916      	ldr	r1, [pc, #88]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	4313      	orrs	r3, r2
 800395c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d009      	beq.n	800397e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800396a:	4b12      	ldr	r3, [pc, #72]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	490e      	ldr	r1, [pc, #56]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	4313      	orrs	r3, r2
 800397c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800397e:	f000 f821 	bl	80039c4 <HAL_RCC_GetSysClockFreq>
 8003982:	4602      	mov	r2, r0
 8003984:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	490a      	ldr	r1, [pc, #40]	; (80039b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003990:	5ccb      	ldrb	r3, [r1, r3]
 8003992:	fa22 f303 	lsr.w	r3, r2, r3
 8003996:	4a09      	ldr	r2, [pc, #36]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800399a:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fe fbb2 	bl	8002108 <HAL_InitTick>

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40023c00 	.word	0x40023c00
 80039b4:	40023800 	.word	0x40023800
 80039b8:	08005e80 	.word	0x08005e80
 80039bc:	20000014 	.word	0x20000014
 80039c0:	20000044 	.word	0x20000044

080039c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039c8:	b090      	sub	sp, #64	; 0x40
 80039ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	637b      	str	r3, [r7, #52]	; 0x34
 80039d0:	2300      	movs	r3, #0
 80039d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039d4:	2300      	movs	r3, #0
 80039d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039dc:	4b59      	ldr	r3, [pc, #356]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x180>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 030c 	and.w	r3, r3, #12
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d00d      	beq.n	8003a04 <HAL_RCC_GetSysClockFreq+0x40>
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	f200 80a1 	bhi.w	8003b30 <HAL_RCC_GetSysClockFreq+0x16c>
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <HAL_RCC_GetSysClockFreq+0x34>
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d003      	beq.n	80039fe <HAL_RCC_GetSysClockFreq+0x3a>
 80039f6:	e09b      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039f8:	4b53      	ldr	r3, [pc, #332]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x184>)
 80039fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80039fc:	e09b      	b.n	8003b36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039fe:	4b53      	ldr	r3, [pc, #332]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x188>)
 8003a00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a02:	e098      	b.n	8003b36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a04:	4b4f      	ldr	r3, [pc, #316]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a0c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a0e:	4b4d      	ldr	r3, [pc, #308]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d028      	beq.n	8003a6c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a1a:	4b4a      	ldr	r3, [pc, #296]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	099b      	lsrs	r3, r3, #6
 8003a20:	2200      	movs	r2, #0
 8003a22:	623b      	str	r3, [r7, #32]
 8003a24:	627a      	str	r2, [r7, #36]	; 0x24
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	4b47      	ldr	r3, [pc, #284]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x188>)
 8003a30:	fb03 f201 	mul.w	r2, r3, r1
 8003a34:	2300      	movs	r3, #0
 8003a36:	fb00 f303 	mul.w	r3, r0, r3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	4a43      	ldr	r2, [pc, #268]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x188>)
 8003a3e:	fba0 1202 	umull	r1, r2, r0, r2
 8003a42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a44:	460a      	mov	r2, r1
 8003a46:	62ba      	str	r2, [r7, #40]	; 0x28
 8003a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a4a:	4413      	add	r3, r2
 8003a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a50:	2200      	movs	r2, #0
 8003a52:	61bb      	str	r3, [r7, #24]
 8003a54:	61fa      	str	r2, [r7, #28]
 8003a56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003a5e:	f7fc fbbb 	bl	80001d8 <__aeabi_uldivmod>
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	4613      	mov	r3, r2
 8003a68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a6a:	e053      	b.n	8003b14 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a6c:	4b35      	ldr	r3, [pc, #212]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	099b      	lsrs	r3, r3, #6
 8003a72:	2200      	movs	r2, #0
 8003a74:	613b      	str	r3, [r7, #16]
 8003a76:	617a      	str	r2, [r7, #20]
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a7e:	f04f 0b00 	mov.w	fp, #0
 8003a82:	4652      	mov	r2, sl
 8003a84:	465b      	mov	r3, fp
 8003a86:	f04f 0000 	mov.w	r0, #0
 8003a8a:	f04f 0100 	mov.w	r1, #0
 8003a8e:	0159      	lsls	r1, r3, #5
 8003a90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a94:	0150      	lsls	r0, r2, #5
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	ebb2 080a 	subs.w	r8, r2, sl
 8003a9e:	eb63 090b 	sbc.w	r9, r3, fp
 8003aa2:	f04f 0200 	mov.w	r2, #0
 8003aa6:	f04f 0300 	mov.w	r3, #0
 8003aaa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003aae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ab2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ab6:	ebb2 0408 	subs.w	r4, r2, r8
 8003aba:	eb63 0509 	sbc.w	r5, r3, r9
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	00eb      	lsls	r3, r5, #3
 8003ac8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003acc:	00e2      	lsls	r2, r4, #3
 8003ace:	4614      	mov	r4, r2
 8003ad0:	461d      	mov	r5, r3
 8003ad2:	eb14 030a 	adds.w	r3, r4, sl
 8003ad6:	603b      	str	r3, [r7, #0]
 8003ad8:	eb45 030b 	adc.w	r3, r5, fp
 8003adc:	607b      	str	r3, [r7, #4]
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	f04f 0300 	mov.w	r3, #0
 8003ae6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003aea:	4629      	mov	r1, r5
 8003aec:	028b      	lsls	r3, r1, #10
 8003aee:	4621      	mov	r1, r4
 8003af0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003af4:	4621      	mov	r1, r4
 8003af6:	028a      	lsls	r2, r1, #10
 8003af8:	4610      	mov	r0, r2
 8003afa:	4619      	mov	r1, r3
 8003afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003afe:	2200      	movs	r2, #0
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	60fa      	str	r2, [r7, #12]
 8003b04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b08:	f7fc fb66 	bl	80001d8 <__aeabi_uldivmod>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4613      	mov	r3, r2
 8003b12:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	0c1b      	lsrs	r3, r3, #16
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	3301      	adds	r3, #1
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003b24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b2e:	e002      	b.n	8003b36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b30:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b32:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3740      	adds	r7, #64	; 0x40
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b42:	bf00      	nop
 8003b44:	40023800 	.word	0x40023800
 8003b48:	00f42400 	.word	0x00f42400
 8003b4c:	018cba80 	.word	0x018cba80

08003b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b54:	4b03      	ldr	r3, [pc, #12]	; (8003b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b56:	681b      	ldr	r3, [r3, #0]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	20000014 	.word	0x20000014

08003b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b6c:	f7ff fff0 	bl	8003b50 <HAL_RCC_GetHCLKFreq>
 8003b70:	4602      	mov	r2, r0
 8003b72:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	0a9b      	lsrs	r3, r3, #10
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	4903      	ldr	r1, [pc, #12]	; (8003b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b7e:	5ccb      	ldrb	r3, [r1, r3]
 8003b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	08005e90 	.word	0x08005e90

08003b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b94:	f7ff ffdc 	bl	8003b50 <HAL_RCC_GetHCLKFreq>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	0b5b      	lsrs	r3, r3, #13
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	4903      	ldr	r1, [pc, #12]	; (8003bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ba6:	5ccb      	ldrb	r3, [r1, r3]
 8003ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	08005e90 	.word	0x08005e90

08003bb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e07b      	b.n	8003cc2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d108      	bne.n	8003be4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bda:	d009      	beq.n	8003bf0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	61da      	str	r2, [r3, #28]
 8003be2:	e005      	b.n	8003bf0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d106      	bne.n	8003c10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7fe f898 	bl	8001d40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c60:	431a      	orrs	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c74:	ea42 0103 	orr.w	r1, r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	0c1b      	lsrs	r3, r3, #16
 8003c8e:	f003 0104 	and.w	r1, r3, #4
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	f003 0210 	and.w	r2, r3, #16
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	69da      	ldr	r2, [r3, #28]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b088      	sub	sp, #32
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	60f8      	str	r0, [r7, #12]
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	603b      	str	r3, [r7, #0]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d101      	bne.n	8003cec <HAL_SPI_Transmit+0x22>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e126      	b.n	8003f3a <HAL_SPI_Transmit+0x270>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cf4:	f7fe fa4c 	bl	8002190 <HAL_GetTick>
 8003cf8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003cfa:	88fb      	ldrh	r3, [r7, #6]
 8003cfc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d002      	beq.n	8003d10 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d0e:	e10b      	b.n	8003f28 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <HAL_SPI_Transmit+0x52>
 8003d16:	88fb      	ldrh	r3, [r7, #6]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d102      	bne.n	8003d22 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d20:	e102      	b.n	8003f28 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2203      	movs	r2, #3
 8003d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	88fa      	ldrh	r2, [r7, #6]
 8003d3a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	88fa      	ldrh	r2, [r7, #6]
 8003d40:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d68:	d10f      	bne.n	8003d8a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d94:	2b40      	cmp	r3, #64	; 0x40
 8003d96:	d007      	beq.n	8003da8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003da6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003db0:	d14b      	bne.n	8003e4a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d002      	beq.n	8003dc0 <HAL_SPI_Transmit+0xf6>
 8003dba:	8afb      	ldrh	r3, [r7, #22]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d13e      	bne.n	8003e3e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	881a      	ldrh	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd0:	1c9a      	adds	r2, r3, #2
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003de4:	e02b      	b.n	8003e3e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d112      	bne.n	8003e1a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df8:	881a      	ldrh	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e04:	1c9a      	adds	r2, r3, #2
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e18:	e011      	b.n	8003e3e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e1a:	f7fe f9b9 	bl	8002190 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d803      	bhi.n	8003e32 <HAL_SPI_Transmit+0x168>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e30:	d102      	bne.n	8003e38 <HAL_SPI_Transmit+0x16e>
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d102      	bne.n	8003e3e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e3c:	e074      	b.n	8003f28 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1ce      	bne.n	8003de6 <HAL_SPI_Transmit+0x11c>
 8003e48:	e04c      	b.n	8003ee4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d002      	beq.n	8003e58 <HAL_SPI_Transmit+0x18e>
 8003e52:	8afb      	ldrh	r3, [r7, #22]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d140      	bne.n	8003eda <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	330c      	adds	r3, #12
 8003e62:	7812      	ldrb	r2, [r2, #0]
 8003e64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e7e:	e02c      	b.n	8003eda <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d113      	bne.n	8003eb6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	330c      	adds	r3, #12
 8003e98:	7812      	ldrb	r2, [r2, #0]
 8003e9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	86da      	strh	r2, [r3, #54]	; 0x36
 8003eb4:	e011      	b.n	8003eda <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003eb6:	f7fe f96b 	bl	8002190 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d803      	bhi.n	8003ece <HAL_SPI_Transmit+0x204>
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ecc:	d102      	bne.n	8003ed4 <HAL_SPI_Transmit+0x20a>
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d102      	bne.n	8003eda <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ed8:	e026      	b.n	8003f28 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1cd      	bne.n	8003e80 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	6839      	ldr	r1, [r7, #0]
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 f8c1 	bl	8004070 <SPI_EndRxTxTransaction>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10a      	bne.n	8003f18 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f02:	2300      	movs	r3, #0
 8003f04:	613b      	str	r3, [r7, #16]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	613b      	str	r3, [r7, #16]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	613b      	str	r3, [r7, #16]
 8003f16:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	77fb      	strb	r3, [r7, #31]
 8003f24:	e000      	b.n	8003f28 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003f26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f38:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3720      	adds	r7, #32
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f50:	b2db      	uxtb	r3, r3
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
	...

08003f60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b088      	sub	sp, #32
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	603b      	str	r3, [r7, #0]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f70:	f7fe f90e 	bl	8002190 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f78:	1a9b      	subs	r3, r3, r2
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f80:	f7fe f906 	bl	8002190 <HAL_GetTick>
 8003f84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f86:	4b39      	ldr	r3, [pc, #228]	; (800406c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	015b      	lsls	r3, r3, #5
 8003f8c:	0d1b      	lsrs	r3, r3, #20
 8003f8e:	69fa      	ldr	r2, [r7, #28]
 8003f90:	fb02 f303 	mul.w	r3, r2, r3
 8003f94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f96:	e054      	b.n	8004042 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9e:	d050      	beq.n	8004042 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fa0:	f7fe f8f6 	bl	8002190 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	69fa      	ldr	r2, [r7, #28]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d902      	bls.n	8003fb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d13d      	bne.n	8004032 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fce:	d111      	bne.n	8003ff4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd8:	d004      	beq.n	8003fe4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fe2:	d107      	bne.n	8003ff4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ff2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ffc:	d10f      	bne.n	800401e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800401c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e017      	b.n	8004062 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	3b01      	subs	r3, #1
 8004040:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	4013      	ands	r3, r2
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	429a      	cmp	r2, r3
 8004050:	bf0c      	ite	eq
 8004052:	2301      	moveq	r3, #1
 8004054:	2300      	movne	r3, #0
 8004056:	b2db      	uxtb	r3, r3
 8004058:	461a      	mov	r2, r3
 800405a:	79fb      	ldrb	r3, [r7, #7]
 800405c:	429a      	cmp	r2, r3
 800405e:	d19b      	bne.n	8003f98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3720      	adds	r7, #32
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20000014 	.word	0x20000014

08004070 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b088      	sub	sp, #32
 8004074:	af02      	add	r7, sp, #8
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800407c:	4b1b      	ldr	r3, [pc, #108]	; (80040ec <SPI_EndRxTxTransaction+0x7c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a1b      	ldr	r2, [pc, #108]	; (80040f0 <SPI_EndRxTxTransaction+0x80>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	0d5b      	lsrs	r3, r3, #21
 8004088:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800408c:	fb02 f303 	mul.w	r3, r2, r3
 8004090:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800409a:	d112      	bne.n	80040c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2200      	movs	r2, #0
 80040a4:	2180      	movs	r1, #128	; 0x80
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f7ff ff5a 	bl	8003f60 <SPI_WaitFlagStateUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d016      	beq.n	80040e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b6:	f043 0220 	orr.w	r2, r3, #32
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e00f      	b.n	80040e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00a      	beq.n	80040de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	3b01      	subs	r3, #1
 80040cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d8:	2b80      	cmp	r3, #128	; 0x80
 80040da:	d0f2      	beq.n	80040c2 <SPI_EndRxTxTransaction+0x52>
 80040dc:	e000      	b.n	80040e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80040de:	bf00      	nop
  }

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3718      	adds	r7, #24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20000014 	.word	0x20000014
 80040f0:	165e9f81 	.word	0x165e9f81

080040f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e03f      	b.n	8004186 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fd ff60 	bl	8001fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2224      	movs	r2, #36	; 0x24
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004136:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f929 	bl	8004390 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	691a      	ldr	r2, [r3, #16]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800414c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695a      	ldr	r2, [r3, #20]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800415c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800416c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2220      	movs	r2, #32
 8004180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b08a      	sub	sp, #40	; 0x28
 8004192:	af02      	add	r7, sp, #8
 8004194:	60f8      	str	r0, [r7, #12]
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	603b      	str	r3, [r7, #0]
 800419a:	4613      	mov	r3, r2
 800419c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b20      	cmp	r3, #32
 80041ac:	d17c      	bne.n	80042a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <HAL_UART_Transmit+0x2c>
 80041b4:	88fb      	ldrh	r3, [r7, #6]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e075      	b.n	80042aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d101      	bne.n	80041cc <HAL_UART_Transmit+0x3e>
 80041c8:	2302      	movs	r3, #2
 80041ca:	e06e      	b.n	80042aa <HAL_UART_Transmit+0x11c>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2221      	movs	r2, #33	; 0x21
 80041de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041e2:	f7fd ffd5 	bl	8002190 <HAL_GetTick>
 80041e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	88fa      	ldrh	r2, [r7, #6]
 80041ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	88fa      	ldrh	r2, [r7, #6]
 80041f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041fc:	d108      	bne.n	8004210 <HAL_UART_Transmit+0x82>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d104      	bne.n	8004210 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004206:	2300      	movs	r3, #0
 8004208:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	61bb      	str	r3, [r7, #24]
 800420e:	e003      	b.n	8004218 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004214:	2300      	movs	r3, #0
 8004216:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004220:	e02a      	b.n	8004278 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	2200      	movs	r2, #0
 800422a:	2180      	movs	r1, #128	; 0x80
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 f840 	bl	80042b2 <UART_WaitOnFlagUntilTimeout>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e036      	b.n	80042aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10b      	bne.n	800425a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	881b      	ldrh	r3, [r3, #0]
 8004246:	461a      	mov	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004250:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	3302      	adds	r3, #2
 8004256:	61bb      	str	r3, [r7, #24]
 8004258:	e007      	b.n	800426a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	781a      	ldrb	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	3301      	adds	r3, #1
 8004268:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800426e:	b29b      	uxth	r3, r3
 8004270:	3b01      	subs	r3, #1
 8004272:	b29a      	uxth	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800427c:	b29b      	uxth	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1cf      	bne.n	8004222 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	2200      	movs	r2, #0
 800428a:	2140      	movs	r1, #64	; 0x40
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 f810 	bl	80042b2 <UART_WaitOnFlagUntilTimeout>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e006      	b.n	80042aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	e000      	b.n	80042aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80042a8:	2302      	movs	r3, #2
  }
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3720      	adds	r7, #32
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b090      	sub	sp, #64	; 0x40
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	60f8      	str	r0, [r7, #12]
 80042ba:	60b9      	str	r1, [r7, #8]
 80042bc:	603b      	str	r3, [r7, #0]
 80042be:	4613      	mov	r3, r2
 80042c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042c2:	e050      	b.n	8004366 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ca:	d04c      	beq.n	8004366 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d007      	beq.n	80042e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80042d2:	f7fd ff5d 	bl	8002190 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042de:	429a      	cmp	r2, r3
 80042e0:	d241      	bcs.n	8004366 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	330c      	adds	r3, #12
 80042e8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ec:	e853 3f00 	ldrex	r3, [r3]
 80042f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	330c      	adds	r3, #12
 8004300:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004302:	637a      	str	r2, [r7, #52]	; 0x34
 8004304:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004306:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004308:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800430a:	e841 2300 	strex	r3, r2, [r1]
 800430e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1e5      	bne.n	80042e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3314      	adds	r3, #20
 800431c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	e853 3f00 	ldrex	r3, [r3]
 8004324:	613b      	str	r3, [r7, #16]
   return(result);
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f023 0301 	bic.w	r3, r3, #1
 800432c:	63bb      	str	r3, [r7, #56]	; 0x38
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3314      	adds	r3, #20
 8004334:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004336:	623a      	str	r2, [r7, #32]
 8004338:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433a:	69f9      	ldr	r1, [r7, #28]
 800433c:	6a3a      	ldr	r2, [r7, #32]
 800433e:	e841 2300 	strex	r3, r2, [r1]
 8004342:	61bb      	str	r3, [r7, #24]
   return(result);
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1e5      	bne.n	8004316 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2220      	movs	r2, #32
 800434e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e00f      	b.n	8004386 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4013      	ands	r3, r2
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	429a      	cmp	r2, r3
 8004374:	bf0c      	ite	eq
 8004376:	2301      	moveq	r3, #1
 8004378:	2300      	movne	r3, #0
 800437a:	b2db      	uxtb	r3, r3
 800437c:	461a      	mov	r2, r3
 800437e:	79fb      	ldrb	r3, [r7, #7]
 8004380:	429a      	cmp	r2, r3
 8004382:	d09f      	beq.n	80042c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3740      	adds	r7, #64	; 0x40
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004394:	b0c0      	sub	sp, #256	; 0x100
 8004396:	af00      	add	r7, sp, #0
 8004398:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800439c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ac:	68d9      	ldr	r1, [r3, #12]
 80043ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	ea40 0301 	orr.w	r3, r0, r1
 80043b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	431a      	orrs	r2, r3
 80043d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80043dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80043e8:	f021 010c 	bic.w	r1, r1, #12
 80043ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043f6:	430b      	orrs	r3, r1
 80043f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440a:	6999      	ldr	r1, [r3, #24]
 800440c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	ea40 0301 	orr.w	r3, r0, r1
 8004416:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	4b8f      	ldr	r3, [pc, #572]	; (800465c <UART_SetConfig+0x2cc>)
 8004420:	429a      	cmp	r2, r3
 8004422:	d005      	beq.n	8004430 <UART_SetConfig+0xa0>
 8004424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	4b8d      	ldr	r3, [pc, #564]	; (8004660 <UART_SetConfig+0x2d0>)
 800442c:	429a      	cmp	r2, r3
 800442e:	d104      	bne.n	800443a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004430:	f7ff fbae 	bl	8003b90 <HAL_RCC_GetPCLK2Freq>
 8004434:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004438:	e003      	b.n	8004442 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800443a:	f7ff fb95 	bl	8003b68 <HAL_RCC_GetPCLK1Freq>
 800443e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800444c:	f040 810c 	bne.w	8004668 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004450:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004454:	2200      	movs	r2, #0
 8004456:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800445a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800445e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004462:	4622      	mov	r2, r4
 8004464:	462b      	mov	r3, r5
 8004466:	1891      	adds	r1, r2, r2
 8004468:	65b9      	str	r1, [r7, #88]	; 0x58
 800446a:	415b      	adcs	r3, r3
 800446c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800446e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004472:	4621      	mov	r1, r4
 8004474:	eb12 0801 	adds.w	r8, r2, r1
 8004478:	4629      	mov	r1, r5
 800447a:	eb43 0901 	adc.w	r9, r3, r1
 800447e:	f04f 0200 	mov.w	r2, #0
 8004482:	f04f 0300 	mov.w	r3, #0
 8004486:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800448a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800448e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004492:	4690      	mov	r8, r2
 8004494:	4699      	mov	r9, r3
 8004496:	4623      	mov	r3, r4
 8004498:	eb18 0303 	adds.w	r3, r8, r3
 800449c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044a0:	462b      	mov	r3, r5
 80044a2:	eb49 0303 	adc.w	r3, r9, r3
 80044a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80044ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80044be:	460b      	mov	r3, r1
 80044c0:	18db      	adds	r3, r3, r3
 80044c2:	653b      	str	r3, [r7, #80]	; 0x50
 80044c4:	4613      	mov	r3, r2
 80044c6:	eb42 0303 	adc.w	r3, r2, r3
 80044ca:	657b      	str	r3, [r7, #84]	; 0x54
 80044cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80044d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80044d4:	f7fb fe80 	bl	80001d8 <__aeabi_uldivmod>
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	4b61      	ldr	r3, [pc, #388]	; (8004664 <UART_SetConfig+0x2d4>)
 80044de:	fba3 2302 	umull	r2, r3, r3, r2
 80044e2:	095b      	lsrs	r3, r3, #5
 80044e4:	011c      	lsls	r4, r3, #4
 80044e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044ea:	2200      	movs	r2, #0
 80044ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80044f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80044f8:	4642      	mov	r2, r8
 80044fa:	464b      	mov	r3, r9
 80044fc:	1891      	adds	r1, r2, r2
 80044fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8004500:	415b      	adcs	r3, r3
 8004502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004504:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004508:	4641      	mov	r1, r8
 800450a:	eb12 0a01 	adds.w	sl, r2, r1
 800450e:	4649      	mov	r1, r9
 8004510:	eb43 0b01 	adc.w	fp, r3, r1
 8004514:	f04f 0200 	mov.w	r2, #0
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004520:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004524:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004528:	4692      	mov	sl, r2
 800452a:	469b      	mov	fp, r3
 800452c:	4643      	mov	r3, r8
 800452e:	eb1a 0303 	adds.w	r3, sl, r3
 8004532:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004536:	464b      	mov	r3, r9
 8004538:	eb4b 0303 	adc.w	r3, fp, r3
 800453c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800454c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004550:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004554:	460b      	mov	r3, r1
 8004556:	18db      	adds	r3, r3, r3
 8004558:	643b      	str	r3, [r7, #64]	; 0x40
 800455a:	4613      	mov	r3, r2
 800455c:	eb42 0303 	adc.w	r3, r2, r3
 8004560:	647b      	str	r3, [r7, #68]	; 0x44
 8004562:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004566:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800456a:	f7fb fe35 	bl	80001d8 <__aeabi_uldivmod>
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	4611      	mov	r1, r2
 8004574:	4b3b      	ldr	r3, [pc, #236]	; (8004664 <UART_SetConfig+0x2d4>)
 8004576:	fba3 2301 	umull	r2, r3, r3, r1
 800457a:	095b      	lsrs	r3, r3, #5
 800457c:	2264      	movs	r2, #100	; 0x64
 800457e:	fb02 f303 	mul.w	r3, r2, r3
 8004582:	1acb      	subs	r3, r1, r3
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800458a:	4b36      	ldr	r3, [pc, #216]	; (8004664 <UART_SetConfig+0x2d4>)
 800458c:	fba3 2302 	umull	r2, r3, r3, r2
 8004590:	095b      	lsrs	r3, r3, #5
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004598:	441c      	add	r4, r3
 800459a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800459e:	2200      	movs	r2, #0
 80045a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80045a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80045ac:	4642      	mov	r2, r8
 80045ae:	464b      	mov	r3, r9
 80045b0:	1891      	adds	r1, r2, r2
 80045b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80045b4:	415b      	adcs	r3, r3
 80045b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045bc:	4641      	mov	r1, r8
 80045be:	1851      	adds	r1, r2, r1
 80045c0:	6339      	str	r1, [r7, #48]	; 0x30
 80045c2:	4649      	mov	r1, r9
 80045c4:	414b      	adcs	r3, r1
 80045c6:	637b      	str	r3, [r7, #52]	; 0x34
 80045c8:	f04f 0200 	mov.w	r2, #0
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80045d4:	4659      	mov	r1, fp
 80045d6:	00cb      	lsls	r3, r1, #3
 80045d8:	4651      	mov	r1, sl
 80045da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045de:	4651      	mov	r1, sl
 80045e0:	00ca      	lsls	r2, r1, #3
 80045e2:	4610      	mov	r0, r2
 80045e4:	4619      	mov	r1, r3
 80045e6:	4603      	mov	r3, r0
 80045e8:	4642      	mov	r2, r8
 80045ea:	189b      	adds	r3, r3, r2
 80045ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045f0:	464b      	mov	r3, r9
 80045f2:	460a      	mov	r2, r1
 80045f4:	eb42 0303 	adc.w	r3, r2, r3
 80045f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004608:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800460c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004610:	460b      	mov	r3, r1
 8004612:	18db      	adds	r3, r3, r3
 8004614:	62bb      	str	r3, [r7, #40]	; 0x28
 8004616:	4613      	mov	r3, r2
 8004618:	eb42 0303 	adc.w	r3, r2, r3
 800461c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800461e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004622:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004626:	f7fb fdd7 	bl	80001d8 <__aeabi_uldivmod>
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	4b0d      	ldr	r3, [pc, #52]	; (8004664 <UART_SetConfig+0x2d4>)
 8004630:	fba3 1302 	umull	r1, r3, r3, r2
 8004634:	095b      	lsrs	r3, r3, #5
 8004636:	2164      	movs	r1, #100	; 0x64
 8004638:	fb01 f303 	mul.w	r3, r1, r3
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	3332      	adds	r3, #50	; 0x32
 8004642:	4a08      	ldr	r2, [pc, #32]	; (8004664 <UART_SetConfig+0x2d4>)
 8004644:	fba2 2303 	umull	r2, r3, r2, r3
 8004648:	095b      	lsrs	r3, r3, #5
 800464a:	f003 0207 	and.w	r2, r3, #7
 800464e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4422      	add	r2, r4
 8004656:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004658:	e106      	b.n	8004868 <UART_SetConfig+0x4d8>
 800465a:	bf00      	nop
 800465c:	40011000 	.word	0x40011000
 8004660:	40011400 	.word	0x40011400
 8004664:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004668:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800466c:	2200      	movs	r2, #0
 800466e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004672:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004676:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800467a:	4642      	mov	r2, r8
 800467c:	464b      	mov	r3, r9
 800467e:	1891      	adds	r1, r2, r2
 8004680:	6239      	str	r1, [r7, #32]
 8004682:	415b      	adcs	r3, r3
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
 8004686:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800468a:	4641      	mov	r1, r8
 800468c:	1854      	adds	r4, r2, r1
 800468e:	4649      	mov	r1, r9
 8004690:	eb43 0501 	adc.w	r5, r3, r1
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	00eb      	lsls	r3, r5, #3
 800469e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046a2:	00e2      	lsls	r2, r4, #3
 80046a4:	4614      	mov	r4, r2
 80046a6:	461d      	mov	r5, r3
 80046a8:	4643      	mov	r3, r8
 80046aa:	18e3      	adds	r3, r4, r3
 80046ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046b0:	464b      	mov	r3, r9
 80046b2:	eb45 0303 	adc.w	r3, r5, r3
 80046b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046ca:	f04f 0200 	mov.w	r2, #0
 80046ce:	f04f 0300 	mov.w	r3, #0
 80046d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80046d6:	4629      	mov	r1, r5
 80046d8:	008b      	lsls	r3, r1, #2
 80046da:	4621      	mov	r1, r4
 80046dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046e0:	4621      	mov	r1, r4
 80046e2:	008a      	lsls	r2, r1, #2
 80046e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80046e8:	f7fb fd76 	bl	80001d8 <__aeabi_uldivmod>
 80046ec:	4602      	mov	r2, r0
 80046ee:	460b      	mov	r3, r1
 80046f0:	4b60      	ldr	r3, [pc, #384]	; (8004874 <UART_SetConfig+0x4e4>)
 80046f2:	fba3 2302 	umull	r2, r3, r3, r2
 80046f6:	095b      	lsrs	r3, r3, #5
 80046f8:	011c      	lsls	r4, r3, #4
 80046fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046fe:	2200      	movs	r2, #0
 8004700:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004704:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004708:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800470c:	4642      	mov	r2, r8
 800470e:	464b      	mov	r3, r9
 8004710:	1891      	adds	r1, r2, r2
 8004712:	61b9      	str	r1, [r7, #24]
 8004714:	415b      	adcs	r3, r3
 8004716:	61fb      	str	r3, [r7, #28]
 8004718:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800471c:	4641      	mov	r1, r8
 800471e:	1851      	adds	r1, r2, r1
 8004720:	6139      	str	r1, [r7, #16]
 8004722:	4649      	mov	r1, r9
 8004724:	414b      	adcs	r3, r1
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	f04f 0200 	mov.w	r2, #0
 800472c:	f04f 0300 	mov.w	r3, #0
 8004730:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004734:	4659      	mov	r1, fp
 8004736:	00cb      	lsls	r3, r1, #3
 8004738:	4651      	mov	r1, sl
 800473a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800473e:	4651      	mov	r1, sl
 8004740:	00ca      	lsls	r2, r1, #3
 8004742:	4610      	mov	r0, r2
 8004744:	4619      	mov	r1, r3
 8004746:	4603      	mov	r3, r0
 8004748:	4642      	mov	r2, r8
 800474a:	189b      	adds	r3, r3, r2
 800474c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004750:	464b      	mov	r3, r9
 8004752:	460a      	mov	r2, r1
 8004754:	eb42 0303 	adc.w	r3, r2, r3
 8004758:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800475c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	67bb      	str	r3, [r7, #120]	; 0x78
 8004766:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004768:	f04f 0200 	mov.w	r2, #0
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004774:	4649      	mov	r1, r9
 8004776:	008b      	lsls	r3, r1, #2
 8004778:	4641      	mov	r1, r8
 800477a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800477e:	4641      	mov	r1, r8
 8004780:	008a      	lsls	r2, r1, #2
 8004782:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004786:	f7fb fd27 	bl	80001d8 <__aeabi_uldivmod>
 800478a:	4602      	mov	r2, r0
 800478c:	460b      	mov	r3, r1
 800478e:	4611      	mov	r1, r2
 8004790:	4b38      	ldr	r3, [pc, #224]	; (8004874 <UART_SetConfig+0x4e4>)
 8004792:	fba3 2301 	umull	r2, r3, r3, r1
 8004796:	095b      	lsrs	r3, r3, #5
 8004798:	2264      	movs	r2, #100	; 0x64
 800479a:	fb02 f303 	mul.w	r3, r2, r3
 800479e:	1acb      	subs	r3, r1, r3
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	3332      	adds	r3, #50	; 0x32
 80047a4:	4a33      	ldr	r2, [pc, #204]	; (8004874 <UART_SetConfig+0x4e4>)
 80047a6:	fba2 2303 	umull	r2, r3, r2, r3
 80047aa:	095b      	lsrs	r3, r3, #5
 80047ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047b0:	441c      	add	r4, r3
 80047b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047b6:	2200      	movs	r2, #0
 80047b8:	673b      	str	r3, [r7, #112]	; 0x70
 80047ba:	677a      	str	r2, [r7, #116]	; 0x74
 80047bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80047c0:	4642      	mov	r2, r8
 80047c2:	464b      	mov	r3, r9
 80047c4:	1891      	adds	r1, r2, r2
 80047c6:	60b9      	str	r1, [r7, #8]
 80047c8:	415b      	adcs	r3, r3
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047d0:	4641      	mov	r1, r8
 80047d2:	1851      	adds	r1, r2, r1
 80047d4:	6039      	str	r1, [r7, #0]
 80047d6:	4649      	mov	r1, r9
 80047d8:	414b      	adcs	r3, r1
 80047da:	607b      	str	r3, [r7, #4]
 80047dc:	f04f 0200 	mov.w	r2, #0
 80047e0:	f04f 0300 	mov.w	r3, #0
 80047e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047e8:	4659      	mov	r1, fp
 80047ea:	00cb      	lsls	r3, r1, #3
 80047ec:	4651      	mov	r1, sl
 80047ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047f2:	4651      	mov	r1, sl
 80047f4:	00ca      	lsls	r2, r1, #3
 80047f6:	4610      	mov	r0, r2
 80047f8:	4619      	mov	r1, r3
 80047fa:	4603      	mov	r3, r0
 80047fc:	4642      	mov	r2, r8
 80047fe:	189b      	adds	r3, r3, r2
 8004800:	66bb      	str	r3, [r7, #104]	; 0x68
 8004802:	464b      	mov	r3, r9
 8004804:	460a      	mov	r2, r1
 8004806:	eb42 0303 	adc.w	r3, r2, r3
 800480a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800480c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	663b      	str	r3, [r7, #96]	; 0x60
 8004816:	667a      	str	r2, [r7, #100]	; 0x64
 8004818:	f04f 0200 	mov.w	r2, #0
 800481c:	f04f 0300 	mov.w	r3, #0
 8004820:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004824:	4649      	mov	r1, r9
 8004826:	008b      	lsls	r3, r1, #2
 8004828:	4641      	mov	r1, r8
 800482a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800482e:	4641      	mov	r1, r8
 8004830:	008a      	lsls	r2, r1, #2
 8004832:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004836:	f7fb fccf 	bl	80001d8 <__aeabi_uldivmod>
 800483a:	4602      	mov	r2, r0
 800483c:	460b      	mov	r3, r1
 800483e:	4b0d      	ldr	r3, [pc, #52]	; (8004874 <UART_SetConfig+0x4e4>)
 8004840:	fba3 1302 	umull	r1, r3, r3, r2
 8004844:	095b      	lsrs	r3, r3, #5
 8004846:	2164      	movs	r1, #100	; 0x64
 8004848:	fb01 f303 	mul.w	r3, r1, r3
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	3332      	adds	r3, #50	; 0x32
 8004852:	4a08      	ldr	r2, [pc, #32]	; (8004874 <UART_SetConfig+0x4e4>)
 8004854:	fba2 2303 	umull	r2, r3, r2, r3
 8004858:	095b      	lsrs	r3, r3, #5
 800485a:	f003 020f 	and.w	r2, r3, #15
 800485e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4422      	add	r2, r4
 8004866:	609a      	str	r2, [r3, #8]
}
 8004868:	bf00      	nop
 800486a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800486e:	46bd      	mov	sp, r7
 8004870:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004874:	51eb851f 	.word	0x51eb851f

08004878 <memset>:
 8004878:	4402      	add	r2, r0
 800487a:	4603      	mov	r3, r0
 800487c:	4293      	cmp	r3, r2
 800487e:	d100      	bne.n	8004882 <memset+0xa>
 8004880:	4770      	bx	lr
 8004882:	f803 1b01 	strb.w	r1, [r3], #1
 8004886:	e7f9      	b.n	800487c <memset+0x4>

08004888 <__libc_init_array>:
 8004888:	b570      	push	{r4, r5, r6, lr}
 800488a:	4d0d      	ldr	r5, [pc, #52]	; (80048c0 <__libc_init_array+0x38>)
 800488c:	4c0d      	ldr	r4, [pc, #52]	; (80048c4 <__libc_init_array+0x3c>)
 800488e:	1b64      	subs	r4, r4, r5
 8004890:	10a4      	asrs	r4, r4, #2
 8004892:	2600      	movs	r6, #0
 8004894:	42a6      	cmp	r6, r4
 8004896:	d109      	bne.n	80048ac <__libc_init_array+0x24>
 8004898:	4d0b      	ldr	r5, [pc, #44]	; (80048c8 <__libc_init_array+0x40>)
 800489a:	4c0c      	ldr	r4, [pc, #48]	; (80048cc <__libc_init_array+0x44>)
 800489c:	f000 f818 	bl	80048d0 <_init>
 80048a0:	1b64      	subs	r4, r4, r5
 80048a2:	10a4      	asrs	r4, r4, #2
 80048a4:	2600      	movs	r6, #0
 80048a6:	42a6      	cmp	r6, r4
 80048a8:	d105      	bne.n	80048b6 <__libc_init_array+0x2e>
 80048aa:	bd70      	pop	{r4, r5, r6, pc}
 80048ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80048b0:	4798      	blx	r3
 80048b2:	3601      	adds	r6, #1
 80048b4:	e7ee      	b.n	8004894 <__libc_init_array+0xc>
 80048b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ba:	4798      	blx	r3
 80048bc:	3601      	adds	r6, #1
 80048be:	e7f2      	b.n	80048a6 <__libc_init_array+0x1e>
 80048c0:	08005ea0 	.word	0x08005ea0
 80048c4:	08005ea0 	.word	0x08005ea0
 80048c8:	08005ea0 	.word	0x08005ea0
 80048cc:	08005ea4 	.word	0x08005ea4

080048d0 <_init>:
 80048d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d2:	bf00      	nop
 80048d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048d6:	bc08      	pop	{r3}
 80048d8:	469e      	mov	lr, r3
 80048da:	4770      	bx	lr

080048dc <_fini>:
 80048dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048de:	bf00      	nop
 80048e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048e2:	bc08      	pop	{r3}
 80048e4:	469e      	mov	lr, r3
 80048e6:	4770      	bx	lr
