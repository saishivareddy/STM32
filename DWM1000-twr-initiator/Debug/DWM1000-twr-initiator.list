
DWM1000-twr-initiator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000577c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000874  08005914  08005914  00015914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006188  08006188  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08006188  08006188  00016188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006190  08006190  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006190  08006190  00016190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006194  08006194  00016194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000590  20000070  08006204  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  08006204  00020600  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000135b4  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003177  00000000  00000000  00033650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  000367c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001078  00000000  00000000  00037998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af3f  00000000  00000000  00038a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e51  00000000  00000000  0005394f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092729  00000000  00000000  0006a7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fcec9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047b0  00000000  00000000  000fcf1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080058fc 	.word	0x080058fc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	080058fc 	.word	0x080058fc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 80004dc:	b590      	push	{r4, r7, lr}
 80004de:	b087      	sub	sp, #28
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 80004e4:	2300      	movs	r3, #0
 80004e6:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 80004ec:	4b9f      	ldr	r3, [pc, #636]	; (800076c <dwt_initialise+0x290>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2200      	movs	r2, #0
 80004f2:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 80004f4:	4b9d      	ldr	r3, [pc, #628]	; (800076c <dwt_initialise+0x290>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2200      	movs	r2, #0
 80004fa:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 80004fc:	4b9b      	ldr	r3, [pc, #620]	; (800076c <dwt_initialise+0x290>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2200      	movs	r2, #0
 8000502:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 8000504:	4b99      	ldr	r3, [pc, #612]	; (800076c <dwt_initialise+0x290>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2200      	movs	r2, #0
 800050a:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 800050c:	4b97      	ldr	r3, [pc, #604]	; (800076c <dwt_initialise+0x290>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2200      	movs	r2, #0
 8000512:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 8000514:	4b95      	ldr	r3, [pc, #596]	; (800076c <dwt_initialise+0x290>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2200      	movs	r2, #0
 800051a:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 800051c:	4b93      	ldr	r3, [pc, #588]	; (800076c <dwt_initialise+0x290>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2200      	movs	r2, #0
 8000522:	635a      	str	r2, [r3, #52]	; 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 8000524:	f000 f926 	bl	8000774 <dwt_readdevid>
 8000528:	4603      	mov	r3, r0
 800052a:	4a91      	ldr	r2, [pc, #580]	; (8000770 <dwt_initialise+0x294>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d002      	beq.n	8000536 <dwt_initialise+0x5a>
    {
        return DWT_ERROR ;
 8000530:	f04f 33ff 	mov.w	r3, #4294967295
 8000534:	e115      	b.n	8000762 <dwt_initialise+0x286>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f003 0302 	and.w	r3, r3, #2
 800053c:	2b00      	cmp	r3, #0
 800053e:	d101      	bne.n	8000544 <dwt_initialise+0x68>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 8000540:	f000 fe4c 	bl	80011dc <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f003 0302 	and.w	r3, r3, #2
 800054a:	2b00      	cmp	r3, #0
 800054c:	d004      	beq.n	8000558 <dwt_initialise+0x7c>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8000554:	2b00      	cmp	r3, #0
 8000556:	d102      	bne.n	800055e <dwt_initialise+0x82>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8000558:	2000      	movs	r0, #0
 800055a:	f000 fcdf 	bl	8000f1c <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 800055e:	2204      	movs	r2, #4
 8000560:	2100      	movs	r1, #0
 8000562:	2024      	movs	r0, #36	; 0x24
 8000564:	f000 fc08 	bl	8000d78 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	2b00      	cmp	r3, #0
 8000570:	d116      	bne.n	80005a0 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 8000572:	2004      	movs	r0, #4
 8000574:	f000 fc56 	bl	8000e24 <_dwt_otpread>
 8000578:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 800057a:	693b      	ldr	r3, [r7, #16]
 800057c:	b2db      	uxtb	r3, r3
 800057e:	2b00      	cmp	r3, #0
 8000580:	d01f      	beq.n	80005c2 <dwt_initialise+0xe6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 8000582:	2202      	movs	r2, #2
 8000584:	2112      	movs	r1, #18
 8000586:	202d      	movs	r0, #45	; 0x2d
 8000588:	f000 fbf6 	bl	8000d78 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 800058c:	4b77      	ldr	r3, [pc, #476]	; (800076c <dwt_initialise+0x290>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	8ada      	ldrh	r2, [r3, #22]
 8000592:	4b76      	ldr	r3, [pc, #472]	; (800076c <dwt_initialise+0x290>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800059a:	b292      	uxth	r2, r2
 800059c:	82da      	strh	r2, [r3, #22]
 800059e:	e010      	b.n	80005c2 <dwt_initialise+0xe6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 80005a0:	2130      	movs	r1, #48	; 0x30
 80005a2:	2028      	movs	r0, #40	; 0x28
 80005a4:	f000 fb91 	bl	8000cca <dwt_read32bitoffsetreg>
 80005a8:	4603      	mov	r3, r0
 80005aa:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 80005ae:	d008      	beq.n	80005c2 <dwt_initialise+0xe6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 80005b0:	4b6e      	ldr	r3, [pc, #440]	; (800076c <dwt_initialise+0x290>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	8ada      	ldrh	r2, [r3, #22]
 80005b6:	4b6d      	ldr	r3, [pc, #436]	; (800076c <dwt_initialise+0x290>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80005be:	b292      	uxth	r2, r2
 80005c0:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f003 0302 	and.w	r3, r3, #2
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d009      	beq.n	80005e0 <dwt_initialise+0x104>
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d011      	beq.n	80005fa <dwt_initialise+0x11e>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f003 0308 	and.w	r3, r3, #8
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d00c      	beq.n	80005fa <dwt_initialise+0x11e>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 80005e0:	201e      	movs	r0, #30
 80005e2:	f000 fc1f 	bl	8000e24 <_dwt_otpread>
 80005e6:	4603      	mov	r3, r0
 80005e8:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 80005ea:	8afb      	ldrh	r3, [r7, #22]
 80005ec:	0a1b      	lsrs	r3, r3, #8
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	4b5e      	ldr	r3, [pc, #376]	; (800076c <dwt_initialise+0x290>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	b2d2      	uxtb	r2, r2
 80005f6:	72da      	strb	r2, [r3, #11]
 80005f8:	e003      	b.n	8000602 <dwt_initialise+0x126>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 80005fa:	4b5c      	ldr	r3, [pc, #368]	; (800076c <dwt_initialise+0x290>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2200      	movs	r2, #0
 8000600:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f003 0302 	and.w	r3, r3, #2
 8000608:	2b00      	cmp	r3, #0
 800060a:	d10b      	bne.n	8000624 <dwt_initialise+0x148>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 800060c:	8afb      	ldrh	r3, [r7, #22]
 800060e:	f003 031f 	and.w	r3, r3, #31
 8000612:	2b00      	cmp	r3, #0
 8000614:	d101      	bne.n	800061a <dwt_initialise+0x13e>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 8000616:	2310      	movs	r3, #16
 8000618:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 800061a:	8afb      	ldrh	r3, [r7, #22]
 800061c:	b2db      	uxtb	r3, r3
 800061e:	4618      	mov	r0, r3
 8000620:	f000 fe02 	bl	8001228 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f003 0310 	and.w	r3, r3, #16
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <dwt_initialise+0x162>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 800062e:	4b4f      	ldr	r3, [pc, #316]	; (800076c <dwt_initialise+0x290>)
 8000630:	681c      	ldr	r4, [r3, #0]
 8000632:	2006      	movs	r0, #6
 8000634:	f000 fbf6 	bl	8000e24 <_dwt_otpread>
 8000638:	4603      	mov	r3, r0
 800063a:	6023      	str	r3, [r4, #0]
 800063c:	e003      	b.n	8000646 <dwt_initialise+0x16a>
    }
    else
    {
        pdw1000local->partID = 0;
 800063e:	4b4b      	ldr	r3, [pc, #300]	; (800076c <dwt_initialise+0x290>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	f003 0320 	and.w	r3, r3, #32
 800064c:	2b00      	cmp	r3, #0
 800064e:	d007      	beq.n	8000660 <dwt_initialise+0x184>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8000650:	4b46      	ldr	r3, [pc, #280]	; (800076c <dwt_initialise+0x290>)
 8000652:	681c      	ldr	r4, [r3, #0]
 8000654:	2007      	movs	r0, #7
 8000656:	f000 fbe5 	bl	8000e24 <_dwt_otpread>
 800065a:	4603      	mov	r3, r0
 800065c:	6063      	str	r3, [r4, #4]
 800065e:	e003      	b.n	8000668 <dwt_initialise+0x18c>
    }
    else
    {
        pdw1000local->lotID = 0;
 8000660:	4b42      	ldr	r3, [pc, #264]	; (800076c <dwt_initialise+0x290>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2200      	movs	r2, #0
 8000666:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800066e:	2b00      	cmp	r3, #0
 8000670:	d008      	beq.n	8000684 <dwt_initialise+0x1a8>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 8000672:	2008      	movs	r0, #8
 8000674:	f000 fbd6 	bl	8000e24 <_dwt_otpread>
 8000678:	4602      	mov	r2, r0
 800067a:	4b3c      	ldr	r3, [pc, #240]	; (800076c <dwt_initialise+0x290>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	b2d2      	uxtb	r2, r2
 8000680:	721a      	strb	r2, [r3, #8]
 8000682:	e003      	b.n	800068c <dwt_initialise+0x1b0>
    }
    else
    {
        pdw1000local->vBatP = 0;
 8000684:	4b39      	ldr	r3, [pc, #228]	; (800076c <dwt_initialise+0x290>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2200      	movs	r2, #0
 800068a:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000692:	2b00      	cmp	r3, #0
 8000694:	d008      	beq.n	80006a8 <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 8000696:	2009      	movs	r0, #9
 8000698:	f000 fbc4 	bl	8000e24 <_dwt_otpread>
 800069c:	4602      	mov	r2, r0
 800069e:	4b33      	ldr	r3, [pc, #204]	; (800076c <dwt_initialise+0x290>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	b2d2      	uxtb	r2, r2
 80006a4:	725a      	strb	r2, [r3, #9]
 80006a6:	e003      	b.n	80006b0 <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 80006a8:	4b30      	ldr	r3, [pc, #192]	; (800076c <dwt_initialise+0x290>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2200      	movs	r2, #0
 80006ae:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f003 0302 	and.w	r3, r3, #2
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d121      	bne.n	80006fe <dwt_initialise+0x222>
    {
        if(DWT_LOADUCODE & config)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	f003 0301 	and.w	r3, r3, #1
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d00b      	beq.n	80006dc <dwt_initialise+0x200>
        {
            _dwt_loaducodefromrom();
 80006c4:	f000 fbfb 	bl	8000ebe <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 80006c8:	4b28      	ldr	r3, [pc, #160]	; (800076c <dwt_initialise+0x290>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	8ada      	ldrh	r2, [r3, #22]
 80006ce:	4b27      	ldr	r3, [pc, #156]	; (800076c <dwt_initialise+0x290>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80006d6:	b292      	uxth	r2, r2
 80006d8:	82da      	strh	r2, [r3, #22]
 80006da:	e01e      	b.n	800071a <dwt_initialise+0x23e>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 80006dc:	2105      	movs	r1, #5
 80006de:	2036      	movs	r0, #54	; 0x36
 80006e0:	f000 fb1a 	bl	8000d18 <dwt_read16bitoffsetreg>
 80006e4:	4603      	mov	r3, r0
 80006e6:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 80006e8:	89fb      	ldrh	r3, [r7, #14]
 80006ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80006ee:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 80006f0:	89fb      	ldrh	r3, [r7, #14]
 80006f2:	461a      	mov	r2, r3
 80006f4:	2105      	movs	r1, #5
 80006f6:	2036      	movs	r0, #54	; 0x36
 80006f8:	f000 fb51 	bl	8000d9e <dwt_write16bitoffsetreg>
 80006fc:	e00d      	b.n	800071a <dwt_initialise+0x23e>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	f003 0304 	and.w	r3, r3, #4
 8000704:	2b00      	cmp	r3, #0
 8000706:	d108      	bne.n	800071a <dwt_initialise+0x23e>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <dwt_initialise+0x290>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	8ada      	ldrh	r2, [r3, #22]
 800070e:	4b17      	ldr	r3, [pc, #92]	; (800076c <dwt_initialise+0x290>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000716:	b292      	uxth	r2, r2
 8000718:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800071a:	2001      	movs	r0, #1
 800071c:	f000 fbfe 	bl	8000f1c <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 8000720:	2200      	movs	r2, #0
 8000722:	210a      	movs	r1, #10
 8000724:	202c      	movs	r0, #44	; 0x2c
 8000726:	f000 fb27 	bl	8000d78 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <dwt_initialise+0x290>)
 800072c:	681c      	ldr	r4, [r3, #0]
 800072e:	2100      	movs	r1, #0
 8000730:	2004      	movs	r0, #4
 8000732:	f000 faca 	bl	8000cca <dwt_read32bitoffsetreg>
 8000736:	4603      	mov	r3, r0
 8000738:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <dwt_initialise+0x290>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	691b      	ldr	r3, [r3, #16]
 8000740:	0c1b      	lsrs	r3, r3, #16
 8000742:	b2da      	uxtb	r2, r3
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <dwt_initialise+0x290>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f002 0203 	and.w	r2, r2, #3
 800074c:	b2d2      	uxtb	r2, r2
 800074e:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <dwt_initialise+0x290>)
 8000752:	681c      	ldr	r4, [r3, #0]
 8000754:	2100      	movs	r1, #0
 8000756:	2008      	movs	r0, #8
 8000758:	f000 fab7 	bl	8000cca <dwt_read32bitoffsetreg>
 800075c:	4603      	mov	r3, r0
 800075e:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 8000760:	2300      	movs	r3, #0

} // end dwt_initialise()
 8000762:	4618      	mov	r0, r3
 8000764:	371c      	adds	r7, #28
 8000766:	46bd      	mov	sp, r7
 8000768:	bd90      	pop	{r4, r7, pc}
 800076a:	bf00      	nop
 800076c:	20000000 	.word	0x20000000
 8000770:	deca0130 	.word	0xdeca0130

08000774 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 8000778:	2100      	movs	r1, #0
 800077a:	2000      	movs	r0, #0
 800077c:	f000 faa5 	bl	8000cca <dwt_read32bitoffsetreg>
 8000780:	4603      	mov	r3, r0
}
 8000782:	4618      	mov	r0, r3
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	795b      	ldrb	r3, [r3, #5]
 80007a2:	461a      	mov	r2, r3
 80007a4:	4ba1      	ldr	r3, [pc, #644]	; (8000a2c <dwt_configure+0x2a4>)
 80007a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007aa:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	785b      	ldrb	r3, [r3, #1]
 80007b0:	3b01      	subs	r3, #1
 80007b2:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 80007b4:	7cfb      	ldrb	r3, [r7, #19]
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	d002      	beq.n	80007c0 <dwt_configure+0x38>
 80007ba:	7cfb      	ldrb	r3, [r7, #19]
 80007bc:	2b07      	cmp	r3, #7
 80007be:	d101      	bne.n	80007c4 <dwt_configure+0x3c>
 80007c0:	2301      	movs	r3, #1
 80007c2:	e000      	b.n	80007c6 <dwt_configure+0x3e>
 80007c4:	2300      	movs	r3, #0
 80007c6:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	79db      	ldrb	r3, [r3, #7]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d10b      	bne.n	80007e8 <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 80007d0:	4b97      	ldr	r3, [pc, #604]	; (8000a30 <dwt_configure+0x2a8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	691a      	ldr	r2, [r3, #16]
 80007d6:	4b96      	ldr	r3, [pc, #600]	; (8000a30 <dwt_configure+0x2a8>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80007de:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 80007e0:	8abb      	ldrh	r3, [r7, #20]
 80007e2:	08db      	lsrs	r3, r3, #3
 80007e4:	82bb      	strh	r3, [r7, #20]
 80007e6:	e007      	b.n	80007f8 <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 80007e8:	4b91      	ldr	r3, [pc, #580]	; (8000a30 <dwt_configure+0x2a8>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	691a      	ldr	r2, [r3, #16]
 80007ee:	4b90      	ldr	r3, [pc, #576]	; (8000a30 <dwt_configure+0x2a8>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80007f6:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 80007f8:	4b8d      	ldr	r3, [pc, #564]	; (8000a30 <dwt_configure+0x2a8>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	7a12      	ldrb	r2, [r2, #8]
 8000800:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 8000802:	4b8b      	ldr	r3, [pc, #556]	; (8000a30 <dwt_configure+0x2a8>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	691a      	ldr	r2, [r3, #16]
 8000808:	4b89      	ldr	r3, [pc, #548]	; (8000a30 <dwt_configure+0x2a8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000810:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 8000812:	4b87      	ldr	r3, [pc, #540]	; (8000a30 <dwt_configure+0x2a8>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	6919      	ldr	r1, [r3, #16]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	7a1b      	ldrb	r3, [r3, #8]
 800081c:	041b      	lsls	r3, r3, #16
 800081e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000822:	4b83      	ldr	r3, [pc, #524]	; (8000a30 <dwt_configure+0x2a8>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	430a      	orrs	r2, r1
 8000828:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 800082a:	4b81      	ldr	r3, [pc, #516]	; (8000a30 <dwt_configure+0x2a8>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	691b      	ldr	r3, [r3, #16]
 8000830:	461a      	mov	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	2004      	movs	r0, #4
 8000836:	f000 face 	bl	8000dd6 <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 800083a:	8abb      	ldrh	r3, [r7, #20]
 800083c:	461a      	mov	r2, r3
 800083e:	f642 0104 	movw	r1, #10244	; 0x2804
 8000842:	202e      	movs	r0, #46	; 0x2e
 8000844:	f000 faab 	bl	8000d9e <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 8000848:	7cbb      	ldrb	r3, [r7, #18]
 800084a:	4618      	mov	r0, r3
 800084c:	f000 fb17 	bl	8000e7e <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 8000850:	7cfb      	ldrb	r3, [r7, #19]
 8000852:	4a78      	ldr	r2, [pc, #480]	; (8000a34 <dwt_configure+0x2ac>)
 8000854:	5cd3      	ldrb	r3, [r2, r3]
 8000856:	461a      	mov	r2, r3
 8000858:	4b77      	ldr	r3, [pc, #476]	; (8000a38 <dwt_configure+0x2b0>)
 800085a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800085e:	461a      	mov	r2, r3
 8000860:	2107      	movs	r1, #7
 8000862:	202b      	movs	r0, #43	; 0x2b
 8000864:	f000 fab7 	bl	8000dd6 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8000868:	7cfb      	ldrb	r3, [r7, #19]
 800086a:	4a72      	ldr	r2, [pc, #456]	; (8000a34 <dwt_configure+0x2ac>)
 800086c:	5cd3      	ldrb	r3, [r2, r3]
 800086e:	461a      	mov	r2, r3
 8000870:	4b72      	ldr	r3, [pc, #456]	; (8000a3c <dwt_configure+0x2b4>)
 8000872:	5c9b      	ldrb	r3, [r3, r2]
 8000874:	461a      	mov	r2, r3
 8000876:	210b      	movs	r1, #11
 8000878:	202b      	movs	r0, #43	; 0x2b
 800087a:	f000 fa7d 	bl	8000d78 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 800087e:	7c7b      	ldrb	r3, [r7, #17]
 8000880:	4a6f      	ldr	r2, [pc, #444]	; (8000a40 <dwt_configure+0x2b8>)
 8000882:	5cd3      	ldrb	r3, [r2, r3]
 8000884:	461a      	mov	r2, r3
 8000886:	210b      	movs	r1, #11
 8000888:	2028      	movs	r0, #40	; 0x28
 800088a:	f000 fa75 	bl	8000d78 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 800088e:	7cfb      	ldrb	r3, [r7, #19]
 8000890:	4a68      	ldr	r2, [pc, #416]	; (8000a34 <dwt_configure+0x2ac>)
 8000892:	5cd3      	ldrb	r3, [r2, r3]
 8000894:	461a      	mov	r2, r3
 8000896:	4b6b      	ldr	r3, [pc, #428]	; (8000a44 <dwt_configure+0x2bc>)
 8000898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800089c:	461a      	mov	r2, r3
 800089e:	210c      	movs	r1, #12
 80008a0:	2028      	movs	r0, #40	; 0x28
 80008a2:	f000 fa98 	bl	8000dd6 <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	79db      	ldrb	r3, [r3, #7]
 80008aa:	4618      	mov	r0, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	799b      	ldrb	r3, [r3, #6]
 80008b0:	4619      	mov	r1, r3
 80008b2:	4a65      	ldr	r2, [pc, #404]	; (8000a48 <dwt_configure+0x2c0>)
 80008b4:	0043      	lsls	r3, r0, #1
 80008b6:	440b      	add	r3, r1
 80008b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008bc:	461a      	mov	r2, r3
 80008be:	2102      	movs	r1, #2
 80008c0:	2027      	movs	r0, #39	; 0x27
 80008c2:	f000 fa6c 	bl	8000d9e <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 80008c6:	7cbb      	ldrb	r3, [r7, #18]
 80008c8:	4a60      	ldr	r2, [pc, #384]	; (8000a4c <dwt_configure+0x2c4>)
 80008ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008ce:	461a      	mov	r2, r3
 80008d0:	2104      	movs	r1, #4
 80008d2:	2027      	movs	r0, #39	; 0x27
 80008d4:	f000 fa63 	bl	8000d9e <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	79db      	ldrb	r3, [r3, #7]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d105      	bne.n	80008ec <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 80008e0:	2264      	movs	r2, #100	; 0x64
 80008e2:	2106      	movs	r1, #6
 80008e4:	2027      	movs	r0, #39	; 0x27
 80008e6:	f000 fa5a 	bl	8000d9e <dwt_write16bitoffsetreg>
 80008ea:	e018      	b.n	800091e <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	789b      	ldrb	r3, [r3, #2]
 80008f0:	2b04      	cmp	r3, #4
 80008f2:	d10a      	bne.n	800090a <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 80008f4:	2210      	movs	r2, #16
 80008f6:	2106      	movs	r1, #6
 80008f8:	2027      	movs	r0, #39	; 0x27
 80008fa:	f000 fa50 	bl	8000d9e <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 80008fe:	2210      	movs	r2, #16
 8000900:	2126      	movs	r1, #38	; 0x26
 8000902:	2027      	movs	r0, #39	; 0x27
 8000904:	f000 fa38 	bl	8000d78 <dwt_write8bitoffsetreg>
 8000908:	e009      	b.n	800091e <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 800090a:	2220      	movs	r2, #32
 800090c:	2106      	movs	r1, #6
 800090e:	2027      	movs	r0, #39	; 0x27
 8000910:	f000 fa45 	bl	8000d9e <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 8000914:	2228      	movs	r2, #40	; 0x28
 8000916:	2126      	movs	r1, #38	; 0x26
 8000918:	2027      	movs	r0, #39	; 0x27
 800091a:	f000 fa2d 	bl	8000d78 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 800091e:	7cbb      	ldrb	r3, [r7, #18]
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	78d2      	ldrb	r2, [r2, #3]
 8000924:	4611      	mov	r1, r2
 8000926:	4a4a      	ldr	r2, [pc, #296]	; (8000a50 <dwt_configure+0x2c8>)
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	440b      	add	r3, r1
 800092c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000930:	461a      	mov	r2, r3
 8000932:	2108      	movs	r1, #8
 8000934:	2027      	movs	r0, #39	; 0x27
 8000936:	f000 fa4e 	bl	8000dd6 <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	895b      	ldrh	r3, [r3, #10]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d103      	bne.n	800094a <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f241 0241 	movw	r2, #4161	; 0x1041
 8000948:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	895b      	ldrh	r3, [r3, #10]
 800094e:	461a      	mov	r2, r3
 8000950:	2120      	movs	r1, #32
 8000952:	2027      	movs	r0, #39	; 0x27
 8000954:	f000 fa23 	bl	8000d9e <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 8000958:	4b3e      	ldr	r3, [pc, #248]	; (8000a54 <dwt_configure+0x2cc>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	210c      	movs	r1, #12
 8000960:	2023      	movs	r0, #35	; 0x23
 8000962:	f000 fa38 	bl	8000dd6 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 8000966:	7cbb      	ldrb	r3, [r7, #18]
 8000968:	4a3a      	ldr	r2, [pc, #232]	; (8000a54 <dwt_configure+0x2cc>)
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	4413      	add	r3, r2
 800096e:	889b      	ldrh	r3, [r3, #4]
 8000970:	461a      	mov	r2, r3
 8000972:	2104      	movs	r1, #4
 8000974:	2023      	movs	r0, #35	; 0x23
 8000976:	f000 fa12 	bl	8000d9e <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	799b      	ldrb	r3, [r3, #6]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d00d      	beq.n	800099e <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	79db      	ldrb	r3, [r3, #7]
 8000986:	461a      	mov	r2, r3
 8000988:	4b33      	ldr	r3, [pc, #204]	; (8000a58 <dwt_configure+0x2d0>)
 800098a:	5c9b      	ldrb	r3, [r3, r2]
 800098c:	461a      	mov	r2, r3
 800098e:	2100      	movs	r1, #0
 8000990:	2021      	movs	r0, #33	; 0x21
 8000992:	f000 f9f1 	bl	8000d78 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 8000996:	2303      	movs	r3, #3
 8000998:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 800099a:	2301      	movs	r3, #1
 800099c:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800099e:	7cfb      	ldrb	r3, [r7, #19]
 80009a0:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80009a4:	7cfb      	ldrb	r3, [r7, #19]
 80009a6:	011b      	lsls	r3, r3, #4
 80009a8:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80009aa:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	785b      	ldrb	r3, [r3, #1]
 80009b0:	049b      	lsls	r3, r3, #18
 80009b2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80009b6:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80009b8:	7dfb      	ldrb	r3, [r7, #23]
 80009ba:	051b      	lsls	r3, r3, #20
 80009bc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80009c0:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80009c2:	7dbb      	ldrb	r3, [r7, #22]
 80009c4:	045b      	lsls	r3, r3, #17
 80009c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80009ca:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	791b      	ldrb	r3, [r3, #4]
 80009d0:	059b      	lsls	r3, r3, #22
 80009d2:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80009d6:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	795b      	ldrb	r3, [r3, #5]
 80009dc:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80009de:	4313      	orrs	r3, r2
 80009e0:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 80009e2:	68fa      	ldr	r2, [r7, #12]
 80009e4:	2100      	movs	r1, #0
 80009e6:	201f      	movs	r0, #31
 80009e8:	f000 f9f5 	bl	8000dd6 <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	789a      	ldrb	r2, [r3, #2]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	785b      	ldrb	r3, [r3, #1]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	0419      	lsls	r1, r3, #16
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	79db      	ldrb	r3, [r3, #7]
 80009fe:	035a      	lsls	r2, r3, #13
 8000a00:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <dwt_configure+0x2a8>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	430a      	orrs	r2, r1
 8000a06:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <dwt_configure+0x2a8>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	68db      	ldr	r3, [r3, #12]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	2100      	movs	r1, #0
 8000a12:	2008      	movs	r0, #8
 8000a14:	f000 f9df 	bl	8000dd6 <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 8000a18:	2242      	movs	r2, #66	; 0x42
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	200d      	movs	r0, #13
 8000a1e:	f000 f9ab 	bl	8000d78 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8000a22:	bf00      	nop
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	080059d0 	.word	0x080059d0
 8000a30:	20000000 	.word	0x20000000
 8000a34:	08005950 	.word	0x08005950
 8000a38:	08005970 	.word	0x08005970
 8000a3c:	08005988 	.word	0x08005988
 8000a40:	08005990 	.word	0x08005990
 8000a44:	08005958 	.word	0x08005958
 8000a48:	080059a0 	.word	0x080059a0
 8000a4c:	080059ac 	.word	0x080059ac
 8000a50:	080059b0 	.word	0x080059b0
 8000a54:	08005994 	.word	0x08005994
 8000a58:	0800599c 	.word	0x0800599c

08000a5c <dwt_setrxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxantennadelay(uint16 rxDelay)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	80fb      	strh	r3, [r7, #6]
    // Set the RX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
 8000a66:	88fb      	ldrh	r3, [r7, #6]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	f641 0104 	movw	r1, #6148	; 0x1804
 8000a6e:	202e      	movs	r0, #46	; 0x2e
 8000a70:	f000 f995 	bl	8000d9e <dwt_write16bitoffsetreg>
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <dwt_settxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_settxantennadelay(uint16 txDelay)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	80fb      	strh	r3, [r7, #6]
    // Set the TX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
 8000a86:	88fb      	ldrh	r3, [r7, #6]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	2018      	movs	r0, #24
 8000a8e:	f000 f986 	bl	8000d9e <dwt_write16bitoffsetreg>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	6039      	str	r1, [r7, #0]
 8000aa4:	80fb      	strh	r3, [r7, #6]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	80bb      	strh	r3, [r7, #4]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 8000aaa:	88ba      	ldrh	r2, [r7, #4]
 8000aac:	88fb      	ldrh	r3, [r7, #6]
 8000aae:	4413      	add	r3, r2
 8000ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ab4:	dc09      	bgt.n	8000aca <dwt_writetxdata+0x30>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 8000ab6:	88fb      	ldrh	r3, [r7, #6]
 8000ab8:	3b02      	subs	r3, #2
 8000aba:	461a      	mov	r2, r3
 8000abc:	88b9      	ldrh	r1, [r7, #4]
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	2009      	movs	r0, #9
 8000ac2:	f000 f857 	bl	8000b74 <dwt_writetodevice>
        return DWT_SUCCESS;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e001      	b.n	8000ace <dwt_writetxdata+0x34>
    }
    else
    {
        return DWT_ERROR;
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
    }
} // end dwt_writetxdata()
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	603a      	str	r2, [r7, #0]
 8000ae2:	80fb      	strh	r3, [r7, #6]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	80bb      	strh	r3, [r7, #4]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <dwt_writetxfctrl+0x3c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	68da      	ldr	r2, [r3, #12]
 8000aee:	88fb      	ldrh	r3, [r7, #6]
 8000af0:	431a      	orrs	r2, r3
 8000af2:	88bb      	ldrh	r3, [r7, #4]
 8000af4:	059b      	lsls	r3, r3, #22
 8000af6:	431a      	orrs	r2, r3
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	03db      	lsls	r3, r3, #15
 8000afc:	4313      	orrs	r3, r2
 8000afe:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 8000b00:	68fa      	ldr	r2, [r7, #12]
 8000b02:	2100      	movs	r1, #0
 8000b04:	2008      	movs	r0, #8
 8000b06:	f000 f966 	bl	8000dd6 <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000000 	.word	0x20000000

08000b18 <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	460b      	mov	r3, r1
 8000b22:	807b      	strh	r3, [r7, #2]
 8000b24:	4613      	mov	r3, r2
 8000b26:	803b      	strh	r3, [r7, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 8000b28:	887a      	ldrh	r2, [r7, #2]
 8000b2a:	8839      	ldrh	r1, [r7, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2011      	movs	r0, #17
 8000b30:	f000 f877 	bl	8000c22 <dwt_readfromdevice>
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <dwt_readtxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readtxtimestamp(uint8 * timestamp)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN, timestamp) ; // Read bytes directly into buffer
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2205      	movs	r2, #5
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2017      	movs	r0, #23
 8000b4c:	f000 f869 	bl	8000c22 <dwt_readfromdevice>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <dwt_readrxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readrxtimestamp(uint8 * timestamp)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp) ; // Get the adjusted time of arrival
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2205      	movs	r2, #5
 8000b64:	2100      	movs	r1, #0
 8000b66:	2015      	movs	r0, #21
 8000b68:	f000 f85b 	bl	8000c22 <dwt_readfromdevice>
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60ba      	str	r2, [r7, #8]
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4603      	mov	r3, r0
 8000b80:	81fb      	strh	r3, [r7, #14]
 8000b82:	460b      	mov	r3, r1
 8000b84:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000b8a:	89bb      	ldrh	r3, [r7, #12]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d10c      	bne.n	8000baa <dwt_writetodevice+0x36>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000b90:	89fb      	ldrh	r3, [r7, #14]
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	1c59      	adds	r1, r3, #1
 8000b98:	6179      	str	r1, [r7, #20]
 8000b9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	3318      	adds	r3, #24
 8000ba2:	443b      	add	r3, r7
 8000ba4:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000ba8:	e02f      	b.n	8000c0a <dwt_writetodevice+0x96>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000baa:	89fb      	ldrh	r3, [r7, #14]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	1c59      	adds	r1, r3, #1
 8000bb2:	6179      	str	r1, [r7, #20]
 8000bb4:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	3318      	adds	r3, #24
 8000bbc:	443b      	add	r3, r7
 8000bbe:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000bc2:	89bb      	ldrh	r3, [r7, #12]
 8000bc4:	2b7f      	cmp	r3, #127	; 0x7f
 8000bc6:	d809      	bhi.n	8000bdc <dwt_writetodevice+0x68>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	617a      	str	r2, [r7, #20]
 8000bce:	89ba      	ldrh	r2, [r7, #12]
 8000bd0:	b2d2      	uxtb	r2, r2
 8000bd2:	3318      	adds	r3, #24
 8000bd4:	443b      	add	r3, r7
 8000bd6:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000bda:	e016      	b.n	8000c0a <dwt_writetodevice+0x96>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000bdc:	89bb      	ldrh	r3, [r7, #12]
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	1c59      	adds	r1, r3, #1
 8000be4:	6179      	str	r1, [r7, #20]
 8000be6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000bea:	b2d2      	uxtb	r2, r2
 8000bec:	3318      	adds	r3, #24
 8000bee:	443b      	add	r3, r7
 8000bf0:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000bf4:	89bb      	ldrh	r3, [r7, #12]
 8000bf6:	09db      	lsrs	r3, r3, #7
 8000bf8:	b299      	uxth	r1, r3
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	1c5a      	adds	r2, r3, #1
 8000bfe:	617a      	str	r2, [r7, #20]
 8000c00:	b2ca      	uxtb	r2, r1
 8000c02:	3318      	adds	r3, #24
 8000c04:	443b      	add	r3, r7
 8000c06:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	b298      	uxth	r0, r3
 8000c0e:	f107 0110 	add.w	r1, r7, #16
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	68ba      	ldr	r2, [r7, #8]
 8000c16:	f000 fb49 	bl	80012ac <writetospi>
} // end dwt_writetodevice()
 8000c1a:	bf00      	nop
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b086      	sub	sp, #24
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	60ba      	str	r2, [r7, #8]
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	81fb      	strh	r3, [r7, #14]
 8000c30:	460b      	mov	r3, r1
 8000c32:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000c38:	89bb      	ldrh	r3, [r7, #12]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d109      	bne.n	8000c52 <dwt_readfromdevice+0x30>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	1c5a      	adds	r2, r3, #1
 8000c42:	617a      	str	r2, [r7, #20]
 8000c44:	89fa      	ldrh	r2, [r7, #14]
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	3318      	adds	r3, #24
 8000c4a:	443b      	add	r3, r7
 8000c4c:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000c50:	e02f      	b.n	8000cb2 <dwt_readfromdevice+0x90>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000c52:	89fb      	ldrh	r3, [r7, #14]
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	1c59      	adds	r1, r3, #1
 8000c5a:	6179      	str	r1, [r7, #20]
 8000c5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	3318      	adds	r3, #24
 8000c64:	443b      	add	r3, r7
 8000c66:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000c6a:	89bb      	ldrh	r3, [r7, #12]
 8000c6c:	2b7f      	cmp	r3, #127	; 0x7f
 8000c6e:	d809      	bhi.n	8000c84 <dwt_readfromdevice+0x62>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	1c5a      	adds	r2, r3, #1
 8000c74:	617a      	str	r2, [r7, #20]
 8000c76:	89ba      	ldrh	r2, [r7, #12]
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	3318      	adds	r3, #24
 8000c7c:	443b      	add	r3, r7
 8000c7e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000c82:	e016      	b.n	8000cb2 <dwt_readfromdevice+0x90>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000c84:	89bb      	ldrh	r3, [r7, #12]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	1c59      	adds	r1, r3, #1
 8000c8c:	6179      	str	r1, [r7, #20]
 8000c8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	3318      	adds	r3, #24
 8000c96:	443b      	add	r3, r7
 8000c98:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000c9c:	89bb      	ldrh	r3, [r7, #12]
 8000c9e:	09db      	lsrs	r3, r3, #7
 8000ca0:	b299      	uxth	r1, r3
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	1c5a      	adds	r2, r3, #1
 8000ca6:	617a      	str	r2, [r7, #20]
 8000ca8:	b2ca      	uxtb	r2, r1
 8000caa:	3318      	adds	r3, #24
 8000cac:	443b      	add	r3, r7
 8000cae:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	b298      	uxth	r0, r3
 8000cb6:	f107 0110 	add.w	r1, r7, #16
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	68ba      	ldr	r2, [r7, #8]
 8000cbe:	f000 fb29 	bl	8001314 <readfromspi>
} // end dwt_readfromdevice()
 8000cc2:	bf00      	nop
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
 8000cd2:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	b298      	uxth	r0, r3
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b299      	uxth	r1, r3
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	2204      	movs	r2, #4
 8000ce6:	f7ff ff9c 	bl	8000c22 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8000cea:	2303      	movs	r3, #3
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	e00b      	b.n	8000d08 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	021b      	lsls	r3, r3, #8
 8000cf4:	f107 010c 	add.w	r1, r7, #12
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	440a      	add	r2, r1
 8000cfc:	7812      	ldrb	r2, [r2, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	3b01      	subs	r3, #1
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	daf0      	bge.n	8000cf0 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8000d0e:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8000d10:	4618      	mov	r0, r3
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8000d22:	2300      	movs	r3, #0
 8000d24:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	b298      	uxth	r0, r3
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	b299      	uxth	r1, r3
 8000d2e:	f107 030c 	add.w	r3, r7, #12
 8000d32:	2202      	movs	r2, #2
 8000d34:	f7ff ff75 	bl	8000c22 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8000d38:	7b7b      	ldrb	r3, [r7, #13]
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	021b      	lsls	r3, r3, #8
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	7b3b      	ldrb	r3, [r7, #12]
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	4413      	add	r3, r2
 8000d46:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8000d48:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b084      	sub	sp, #16
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	b298      	uxth	r0, r3
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	b299      	uxth	r1, r3
 8000d64:	f107 030f 	add.w	r3, r7, #15
 8000d68:	2201      	movs	r2, #1
 8000d6a:	f7ff ff5a 	bl	8000c22 <dwt_readfromdevice>

    return regval ;
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	4613      	mov	r3, r2
 8000d84:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	b298      	uxth	r0, r3
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	b299      	uxth	r1, r3
 8000d8e:	1dfb      	adds	r3, r7, #7
 8000d90:	2201      	movs	r2, #1
 8000d92:	f7ff feef 	bl	8000b74 <dwt_writetodevice>
}
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b086      	sub	sp, #24
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	60f8      	str	r0, [r7, #12]
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	4613      	mov	r3, r2
 8000daa:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8000dac:	88fb      	ldrh	r3, [r7, #6]
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	b298      	uxth	r0, r3
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	b299      	uxth	r1, r3
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2202      	movs	r2, #2
 8000dca:	f7ff fed3 	bl	8000b74 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8000dce:	bf00      	nop
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b086      	sub	sp, #24
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	60f8      	str	r0, [r7, #12]
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
 8000de6:	e00d      	b.n	8000e04 <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	b2d9      	uxtb	r1, r3
 8000dec:	f107 0210 	add.w	r2, r7, #16
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	4413      	add	r3, r2
 8000df4:	460a      	mov	r2, r1
 8000df6:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	0a1b      	lsrs	r3, r3, #8
 8000dfc:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	3301      	adds	r3, #1
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	2b03      	cmp	r3, #3
 8000e08:	ddee      	ble.n	8000de8 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	b298      	uxth	r0, r3
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	b299      	uxth	r1, r3
 8000e12:	f107 0310 	add.w	r3, r7, #16
 8000e16:	2204      	movs	r2, #4
 8000e18:	f7ff feac 	bl	8000b74 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8000e1c:	bf00      	nop
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8000e2e:	88fb      	ldrh	r3, [r7, #6]
 8000e30:	461a      	mov	r2, r3
 8000e32:	2104      	movs	r1, #4
 8000e34:	202d      	movs	r0, #45	; 0x2d
 8000e36:	f7ff ffb2 	bl	8000d9e <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	2106      	movs	r1, #6
 8000e3e:	202d      	movs	r0, #45	; 0x2d
 8000e40:	f7ff ff9a 	bl	8000d78 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8000e44:	2200      	movs	r2, #0
 8000e46:	2106      	movs	r1, #6
 8000e48:	202d      	movs	r0, #45	; 0x2d
 8000e4a:	f7ff ff95 	bl	8000d78 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8000e4e:	210a      	movs	r1, #10
 8000e50:	202d      	movs	r0, #45	; 0x2d
 8000e52:	f7ff ff3a 	bl	8000cca <dwt_read32bitoffsetreg>
 8000e56:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8000e58:	68fb      	ldr	r3, [r7, #12]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8000e66:	2200      	movs	r2, #0
 8000e68:	2102      	movs	r1, #2
 8000e6a:	202c      	movs	r0, #44	; 0x2c
 8000e6c:	f7ff ff84 	bl	8000d78 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 8000e70:	2202      	movs	r2, #2
 8000e72:	2102      	movs	r1, #2
 8000e74:	202c      	movs	r0, #44	; 0x2c
 8000e76:	f7ff ff7f 	bl	8000d78 <dwt_write8bitoffsetreg>
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 8000e86:	226d      	movs	r2, #109	; 0x6d
 8000e88:	f640 0106 	movw	r1, #2054	; 0x806
 8000e8c:	202e      	movs	r0, #46	; 0x2e
 8000e8e:	f7ff ff73 	bl	8000d78 <dwt_write8bitoffsetreg>

    if(prfIndex)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d007      	beq.n	8000ea8 <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8000e98:	f240 6207 	movw	r2, #1543	; 0x607
 8000e9c:	f641 0106 	movw	r1, #6150	; 0x1806
 8000ea0:	202e      	movs	r0, #46	; 0x2e
 8000ea2:	f7ff ff7c 	bl	8000d9e <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8000ea6:	e006      	b.n	8000eb6 <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8000ea8:	f241 6207 	movw	r2, #5639	; 0x1607
 8000eac:	f641 0106 	movw	r1, #6150	; 0x1806
 8000eb0:	202e      	movs	r0, #46	; 0x2e
 8000eb2:	f7ff ff74 	bl	8000d9e <dwt_write16bitoffsetreg>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8000ec2:	200e      	movs	r0, #14
 8000ec4:	f000 f82a 	bl	8000f1c <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8000ec8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ecc:	2106      	movs	r1, #6
 8000ece:	202d      	movs	r0, #45	; 0x2d
 8000ed0:	f7ff ff65 	bl	8000d9e <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f000 f9dd 	bl	8001294 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8000eda:	2001      	movs	r0, #1
 8000edc:	f000 f81e 	bl	8000f1c <_dwt_enableclocks>
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <dwt_setrxaftertxdelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxaftertxdelay(uint32 rxDelayTime)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
    uint32 val = dwt_read32bitreg(ACK_RESP_T_ID) ; // Read ACK_RESP_T_ID register
 8000eec:	2100      	movs	r1, #0
 8000eee:	201a      	movs	r0, #26
 8000ef0:	f7ff feeb 	bl	8000cca <dwt_read32bitoffsetreg>
 8000ef4:	60f8      	str	r0, [r7, #12]

    val &= ~(ACK_RESP_T_W4R_TIM_MASK) ; // Clear the timer (19:0)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	0d1b      	lsrs	r3, r3, #20
 8000efa:	051b      	lsls	r3, r3, #20
 8000efc:	60fb      	str	r3, [r7, #12]

    val |= (rxDelayTime & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000f04:	68fa      	ldr	r2, [r7, #12]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(ACK_RESP_T_ID, val) ;
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	201a      	movs	r0, #26
 8000f10:	f7ff ff61 	bl	8000dd6 <dwt_write32bitoffsetreg>
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	2202      	movs	r2, #2
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	2036      	movs	r0, #54	; 0x36
 8000f2e:	f7ff fe78 	bl	8000c22 <dwt_readfromdevice>
    switch(clocks)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b0e      	cmp	r3, #14
 8000f36:	d876      	bhi.n	8001026 <_dwt_enableclocks+0x10a>
 8000f38:	a201      	add	r2, pc, #4	; (adr r2, 8000f40 <_dwt_enableclocks+0x24>)
 8000f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3e:	bf00      	nop
 8000f40:	08000f8d 	.word	0x08000f8d
 8000f44:	08000f7d 	.word	0x08000f7d
 8000f48:	08000fa3 	.word	0x08000fa3
 8000f4c:	08001027 	.word	0x08001027
 8000f50:	08001027 	.word	0x08001027
 8000f54:	08001027 	.word	0x08001027
 8000f58:	08001027 	.word	0x08001027
 8000f5c:	08000fb9 	.word	0x08000fb9
 8000f60:	08000fd9 	.word	0x08000fd9
 8000f64:	08001027 	.word	0x08001027
 8000f68:	08001027 	.word	0x08001027
 8000f6c:	08000fef 	.word	0x08000fef
 8000f70:	08000ffb 	.word	0x08000ffb
 8000f74:	08001007 	.word	0x08001007
 8000f78:	0800101d 	.word	0x0800101d
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8000f80:	7b7b      	ldrb	r3, [r7, #13]
 8000f82:	f023 0301 	bic.w	r3, r3, #1
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f8a:	e04d      	b.n	8001028 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8000f8c:	7b3b      	ldrb	r3, [r7, #12]
 8000f8e:	b25b      	sxtb	r3, r3
 8000f90:	f023 0303 	bic.w	r3, r3, #3
 8000f94:	b25b      	sxtb	r3, r3
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	b25b      	sxtb	r3, r3
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000fa0:	e042      	b.n	8001028 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8000fa2:	7b3b      	ldrb	r3, [r7, #12]
 8000fa4:	b25b      	sxtb	r3, r3
 8000fa6:	f023 0303 	bic.w	r3, r3, #3
 8000faa:	b25b      	sxtb	r3, r3
 8000fac:	f043 0302 	orr.w	r3, r3, #2
 8000fb0:	b25b      	sxtb	r3, r3
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000fb6:	e037      	b.n	8001028 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8000fb8:	7b3b      	ldrb	r3, [r7, #12]
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8000fc6:	b25b      	sxtb	r3, r3
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8000fcc:	7b7b      	ldrb	r3, [r7, #13]
 8000fce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000fd6:	e027      	b.n	8001028 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8000fd8:	7b3b      	ldrb	r3, [r7, #12]
 8000fda:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8000fe2:	7b7b      	ldrb	r3, [r7, #13]
 8000fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000fec:	e01c      	b.n	8001028 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8000fee:	7b7b      	ldrb	r3, [r7, #13]
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000ff8:	e016      	b.n	8001028 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8000ffa:	7b7b      	ldrb	r3, [r7, #13]
 8000ffc:	f023 0302 	bic.w	r3, r3, #2
 8001000:	b2db      	uxtb	r3, r3
 8001002:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001004:	e010      	b.n	8001028 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8001006:	7b3b      	ldrb	r3, [r7, #12]
 8001008:	b25b      	sxtb	r3, r3
 800100a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800100e:	b25b      	sxtb	r3, r3
 8001010:	f043 0320 	orr.w	r3, r3, #32
 8001014:	b25b      	sxtb	r3, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	733b      	strb	r3, [r7, #12]
        }
        break;
 800101a:	e005      	b.n	8001028 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 800101c:	2301      	movs	r3, #1
 800101e:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8001020:	2303      	movs	r3, #3
 8001022:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001024:	e000      	b.n	8001028 <_dwt_enableclocks+0x10c>
        default:
        break;
 8001026:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	2201      	movs	r2, #1
 800102e:	2100      	movs	r1, #0
 8001030:	2036      	movs	r0, #54	; 0x36
 8001032:	f7ff fd9f 	bl	8000b74 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8001036:	f107 030c 	add.w	r3, r7, #12
 800103a:	3301      	adds	r3, #1
 800103c:	2201      	movs	r2, #1
 800103e:	2101      	movs	r1, #1
 8001040:	2036      	movs	r0, #54	; 0x36
 8001042:	f7ff fd97 	bl	8000b74 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop

08001050 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8001054:	2000      	movs	r0, #0
 8001056:	f7ff ff61 	bl	8000f1c <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 800105a:	2200      	movs	r2, #0
 800105c:	2104      	movs	r1, #4
 800105e:	2036      	movs	r0, #54	; 0x36
 8001060:	f7ff fe9d 	bl	8000d9e <dwt_write16bitoffsetreg>
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}

08001068 <dwt_setdelayedtrxtime>:
 * output parameters none
 *
 * no return value
 */
void dwt_setdelayedtrxtime(uint32 starttime)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
    dwt_write32bitoffsetreg(DX_TIME_ID, 1, starttime); // Write at offset 1 as the lower 9 bits of this register are ignored
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	2101      	movs	r1, #1
 8001074:	200a      	movs	r0, #10
 8001076:	f7ff feae 	bl	8000dd6 <dwt_write32bitoffsetreg>

} // end dwt_setdelayedtrxtime()
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
    int retval = DWT_SUCCESS ;
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 8001092:	2300      	movs	r3, #0
 8001094:	72fb      	strb	r3, [r7, #11]
    uint16 checkTxOK = 0 ;
 8001096:	2300      	movs	r3, #0
 8001098:	813b      	strh	r3, [r7, #8]

    if(mode & DWT_RESPONSE_EXPECTED)
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d005      	beq.n	80010b0 <dwt_starttx+0x2c>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	72fb      	strb	r3, [r7, #11]
        pdw1000local->wait4resp = 1;
 80010a8:	4b1c      	ldr	r3, [pc, #112]	; (800111c <dwt_starttx+0x98>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2201      	movs	r2, #1
 80010ae:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d020      	beq.n	80010fc <dwt_starttx+0x78>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 80010ba:	7afb      	ldrb	r3, [r7, #11]
 80010bc:	f043 0306 	orr.w	r3, r3, #6
 80010c0:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 80010c2:	7afb      	ldrb	r3, [r7, #11]
 80010c4:	461a      	mov	r2, r3
 80010c6:	2100      	movs	r1, #0
 80010c8:	200d      	movs	r0, #13
 80010ca:	f7ff fe55 	bl	8000d78 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 80010ce:	2103      	movs	r1, #3
 80010d0:	200f      	movs	r0, #15
 80010d2:	f7ff fe21 	bl	8000d18 <dwt_read16bitoffsetreg>
 80010d6:	4603      	mov	r3, r0
 80010d8:	813b      	strh	r3, [r7, #8]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 80010da:	893b      	ldrh	r3, [r7, #8]
 80010dc:	f403 6381 	and.w	r3, r3, #1032	; 0x408
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <dwt_starttx+0x66>
        {
            retval = DWT_SUCCESS ; // All okay
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	e012      	b.n	8001110 <dwt_starttx+0x8c>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 80010ea:	2240      	movs	r2, #64	; 0x40
 80010ec:	2100      	movs	r1, #0
 80010ee:	200d      	movs	r0, #13
 80010f0:	f7ff fe42 	bl	8000d78 <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 80010f4:	f04f 33ff 	mov.w	r3, #4294967295
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	e009      	b.n	8001110 <dwt_starttx+0x8c>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 80010fc:	7afb      	ldrb	r3, [r7, #11]
 80010fe:	f043 0302 	orr.w	r3, r3, #2
 8001102:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8001104:	7afb      	ldrb	r3, [r7, #11]
 8001106:	461a      	mov	r2, r3
 8001108:	2100      	movs	r1, #0
 800110a:	200d      	movs	r0, #13
 800110c:	f7ff fe34 	bl	8000d78 <dwt_write8bitoffsetreg>
    }

    return retval;
 8001110:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000000 	.word	0x20000000

08001120 <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	80fb      	strh	r3, [r7, #6]
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
 800112a:	2103      	movs	r1, #3
 800112c:	2004      	movs	r0, #4
 800112e:	f7ff fe10 	bl	8000d52 <dwt_read8bitoffsetreg>
 8001132:	4603      	mov	r3, r0
 8001134:	73fb      	strb	r3, [r7, #15]

    if(time > 0)
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d018      	beq.n	800116e <dwt_setrxtimeout+0x4e>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
 800113c:	88fb      	ldrh	r3, [r7, #6]
 800113e:	461a      	mov	r2, r3
 8001140:	2100      	movs	r1, #0
 8001142:	200c      	movs	r0, #12
 8001144:	f7ff fe2b 	bl	8000d9e <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	f043 0310 	orr.w	r3, r3, #16
 800114e:	73fb      	strb	r3, [r7, #15]
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <dwt_setrxtimeout+0x7c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	691a      	ldr	r2, [r3, #16]
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <dwt_setrxtimeout+0x7c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800115e:	611a      	str	r2, [r3, #16]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	461a      	mov	r2, r3
 8001164:	2103      	movs	r1, #3
 8001166:	2004      	movs	r0, #4
 8001168:	f7ff fe06 	bl	8000d78 <dwt_write8bitoffsetreg>
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
 800116c:	e011      	b.n	8001192 <dwt_setrxtimeout+0x72>
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	f023 0310 	bic.w	r3, r3, #16
 8001174:	73fb      	strb	r3, [r7, #15]
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <dwt_setrxtimeout+0x7c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	691a      	ldr	r2, [r3, #16]
 800117c:	4b07      	ldr	r3, [pc, #28]	; (800119c <dwt_setrxtimeout+0x7c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001184:	611a      	str	r2, [r3, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	461a      	mov	r2, r3
 800118a:	2103      	movs	r1, #3
 800118c:	2004      	movs	r0, #4
 800118e:	f7ff fdf3 	bl	8000d78 <dwt_write8bitoffsetreg>
} // end dwt_setrxtimeout()
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000000 	.word	0x20000000

080011a0 <dwt_setpreambledetecttimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setpreambledetecttimeout(uint16 timeout)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	80fb      	strh	r3, [r7, #6]
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_PRETOC_OFFSET, timeout);
 80011aa:	88fb      	ldrh	r3, [r7, #6]
 80011ac:	461a      	mov	r2, r3
 80011ae:	2124      	movs	r1, #36	; 0x24
 80011b0:	2027      	movs	r0, #39	; 0x27
 80011b2:	f7ff fdf4 	bl	8000d9e <dwt_write16bitoffsetreg>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	af00      	add	r7, sp, #0
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 80011c2:	22e0      	movs	r2, #224	; 0xe0
 80011c4:	2103      	movs	r1, #3
 80011c6:	2036      	movs	r0, #54	; 0x36
 80011c8:	f7ff fdd6 	bl	8000d78 <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 80011cc:	22f0      	movs	r2, #240	; 0xf0
 80011ce:	2103      	movs	r1, #3
 80011d0:	2036      	movs	r0, #54	; 0x36
 80011d2:	f7ff fdd1 	bl	8000d78 <dwt_write8bitoffsetreg>
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 80011e0:	f7ff ff36 	bl	8001050 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2100      	movs	r1, #0
 80011e8:	202c      	movs	r0, #44	; 0x2c
 80011ea:	f7ff fdd8 	bl	8000d9e <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2106      	movs	r1, #6
 80011f2:	202c      	movs	r0, #44	; 0x2c
 80011f4:	f7ff fdc0 	bl	8000d78 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 80011f8:	f7ff fe33 	bl	8000e62 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2103      	movs	r1, #3
 8001200:	2036      	movs	r0, #54	; 0x36
 8001202:	f7ff fdb9 	bl	8000d78 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8001206:	2001      	movs	r0, #1
 8001208:	f000 f844 	bl	8001294 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 800120c:	22f0      	movs	r2, #240	; 0xf0
 800120e:	2103      	movs	r1, #3
 8001210:	2036      	movs	r0, #54	; 0x36
 8001212:	f7ff fdb1 	bl	8000d78 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8001216:	4b03      	ldr	r3, [pc, #12]	; (8001224 <dwt_softreset+0x48>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2200      	movs	r2, #0
 800121c:	755a      	strb	r2, [r3, #21]
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000000 	.word	0x20000000

08001228 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	f003 031f 	and.w	r3, r3, #31
 800123a:	b25b      	sxtb	r3, r3
 800123c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001240:	b25b      	sxtb	r3, r3
 8001242:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	461a      	mov	r2, r3
 8001248:	210e      	movs	r1, #14
 800124a:	202b      	movs	r0, #43	; 0x2b
 800124c:	f7ff fd94 	bl	8000d78 <dwt_write8bitoffsetreg>
}
 8001250:	bf00      	nop
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 800125e:	f000 f9e3 	bl	8001628 <port_GetEXT_IRQStatus>
 8001262:	4603      	mov	r3, r0
 8001264:	607b      	str	r3, [r7, #4]

	if(s) {
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 800126c:	f000 f9ce 	bl	800160c <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 8001270:	687b      	ldr	r3, [r7, #4]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 8001288:	f000 f9c7 	bl	800161a <port_EnableEXT_IRQ>
	}
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f8ef 	bl	8001480 <Sleep>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 80012ac:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80012b0:	4683      	mov	fp, r0
 80012b2:	468a      	mov	sl, r1
 80012b4:	4690      	mov	r8, r2
 80012b6:	4699      	mov	r9, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 80012b8:	f7ff ffce 	bl	8001258 <decamutexon>

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80012bc:	4d13      	ldr	r5, [pc, #76]	; (800130c <writetospi+0x60>)
    stat = decamutexon() ;
 80012be:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80012c0:	4628      	mov	r0, r5
 80012c2:	f003 f9f2 	bl	80046aa <HAL_SPI_GetState>
 80012c6:	2801      	cmp	r0, #1
 80012c8:	4604      	mov	r4, r0
 80012ca:	d1f9      	bne.n	80012c0 <writetospi+0x14>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 80012cc:	4810      	ldr	r0, [pc, #64]	; (8001310 <writetospi+0x64>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	2140      	movs	r1, #64	; 0x40
 80012d2:	f001 fe21 	bl	8002f18 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 80012d6:	465a      	mov	r2, fp
 80012d8:	4651      	mov	r1, sl
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	480b      	ldr	r0, [pc, #44]	; (800130c <writetospi+0x60>)
 80012e0:	f003 f8a7 	bl	8004432 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295
 80012e8:	4649      	mov	r1, r9
 80012ea:	fa1f f288 	uxth.w	r2, r8
 80012ee:	4807      	ldr	r0, [pc, #28]	; (800130c <writetospi+0x60>)
 80012f0:	f003 f89f 	bl	8004432 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80012f4:	4622      	mov	r2, r4
 80012f6:	2140      	movs	r1, #64	; 0x40
 80012f8:	4805      	ldr	r0, [pc, #20]	; (8001310 <writetospi+0x64>)
 80012fa:	f001 fe0d 	bl	8002f18 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80012fe:	4630      	mov	r0, r6
 8001300:	f7ff ffbb 	bl	800127a <decamutexoff>

    return 0;
} // end writetospi()
 8001304:	2000      	movs	r0, #0
 8001306:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 800130a:	bf00      	nop
 800130c:	20000560 	.word	0x20000560
 8001310:	40020400 	.word	0x40020400

08001314 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 8001314:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 8001318:	4681      	mov	r9, r0
 800131a:	460c      	mov	r4, r1
 800131c:	4690      	mov	r8, r2
 800131e:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001320:	f7ff ff9a 	bl	8001258 <decamutexon>

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001324:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80013a4 <readfromspi+0x90>
    stat = decamutexon() ;
 8001328:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800132a:	4650      	mov	r0, sl
 800132c:	f003 f9bd 	bl	80046aa <HAL_SPI_GetState>
 8001330:	2801      	cmp	r0, #1
 8001332:	d1fa      	bne.n	800132a <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8001334:	481a      	ldr	r0, [pc, #104]	; (80013a0 <readfromspi+0x8c>)
 8001336:	2200      	movs	r2, #0
 8001338:	2140      	movs	r1, #64	; 0x40
 800133a:	f001 fded 	bl	8002f18 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 800133e:	f1b9 0f00 	cmp.w	r9, #0
 8001342:	d00c      	beq.n	800135e <readfromspi+0x4a>
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8001344:	f8df a05c 	ldr.w	sl, [pc, #92]	; 80013a4 <readfromspi+0x90>
 8001348:	44a1      	add	r9, r4
 800134a:	2201      	movs	r2, #1
 800134c:	4621      	mov	r1, r4
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
    for(i=0; i<headerLength; i++)
 8001352:	4414      	add	r4, r2
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8001354:	4650      	mov	r0, sl
 8001356:	f003 f86c 	bl	8004432 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 800135a:	454c      	cmp	r4, r9
 800135c:	d1f5      	bne.n	800134a <readfromspi+0x36>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 800135e:	f1b8 0f00 	cmp.w	r8, #0
 8001362:	d012      	beq.n	800138a <readfromspi+0x76>
 8001364:	f8df c03c 	ldr.w	ip, [pc, #60]	; 80013a4 <readfromspi+0x90>
 8001368:	eb05 0008 	add.w	r0, r5, r8
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 800136c:	2400      	movs	r4, #0
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 800136e:	f8dc 2000 	ldr.w	r2, [ip]
 8001372:	6891      	ldr	r1, [r2, #8]
 8001374:	0789      	lsls	r1, r1, #30
 8001376:	d5fc      	bpl.n	8001372 <readfromspi+0x5e>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8001378:	60d4      	str	r4, [r2, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 800137a:	6891      	ldr	r1, [r2, #8]
 800137c:	07cb      	lsls	r3, r1, #31
 800137e:	d5fc      	bpl.n	800137a <readfromspi+0x66>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 8001380:	68d3      	ldr	r3, [r2, #12]
 8001382:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 8001386:	4285      	cmp	r5, r0
 8001388:	d1f1      	bne.n	800136e <readfromspi+0x5a>
    }

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800138a:	2201      	movs	r2, #1
 800138c:	2140      	movs	r1, #64	; 0x40
 800138e:	4804      	ldr	r0, [pc, #16]	; (80013a0 <readfromspi+0x8c>)
 8001390:	f001 fdc2 	bl	8002f18 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8001394:	4630      	mov	r0, r6
 8001396:	f7ff ff70 	bl	800127a <decamutexoff>

    return 0;
} // end readfromspi()
 800139a:	2000      	movs	r0, #0
 800139c:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 80013a0:	40020400 	.word	0x40020400
 80013a4:	20000560 	.word	0x20000560

080013a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	db0b      	blt.n	80013d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	f003 021f 	and.w	r2, r3, #31
 80013c0:	4907      	ldr	r1, [pc, #28]	; (80013e0 <__NVIC_EnableIRQ+0x38>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	095b      	lsrs	r3, r3, #5
 80013c8:	2001      	movs	r0, #1
 80013ca:	fa00 f202 	lsl.w	r2, r0, r2
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000e100 	.word	0xe000e100

080013e4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	db12      	blt.n	800141c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	f003 021f 	and.w	r2, r3, #31
 80013fc:	490a      	ldr	r1, [pc, #40]	; (8001428 <__NVIC_DisableIRQ+0x44>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	095b      	lsrs	r3, r3, #5
 8001404:	2001      	movs	r0, #1
 8001406:	fa00 f202 	lsl.w	r2, r0, r2
 800140a:	3320      	adds	r3, #32
 800140c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001410:	f3bf 8f4f 	dsb	sy
}
 8001414:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001416:	f3bf 8f6f 	isb	sy
}
 800141a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000e100 	.word	0xe000e100

0800142c <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
int usleep(useconds_t usec)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	e012      	b.n	8001460 <usleep+0x34>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	e004      	b.n	800144a <usleep+0x1e>
        {
            __NOP();
 8001440:	bf00      	nop
            __NOP();
 8001442:	bf00      	nop
        for(j=0;j<2;j++)
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	3301      	adds	r3, #1
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	2b01      	cmp	r3, #1
 800144e:	bfd4      	ite	le
 8001450:	2301      	movle	r3, #1
 8001452:	2300      	movgt	r3, #0
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f2      	bne.n	8001440 <usleep+0x14>
    for(i=0;i<usec;i++)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	3301      	adds	r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	429a      	cmp	r2, r3
 8001466:	bf8c      	ite	hi
 8001468:	2301      	movhi	r3, #1
 800146a:	2300      	movls	r3, #0
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1e3      	bne.n	800143a <usleep+0xe>
        }
    }
    return 0;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f001 f9af 	bl	80027ec <HAL_Delay>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 80014a0:	4a0b      	ldr	r2, [pc, #44]	; (80014d0 <EXTI_GetITEnStatus+0x38>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	095b      	lsrs	r3, r3, #5
 80014a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f003 031f 	and.w	r3, r3, #31
 80014b0:	fa22 f303 	lsr.w	r3, r2, r3
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	bf14      	ite	ne
 80014bc:	2301      	movne	r3, #1
 80014be:	2300      	moveq	r3, #0
 80014c0:	b2db      	uxtb	r3, r3
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000e100 	.word	0xe000e100

080014d4 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RST_Pin;
 80014da:	2301      	movs	r3, #1
 80014dc:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80014de:	2311      	movs	r3, #17
 80014e0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	4619      	mov	r1, r3
 80014ea:	480a      	ldr	r0, [pc, #40]	; (8001514 <reset_DW1000+0x40>)
 80014ec:	f001 fb78 	bl	8002be0 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2101      	movs	r1, #1
 80014f4:	4807      	ldr	r0, [pc, #28]	; (8001514 <reset_DW1000+0x40>)
 80014f6:	f001 fd0f 	bl	8002f18 <HAL_GPIO_WritePin>

    usleep(1);
 80014fa:	2001      	movs	r0, #1
 80014fc:	f7ff ff96 	bl	800142c <usleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 8001500:	2000      	movs	r0, #0
 8001502:	f000 f809 	bl	8001518 <setup_DW1000RSTnIRQ>



    Sleep(2);
 8001506:	2002      	movs	r0, #2
 8001508:	f7ff ffba 	bl	8001480 <Sleep>
}
 800150c:	bf00      	nop
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40020000 	.word	0x40020000

08001518 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b088      	sub	sp, #32
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d015      	beq.n	8001552 <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8001526:	2301      	movs	r3, #1
 8001528:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800152a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800152e:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001534:	f107 030c 	add.w	r3, r7, #12
 8001538:	4619      	mov	r1, r3
 800153a:	4813      	ldr	r0, [pc, #76]	; (8001588 <setup_DW1000RSTnIRQ+0x70>)
 800153c:	f001 fb50 	bl	8002be0 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 8001540:	2006      	movs	r0, #6
 8001542:	f001 fa92 	bl	8002a6a <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	2105      	movs	r1, #5
 800154a:	2006      	movs	r0, #6
 800154c:	f001 fa71 	bl	8002a32 <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
    }
}
 8001550:	e015      	b.n	800157e <setup_DW1000RSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 8001552:	2006      	movs	r0, #6
 8001554:	f001 fa97 	bl	8002a86 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8001558:	2301      	movs	r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800155c:	2311      	movs	r3, #17
 800155e:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001564:	2302      	movs	r3, #2
 8001566:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	4619      	mov	r1, r3
 800156e:	4806      	ldr	r0, [pc, #24]	; (8001588 <setup_DW1000RSTnIRQ+0x70>)
 8001570:	f001 fb36 	bl	8002be0 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
 8001574:	2201      	movs	r2, #1
 8001576:	2101      	movs	r1, #1
 8001578:	4803      	ldr	r0, [pc, #12]	; (8001588 <setup_DW1000RSTnIRQ+0x70>)
 800157a:	f001 fccd 	bl	8002f18 <HAL_GPIO_WritePin>
}
 800157e:	bf00      	nop
 8001580:	3720      	adds	r7, #32
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40020000 	.word	0x40020000

0800158c <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001590:	4b03      	ldr	r3, [pc, #12]	; (80015a0 <port_set_dw1000_slowrate+0x14>)
 8001592:	2220      	movs	r2, #32
 8001594:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8001596:	4802      	ldr	r0, [pc, #8]	; (80015a0 <port_set_dw1000_slowrate+0x14>)
 8001598:	f002 fec2 	bl	8004320 <HAL_SPI_Init>
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000560 	.word	0x20000560

080015a4 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80015a8:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <port_set_dw1000_fastrate+0x14>)
 80015aa:	2208      	movs	r2, #8
 80015ac:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 80015ae:	4802      	ldr	r0, [pc, #8]	; (80015b8 <port_set_dw1000_fastrate+0x14>)
 80015b0:	f002 feb6 	bl	8004320 <HAL_SPI_Init>
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000560 	.word	0x20000560

080015bc <HAL_GPIO_EXTI_Callback>:
/* @fn      HAL_GPIO_EXTI_Callback
 * @brief   IRQ HAL call-back for all EXTI configured lines
 *          i.e. DW_RESET_Pin and DW_IRQn_Pin
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == DW_RST_Pin)
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d103      	bne.n	80015d4 <HAL_GPIO_EXTI_Callback+0x18>
    {
        signalResetDone = 1;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_GPIO_EXTI_Callback+0x2c>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	601a      	str	r2, [r3, #0]
        process_deca_irq();
    }
    else
    {
    }
}
 80015d2:	e005      	b.n	80015e0 <HAL_GPIO_EXTI_Callback+0x24>
    else if (GPIO_Pin == DW_IRQ_Pin)
 80015d4:	88fb      	ldrh	r3, [r7, #6]
 80015d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015da:	d101      	bne.n	80015e0 <HAL_GPIO_EXTI_Callback+0x24>
        process_deca_irq();
 80015dc:	f000 f806 	bl	80015ec <process_deca_irq>
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	200000c4 	.word	0x200000c4

080015ec <process_deca_irq>:
 * @brief   main call-back for processing of DW1000 IRQ
 *          it re-enters the IRQ routing and processes all events.
 *          After processing of all events, DW1000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
    while(port_CheckEXT_IRQ() != 0)
 80015f0:	e002      	b.n	80015f8 <process_deca_irq+0xc>
    {

        port_deca_isr();
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <process_deca_irq+0x1c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4798      	blx	r3
    while(port_CheckEXT_IRQ() != 0)
 80015f8:	f000 f81e 	bl	8001638 <port_CheckEXT_IRQ>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f7      	bne.n	80015f2 <process_deca_irq+0x6>

    } //while DW1000 IRQ line active
}
 8001602:	bf00      	nop
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	200000c8 	.word	0x200000c8

0800160c <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8001610:	2017      	movs	r0, #23
 8001612:	f7ff fee7 	bl	80013e4 <__NVIC_DisableIRQ>
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}

0800161a <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 800161e:	2017      	movs	r0, #23
 8001620:	f7ff fec2 	bl	80013a8 <__NVIC_EnableIRQ>
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}

08001628 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 800162c:	2017      	movs	r0, #23
 800162e:	f7ff ff33 	bl	8001498 <EXTI_GetITEnStatus>
 8001632:	4603      	mov	r3, r0
}
 8001634:	4618      	mov	r0, r3
 8001636:	bd80      	pop	{r7, pc}

08001638 <port_CheckEXT_IRQ>:

/* @fn      port_CheckEXT_IRQ
 * @brief   wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(DW_IRQ_GPIO_Port, DW_IRQ_Pin);
 800163c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <port_CheckEXT_IRQ+0x14>)
 8001642:	f001 fc51 	bl	8002ee8 <HAL_GPIO_ReadPin>
 8001646:	4603      	mov	r3, r0
}
 8001648:	4618      	mov	r0, r3
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40020000 	.word	0x40020000

08001650 <SSD1306_InvertDisplay>:
}



void SSD1306_InvertDisplay (int i)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d005      	beq.n	800166a <SSD1306_InvertDisplay+0x1a>
 800165e:	22a7      	movs	r2, #167	; 0xa7
 8001660:	2100      	movs	r1, #0
 8001662:	2078      	movs	r0, #120	; 0x78
 8001664:	f000 fab4 	bl	8001bd0 <ssd1306_I2C_Write>

  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}
 8001668:	e004      	b.n	8001674 <SSD1306_InvertDisplay+0x24>
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
 800166a:	22a6      	movs	r2, #166	; 0xa6
 800166c:	2100      	movs	r1, #0
 800166e:	2078      	movs	r0, #120	; 0x78
 8001670:	f000 faae 	bl	8001bd0 <ssd1306_I2C_Write>
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001682:	f000 fa29 	bl	8001ad8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001686:	f644 6320 	movw	r3, #20000	; 0x4e20
 800168a:	2201      	movs	r2, #1
 800168c:	2178      	movs	r1, #120	; 0x78
 800168e:	485b      	ldr	r0, [pc, #364]	; (80017fc <SSD1306_Init+0x180>)
 8001690:	f001 feb6 	bl	8003400 <HAL_I2C_IsDeviceReady>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800169a:	2300      	movs	r3, #0
 800169c:	e0a9      	b.n	80017f2 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800169e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80016a2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80016a4:	e002      	b.n	80016ac <SSD1306_Init+0x30>
		p--;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3b01      	subs	r3, #1
 80016aa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f9      	bne.n	80016a6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80016b2:	22ae      	movs	r2, #174	; 0xae
 80016b4:	2100      	movs	r1, #0
 80016b6:	2078      	movs	r0, #120	; 0x78
 80016b8:	f000 fa8a 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80016bc:	2220      	movs	r2, #32
 80016be:	2100      	movs	r1, #0
 80016c0:	2078      	movs	r0, #120	; 0x78
 80016c2:	f000 fa85 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80016c6:	2210      	movs	r2, #16
 80016c8:	2100      	movs	r1, #0
 80016ca:	2078      	movs	r0, #120	; 0x78
 80016cc:	f000 fa80 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80016d0:	22b0      	movs	r2, #176	; 0xb0
 80016d2:	2100      	movs	r1, #0
 80016d4:	2078      	movs	r0, #120	; 0x78
 80016d6:	f000 fa7b 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80016da:	22c8      	movs	r2, #200	; 0xc8
 80016dc:	2100      	movs	r1, #0
 80016de:	2078      	movs	r0, #120	; 0x78
 80016e0:	f000 fa76 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80016e4:	2200      	movs	r2, #0
 80016e6:	2100      	movs	r1, #0
 80016e8:	2078      	movs	r0, #120	; 0x78
 80016ea:	f000 fa71 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80016ee:	2210      	movs	r2, #16
 80016f0:	2100      	movs	r1, #0
 80016f2:	2078      	movs	r0, #120	; 0x78
 80016f4:	f000 fa6c 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80016f8:	2240      	movs	r2, #64	; 0x40
 80016fa:	2100      	movs	r1, #0
 80016fc:	2078      	movs	r0, #120	; 0x78
 80016fe:	f000 fa67 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001702:	2281      	movs	r2, #129	; 0x81
 8001704:	2100      	movs	r1, #0
 8001706:	2078      	movs	r0, #120	; 0x78
 8001708:	f000 fa62 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800170c:	22ff      	movs	r2, #255	; 0xff
 800170e:	2100      	movs	r1, #0
 8001710:	2078      	movs	r0, #120	; 0x78
 8001712:	f000 fa5d 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001716:	22a1      	movs	r2, #161	; 0xa1
 8001718:	2100      	movs	r1, #0
 800171a:	2078      	movs	r0, #120	; 0x78
 800171c:	f000 fa58 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001720:	22a6      	movs	r2, #166	; 0xa6
 8001722:	2100      	movs	r1, #0
 8001724:	2078      	movs	r0, #120	; 0x78
 8001726:	f000 fa53 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800172a:	22a8      	movs	r2, #168	; 0xa8
 800172c:	2100      	movs	r1, #0
 800172e:	2078      	movs	r0, #120	; 0x78
 8001730:	f000 fa4e 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001734:	223f      	movs	r2, #63	; 0x3f
 8001736:	2100      	movs	r1, #0
 8001738:	2078      	movs	r0, #120	; 0x78
 800173a:	f000 fa49 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800173e:	22a4      	movs	r2, #164	; 0xa4
 8001740:	2100      	movs	r1, #0
 8001742:	2078      	movs	r0, #120	; 0x78
 8001744:	f000 fa44 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001748:	22d3      	movs	r2, #211	; 0xd3
 800174a:	2100      	movs	r1, #0
 800174c:	2078      	movs	r0, #120	; 0x78
 800174e:	f000 fa3f 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001752:	2200      	movs	r2, #0
 8001754:	2100      	movs	r1, #0
 8001756:	2078      	movs	r0, #120	; 0x78
 8001758:	f000 fa3a 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800175c:	22d5      	movs	r2, #213	; 0xd5
 800175e:	2100      	movs	r1, #0
 8001760:	2078      	movs	r0, #120	; 0x78
 8001762:	f000 fa35 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001766:	22f0      	movs	r2, #240	; 0xf0
 8001768:	2100      	movs	r1, #0
 800176a:	2078      	movs	r0, #120	; 0x78
 800176c:	f000 fa30 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001770:	22d9      	movs	r2, #217	; 0xd9
 8001772:	2100      	movs	r1, #0
 8001774:	2078      	movs	r0, #120	; 0x78
 8001776:	f000 fa2b 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800177a:	2222      	movs	r2, #34	; 0x22
 800177c:	2100      	movs	r1, #0
 800177e:	2078      	movs	r0, #120	; 0x78
 8001780:	f000 fa26 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001784:	22da      	movs	r2, #218	; 0xda
 8001786:	2100      	movs	r1, #0
 8001788:	2078      	movs	r0, #120	; 0x78
 800178a:	f000 fa21 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800178e:	2212      	movs	r2, #18
 8001790:	2100      	movs	r1, #0
 8001792:	2078      	movs	r0, #120	; 0x78
 8001794:	f000 fa1c 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001798:	22db      	movs	r2, #219	; 0xdb
 800179a:	2100      	movs	r1, #0
 800179c:	2078      	movs	r0, #120	; 0x78
 800179e:	f000 fa17 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80017a2:	2220      	movs	r2, #32
 80017a4:	2100      	movs	r1, #0
 80017a6:	2078      	movs	r0, #120	; 0x78
 80017a8:	f000 fa12 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80017ac:	228d      	movs	r2, #141	; 0x8d
 80017ae:	2100      	movs	r1, #0
 80017b0:	2078      	movs	r0, #120	; 0x78
 80017b2:	f000 fa0d 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80017b6:	2214      	movs	r2, #20
 80017b8:	2100      	movs	r1, #0
 80017ba:	2078      	movs	r0, #120	; 0x78
 80017bc:	f000 fa08 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80017c0:	22af      	movs	r2, #175	; 0xaf
 80017c2:	2100      	movs	r1, #0
 80017c4:	2078      	movs	r0, #120	; 0x78
 80017c6:	f000 fa03 	bl	8001bd0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80017ca:	222e      	movs	r2, #46	; 0x2e
 80017cc:	2100      	movs	r1, #0
 80017ce:	2078      	movs	r0, #120	; 0x78
 80017d0:	f000 f9fe 	bl	8001bd0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80017d4:	2000      	movs	r0, #0
 80017d6:	f000 f843 	bl	8001860 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80017da:	f000 f813 	bl	8001804 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <SSD1306_Init+0x184>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <SSD1306_Init+0x184>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <SSD1306_Init+0x184>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80017f0:	2301      	movs	r3, #1
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200004d4 	.word	0x200004d4
 8001800:	200004cc 	.word	0x200004cc

08001804 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800180a:	2300      	movs	r3, #0
 800180c:	71fb      	strb	r3, [r7, #7]
 800180e:	e01d      	b.n	800184c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	3b50      	subs	r3, #80	; 0x50
 8001814:	b2db      	uxtb	r3, r3
 8001816:	461a      	mov	r2, r3
 8001818:	2100      	movs	r1, #0
 800181a:	2078      	movs	r0, #120	; 0x78
 800181c:	f000 f9d8 	bl	8001bd0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001820:	2200      	movs	r2, #0
 8001822:	2100      	movs	r1, #0
 8001824:	2078      	movs	r0, #120	; 0x78
 8001826:	f000 f9d3 	bl	8001bd0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800182a:	2210      	movs	r2, #16
 800182c:	2100      	movs	r1, #0
 800182e:	2078      	movs	r0, #120	; 0x78
 8001830:	f000 f9ce 	bl	8001bd0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	01db      	lsls	r3, r3, #7
 8001838:	4a08      	ldr	r2, [pc, #32]	; (800185c <SSD1306_UpdateScreen+0x58>)
 800183a:	441a      	add	r2, r3
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	2140      	movs	r1, #64	; 0x40
 8001840:	2078      	movs	r0, #120	; 0x78
 8001842:	f000 f95f 	bl	8001b04 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	3301      	adds	r3, #1
 800184a:	71fb      	strb	r3, [r7, #7]
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	2b07      	cmp	r3, #7
 8001850:	d9de      	bls.n	8001810 <SSD1306_UpdateScreen+0xc>
	}
}
 8001852:	bf00      	nop
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	200000cc 	.word	0x200000cc

08001860 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <SSD1306_Fill+0x14>
 8001870:	2300      	movs	r3, #0
 8001872:	e000      	b.n	8001876 <SSD1306_Fill+0x16>
 8001874:	23ff      	movs	r3, #255	; 0xff
 8001876:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800187a:	4619      	mov	r1, r3
 800187c:	4803      	ldr	r0, [pc, #12]	; (800188c <SSD1306_Fill+0x2c>)
 800187e:	f004 f835 	bl	80058ec <memset>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200000cc 	.word	0x200000cc

08001890 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	80fb      	strh	r3, [r7, #6]
 800189a:	460b      	mov	r3, r1
 800189c:	80bb      	strh	r3, [r7, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	70fb      	strb	r3, [r7, #3]
	if (
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	2b7f      	cmp	r3, #127	; 0x7f
 80018a6:	d848      	bhi.n	800193a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80018a8:	88bb      	ldrh	r3, [r7, #4]
 80018aa:	2b3f      	cmp	r3, #63	; 0x3f
 80018ac:	d845      	bhi.n	800193a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80018ae:	4b26      	ldr	r3, [pc, #152]	; (8001948 <SSD1306_DrawPixel+0xb8>)
 80018b0:	791b      	ldrb	r3, [r3, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d006      	beq.n	80018c4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	bf0c      	ite	eq
 80018bc:	2301      	moveq	r3, #1
 80018be:	2300      	movne	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80018c4:	78fb      	ldrb	r3, [r7, #3]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d11a      	bne.n	8001900 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80018ca:	88fa      	ldrh	r2, [r7, #6]
 80018cc:	88bb      	ldrh	r3, [r7, #4]
 80018ce:	08db      	lsrs	r3, r3, #3
 80018d0:	b298      	uxth	r0, r3
 80018d2:	4603      	mov	r3, r0
 80018d4:	01db      	lsls	r3, r3, #7
 80018d6:	4413      	add	r3, r2
 80018d8:	4a1c      	ldr	r2, [pc, #112]	; (800194c <SSD1306_DrawPixel+0xbc>)
 80018da:	5cd3      	ldrb	r3, [r2, r3]
 80018dc:	b25a      	sxtb	r2, r3
 80018de:	88bb      	ldrh	r3, [r7, #4]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	2101      	movs	r1, #1
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	b25b      	sxtb	r3, r3
 80018ec:	4313      	orrs	r3, r2
 80018ee:	b259      	sxtb	r1, r3
 80018f0:	88fa      	ldrh	r2, [r7, #6]
 80018f2:	4603      	mov	r3, r0
 80018f4:	01db      	lsls	r3, r3, #7
 80018f6:	4413      	add	r3, r2
 80018f8:	b2c9      	uxtb	r1, r1
 80018fa:	4a14      	ldr	r2, [pc, #80]	; (800194c <SSD1306_DrawPixel+0xbc>)
 80018fc:	54d1      	strb	r1, [r2, r3]
 80018fe:	e01d      	b.n	800193c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001900:	88fa      	ldrh	r2, [r7, #6]
 8001902:	88bb      	ldrh	r3, [r7, #4]
 8001904:	08db      	lsrs	r3, r3, #3
 8001906:	b298      	uxth	r0, r3
 8001908:	4603      	mov	r3, r0
 800190a:	01db      	lsls	r3, r3, #7
 800190c:	4413      	add	r3, r2
 800190e:	4a0f      	ldr	r2, [pc, #60]	; (800194c <SSD1306_DrawPixel+0xbc>)
 8001910:	5cd3      	ldrb	r3, [r2, r3]
 8001912:	b25a      	sxtb	r2, r3
 8001914:	88bb      	ldrh	r3, [r7, #4]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	2101      	movs	r1, #1
 800191c:	fa01 f303 	lsl.w	r3, r1, r3
 8001920:	b25b      	sxtb	r3, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	b25b      	sxtb	r3, r3
 8001926:	4013      	ands	r3, r2
 8001928:	b259      	sxtb	r1, r3
 800192a:	88fa      	ldrh	r2, [r7, #6]
 800192c:	4603      	mov	r3, r0
 800192e:	01db      	lsls	r3, r3, #7
 8001930:	4413      	add	r3, r2
 8001932:	b2c9      	uxtb	r1, r1
 8001934:	4a05      	ldr	r2, [pc, #20]	; (800194c <SSD1306_DrawPixel+0xbc>)
 8001936:	54d1      	strb	r1, [r2, r3]
 8001938:	e000      	b.n	800193c <SSD1306_DrawPixel+0xac>
		return;
 800193a:	bf00      	nop
	}
}
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	200004cc 	.word	0x200004cc
 800194c:	200000cc 	.word	0x200000cc

08001950 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	460a      	mov	r2, r1
 800195a:	80fb      	strh	r3, [r7, #6]
 800195c:	4613      	mov	r3, r2
 800195e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001960:	4a05      	ldr	r2, [pc, #20]	; (8001978 <SSD1306_GotoXY+0x28>)
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001966:	4a04      	ldr	r2, [pc, #16]	; (8001978 <SSD1306_GotoXY+0x28>)
 8001968:	88bb      	ldrh	r3, [r7, #4]
 800196a:	8053      	strh	r3, [r2, #2]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	200004cc 	.word	0x200004cc

0800197c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	6039      	str	r1, [r7, #0]
 8001986:	71fb      	strb	r3, [r7, #7]
 8001988:	4613      	mov	r3, r2
 800198a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800198c:	4b3a      	ldr	r3, [pc, #232]	; (8001a78 <SSD1306_Putc+0xfc>)
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	4413      	add	r3, r2
	if (
 8001998:	2b7f      	cmp	r3, #127	; 0x7f
 800199a:	dc07      	bgt.n	80019ac <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800199c:	4b36      	ldr	r3, [pc, #216]	; (8001a78 <SSD1306_Putc+0xfc>)
 800199e:	885b      	ldrh	r3, [r3, #2]
 80019a0:	461a      	mov	r2, r3
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	785b      	ldrb	r3, [r3, #1]
 80019a6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80019a8:	2b3f      	cmp	r3, #63	; 0x3f
 80019aa:	dd01      	ble.n	80019b0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	e05e      	b.n	8001a6e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	e04b      	b.n	8001a4e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	3b20      	subs	r3, #32
 80019be:	6839      	ldr	r1, [r7, #0]
 80019c0:	7849      	ldrb	r1, [r1, #1]
 80019c2:	fb01 f303 	mul.w	r3, r1, r3
 80019c6:	4619      	mov	r1, r3
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	440b      	add	r3, r1
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4413      	add	r3, r2
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80019d4:	2300      	movs	r3, #0
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	e030      	b.n	8001a3c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d010      	beq.n	8001a0c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80019ea:	4b23      	ldr	r3, [pc, #140]	; (8001a78 <SSD1306_Putc+0xfc>)
 80019ec:	881a      	ldrh	r2, [r3, #0]
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	4413      	add	r3, r2
 80019f4:	b298      	uxth	r0, r3
 80019f6:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <SSD1306_Putc+0xfc>)
 80019f8:	885a      	ldrh	r2, [r3, #2]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	4413      	add	r3, r2
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	79ba      	ldrb	r2, [r7, #6]
 8001a04:	4619      	mov	r1, r3
 8001a06:	f7ff ff43 	bl	8001890 <SSD1306_DrawPixel>
 8001a0a:	e014      	b.n	8001a36 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <SSD1306_Putc+0xfc>)
 8001a0e:	881a      	ldrh	r2, [r3, #0]
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	4413      	add	r3, r2
 8001a16:	b298      	uxth	r0, r3
 8001a18:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <SSD1306_Putc+0xfc>)
 8001a1a:	885a      	ldrh	r2, [r3, #2]
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	4413      	add	r3, r2
 8001a22:	b299      	uxth	r1, r3
 8001a24:	79bb      	ldrb	r3, [r7, #6]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	bf0c      	ite	eq
 8001a2a:	2301      	moveq	r3, #1
 8001a2c:	2300      	movne	r3, #0
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	461a      	mov	r2, r3
 8001a32:	f7ff ff2d 	bl	8001890 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d3c8      	bcc.n	80019da <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	785b      	ldrb	r3, [r3, #1]
 8001a52:	461a      	mov	r2, r3
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d3ad      	bcc.n	80019b6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001a5a:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <SSD1306_Putc+0xfc>)
 8001a5c:	881a      	ldrh	r2, [r3, #0]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	4413      	add	r3, r2
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	4b03      	ldr	r3, [pc, #12]	; (8001a78 <SSD1306_Putc+0xfc>)
 8001a6a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	200004cc 	.word	0x200004cc

08001a7c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	4613      	mov	r3, r2
 8001a88:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001a8a:	e012      	b.n	8001ab2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	79fa      	ldrb	r2, [r7, #7]
 8001a92:	68b9      	ldr	r1, [r7, #8]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ff71 	bl	800197c <SSD1306_Putc>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d002      	beq.n	8001aac <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	e008      	b.n	8001abe <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1e8      	bne.n	8001a8c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	781b      	ldrb	r3, [r3, #0]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001aca:	2000      	movs	r0, #0
 8001acc:	f7ff fec8 	bl	8001860 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001ad0:	f7ff fe98 	bl	8001804 <SSD1306_UpdateScreen>
}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001ade:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <ssd1306_I2C_Init+0x28>)
 8001ae0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ae2:	e002      	b.n	8001aea <ssd1306_I2C_Init+0x12>
		p--;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f9      	bne.n	8001ae4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	0003d090 	.word	0x0003d090

08001b04 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001b04:	b590      	push	{r4, r7, lr}
 8001b06:	b0c7      	sub	sp, #284	; 0x11c
 8001b08:	af02      	add	r7, sp, #8
 8001b0a:	4604      	mov	r4, r0
 8001b0c:	4608      	mov	r0, r1
 8001b0e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001b12:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001b16:	600a      	str	r2, [r1, #0]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b1e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001b22:	4622      	mov	r2, r4
 8001b24:	701a      	strb	r2, [r3, #0]
 8001b26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b2a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001b2e:	4602      	mov	r2, r0
 8001b30:	701a      	strb	r2, [r3, #0]
 8001b32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b3a:	460a      	mov	r2, r1
 8001b3c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001b3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b46:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001b4a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001b4e:	7812      	ldrb	r2, [r2, #0]
 8001b50:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001b52:	2300      	movs	r3, #0
 8001b54:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001b58:	e015      	b.n	8001b86 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001b5a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b5e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001b62:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	441a      	add	r2, r3
 8001b6a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b6e:	3301      	adds	r3, #1
 8001b70:	7811      	ldrb	r1, [r2, #0]
 8001b72:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001b76:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001b7a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001b7c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b80:	3301      	adds	r3, #1
 8001b82:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001b86:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001b90:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001b94:	8812      	ldrh	r2, [r2, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d8df      	bhi.n	8001b5a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001b9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b9e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	b299      	uxth	r1, r3
 8001ba6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001baa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	f107 020c 	add.w	r2, r7, #12
 8001bb8:	200a      	movs	r0, #10
 8001bba:	9000      	str	r0, [sp, #0]
 8001bbc:	4803      	ldr	r0, [pc, #12]	; (8001bcc <ssd1306_I2C_WriteMulti+0xc8>)
 8001bbe:	f001 fb21 	bl	8003204 <HAL_I2C_Master_Transmit>
}
 8001bc2:	bf00      	nop
 8001bc4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd90      	pop	{r4, r7, pc}
 8001bcc:	200004d4 	.word	0x200004d4

08001bd0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af02      	add	r7, sp, #8
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71fb      	strb	r3, [r7, #7]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	71bb      	strb	r3, [r7, #6]
 8001bde:	4613      	mov	r3, r2
 8001be0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001be2:	79bb      	ldrb	r3, [r7, #6]
 8001be4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001be6:	797b      	ldrb	r3, [r7, #5]
 8001be8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	b299      	uxth	r1, r3
 8001bee:	f107 020c 	add.w	r2, r7, #12
 8001bf2:	230a      	movs	r3, #10
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	4803      	ldr	r0, [pc, #12]	; (8001c08 <ssd1306_I2C_Write+0x38>)
 8001bfa:	f001 fb03 	bl	8003204 <HAL_I2C_Master_Transmit>
}
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200004d4 	.word	0x200004d4

08001c0c <ssd1306_write>:

void ssd1306_write(uint32_t buff, FontDef_t Font)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	e883 0006 	stmia.w	r3, {r1, r2}
//	SSD1306_Clear ();
//	SSD1306_Fill(SSD1306_COLOR_BLACK);
	SSD1306_Puts(buff, &Font, 1);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	1d39      	adds	r1, r7, #4
 8001c1e:	2201      	movs	r2, #1
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff2b 	bl	8001a7c <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001c26:	f7ff fded 	bl	8001804 <SSD1306_UpdateScreen>
}
 8001c2a:	bf00      	nop
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]
 8001c48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	4b3c      	ldr	r3, [pc, #240]	; (8001d40 <MX_GPIO_Init+0x10c>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a3b      	ldr	r2, [pc, #236]	; (8001d40 <MX_GPIO_Init+0x10c>)
 8001c54:	f043 0304 	orr.w	r3, r3, #4
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b39      	ldr	r3, [pc, #228]	; (8001d40 <MX_GPIO_Init+0x10c>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b35      	ldr	r3, [pc, #212]	; (8001d40 <MX_GPIO_Init+0x10c>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a34      	ldr	r2, [pc, #208]	; (8001d40 <MX_GPIO_Init+0x10c>)
 8001c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b32      	ldr	r3, [pc, #200]	; (8001d40 <MX_GPIO_Init+0x10c>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	4b2e      	ldr	r3, [pc, #184]	; (8001d40 <MX_GPIO_Init+0x10c>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a2d      	ldr	r2, [pc, #180]	; (8001d40 <MX_GPIO_Init+0x10c>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b2b      	ldr	r3, [pc, #172]	; (8001d40 <MX_GPIO_Init+0x10c>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	4b27      	ldr	r3, [pc, #156]	; (8001d40 <MX_GPIO_Init+0x10c>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	4a26      	ldr	r2, [pc, #152]	; (8001d40 <MX_GPIO_Init+0x10c>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	6313      	str	r3, [r2, #48]	; 0x30
 8001cae:	4b24      	ldr	r3, [pc, #144]	; (8001d40 <MX_GPIO_Init+0x10c>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2140      	movs	r1, #64	; 0x40
 8001cbe:	4821      	ldr	r0, [pc, #132]	; (8001d44 <MX_GPIO_Init+0x110>)
 8001cc0:	f001 f92a 	bl	8002f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_RST_Pin;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cc8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	481b      	ldr	r0, [pc, #108]	; (8001d48 <MX_GPIO_Init+0x114>)
 8001cda:	f000 ff81 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_IRQ_Pin;
 8001cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ce4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ce8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cea:	2302      	movs	r3, #2
 8001cec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DW_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4814      	ldr	r0, [pc, #80]	; (8001d48 <MX_GPIO_Init+0x114>)
 8001cf6:	f000 ff73 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_CS_Pin;
 8001cfa:	2340      	movs	r3, #64	; 0x40
 8001cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d06:	2300      	movs	r3, #0
 8001d08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);
 8001d0a:	f107 0314 	add.w	r3, r7, #20
 8001d0e:	4619      	mov	r1, r3
 8001d10:	480c      	ldr	r0, [pc, #48]	; (8001d44 <MX_GPIO_Init+0x110>)
 8001d12:	f000 ff65 	bl	8002be0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2103      	movs	r1, #3
 8001d1a:	2006      	movs	r0, #6
 8001d1c:	f000 fe89 	bl	8002a32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d20:	2006      	movs	r0, #6
 8001d22:	f000 fea2 	bl	8002a6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2104      	movs	r1, #4
 8001d2a:	2028      	movs	r0, #40	; 0x28
 8001d2c:	f000 fe81 	bl	8002a32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d30:	2028      	movs	r0, #40	; 0x28
 8001d32:	f000 fe9a 	bl	8002a6a <HAL_NVIC_EnableIRQ>

}
 8001d36:	bf00      	nop
 8001d38:	3728      	adds	r7, #40	; 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40020400 	.word	0x40020400
 8001d48:	40020000 	.word	0x40020000

08001d4c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <MX_I2C1_Init+0x50>)
 8001d52:	4a13      	ldr	r2, [pc, #76]	; (8001da0 <MX_I2C1_Init+0x54>)
 8001d54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001d56:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <MX_I2C1_Init+0x50>)
 8001d58:	4a12      	ldr	r2, [pc, #72]	; (8001da4 <MX_I2C1_Init+0x58>)
 8001d5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <MX_I2C1_Init+0x50>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d62:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <MX_I2C1_Init+0x50>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <MX_I2C1_Init+0x50>)
 8001d6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d70:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <MX_I2C1_Init+0x50>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <MX_I2C1_Init+0x50>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d7c:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <MX_I2C1_Init+0x50>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <MX_I2C1_Init+0x50>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d88:	4804      	ldr	r0, [pc, #16]	; (8001d9c <MX_I2C1_Init+0x50>)
 8001d8a:	f001 f8f7 	bl	8002f7c <HAL_I2C_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d94:	f000 fb12 	bl	80023bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	200004d4 	.word	0x200004d4
 8001da0:	40005400 	.word	0x40005400
 8001da4:	00061a80 	.word	0x00061a80

08001da8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08a      	sub	sp, #40	; 0x28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a19      	ldr	r2, [pc, #100]	; (8001e2c <HAL_I2C_MspInit+0x84>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d12c      	bne.n	8001e24 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <HAL_I2C_MspInit+0x88>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a17      	ldr	r2, [pc, #92]	; (8001e30 <HAL_I2C_MspInit+0x88>)
 8001dd4:	f043 0302 	orr.w	r3, r3, #2
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <HAL_I2C_MspInit+0x88>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001de6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dec:	2312      	movs	r3, #18
 8001dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df4:	2303      	movs	r3, #3
 8001df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001df8:	2304      	movs	r3, #4
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	4619      	mov	r1, r3
 8001e02:	480c      	ldr	r0, [pc, #48]	; (8001e34 <HAL_I2C_MspInit+0x8c>)
 8001e04:	f000 feec 	bl	8002be0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <HAL_I2C_MspInit+0x88>)
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	4a07      	ldr	r2, [pc, #28]	; (8001e30 <HAL_I2C_MspInit+0x88>)
 8001e12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e16:	6413      	str	r3, [r2, #64]	; 0x40
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_I2C_MspInit+0x88>)
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e24:	bf00      	nop
 8001e26:	3728      	adds	r7, #40	; 0x28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40005400 	.word	0x40005400
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40020400 	.word	0x40020400

08001e38 <dw_main>:
 * @param  none
 *
 * @return none
 */
int dw_main(void)
{
 8001e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e3c:	b088      	sub	sp, #32
 8001e3e:	af00      	add	r7, sp, #0
    /* Display application name on LCD. */
   HAL_UART_Transmit(&huart2, app_name, sizeof(app_name), HAL_MAX_DELAY);
 8001e40:	f04f 33ff 	mov.w	r3, #4294967295
 8001e44:	2211      	movs	r2, #17
 8001e46:	49b8      	ldr	r1, [pc, #736]	; (8002128 <dw_main+0x2f0>)
 8001e48:	48b8      	ldr	r0, [pc, #736]	; (800212c <dw_main+0x2f4>)
 8001e4a:	f002 fd54 	bl	80048f6 <HAL_UART_Transmit>
   ssd1306_write(app_name, Font_7x10);
 8001e4e:	48b6      	ldr	r0, [pc, #728]	; (8002128 <dw_main+0x2f0>)
 8001e50:	4bb7      	ldr	r3, [pc, #732]	; (8002130 <dw_main+0x2f8>)
 8001e52:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001e56:	f7ff fed9 	bl	8001c0c <ssd1306_write>

    /* Reset and initialise DW1000.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8001e5a:	f7ff fb3b 	bl	80014d4 <reset_DW1000>
    port_set_dw1000_slowrate();
 8001e5e:	f7ff fb95 	bl	800158c <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR)
 8001e62:	2001      	movs	r0, #1
 8001e64:	f7fe fb3a 	bl	80004dc <dwt_initialise>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6e:	d114      	bne.n	8001e9a <dw_main+0x62>
    {
//        lcd_display_str("INIT FAILED");
    	HAL_UART_Transmit(&huart2, "Init Failed!!!", 15, HAL_MAX_DELAY);
 8001e70:	f04f 33ff 	mov.w	r3, #4294967295
 8001e74:	220f      	movs	r2, #15
 8001e76:	49af      	ldr	r1, [pc, #700]	; (8002134 <dw_main+0x2fc>)
 8001e78:	48ac      	ldr	r0, [pc, #688]	; (800212c <dw_main+0x2f4>)
 8001e7a:	f002 fd3c 	bl	80048f6 <HAL_UART_Transmit>
    	SSD1306_GotoXY(0, 10); SSD1306_InvertDisplay(1);
 8001e7e:	210a      	movs	r1, #10
 8001e80:	2000      	movs	r0, #0
 8001e82:	f7ff fd65 	bl	8001950 <SSD1306_GotoXY>
 8001e86:	2001      	movs	r0, #1
 8001e88:	f7ff fbe2 	bl	8001650 <SSD1306_InvertDisplay>
    	ssd1306_write("INIT FAILED!!!", Font_7x10);
 8001e8c:	48aa      	ldr	r0, [pc, #680]	; (8002138 <dw_main+0x300>)
 8001e8e:	4ba8      	ldr	r3, [pc, #672]	; (8002130 <dw_main+0x2f8>)
 8001e90:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001e94:	f7ff feba 	bl	8001c0c <ssd1306_write>
        while (1)
 8001e98:	e7fe      	b.n	8001e98 <dw_main+0x60>
        { };
    }
    port_set_dw1000_fastrate();
 8001e9a:	f7ff fb83 	bl	80015a4 <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 7 below. */
    dwt_configure(&config);
 8001e9e:	48a7      	ldr	r0, [pc, #668]	; (800213c <dw_main+0x304>)
 8001ea0:	f7fe fc72 	bl	8000788 <dwt_configure>

    /* Apply default antenna delay value. See NOTE 1 below. */
    dwt_setrxantennadelay(RX_ANT_DLY);
 8001ea4:	f244 0034 	movw	r0, #16436	; 0x4034
 8001ea8:	f7fe fdd8 	bl	8000a5c <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 8001eac:	f244 0034 	movw	r0, #16436	; 0x4034
 8001eb0:	f7fe fde4 	bl	8000a7c <dwt_settxantennadelay>

    /* Set expected response's delay and timeout. See NOTE 4, 5 and 6 below.
     * As this example only handles one incoming frame with always the same delay and timeout, those values can be set here once for all. */
    dwt_setrxaftertxdelay(POLL_TX_TO_RESP_RX_DLY_UUS);
 8001eb4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001eb8:	f7ff f814 	bl	8000ee4 <dwt_setrxaftertxdelay>
    dwt_setrxtimeout(RESP_RX_TIMEOUT_UUS);
 8001ebc:	f640 208c 	movw	r0, #2700	; 0xa8c
 8001ec0:	f7ff f92e 	bl	8001120 <dwt_setrxtimeout>
    dwt_setpreambledetecttimeout(PRE_TIMEOUT);
 8001ec4:	2008      	movs	r0, #8
 8001ec6:	f7ff f96b 	bl	80011a0 <dwt_setpreambledetecttimeout>

    /* Loop forever initiating ranging exchanges. */
    while (1)
    {
    	SSD1306_Clear ();
 8001eca:	f7ff fdfc 	bl	8001ac6 <SSD1306_Clear>

        /* Write frame data to DW1000 and prepare transmission. See NOTE 8 below. */
        tx_poll_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8001ece:	4b9c      	ldr	r3, [pc, #624]	; (8002140 <dw_main+0x308>)
 8001ed0:	781a      	ldrb	r2, [r3, #0]
 8001ed2:	4b9c      	ldr	r3, [pc, #624]	; (8002144 <dw_main+0x30c>)
 8001ed4:	709a      	strb	r2, [r3, #2]
        dwt_writetxdata(sizeof(tx_poll_msg), tx_poll_msg, 0); /* Zero offset in TX buffer. */
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	499a      	ldr	r1, [pc, #616]	; (8002144 <dw_main+0x30c>)
 8001eda:	200c      	movs	r0, #12
 8001edc:	f7fe fddd 	bl	8000a9a <dwt_writetxdata>
        dwt_writetxfctrl(sizeof(tx_poll_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	200c      	movs	r0, #12
 8001ee6:	f7fe fdf7 	bl	8000ad8 <dwt_writetxfctrl>

        /* Start transmission, indicating that a response is expected so that reception is enabled automatically after the frame is sent and the delay
         * set by dwt_setrxaftertxdelay() has elapsed. */
        dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED);
 8001eea:	2002      	movs	r0, #2
 8001eec:	f7ff f8ca 	bl	8001084 <dwt_starttx>
        SSD1306_GotoXY(0, 0);  ssd1306_write("Transmitted :", Font_7x10);
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f7ff fd2c 	bl	8001950 <SSD1306_GotoXY>
 8001ef8:	4893      	ldr	r0, [pc, #588]	; (8002148 <dw_main+0x310>)
 8001efa:	4b8d      	ldr	r3, [pc, #564]	; (8002130 <dw_main+0x2f8>)
 8001efc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f00:	f7ff fe84 	bl	8001c0c <ssd1306_write>

        SSD1306_GotoXY(0, 20); ssd1306_write(tx_poll_msg, Font_7x10);
 8001f04:	2114      	movs	r1, #20
 8001f06:	2000      	movs	r0, #0
 8001f08:	f7ff fd22 	bl	8001950 <SSD1306_GotoXY>
 8001f0c:	488d      	ldr	r0, [pc, #564]	; (8002144 <dw_main+0x30c>)
 8001f0e:	4b88      	ldr	r3, [pc, #544]	; (8002130 <dw_main+0x2f8>)
 8001f10:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f14:	f7ff fe7a 	bl	8001c0c <ssd1306_write>
        HAL_UART_Transmit(&huart2, tx_poll_msg, sizeof(tx_poll_msg), HAL_MAX_DELAY);
 8001f18:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1c:	220c      	movs	r2, #12
 8001f1e:	4989      	ldr	r1, [pc, #548]	; (8002144 <dw_main+0x30c>)
 8001f20:	4882      	ldr	r0, [pc, #520]	; (800212c <dw_main+0x2f4>)
 8001f22:	f002 fce8 	bl	80048f6 <HAL_UART_Transmit>
        /* We assume that the transmission is achieved correctly, poll for reception of a frame or error/timeout. See NOTE 9 below. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8001f26:	bf00      	nop
 8001f28:	2100      	movs	r1, #0
 8001f2a:	200f      	movs	r0, #15
 8001f2c:	f7fe fecd 	bl	8000cca <dwt_read32bitoffsetreg>
 8001f30:	4603      	mov	r3, r0
 8001f32:	4a86      	ldr	r2, [pc, #536]	; (800214c <dw_main+0x314>)
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	4b85      	ldr	r3, [pc, #532]	; (800214c <dw_main+0x314>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	4b85      	ldr	r3, [pc, #532]	; (8002150 <dw_main+0x318>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0f2      	beq.n	8001f28 <dw_main+0xf0>
        { };

        /* Increment frame sequence number after transmission of the poll message (modulo 256). */
        frame_seq_nb++;
 8001f42:	4b7f      	ldr	r3, [pc, #508]	; (8002140 <dw_main+0x308>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	3301      	adds	r3, #1
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	4b7d      	ldr	r3, [pc, #500]	; (8002140 <dw_main+0x308>)
 8001f4c:	701a      	strb	r2, [r3, #0]

        if (status_reg & SYS_STATUS_RXFCG)
 8001f4e:	4b7f      	ldr	r3, [pc, #508]	; (800214c <dw_main+0x314>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 80da 	beq.w	8002110 <dw_main+0x2d8>
        {
            uint32 frame_len;

            /* Clear good RX frame event and TX frame sent in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG | SYS_STATUS_TXFRS);
 8001f5c:	f44f 4281 	mov.w	r2, #16512	; 0x4080
 8001f60:	2100      	movs	r1, #0
 8001f62:	200f      	movs	r0, #15
 8001f64:	f7fe ff37 	bl	8000dd6 <dwt_write32bitoffsetreg>

            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_MASK;
 8001f68:	2100      	movs	r1, #0
 8001f6a:	2010      	movs	r0, #16
 8001f6c:	f7fe fead 	bl	8000cca <dwt_read32bitoffsetreg>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f76:	61fb      	str	r3, [r7, #28]
            if (frame_len <= RX_BUF_LEN)
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	2b14      	cmp	r3, #20
 8001f7c:	d806      	bhi.n	8001f8c <dw_main+0x154>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	2200      	movs	r2, #0
 8001f84:	4619      	mov	r1, r3
 8001f86:	4873      	ldr	r0, [pc, #460]	; (8002154 <dw_main+0x31c>)
 8001f88:	f7fe fdc6 	bl	8000b18 <dwt_readrxdata>
            }
            HAL_UART_Transmit(&huart2, rx_buffer, sizeof(rx_buffer), HAL_MAX_DELAY);
 8001f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f90:	2214      	movs	r2, #20
 8001f92:	4970      	ldr	r1, [pc, #448]	; (8002154 <dw_main+0x31c>)
 8001f94:	4865      	ldr	r0, [pc, #404]	; (800212c <dw_main+0x2f4>)
 8001f96:	f002 fcae 	bl	80048f6 <HAL_UART_Transmit>
            SSD1306_GotoXY(0, 0);  ssd1306_write("Received :", Font_7x10);
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f7ff fcd7 	bl	8001950 <SSD1306_GotoXY>
 8001fa2:	486d      	ldr	r0, [pc, #436]	; (8002158 <dw_main+0x320>)
 8001fa4:	4b62      	ldr	r3, [pc, #392]	; (8002130 <dw_main+0x2f8>)
 8001fa6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001faa:	f7ff fe2f 	bl	8001c0c <ssd1306_write>
            SSD1306_GotoXY(0, 20); ssd1306_write(rx_buffer, Font_7x10);
 8001fae:	2114      	movs	r1, #20
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	f7ff fccd 	bl	8001950 <SSD1306_GotoXY>
 8001fb6:	4867      	ldr	r0, [pc, #412]	; (8002154 <dw_main+0x31c>)
 8001fb8:	4b5d      	ldr	r3, [pc, #372]	; (8002130 <dw_main+0x2f8>)
 8001fba:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001fbe:	f7ff fe25 	bl	8001c0c <ssd1306_write>
            /* Check that the frame is the expected response from the companion "DS TWR responder" example.
             * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
            rx_buffer[ALL_MSG_SN_IDX] = 0;
 8001fc2:	4b64      	ldr	r3, [pc, #400]	; (8002154 <dw_main+0x31c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	709a      	strb	r2, [r3, #2]
            if (memcmp(rx_buffer, rx_resp_msg, ALL_MSG_COMMON_LEN) == 0)
 8001fc8:	220a      	movs	r2, #10
 8001fca:	4964      	ldr	r1, [pc, #400]	; (800215c <dw_main+0x324>)
 8001fcc:	4861      	ldr	r0, [pc, #388]	; (8002154 <dw_main+0x31c>)
 8001fce:	f003 fc7d 	bl	80058cc <memcmp>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f040 80a2 	bne.w	800211e <dw_main+0x2e6>
            {
                uint32 final_tx_time;
                int ret;

                /* Retrieve poll transmission and response reception timestamp. */
                poll_tx_ts = get_tx_timestamp_u64();
 8001fda:	f000 f8d3 	bl	8002184 <get_tx_timestamp_u64>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	495f      	ldr	r1, [pc, #380]	; (8002160 <dw_main+0x328>)
 8001fe4:	e9c1 2300 	strd	r2, r3, [r1]
                resp_rx_ts = get_rx_timestamp_u64();
 8001fe8:	f000 f907 	bl	80021fa <get_rx_timestamp_u64>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	495c      	ldr	r1, [pc, #368]	; (8002164 <dw_main+0x32c>)
 8001ff2:	e9c1 2300 	strd	r2, r3, [r1]

                /* Compute final message transmission time. See NOTE 10 below. */
                final_tx_time = (resp_rx_ts + (RESP_RX_TO_FINAL_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
 8001ff6:	4b5b      	ldr	r3, [pc, #364]	; (8002164 <dw_main+0x32c>)
 8001ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffc:	495a      	ldr	r1, [pc, #360]	; (8002168 <dw_main+0x330>)
 8001ffe:	eb12 0801 	adds.w	r8, r2, r1
 8002002:	f143 0900 	adc.w	r9, r3, #0
 8002006:	f04f 0200 	mov.w	r2, #0
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8002012:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
 8002016:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800201a:	4613      	mov	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
                dwt_setdelayedtrxtime(final_tx_time);
 800201e:	69b8      	ldr	r0, [r7, #24]
 8002020:	f7ff f822 	bl	8001068 <dwt_setdelayedtrxtime>

                /* Final TX timestamp is the transmission time we programmed plus the TX antenna delay. */
                final_tx_ts = (((uint64)(final_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY;
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	2200      	movs	r2, #0
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	60fa      	str	r2, [r7, #12]
 800202c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002030:	460b      	mov	r3, r1
 8002032:	ea4f 6b13 	mov.w	fp, r3, lsr #24
 8002036:	460b      	mov	r3, r1
 8002038:	ea4f 2a03 	mov.w	sl, r3, lsl #8
 800203c:	f42a 74ff 	bic.w	r4, sl, #510	; 0x1fe
 8002040:	f024 0401 	bic.w	r4, r4, #1
 8002044:	f00b 05ff 	and.w	r5, fp, #255	; 0xff
 8002048:	f244 0334 	movw	r3, #16436	; 0x4034
 800204c:	18e3      	adds	r3, r4, r3
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	f145 0300 	adc.w	r3, r5, #0
 8002054:	607b      	str	r3, [r7, #4]
 8002056:	4b45      	ldr	r3, [pc, #276]	; (800216c <dw_main+0x334>)
 8002058:	e9d7 1200 	ldrd	r1, r2, [r7]
 800205c:	e9c3 1200 	strd	r1, r2, [r3]

                /* Write all timestamps in the final message. See NOTE 11 below. */
                final_msg_set_ts(&tx_final_msg[FINAL_MSG_POLL_TX_TS_IDX], poll_tx_ts);
 8002060:	4b3f      	ldr	r3, [pc, #252]	; (8002160 <dw_main+0x328>)
 8002062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002066:	4842      	ldr	r0, [pc, #264]	; (8002170 <dw_main+0x338>)
 8002068:	f000 f902 	bl	8002270 <final_msg_set_ts>
                final_msg_set_ts(&tx_final_msg[FINAL_MSG_RESP_RX_TS_IDX], resp_rx_ts);
 800206c:	4b3d      	ldr	r3, [pc, #244]	; (8002164 <dw_main+0x32c>)
 800206e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002072:	4840      	ldr	r0, [pc, #256]	; (8002174 <dw_main+0x33c>)
 8002074:	f000 f8fc 	bl	8002270 <final_msg_set_ts>
                final_msg_set_ts(&tx_final_msg[FINAL_MSG_FINAL_TX_TS_IDX], final_tx_ts);
 8002078:	4b3c      	ldr	r3, [pc, #240]	; (800216c <dw_main+0x334>)
 800207a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207e:	483e      	ldr	r0, [pc, #248]	; (8002178 <dw_main+0x340>)
 8002080:	f000 f8f6 	bl	8002270 <final_msg_set_ts>

                /* Write and send final message. See NOTE 8 below. */
                tx_final_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8002084:	4b2e      	ldr	r3, [pc, #184]	; (8002140 <dw_main+0x308>)
 8002086:	781a      	ldrb	r2, [r3, #0]
 8002088:	4b3c      	ldr	r3, [pc, #240]	; (800217c <dw_main+0x344>)
 800208a:	709a      	strb	r2, [r3, #2]
                dwt_writetxdata(sizeof(tx_final_msg), tx_final_msg, 0); /* Zero offset in TX buffer. */
 800208c:	2200      	movs	r2, #0
 800208e:	493b      	ldr	r1, [pc, #236]	; (800217c <dw_main+0x344>)
 8002090:	2018      	movs	r0, #24
 8002092:	f7fe fd02 	bl	8000a9a <dwt_writetxdata>
                dwt_writetxfctrl(sizeof(tx_final_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
 8002096:	2201      	movs	r2, #1
 8002098:	2100      	movs	r1, #0
 800209a:	2018      	movs	r0, #24
 800209c:	f7fe fd1c 	bl	8000ad8 <dwt_writetxfctrl>
                ret = dwt_starttx(DWT_START_TX_DELAYED);
 80020a0:	2001      	movs	r0, #1
 80020a2:	f7fe ffef 	bl	8001084 <dwt_starttx>
 80020a6:	6178      	str	r0, [r7, #20]
                SSD1306_GotoXY(0, 0);  ssd1306_write("Transmitted :", Font_7x10);
 80020a8:	2100      	movs	r1, #0
 80020aa:	2000      	movs	r0, #0
 80020ac:	f7ff fc50 	bl	8001950 <SSD1306_GotoXY>
 80020b0:	4825      	ldr	r0, [pc, #148]	; (8002148 <dw_main+0x310>)
 80020b2:	4b1f      	ldr	r3, [pc, #124]	; (8002130 <dw_main+0x2f8>)
 80020b4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80020b8:	f7ff fda8 	bl	8001c0c <ssd1306_write>

                HAL_UART_Transmit(&huart2, tx_final_msg, sizeof(tx_final_msg), HAL_MAX_DELAY);
 80020bc:	f04f 33ff 	mov.w	r3, #4294967295
 80020c0:	2218      	movs	r2, #24
 80020c2:	492e      	ldr	r1, [pc, #184]	; (800217c <dw_main+0x344>)
 80020c4:	4819      	ldr	r0, [pc, #100]	; (800212c <dw_main+0x2f4>)
 80020c6:	f002 fc16 	bl	80048f6 <HAL_UART_Transmit>
                SSD1306_GotoXY(0, 20); ssd1306_write(tx_final_msg, Font_7x10);
 80020ca:	2114      	movs	r1, #20
 80020cc:	2000      	movs	r0, #0
 80020ce:	f7ff fc3f 	bl	8001950 <SSD1306_GotoXY>
 80020d2:	482a      	ldr	r0, [pc, #168]	; (800217c <dw_main+0x344>)
 80020d4:	4b16      	ldr	r3, [pc, #88]	; (8002130 <dw_main+0x2f8>)
 80020d6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80020da:	f7ff fd97 	bl	8001c0c <ssd1306_write>
                /* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 12 below. */
                if (ret == DWT_SUCCESS)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d11c      	bne.n	800211e <dw_main+0x2e6>
                {
                    /* Poll DW1000 until TX frame sent event set. See NOTE 9 below. */
                    while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS))
 80020e4:	bf00      	nop
 80020e6:	2100      	movs	r1, #0
 80020e8:	200f      	movs	r0, #15
 80020ea:	f7fe fdee 	bl	8000cca <dwt_read32bitoffsetreg>
 80020ee:	4603      	mov	r3, r0
 80020f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f6      	beq.n	80020e6 <dw_main+0x2ae>
                    { };

                    /* Clear TXFRS event. */
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
 80020f8:	2280      	movs	r2, #128	; 0x80
 80020fa:	2100      	movs	r1, #0
 80020fc:	200f      	movs	r0, #15
 80020fe:	f7fe fe6a 	bl	8000dd6 <dwt_write32bitoffsetreg>

                    /* Increment frame sequence number after transmission of the final message (modulo 256). */
                    frame_seq_nb++;
 8002102:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <dw_main+0x308>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	3301      	adds	r3, #1
 8002108:	b2da      	uxtb	r2, r3
 800210a:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <dw_main+0x308>)
 800210c:	701a      	strb	r2, [r3, #0]
 800210e:	e006      	b.n	800211e <dw_main+0x2e6>
            }
        }
        else
        {
            /* Clear RX error/timeout events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8002110:	4a1b      	ldr	r2, [pc, #108]	; (8002180 <dw_main+0x348>)
 8002112:	2100      	movs	r1, #0
 8002114:	200f      	movs	r0, #15
 8002116:	f7fe fe5e 	bl	8000dd6 <dwt_write32bitoffsetreg>

            /* Reset RX to properly reinitialise LDE operation. */
            dwt_rxreset();
 800211a:	f7ff f850 	bl	80011be <dwt_rxreset>
        }

        /* Execute a delay between ranging exchanges. */
        Sleep(RNG_DELAY_MS);
 800211e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002122:	f7ff f9ad 	bl	8001480 <Sleep>
    	SSD1306_Clear ();
 8002126:	e6d0      	b.n	8001eca <dw_main+0x92>
 8002128:	2000000c 	.word	0x2000000c
 800212c:	200005b8 	.word	0x200005b8
 8002130:	20000004 	.word	0x20000004
 8002134:	08005914 	.word	0x08005914
 8002138:	08005924 	.word	0x08005924
 800213c:	20000020 	.word	0x20000020
 8002140:	20000528 	.word	0x20000528
 8002144:	2000002c 	.word	0x2000002c
 8002148:	08005934 	.word	0x08005934
 800214c:	20000540 	.word	0x20000540
 8002150:	2427d000 	.word	0x2427d000
 8002154:	2000052c 	.word	0x2000052c
 8002158:	08005944 	.word	0x08005944
 800215c:	20000038 	.word	0x20000038
 8002160:	20000548 	.word	0x20000548
 8002164:	20000550 	.word	0x20000550
 8002168:	0c1c0000 	.word	0x0c1c0000
 800216c:	20000558 	.word	0x20000558
 8002170:	20000052 	.word	0x20000052
 8002174:	20000056 	.word	0x20000056
 8002178:	2000005a 	.word	0x2000005a
 800217c:	20000048 	.word	0x20000048
 8002180:	24279000 	.word	0x24279000

08002184 <get_tx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_tx_timestamp_u64(void)
{
 8002184:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002188:	b086      	sub	sp, #24
 800218a:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int i;
    dwt_readtxtimestamp(ts_tab);
 8002198:	1d3b      	adds	r3, r7, #4
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe fcce 	bl	8000b3c <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--)
 80021a0:	2304      	movs	r3, #4
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	e01e      	b.n	80021e4 <get_tx_timestamp_u64+0x60>
    {
        ts <<= 8;
 80021a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	f04f 0300 	mov.w	r3, #0
 80021b2:	020b      	lsls	r3, r1, #8
 80021b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80021b8:	0202      	lsls	r2, r0, #8
 80021ba:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ts |= ts_tab[i];
 80021be:	1d3a      	adds	r2, r7, #4
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4413      	add	r3, r2
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2200      	movs	r2, #0
 80021ca:	461c      	mov	r4, r3
 80021cc:	4615      	mov	r5, r2
 80021ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021d2:	ea42 0804 	orr.w	r8, r2, r4
 80021d6:	ea43 0905 	orr.w	r9, r3, r5
 80021da:	e9c7 8904 	strd	r8, r9, [r7, #16]
    for (i = 4; i >= 0; i--)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	3b01      	subs	r3, #1
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	dadd      	bge.n	80021a6 <get_tx_timestamp_u64+0x22>
    }
    return ts;
 80021ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80021ee:	4610      	mov	r0, r2
 80021f0:	4619      	mov	r1, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080021fa <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_rx_timestamp_u64(void)
{
 80021fa:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int i;
    dwt_readrxtimestamp(ts_tab);
 800220e:	1d3b      	adds	r3, r7, #4
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe fca1 	bl	8000b58 <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
 8002216:	2304      	movs	r3, #4
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	e01e      	b.n	800225a <get_rx_timestamp_u64+0x60>
    {
        ts <<= 8;
 800221c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	f04f 0300 	mov.w	r3, #0
 8002228:	020b      	lsls	r3, r1, #8
 800222a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800222e:	0202      	lsls	r2, r0, #8
 8002230:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ts |= ts_tab[i];
 8002234:	1d3a      	adds	r2, r7, #4
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	4413      	add	r3, r2
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2200      	movs	r2, #0
 8002240:	461c      	mov	r4, r3
 8002242:	4615      	mov	r5, r2
 8002244:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002248:	ea42 0804 	orr.w	r8, r2, r4
 800224c:	ea43 0905 	orr.w	r9, r3, r5
 8002250:	e9c7 8904 	strd	r8, r9, [r7, #16]
    for (i = 4; i >= 0; i--)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3b01      	subs	r3, #1
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2b00      	cmp	r3, #0
 800225e:	dadd      	bge.n	800221c <get_rx_timestamp_u64+0x22>
    }
    return ts;
 8002260:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8002264:	4610      	mov	r0, r2
 8002266:	4619      	mov	r1, r3
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002270 <final_msg_set_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
static void final_msg_set_ts(uint8 *ts_field, uint64 ts)
{
 8002270:	b480      	push	{r7}
 8002272:	b087      	sub	sp, #28
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	e9c7 2300 	strd	r2, r3, [r7]
    int i;
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	e013      	b.n	80022aa <final_msg_set_ts+0x3a>
    {
        ts_field[i] = (uint8) ts;
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	4413      	add	r3, r2
 8002288:	783a      	ldrb	r2, [r7, #0]
 800228a:	701a      	strb	r2, [r3, #0]
        ts >>= 8;
 800228c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	f04f 0300 	mov.w	r3, #0
 8002298:	0a02      	lsrs	r2, r0, #8
 800229a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800229e:	0a0b      	lsrs	r3, r1, #8
 80022a0:	e9c7 2300 	strd	r2, r3, [r7]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	3301      	adds	r3, #1
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	dde8      	ble.n	8002282 <final_msg_set_ts+0x12>
    }
}
 80022b0:	bf00      	nop
 80022b2:	bf00      	nop
 80022b4:	371c      	adds	r7, #28
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022c2:	f000 fa21 	bl	8002708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022c6:	f000 f811 	bl	80022ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022ca:	f7ff fcb3 	bl	8001c34 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80022ce:	f000 f977 	bl	80025c0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80022d2:	f7ff fd3b 	bl	8001d4c <MX_I2C1_Init>
  MX_SPI1_Init();
 80022d6:	f000 f877 	bl	80023c8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  setup_DW1000RSTnIRQ(0);
 80022da:	2000      	movs	r0, #0
 80022dc:	f7ff f91c 	bl	8001518 <setup_DW1000RSTnIRQ>
  SSD1306_Init();
 80022e0:	f7ff f9cc 	bl	800167c <SSD1306_Init>
  dw_main();
 80022e4:	f7ff fda8 	bl	8001e38 <dw_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80022e8:	e7fe      	b.n	80022e8 <main+0x2a>
	...

080022ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b094      	sub	sp, #80	; 0x50
 80022f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022f2:	f107 0320 	add.w	r3, r7, #32
 80022f6:	2230      	movs	r2, #48	; 0x30
 80022f8:	2100      	movs	r1, #0
 80022fa:	4618      	mov	r0, r3
 80022fc:	f003 faf6 	bl	80058ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002300:	f107 030c 	add.w	r3, r7, #12
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002310:	2300      	movs	r3, #0
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	4b27      	ldr	r3, [pc, #156]	; (80023b4 <SystemClock_Config+0xc8>)
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	4a26      	ldr	r2, [pc, #152]	; (80023b4 <SystemClock_Config+0xc8>)
 800231a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800231e:	6413      	str	r3, [r2, #64]	; 0x40
 8002320:	4b24      	ldr	r3, [pc, #144]	; (80023b4 <SystemClock_Config+0xc8>)
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800232c:	2300      	movs	r3, #0
 800232e:	607b      	str	r3, [r7, #4]
 8002330:	4b21      	ldr	r3, [pc, #132]	; (80023b8 <SystemClock_Config+0xcc>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a20      	ldr	r2, [pc, #128]	; (80023b8 <SystemClock_Config+0xcc>)
 8002336:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <SystemClock_Config+0xcc>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002344:	607b      	str	r3, [r7, #4]
 8002346:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002348:	2301      	movs	r3, #1
 800234a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800234c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002352:	2302      	movs	r3, #2
 8002354:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002356:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800235a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 800235c:	230d      	movs	r3, #13
 800235e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002360:	2348      	movs	r3, #72	; 0x48
 8002362:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002364:	2302      	movs	r3, #2
 8002366:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002368:	2304      	movs	r3, #4
 800236a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800236c:	f107 0320 	add.w	r3, r7, #32
 8002370:	4618      	mov	r0, r3
 8002372:	f001 fb7d 	bl	8003a70 <HAL_RCC_OscConfig>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800237c:	f000 f81e 	bl	80023bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002380:	230f      	movs	r3, #15
 8002382:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002384:	2302      	movs	r3, #2
 8002386:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800238c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002390:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002396:	f107 030c 	add.w	r3, r7, #12
 800239a:	2102      	movs	r1, #2
 800239c:	4618      	mov	r0, r3
 800239e:	f001 fddf 	bl	8003f60 <HAL_RCC_ClockConfig>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80023a8:	f000 f808 	bl	80023bc <Error_Handler>
  }
}
 80023ac:	bf00      	nop
 80023ae:	3750      	adds	r7, #80	; 0x50
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40007000 	.word	0x40007000

080023bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80023c0:	b672      	cpsid	i
}
 80023c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023c4:	e7fe      	b.n	80023c4 <Error_Handler+0x8>
	...

080023c8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80023cc:	4b17      	ldr	r3, [pc, #92]	; (800242c <MX_SPI1_Init+0x64>)
 80023ce:	4a18      	ldr	r2, [pc, #96]	; (8002430 <MX_SPI1_Init+0x68>)
 80023d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023d2:	4b16      	ldr	r3, [pc, #88]	; (800242c <MX_SPI1_Init+0x64>)
 80023d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023da:	4b14      	ldr	r3, [pc, #80]	; (800242c <MX_SPI1_Init+0x64>)
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023e0:	4b12      	ldr	r3, [pc, #72]	; (800242c <MX_SPI1_Init+0x64>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023e6:	4b11      	ldr	r3, [pc, #68]	; (800242c <MX_SPI1_Init+0x64>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023ec:	4b0f      	ldr	r3, [pc, #60]	; (800242c <MX_SPI1_Init+0x64>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <MX_SPI1_Init+0x64>)
 80023f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80023fa:	4b0c      	ldr	r3, [pc, #48]	; (800242c <MX_SPI1_Init+0x64>)
 80023fc:	2220      	movs	r2, #32
 80023fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002400:	4b0a      	ldr	r3, [pc, #40]	; (800242c <MX_SPI1_Init+0x64>)
 8002402:	2200      	movs	r2, #0
 8002404:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002406:	4b09      	ldr	r3, [pc, #36]	; (800242c <MX_SPI1_Init+0x64>)
 8002408:	2200      	movs	r2, #0
 800240a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800240c:	4b07      	ldr	r3, [pc, #28]	; (800242c <MX_SPI1_Init+0x64>)
 800240e:	2200      	movs	r2, #0
 8002410:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002412:	4b06      	ldr	r3, [pc, #24]	; (800242c <MX_SPI1_Init+0x64>)
 8002414:	220a      	movs	r2, #10
 8002416:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002418:	4804      	ldr	r0, [pc, #16]	; (800242c <MX_SPI1_Init+0x64>)
 800241a:	f001 ff81 	bl	8004320 <HAL_SPI_Init>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002424:	f7ff ffca 	bl	80023bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20000560 	.word	0x20000560
 8002430:	40013000 	.word	0x40013000

08002434 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08a      	sub	sp, #40	; 0x28
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243c:	f107 0314 	add.w	r3, r7, #20
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a19      	ldr	r2, [pc, #100]	; (80024b8 <HAL_SPI_MspInit+0x84>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d12b      	bne.n	80024ae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	613b      	str	r3, [r7, #16]
 800245a:	4b18      	ldr	r3, [pc, #96]	; (80024bc <HAL_SPI_MspInit+0x88>)
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	4a17      	ldr	r2, [pc, #92]	; (80024bc <HAL_SPI_MspInit+0x88>)
 8002460:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002464:	6453      	str	r3, [r2, #68]	; 0x44
 8002466:	4b15      	ldr	r3, [pc, #84]	; (80024bc <HAL_SPI_MspInit+0x88>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	4b11      	ldr	r3, [pc, #68]	; (80024bc <HAL_SPI_MspInit+0x88>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	4a10      	ldr	r2, [pc, #64]	; (80024bc <HAL_SPI_MspInit+0x88>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	6313      	str	r3, [r2, #48]	; 0x30
 8002482:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <HAL_SPI_MspInit+0x88>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800248e:	23e0      	movs	r3, #224	; 0xe0
 8002490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002492:	2302      	movs	r3, #2
 8002494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249a:	2303      	movs	r3, #3
 800249c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800249e:	2305      	movs	r3, #5
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a2:	f107 0314 	add.w	r3, r7, #20
 80024a6:	4619      	mov	r1, r3
 80024a8:	4805      	ldr	r0, [pc, #20]	; (80024c0 <HAL_SPI_MspInit+0x8c>)
 80024aa:	f000 fb99 	bl	8002be0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80024ae:	bf00      	nop
 80024b0:	3728      	adds	r7, #40	; 0x28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40013000 	.word	0x40013000
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40020000 	.word	0x40020000

080024c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	607b      	str	r3, [r7, #4]
 80024ce:	4b10      	ldr	r3, [pc, #64]	; (8002510 <HAL_MspInit+0x4c>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	4a0f      	ldr	r2, [pc, #60]	; (8002510 <HAL_MspInit+0x4c>)
 80024d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024d8:	6453      	str	r3, [r2, #68]	; 0x44
 80024da:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <HAL_MspInit+0x4c>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e2:	607b      	str	r3, [r7, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	603b      	str	r3, [r7, #0]
 80024ea:	4b09      	ldr	r3, [pc, #36]	; (8002510 <HAL_MspInit+0x4c>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	4a08      	ldr	r2, [pc, #32]	; (8002510 <HAL_MspInit+0x4c>)
 80024f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f4:	6413      	str	r3, [r2, #64]	; 0x40
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_MspInit+0x4c>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fe:	603b      	str	r3, [r7, #0]
 8002500:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40023800 	.word	0x40023800

08002514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002518:	e7fe      	b.n	8002518 <NMI_Handler+0x4>

0800251a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800251e:	e7fe      	b.n	800251e <HardFault_Handler+0x4>

08002520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002524:	e7fe      	b.n	8002524 <MemManage_Handler+0x4>

08002526 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800252a:	e7fe      	b.n	800252a <BusFault_Handler+0x4>

0800252c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002530:	e7fe      	b.n	8002530 <UsageFault_Handler+0x4>

08002532 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002544:	bf00      	nop
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002560:	f000 f924 	bl	80027ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002564:	bf00      	nop
 8002566:	bd80      	pop	{r7, pc}

08002568 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_RST_Pin);
 800256c:	2001      	movs	r0, #1
 800256e:	f000 fced 	bl	8002f4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800257c:	4802      	ldr	r0, [pc, #8]	; (8002588 <USART2_IRQHandler+0x10>)
 800257e:	f002 fa4d 	bl	8004a1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	200005b8 	.word	0x200005b8

0800258c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_IRQ_Pin);
 8002590:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002594:	f000 fcda 	bl	8002f4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002598:	bf00      	nop
 800259a:	bd80      	pop	{r7, pc}

0800259c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025a0:	4b06      	ldr	r3, [pc, #24]	; (80025bc <SystemInit+0x20>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a6:	4a05      	ldr	r2, [pc, #20]	; (80025bc <SystemInit+0x20>)
 80025a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025c4:	4b11      	ldr	r3, [pc, #68]	; (800260c <MX_USART2_UART_Init+0x4c>)
 80025c6:	4a12      	ldr	r2, [pc, #72]	; (8002610 <MX_USART2_UART_Init+0x50>)
 80025c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <MX_USART2_UART_Init+0x4c>)
 80025cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025d2:	4b0e      	ldr	r3, [pc, #56]	; (800260c <MX_USART2_UART_Init+0x4c>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025d8:	4b0c      	ldr	r3, [pc, #48]	; (800260c <MX_USART2_UART_Init+0x4c>)
 80025da:	2200      	movs	r2, #0
 80025dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025de:	4b0b      	ldr	r3, [pc, #44]	; (800260c <MX_USART2_UART_Init+0x4c>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025e4:	4b09      	ldr	r3, [pc, #36]	; (800260c <MX_USART2_UART_Init+0x4c>)
 80025e6:	220c      	movs	r2, #12
 80025e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ea:	4b08      	ldr	r3, [pc, #32]	; (800260c <MX_USART2_UART_Init+0x4c>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <MX_USART2_UART_Init+0x4c>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025f6:	4805      	ldr	r0, [pc, #20]	; (800260c <MX_USART2_UART_Init+0x4c>)
 80025f8:	f002 f930 	bl	800485c <HAL_UART_Init>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002602:	f7ff fedb 	bl	80023bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	200005b8 	.word	0x200005b8
 8002610:	40004400 	.word	0x40004400

08002614 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08a      	sub	sp, #40	; 0x28
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800261c:	f107 0314 	add.w	r3, r7, #20
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a1d      	ldr	r2, [pc, #116]	; (80026a8 <HAL_UART_MspInit+0x94>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d133      	bne.n	800269e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	613b      	str	r3, [r7, #16]
 800263a:	4b1c      	ldr	r3, [pc, #112]	; (80026ac <HAL_UART_MspInit+0x98>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	4a1b      	ldr	r2, [pc, #108]	; (80026ac <HAL_UART_MspInit+0x98>)
 8002640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002644:	6413      	str	r3, [r2, #64]	; 0x40
 8002646:	4b19      	ldr	r3, [pc, #100]	; (80026ac <HAL_UART_MspInit+0x98>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	4b15      	ldr	r3, [pc, #84]	; (80026ac <HAL_UART_MspInit+0x98>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	4a14      	ldr	r2, [pc, #80]	; (80026ac <HAL_UART_MspInit+0x98>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	6313      	str	r3, [r2, #48]	; 0x30
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_UART_MspInit+0x98>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800266e:	230c      	movs	r3, #12
 8002670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002672:	2302      	movs	r3, #2
 8002674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267a:	2303      	movs	r3, #3
 800267c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800267e:	2307      	movs	r3, #7
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002682:	f107 0314 	add.w	r3, r7, #20
 8002686:	4619      	mov	r1, r3
 8002688:	4809      	ldr	r0, [pc, #36]	; (80026b0 <HAL_UART_MspInit+0x9c>)
 800268a:	f000 faa9 	bl	8002be0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800268e:	2200      	movs	r2, #0
 8002690:	2100      	movs	r1, #0
 8002692:	2026      	movs	r0, #38	; 0x26
 8002694:	f000 f9cd 	bl	8002a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002698:	2026      	movs	r0, #38	; 0x26
 800269a:	f000 f9e6 	bl	8002a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800269e:	bf00      	nop
 80026a0:	3728      	adds	r7, #40	; 0x28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40004400 	.word	0x40004400
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40020000 	.word	0x40020000

080026b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026b8:	480d      	ldr	r0, [pc, #52]	; (80026f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026ba:	490e      	ldr	r1, [pc, #56]	; (80026f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026bc:	4a0e      	ldr	r2, [pc, #56]	; (80026f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026c0:	e002      	b.n	80026c8 <LoopCopyDataInit>

080026c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026c6:	3304      	adds	r3, #4

080026c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026cc:	d3f9      	bcc.n	80026c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ce:	4a0b      	ldr	r2, [pc, #44]	; (80026fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026d0:	4c0b      	ldr	r4, [pc, #44]	; (8002700 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026d4:	e001      	b.n	80026da <LoopFillZerobss>

080026d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d8:	3204      	adds	r2, #4

080026da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026dc:	d3fb      	bcc.n	80026d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026de:	f7ff ff5d 	bl	800259c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026e2:	f003 f8cf 	bl	8005884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026e6:	f7ff fdea 	bl	80022be <main>
  bx  lr    
 80026ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026f4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80026f8:	08006198 	.word	0x08006198
  ldr r2, =_sbss
 80026fc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002700:	20000600 	.word	0x20000600

08002704 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002704:	e7fe      	b.n	8002704 <ADC_IRQHandler>
	...

08002708 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800270c:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <HAL_Init+0x40>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a0d      	ldr	r2, [pc, #52]	; (8002748 <HAL_Init+0x40>)
 8002712:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002716:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002718:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <HAL_Init+0x40>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0a      	ldr	r2, [pc, #40]	; (8002748 <HAL_Init+0x40>)
 800271e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002722:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002724:	4b08      	ldr	r3, [pc, #32]	; (8002748 <HAL_Init+0x40>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a07      	ldr	r2, [pc, #28]	; (8002748 <HAL_Init+0x40>)
 800272a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002730:	2003      	movs	r0, #3
 8002732:	f000 f973 	bl	8002a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002736:	2000      	movs	r0, #0
 8002738:	f000 f808 	bl	800274c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800273c:	f7ff fec2 	bl	80024c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40023c00 	.word	0x40023c00

0800274c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002754:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <HAL_InitTick+0x54>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <HAL_InitTick+0x58>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	4619      	mov	r1, r3
 800275e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002762:	fbb3 f3f1 	udiv	r3, r3, r1
 8002766:	fbb2 f3f3 	udiv	r3, r2, r3
 800276a:	4618      	mov	r0, r3
 800276c:	f000 f999 	bl	8002aa2 <HAL_SYSTICK_Config>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e00e      	b.n	8002798 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b0f      	cmp	r3, #15
 800277e:	d80a      	bhi.n	8002796 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002780:	2200      	movs	r2, #0
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	f04f 30ff 	mov.w	r0, #4294967295
 8002788:	f000 f953 	bl	8002a32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800278c:	4a06      	ldr	r2, [pc, #24]	; (80027a8 <HAL_InitTick+0x5c>)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	e000      	b.n	8002798 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20000060 	.word	0x20000060
 80027a4:	20000068 	.word	0x20000068
 80027a8:	20000064 	.word	0x20000064

080027ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_IncTick+0x20>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	461a      	mov	r2, r3
 80027b6:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <HAL_IncTick+0x24>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4413      	add	r3, r2
 80027bc:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <HAL_IncTick+0x24>)
 80027be:	6013      	str	r3, [r2, #0]
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	20000068 	.word	0x20000068
 80027d0:	200005fc 	.word	0x200005fc

080027d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return uwTick;
 80027d8:	4b03      	ldr	r3, [pc, #12]	; (80027e8 <HAL_GetTick+0x14>)
 80027da:	681b      	ldr	r3, [r3, #0]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	200005fc 	.word	0x200005fc

080027ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027f4:	f7ff ffee 	bl	80027d4 <HAL_GetTick>
 80027f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002804:	d005      	beq.n	8002812 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002806:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <HAL_Delay+0x44>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4413      	add	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002812:	bf00      	nop
 8002814:	f7ff ffde 	bl	80027d4 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	429a      	cmp	r2, r3
 8002822:	d8f7      	bhi.n	8002814 <HAL_Delay+0x28>
  {
  }
}
 8002824:	bf00      	nop
 8002826:	bf00      	nop
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20000068 	.word	0x20000068

08002834 <__NVIC_SetPriorityGrouping>:
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <__NVIC_SetPriorityGrouping+0x44>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002850:	4013      	ands	r3, r2
 8002852:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800285c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002866:	4a04      	ldr	r2, [pc, #16]	; (8002878 <__NVIC_SetPriorityGrouping+0x44>)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	60d3      	str	r3, [r2, #12]
}
 800286c:	bf00      	nop
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <__NVIC_GetPriorityGrouping>:
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002880:	4b04      	ldr	r3, [pc, #16]	; (8002894 <__NVIC_GetPriorityGrouping+0x18>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	0a1b      	lsrs	r3, r3, #8
 8002886:	f003 0307 	and.w	r3, r3, #7
}
 800288a:	4618      	mov	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <__NVIC_EnableIRQ>:
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	db0b      	blt.n	80028c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	f003 021f 	and.w	r2, r3, #31
 80028b0:	4907      	ldr	r1, [pc, #28]	; (80028d0 <__NVIC_EnableIRQ+0x38>)
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	2001      	movs	r0, #1
 80028ba:	fa00 f202 	lsl.w	r2, r0, r2
 80028be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	e000e100 	.word	0xe000e100

080028d4 <__NVIC_DisableIRQ>:
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	db12      	blt.n	800290c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	f003 021f 	and.w	r2, r3, #31
 80028ec:	490a      	ldr	r1, [pc, #40]	; (8002918 <__NVIC_DisableIRQ+0x44>)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	2001      	movs	r0, #1
 80028f6:	fa00 f202 	lsl.w	r2, r0, r2
 80028fa:	3320      	adds	r3, #32
 80028fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002900:	f3bf 8f4f 	dsb	sy
}
 8002904:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002906:	f3bf 8f6f 	isb	sy
}
 800290a:	bf00      	nop
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000e100 	.word	0xe000e100

0800291c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	6039      	str	r1, [r7, #0]
 8002926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292c:	2b00      	cmp	r3, #0
 800292e:	db0a      	blt.n	8002946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	b2da      	uxtb	r2, r3
 8002934:	490c      	ldr	r1, [pc, #48]	; (8002968 <__NVIC_SetPriority+0x4c>)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	0112      	lsls	r2, r2, #4
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	440b      	add	r3, r1
 8002940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002944:	e00a      	b.n	800295c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	b2da      	uxtb	r2, r3
 800294a:	4908      	ldr	r1, [pc, #32]	; (800296c <__NVIC_SetPriority+0x50>)
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	3b04      	subs	r3, #4
 8002954:	0112      	lsls	r2, r2, #4
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	440b      	add	r3, r1
 800295a:	761a      	strb	r2, [r3, #24]
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	e000e100 	.word	0xe000e100
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002970:	b480      	push	{r7}
 8002972:	b089      	sub	sp, #36	; 0x24
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f1c3 0307 	rsb	r3, r3, #7
 800298a:	2b04      	cmp	r3, #4
 800298c:	bf28      	it	cs
 800298e:	2304      	movcs	r3, #4
 8002990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	3304      	adds	r3, #4
 8002996:	2b06      	cmp	r3, #6
 8002998:	d902      	bls.n	80029a0 <NVIC_EncodePriority+0x30>
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	3b03      	subs	r3, #3
 800299e:	e000      	b.n	80029a2 <NVIC_EncodePriority+0x32>
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a4:	f04f 32ff 	mov.w	r2, #4294967295
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43da      	mvns	r2, r3
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	401a      	ands	r2, r3
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b8:	f04f 31ff 	mov.w	r1, #4294967295
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	fa01 f303 	lsl.w	r3, r1, r3
 80029c2:	43d9      	mvns	r1, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c8:	4313      	orrs	r3, r2
         );
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3724      	adds	r7, #36	; 0x24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
	...

080029d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029e8:	d301      	bcc.n	80029ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ea:	2301      	movs	r3, #1
 80029ec:	e00f      	b.n	8002a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ee:	4a0a      	ldr	r2, [pc, #40]	; (8002a18 <SysTick_Config+0x40>)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029f6:	210f      	movs	r1, #15
 80029f8:	f04f 30ff 	mov.w	r0, #4294967295
 80029fc:	f7ff ff8e 	bl	800291c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a00:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <SysTick_Config+0x40>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a06:	4b04      	ldr	r3, [pc, #16]	; (8002a18 <SysTick_Config+0x40>)
 8002a08:	2207      	movs	r2, #7
 8002a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	e000e010 	.word	0xe000e010

08002a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7ff ff05 	bl	8002834 <__NVIC_SetPriorityGrouping>
}
 8002a2a:	bf00      	nop
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b086      	sub	sp, #24
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	4603      	mov	r3, r0
 8002a3a:	60b9      	str	r1, [r7, #8]
 8002a3c:	607a      	str	r2, [r7, #4]
 8002a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a44:	f7ff ff1a 	bl	800287c <__NVIC_GetPriorityGrouping>
 8002a48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	68b9      	ldr	r1, [r7, #8]
 8002a4e:	6978      	ldr	r0, [r7, #20]
 8002a50:	f7ff ff8e 	bl	8002970 <NVIC_EncodePriority>
 8002a54:	4602      	mov	r2, r0
 8002a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff ff5d 	bl	800291c <__NVIC_SetPriority>
}
 8002a62:	bf00      	nop
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	4603      	mov	r3, r0
 8002a72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff ff0d 	bl	8002898 <__NVIC_EnableIRQ>
}
 8002a7e:	bf00      	nop
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ff1d 	bl	80028d4 <__NVIC_DisableIRQ>
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff ff94 	bl	80029d8 <SysTick_Config>
 8002ab0:	4603      	mov	r3, r0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b084      	sub	sp, #16
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ac8:	f7ff fe84 	bl	80027d4 <HAL_GetTick>
 8002acc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d008      	beq.n	8002aec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2280      	movs	r2, #128	; 0x80
 8002ade:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e052      	b.n	8002b92 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0216 	bic.w	r2, r2, #22
 8002afa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695a      	ldr	r2, [r3, #20]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b0a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d103      	bne.n	8002b1c <HAL_DMA_Abort+0x62>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d007      	beq.n	8002b2c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0208 	bic.w	r2, r2, #8
 8002b2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0201 	bic.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b3c:	e013      	b.n	8002b66 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b3e:	f7ff fe49 	bl	80027d4 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b05      	cmp	r3, #5
 8002b4a:	d90c      	bls.n	8002b66 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2203      	movs	r2, #3
 8002b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e015      	b.n	8002b92 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1e4      	bne.n	8002b3e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b78:	223f      	movs	r2, #63	; 0x3f
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d004      	beq.n	8002bb8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2280      	movs	r2, #128	; 0x80
 8002bb2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e00c      	b.n	8002bd2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2205      	movs	r2, #5
 8002bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0201 	bic.w	r2, r2, #1
 8002bce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b089      	sub	sp, #36	; 0x24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61fb      	str	r3, [r7, #28]
 8002bfa:	e159      	b.n	8002eb0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	f040 8148 	bne.w	8002eaa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d005      	beq.n	8002c32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d130      	bne.n	8002c94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c68:	2201      	movs	r2, #1
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	f003 0201 	and.w	r2, r3, #1
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d017      	beq.n	8002cd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	2203      	movs	r2, #3
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d123      	bne.n	8002d24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	08da      	lsrs	r2, r3, #3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3208      	adds	r2, #8
 8002ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	220f      	movs	r2, #15
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	691a      	ldr	r2, [r3, #16]
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	08da      	lsrs	r2, r3, #3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3208      	adds	r2, #8
 8002d1e:	69b9      	ldr	r1, [r7, #24]
 8002d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	2203      	movs	r2, #3
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 0203 	and.w	r2, r3, #3
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 80a2 	beq.w	8002eaa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	4b57      	ldr	r3, [pc, #348]	; (8002ec8 <HAL_GPIO_Init+0x2e8>)
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	4a56      	ldr	r2, [pc, #344]	; (8002ec8 <HAL_GPIO_Init+0x2e8>)
 8002d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d74:	6453      	str	r3, [r2, #68]	; 0x44
 8002d76:	4b54      	ldr	r3, [pc, #336]	; (8002ec8 <HAL_GPIO_Init+0x2e8>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d82:	4a52      	ldr	r2, [pc, #328]	; (8002ecc <HAL_GPIO_Init+0x2ec>)
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	089b      	lsrs	r3, r3, #2
 8002d88:	3302      	adds	r3, #2
 8002d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	220f      	movs	r2, #15
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a49      	ldr	r2, [pc, #292]	; (8002ed0 <HAL_GPIO_Init+0x2f0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d019      	beq.n	8002de2 <HAL_GPIO_Init+0x202>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a48      	ldr	r2, [pc, #288]	; (8002ed4 <HAL_GPIO_Init+0x2f4>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d013      	beq.n	8002dde <HAL_GPIO_Init+0x1fe>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a47      	ldr	r2, [pc, #284]	; (8002ed8 <HAL_GPIO_Init+0x2f8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d00d      	beq.n	8002dda <HAL_GPIO_Init+0x1fa>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a46      	ldr	r2, [pc, #280]	; (8002edc <HAL_GPIO_Init+0x2fc>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d007      	beq.n	8002dd6 <HAL_GPIO_Init+0x1f6>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a45      	ldr	r2, [pc, #276]	; (8002ee0 <HAL_GPIO_Init+0x300>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d101      	bne.n	8002dd2 <HAL_GPIO_Init+0x1f2>
 8002dce:	2304      	movs	r3, #4
 8002dd0:	e008      	b.n	8002de4 <HAL_GPIO_Init+0x204>
 8002dd2:	2307      	movs	r3, #7
 8002dd4:	e006      	b.n	8002de4 <HAL_GPIO_Init+0x204>
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e004      	b.n	8002de4 <HAL_GPIO_Init+0x204>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	e002      	b.n	8002de4 <HAL_GPIO_Init+0x204>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <HAL_GPIO_Init+0x204>
 8002de2:	2300      	movs	r3, #0
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	f002 0203 	and.w	r2, r2, #3
 8002dea:	0092      	lsls	r2, r2, #2
 8002dec:	4093      	lsls	r3, r2
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002df4:	4935      	ldr	r1, [pc, #212]	; (8002ecc <HAL_GPIO_Init+0x2ec>)
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	089b      	lsrs	r3, r3, #2
 8002dfa:	3302      	adds	r3, #2
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e02:	4b38      	ldr	r3, [pc, #224]	; (8002ee4 <HAL_GPIO_Init+0x304>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e26:	4a2f      	ldr	r2, [pc, #188]	; (8002ee4 <HAL_GPIO_Init+0x304>)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e2c:	4b2d      	ldr	r3, [pc, #180]	; (8002ee4 <HAL_GPIO_Init+0x304>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e50:	4a24      	ldr	r2, [pc, #144]	; (8002ee4 <HAL_GPIO_Init+0x304>)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e56:	4b23      	ldr	r3, [pc, #140]	; (8002ee4 <HAL_GPIO_Init+0x304>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4013      	ands	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e7a:	4a1a      	ldr	r2, [pc, #104]	; (8002ee4 <HAL_GPIO_Init+0x304>)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e80:	4b18      	ldr	r3, [pc, #96]	; (8002ee4 <HAL_GPIO_Init+0x304>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ea4:	4a0f      	ldr	r2, [pc, #60]	; (8002ee4 <HAL_GPIO_Init+0x304>)
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	3301      	adds	r3, #1
 8002eae:	61fb      	str	r3, [r7, #28]
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	2b0f      	cmp	r3, #15
 8002eb4:	f67f aea2 	bls.w	8002bfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002eb8:	bf00      	nop
 8002eba:	bf00      	nop
 8002ebc:	3724      	adds	r7, #36	; 0x24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40013800 	.word	0x40013800
 8002ed0:	40020000 	.word	0x40020000
 8002ed4:	40020400 	.word	0x40020400
 8002ed8:	40020800 	.word	0x40020800
 8002edc:	40020c00 	.word	0x40020c00
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40013c00 	.word	0x40013c00

08002ee8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	887b      	ldrh	r3, [r7, #2]
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
 8002f04:	e001      	b.n	8002f0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f06:	2300      	movs	r3, #0
 8002f08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	807b      	strh	r3, [r7, #2]
 8002f24:	4613      	mov	r3, r2
 8002f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f28:	787b      	ldrb	r3, [r7, #1]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f2e:	887a      	ldrh	r2, [r7, #2]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f34:	e003      	b.n	8002f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f36:	887b      	ldrh	r3, [r7, #2]
 8002f38:	041a      	lsls	r2, r3, #16
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	619a      	str	r2, [r3, #24]
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f56:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	88fb      	ldrh	r3, [r7, #6]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d006      	beq.n	8002f70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f62:	4a05      	ldr	r2, [pc, #20]	; (8002f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f64:	88fb      	ldrh	r3, [r7, #6]
 8002f66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f68:	88fb      	ldrh	r3, [r7, #6]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe fb26 	bl	80015bc <HAL_GPIO_EXTI_Callback>
  }
}
 8002f70:	bf00      	nop
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40013c00 	.word	0x40013c00

08002f7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e12b      	b.n	80031e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d106      	bne.n	8002fa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7fe ff00 	bl	8001da8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2224      	movs	r2, #36	; 0x24
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0201 	bic.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fe0:	f001 f976 	bl	80042d0 <HAL_RCC_GetPCLK1Freq>
 8002fe4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	4a81      	ldr	r2, [pc, #516]	; (80031f0 <HAL_I2C_Init+0x274>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d807      	bhi.n	8003000 <HAL_I2C_Init+0x84>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4a80      	ldr	r2, [pc, #512]	; (80031f4 <HAL_I2C_Init+0x278>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	bf94      	ite	ls
 8002ff8:	2301      	movls	r3, #1
 8002ffa:	2300      	movhi	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	e006      	b.n	800300e <HAL_I2C_Init+0x92>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4a7d      	ldr	r2, [pc, #500]	; (80031f8 <HAL_I2C_Init+0x27c>)
 8003004:	4293      	cmp	r3, r2
 8003006:	bf94      	ite	ls
 8003008:	2301      	movls	r3, #1
 800300a:	2300      	movhi	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e0e7      	b.n	80031e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4a78      	ldr	r2, [pc, #480]	; (80031fc <HAL_I2C_Init+0x280>)
 800301a:	fba2 2303 	umull	r2, r3, r2, r3
 800301e:	0c9b      	lsrs	r3, r3, #18
 8003020:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	430a      	orrs	r2, r1
 8003034:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	4a6a      	ldr	r2, [pc, #424]	; (80031f0 <HAL_I2C_Init+0x274>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d802      	bhi.n	8003050 <HAL_I2C_Init+0xd4>
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	3301      	adds	r3, #1
 800304e:	e009      	b.n	8003064 <HAL_I2C_Init+0xe8>
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003056:	fb02 f303 	mul.w	r3, r2, r3
 800305a:	4a69      	ldr	r2, [pc, #420]	; (8003200 <HAL_I2C_Init+0x284>)
 800305c:	fba2 2303 	umull	r2, r3, r2, r3
 8003060:	099b      	lsrs	r3, r3, #6
 8003062:	3301      	adds	r3, #1
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6812      	ldr	r2, [r2, #0]
 8003068:	430b      	orrs	r3, r1
 800306a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003076:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	495c      	ldr	r1, [pc, #368]	; (80031f0 <HAL_I2C_Init+0x274>)
 8003080:	428b      	cmp	r3, r1
 8003082:	d819      	bhi.n	80030b8 <HAL_I2C_Init+0x13c>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	1e59      	subs	r1, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003092:	1c59      	adds	r1, r3, #1
 8003094:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003098:	400b      	ands	r3, r1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00a      	beq.n	80030b4 <HAL_I2C_Init+0x138>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	1e59      	subs	r1, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ac:	3301      	adds	r3, #1
 80030ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b2:	e051      	b.n	8003158 <HAL_I2C_Init+0x1dc>
 80030b4:	2304      	movs	r3, #4
 80030b6:	e04f      	b.n	8003158 <HAL_I2C_Init+0x1dc>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d111      	bne.n	80030e4 <HAL_I2C_Init+0x168>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	1e58      	subs	r0, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6859      	ldr	r1, [r3, #4]
 80030c8:	460b      	mov	r3, r1
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	440b      	add	r3, r1
 80030ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80030d2:	3301      	adds	r3, #1
 80030d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d8:	2b00      	cmp	r3, #0
 80030da:	bf0c      	ite	eq
 80030dc:	2301      	moveq	r3, #1
 80030de:	2300      	movne	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	e012      	b.n	800310a <HAL_I2C_Init+0x18e>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	1e58      	subs	r0, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6859      	ldr	r1, [r3, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	0099      	lsls	r1, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030fa:	3301      	adds	r3, #1
 80030fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003100:	2b00      	cmp	r3, #0
 8003102:	bf0c      	ite	eq
 8003104:	2301      	moveq	r3, #1
 8003106:	2300      	movne	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_I2C_Init+0x196>
 800310e:	2301      	movs	r3, #1
 8003110:	e022      	b.n	8003158 <HAL_I2C_Init+0x1dc>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10e      	bne.n	8003138 <HAL_I2C_Init+0x1bc>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	1e58      	subs	r0, r3, #1
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6859      	ldr	r1, [r3, #4]
 8003122:	460b      	mov	r3, r1
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	440b      	add	r3, r1
 8003128:	fbb0 f3f3 	udiv	r3, r0, r3
 800312c:	3301      	adds	r3, #1
 800312e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003136:	e00f      	b.n	8003158 <HAL_I2C_Init+0x1dc>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	1e58      	subs	r0, r3, #1
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6859      	ldr	r1, [r3, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	0099      	lsls	r1, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	fbb0 f3f3 	udiv	r3, r0, r3
 800314e:	3301      	adds	r3, #1
 8003150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003154:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	6809      	ldr	r1, [r1, #0]
 800315c:	4313      	orrs	r3, r2
 800315e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69da      	ldr	r2, [r3, #28]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003186:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6911      	ldr	r1, [r2, #16]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	68d2      	ldr	r2, [r2, #12]
 8003192:	4311      	orrs	r1, r2
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6812      	ldr	r2, [r2, #0]
 8003198:	430b      	orrs	r3, r1
 800319a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	695a      	ldr	r2, [r3, #20]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0201 	orr.w	r2, r2, #1
 80031c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2220      	movs	r2, #32
 80031d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	000186a0 	.word	0x000186a0
 80031f4:	001e847f 	.word	0x001e847f
 80031f8:	003d08ff 	.word	0x003d08ff
 80031fc:	431bde83 	.word	0x431bde83
 8003200:	10624dd3 	.word	0x10624dd3

08003204 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b088      	sub	sp, #32
 8003208:	af02      	add	r7, sp, #8
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	607a      	str	r2, [r7, #4]
 800320e:	461a      	mov	r2, r3
 8003210:	460b      	mov	r3, r1
 8003212:	817b      	strh	r3, [r7, #10]
 8003214:	4613      	mov	r3, r2
 8003216:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003218:	f7ff fadc 	bl	80027d4 <HAL_GetTick>
 800321c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b20      	cmp	r3, #32
 8003228:	f040 80e0 	bne.w	80033ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	2319      	movs	r3, #25
 8003232:	2201      	movs	r2, #1
 8003234:	4970      	ldr	r1, [pc, #448]	; (80033f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 fa92 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003242:	2302      	movs	r3, #2
 8003244:	e0d3      	b.n	80033ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_I2C_Master_Transmit+0x50>
 8003250:	2302      	movs	r3, #2
 8003252:	e0cc      	b.n	80033ee <HAL_I2C_Master_Transmit+0x1ea>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b01      	cmp	r3, #1
 8003268:	d007      	beq.n	800327a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f042 0201 	orr.w	r2, r2, #1
 8003278:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003288:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2221      	movs	r2, #33	; 0x21
 800328e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2210      	movs	r2, #16
 8003296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	893a      	ldrh	r2, [r7, #8]
 80032aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4a50      	ldr	r2, [pc, #320]	; (80033fc <HAL_I2C_Master_Transmit+0x1f8>)
 80032ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032bc:	8979      	ldrh	r1, [r7, #10]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	6a3a      	ldr	r2, [r7, #32]
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 f9ca 	bl	800365c <I2C_MasterRequestWrite>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e08d      	b.n	80033ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032d2:	2300      	movs	r3, #0
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	613b      	str	r3, [r7, #16]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80032e8:	e066      	b.n	80033b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	6a39      	ldr	r1, [r7, #32]
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 fb0c 	bl	800390c <I2C_WaitOnTXEFlagUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00d      	beq.n	8003316 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d107      	bne.n	8003312 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003310:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e06b      	b.n	80033ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	781a      	ldrb	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	1c5a      	adds	r2, r3, #1
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003330:	b29b      	uxth	r3, r3
 8003332:	3b01      	subs	r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333e:	3b01      	subs	r3, #1
 8003340:	b29a      	uxth	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b04      	cmp	r3, #4
 8003352:	d11b      	bne.n	800338c <HAL_I2C_Master_Transmit+0x188>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003358:	2b00      	cmp	r3, #0
 800335a:	d017      	beq.n	800338c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	781a      	ldrb	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003376:	b29b      	uxth	r3, r3
 8003378:	3b01      	subs	r3, #1
 800337a:	b29a      	uxth	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003384:	3b01      	subs	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	6a39      	ldr	r1, [r7, #32]
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 fafc 	bl	800398e <I2C_WaitOnBTFFlagUntilTimeout>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00d      	beq.n	80033b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d107      	bne.n	80033b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e01a      	b.n	80033ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d194      	bne.n	80032ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033e8:	2300      	movs	r3, #0
 80033ea:	e000      	b.n	80033ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80033ec:	2302      	movs	r3, #2
  }
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	00100002 	.word	0x00100002
 80033fc:	ffff0000 	.word	0xffff0000

08003400 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08a      	sub	sp, #40	; 0x28
 8003404:	af02      	add	r7, sp, #8
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	607a      	str	r2, [r7, #4]
 800340a:	603b      	str	r3, [r7, #0]
 800340c:	460b      	mov	r3, r1
 800340e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003410:	f7ff f9e0 	bl	80027d4 <HAL_GetTick>
 8003414:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b20      	cmp	r3, #32
 8003424:	f040 8111 	bne.w	800364a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	2319      	movs	r3, #25
 800342e:	2201      	movs	r2, #1
 8003430:	4988      	ldr	r1, [pc, #544]	; (8003654 <HAL_I2C_IsDeviceReady+0x254>)
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 f994 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800343e:	2302      	movs	r3, #2
 8003440:	e104      	b.n	800364c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_I2C_IsDeviceReady+0x50>
 800344c:	2302      	movs	r3, #2
 800344e:	e0fd      	b.n	800364c <HAL_I2C_IsDeviceReady+0x24c>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b01      	cmp	r3, #1
 8003464:	d007      	beq.n	8003476 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f042 0201 	orr.w	r2, r2, #1
 8003474:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003484:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2224      	movs	r2, #36	; 0x24
 800348a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4a70      	ldr	r2, [pc, #448]	; (8003658 <HAL_I2C_IsDeviceReady+0x258>)
 8003498:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034a8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 f952 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00d      	beq.n	80034de <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034d0:	d103      	bne.n	80034da <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e0b6      	b.n	800364c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034de:	897b      	ldrh	r3, [r7, #10]
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	461a      	mov	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034ec:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80034ee:	f7ff f971 	bl	80027d4 <HAL_GetTick>
 80034f2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b02      	cmp	r3, #2
 8003500:	bf0c      	ite	eq
 8003502:	2301      	moveq	r3, #1
 8003504:	2300      	movne	r3, #0
 8003506:	b2db      	uxtb	r3, r3
 8003508:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003518:	bf0c      	ite	eq
 800351a:	2301      	moveq	r3, #1
 800351c:	2300      	movne	r3, #0
 800351e:	b2db      	uxtb	r3, r3
 8003520:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003522:	e025      	b.n	8003570 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003524:	f7ff f956 	bl	80027d4 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d302      	bcc.n	800353a <HAL_I2C_IsDeviceReady+0x13a>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d103      	bne.n	8003542 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	22a0      	movs	r2, #160	; 0xa0
 800353e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b02      	cmp	r3, #2
 800354e:	bf0c      	ite	eq
 8003550:	2301      	moveq	r3, #1
 8003552:	2300      	movne	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003566:	bf0c      	ite	eq
 8003568:	2301      	moveq	r3, #1
 800356a:	2300      	movne	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2ba0      	cmp	r3, #160	; 0xa0
 800357a:	d005      	beq.n	8003588 <HAL_I2C_IsDeviceReady+0x188>
 800357c:	7dfb      	ldrb	r3, [r7, #23]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d102      	bne.n	8003588 <HAL_I2C_IsDeviceReady+0x188>
 8003582:	7dbb      	ldrb	r3, [r7, #22]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0cd      	beq.n	8003524 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b02      	cmp	r3, #2
 800359c:	d129      	bne.n	80035f2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ac:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ae:	2300      	movs	r3, #0
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	613b      	str	r3, [r7, #16]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	613b      	str	r3, [r7, #16]
 80035c2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	2319      	movs	r3, #25
 80035ca:	2201      	movs	r2, #1
 80035cc:	4921      	ldr	r1, [pc, #132]	; (8003654 <HAL_I2C_IsDeviceReady+0x254>)
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 f8c6 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e036      	b.n	800364c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2220      	movs	r2, #32
 80035e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80035ee:	2300      	movs	r3, #0
 80035f0:	e02c      	b.n	800364c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003600:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800360a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	2319      	movs	r3, #25
 8003612:	2201      	movs	r2, #1
 8003614:	490f      	ldr	r1, [pc, #60]	; (8003654 <HAL_I2C_IsDeviceReady+0x254>)
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 f8a2 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e012      	b.n	800364c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	3301      	adds	r3, #1
 800362a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	429a      	cmp	r2, r3
 8003632:	f4ff af32 	bcc.w	800349a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2220      	movs	r2, #32
 800363a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800364a:	2302      	movs	r3, #2
  }
}
 800364c:	4618      	mov	r0, r3
 800364e:	3720      	adds	r7, #32
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	00100002 	.word	0x00100002
 8003658:	ffff0000 	.word	0xffff0000

0800365c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af02      	add	r7, sp, #8
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	607a      	str	r2, [r7, #4]
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	460b      	mov	r3, r1
 800366a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2b08      	cmp	r3, #8
 8003676:	d006      	beq.n	8003686 <I2C_MasterRequestWrite+0x2a>
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d003      	beq.n	8003686 <I2C_MasterRequestWrite+0x2a>
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003684:	d108      	bne.n	8003698 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	e00b      	b.n	80036b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	2b12      	cmp	r3, #18
 800369e:	d107      	bne.n	80036b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 f84f 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00d      	beq.n	80036e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036d6:	d103      	bne.n	80036e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e035      	b.n	8003750 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036ec:	d108      	bne.n	8003700 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036ee:	897b      	ldrh	r3, [r7, #10]
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	461a      	mov	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036fc:	611a      	str	r2, [r3, #16]
 80036fe:	e01b      	b.n	8003738 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003700:	897b      	ldrh	r3, [r7, #10]
 8003702:	11db      	asrs	r3, r3, #7
 8003704:	b2db      	uxtb	r3, r3
 8003706:	f003 0306 	and.w	r3, r3, #6
 800370a:	b2db      	uxtb	r3, r3
 800370c:	f063 030f 	orn	r3, r3, #15
 8003710:	b2da      	uxtb	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	490e      	ldr	r1, [pc, #56]	; (8003758 <I2C_MasterRequestWrite+0xfc>)
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 f875 	bl	800380e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e010      	b.n	8003750 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800372e:	897b      	ldrh	r3, [r7, #10]
 8003730:	b2da      	uxtb	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	4907      	ldr	r1, [pc, #28]	; (800375c <I2C_MasterRequestWrite+0x100>)
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f865 	bl	800380e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	00010008 	.word	0x00010008
 800375c:	00010002 	.word	0x00010002

08003760 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	603b      	str	r3, [r7, #0]
 800376c:	4613      	mov	r3, r2
 800376e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003770:	e025      	b.n	80037be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d021      	beq.n	80037be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377a:	f7ff f82b 	bl	80027d4 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d302      	bcc.n	8003790 <I2C_WaitOnFlagUntilTimeout+0x30>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d116      	bne.n	80037be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2220      	movs	r2, #32
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	f043 0220 	orr.w	r2, r3, #32
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e023      	b.n	8003806 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	0c1b      	lsrs	r3, r3, #16
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d10d      	bne.n	80037e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	43da      	mvns	r2, r3
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	4013      	ands	r3, r2
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	bf0c      	ite	eq
 80037da:	2301      	moveq	r3, #1
 80037dc:	2300      	movne	r3, #0
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	461a      	mov	r2, r3
 80037e2:	e00c      	b.n	80037fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	43da      	mvns	r2, r3
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	4013      	ands	r3, r2
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	bf0c      	ite	eq
 80037f6:	2301      	moveq	r3, #1
 80037f8:	2300      	movne	r3, #0
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	461a      	mov	r2, r3
 80037fe:	79fb      	ldrb	r3, [r7, #7]
 8003800:	429a      	cmp	r2, r3
 8003802:	d0b6      	beq.n	8003772 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b084      	sub	sp, #16
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
 800381a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800381c:	e051      	b.n	80038c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800382c:	d123      	bne.n	8003876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800383c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003846:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f043 0204 	orr.w	r2, r3, #4
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e046      	b.n	8003904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387c:	d021      	beq.n	80038c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800387e:	f7fe ffa9 	bl	80027d4 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	429a      	cmp	r2, r3
 800388c:	d302      	bcc.n	8003894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d116      	bne.n	80038c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	f043 0220 	orr.w	r2, r3, #32
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e020      	b.n	8003904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	0c1b      	lsrs	r3, r3, #16
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d10c      	bne.n	80038e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	43da      	mvns	r2, r3
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4013      	ands	r3, r2
 80038d8:	b29b      	uxth	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	bf14      	ite	ne
 80038de:	2301      	movne	r3, #1
 80038e0:	2300      	moveq	r3, #0
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	e00b      	b.n	80038fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	43da      	mvns	r2, r3
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	4013      	ands	r3, r2
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	bf14      	ite	ne
 80038f8:	2301      	movne	r3, #1
 80038fa:	2300      	moveq	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d18d      	bne.n	800381e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003918:	e02d      	b.n	8003976 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 f878 	bl	8003a10 <I2C_IsAcknowledgeFailed>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e02d      	b.n	8003986 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003930:	d021      	beq.n	8003976 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003932:	f7fe ff4f 	bl	80027d4 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	429a      	cmp	r2, r3
 8003940:	d302      	bcc.n	8003948 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d116      	bne.n	8003976 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2220      	movs	r2, #32
 8003952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	f043 0220 	orr.w	r2, r3, #32
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e007      	b.n	8003986 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003980:	2b80      	cmp	r3, #128	; 0x80
 8003982:	d1ca      	bne.n	800391a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b084      	sub	sp, #16
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800399a:	e02d      	b.n	80039f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 f837 	bl	8003a10 <I2C_IsAcknowledgeFailed>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e02d      	b.n	8003a08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b2:	d021      	beq.n	80039f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b4:	f7fe ff0e 	bl	80027d4 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d302      	bcc.n	80039ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d116      	bne.n	80039f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2220      	movs	r2, #32
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e4:	f043 0220 	orr.w	r2, r3, #32
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e007      	b.n	8003a08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	f003 0304 	and.w	r3, r3, #4
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d1ca      	bne.n	800399c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a26:	d11b      	bne.n	8003a60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4c:	f043 0204 	orr.w	r2, r3, #4
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
	...

08003a70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e267      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d075      	beq.n	8003b7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a8e:	4b88      	ldr	r3, [pc, #544]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 030c 	and.w	r3, r3, #12
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d00c      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a9a:	4b85      	ldr	r3, [pc, #532]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d112      	bne.n	8003acc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aa6:	4b82      	ldr	r3, [pc, #520]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ab2:	d10b      	bne.n	8003acc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab4:	4b7e      	ldr	r3, [pc, #504]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d05b      	beq.n	8003b78 <HAL_RCC_OscConfig+0x108>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d157      	bne.n	8003b78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e242      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad4:	d106      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x74>
 8003ad6:	4b76      	ldr	r3, [pc, #472]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a75      	ldr	r2, [pc, #468]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	e01d      	b.n	8003b20 <HAL_RCC_OscConfig+0xb0>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aec:	d10c      	bne.n	8003b08 <HAL_RCC_OscConfig+0x98>
 8003aee:	4b70      	ldr	r3, [pc, #448]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a6f      	ldr	r2, [pc, #444]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	4b6d      	ldr	r3, [pc, #436]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a6c      	ldr	r2, [pc, #432]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	e00b      	b.n	8003b20 <HAL_RCC_OscConfig+0xb0>
 8003b08:	4b69      	ldr	r3, [pc, #420]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a68      	ldr	r2, [pc, #416]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b12:	6013      	str	r3, [r2, #0]
 8003b14:	4b66      	ldr	r3, [pc, #408]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a65      	ldr	r2, [pc, #404]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d013      	beq.n	8003b50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b28:	f7fe fe54 	bl	80027d4 <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b30:	f7fe fe50 	bl	80027d4 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b64      	cmp	r3, #100	; 0x64
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e207      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b42:	4b5b      	ldr	r3, [pc, #364]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f0      	beq.n	8003b30 <HAL_RCC_OscConfig+0xc0>
 8003b4e:	e014      	b.n	8003b7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b50:	f7fe fe40 	bl	80027d4 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b58:	f7fe fe3c 	bl	80027d4 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	; 0x64
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e1f3      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6a:	4b51      	ldr	r3, [pc, #324]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f0      	bne.n	8003b58 <HAL_RCC_OscConfig+0xe8>
 8003b76:	e000      	b.n	8003b7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d063      	beq.n	8003c4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b86:	4b4a      	ldr	r3, [pc, #296]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00b      	beq.n	8003baa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b92:	4b47      	ldr	r3, [pc, #284]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b9a:	2b08      	cmp	r3, #8
 8003b9c:	d11c      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b9e:	4b44      	ldr	r3, [pc, #272]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d116      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003baa:	4b41      	ldr	r3, [pc, #260]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d005      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x152>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d001      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e1c7      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc2:	4b3b      	ldr	r3, [pc, #236]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	4937      	ldr	r1, [pc, #220]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bd6:	e03a      	b.n	8003c4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d020      	beq.n	8003c22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003be0:	4b34      	ldr	r3, [pc, #208]	; (8003cb4 <HAL_RCC_OscConfig+0x244>)
 8003be2:	2201      	movs	r2, #1
 8003be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be6:	f7fe fdf5 	bl	80027d4 <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bee:	f7fe fdf1 	bl	80027d4 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e1a8      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c00:	4b2b      	ldr	r3, [pc, #172]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0f0      	beq.n	8003bee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c0c:	4b28      	ldr	r3, [pc, #160]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	4925      	ldr	r1, [pc, #148]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	600b      	str	r3, [r1, #0]
 8003c20:	e015      	b.n	8003c4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c22:	4b24      	ldr	r3, [pc, #144]	; (8003cb4 <HAL_RCC_OscConfig+0x244>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c28:	f7fe fdd4 	bl	80027d4 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c30:	f7fe fdd0 	bl	80027d4 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e187      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c42:	4b1b      	ldr	r3, [pc, #108]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f0      	bne.n	8003c30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d036      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d016      	beq.n	8003c90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c62:	4b15      	ldr	r3, [pc, #84]	; (8003cb8 <HAL_RCC_OscConfig+0x248>)
 8003c64:	2201      	movs	r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c68:	f7fe fdb4 	bl	80027d4 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c70:	f7fe fdb0 	bl	80027d4 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e167      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c82:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0f0      	beq.n	8003c70 <HAL_RCC_OscConfig+0x200>
 8003c8e:	e01b      	b.n	8003cc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c90:	4b09      	ldr	r3, [pc, #36]	; (8003cb8 <HAL_RCC_OscConfig+0x248>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c96:	f7fe fd9d 	bl	80027d4 <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c9c:	e00e      	b.n	8003cbc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c9e:	f7fe fd99 	bl	80027d4 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d907      	bls.n	8003cbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e150      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	42470000 	.word	0x42470000
 8003cb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cbc:	4b88      	ldr	r3, [pc, #544]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1ea      	bne.n	8003c9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 8097 	beq.w	8003e04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cda:	4b81      	ldr	r3, [pc, #516]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10f      	bne.n	8003d06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	4b7d      	ldr	r3, [pc, #500]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	4a7c      	ldr	r2, [pc, #496]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cf6:	4b7a      	ldr	r3, [pc, #488]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfe:	60bb      	str	r3, [r7, #8]
 8003d00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d02:	2301      	movs	r3, #1
 8003d04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d06:	4b77      	ldr	r3, [pc, #476]	; (8003ee4 <HAL_RCC_OscConfig+0x474>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d118      	bne.n	8003d44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d12:	4b74      	ldr	r3, [pc, #464]	; (8003ee4 <HAL_RCC_OscConfig+0x474>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a73      	ldr	r2, [pc, #460]	; (8003ee4 <HAL_RCC_OscConfig+0x474>)
 8003d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d1e:	f7fe fd59 	bl	80027d4 <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d24:	e008      	b.n	8003d38 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d26:	f7fe fd55 	bl	80027d4 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e10c      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d38:	4b6a      	ldr	r3, [pc, #424]	; (8003ee4 <HAL_RCC_OscConfig+0x474>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0f0      	beq.n	8003d26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d106      	bne.n	8003d5a <HAL_RCC_OscConfig+0x2ea>
 8003d4c:	4b64      	ldr	r3, [pc, #400]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d50:	4a63      	ldr	r2, [pc, #396]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003d52:	f043 0301 	orr.w	r3, r3, #1
 8003d56:	6713      	str	r3, [r2, #112]	; 0x70
 8003d58:	e01c      	b.n	8003d94 <HAL_RCC_OscConfig+0x324>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2b05      	cmp	r3, #5
 8003d60:	d10c      	bne.n	8003d7c <HAL_RCC_OscConfig+0x30c>
 8003d62:	4b5f      	ldr	r3, [pc, #380]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d66:	4a5e      	ldr	r2, [pc, #376]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003d68:	f043 0304 	orr.w	r3, r3, #4
 8003d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d6e:	4b5c      	ldr	r3, [pc, #368]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d72:	4a5b      	ldr	r2, [pc, #364]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003d74:	f043 0301 	orr.w	r3, r3, #1
 8003d78:	6713      	str	r3, [r2, #112]	; 0x70
 8003d7a:	e00b      	b.n	8003d94 <HAL_RCC_OscConfig+0x324>
 8003d7c:	4b58      	ldr	r3, [pc, #352]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d80:	4a57      	ldr	r2, [pc, #348]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003d82:	f023 0301 	bic.w	r3, r3, #1
 8003d86:	6713      	str	r3, [r2, #112]	; 0x70
 8003d88:	4b55      	ldr	r3, [pc, #340]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8c:	4a54      	ldr	r2, [pc, #336]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003d8e:	f023 0304 	bic.w	r3, r3, #4
 8003d92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d015      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9c:	f7fe fd1a 	bl	80027d4 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da2:	e00a      	b.n	8003dba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003da4:	f7fe fd16 	bl	80027d4 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e0cb      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dba:	4b49      	ldr	r3, [pc, #292]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0ee      	beq.n	8003da4 <HAL_RCC_OscConfig+0x334>
 8003dc6:	e014      	b.n	8003df2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc8:	f7fe fd04 	bl	80027d4 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dce:	e00a      	b.n	8003de6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dd0:	f7fe fd00 	bl	80027d4 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e0b5      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de6:	4b3e      	ldr	r3, [pc, #248]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1ee      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003df2:	7dfb      	ldrb	r3, [r7, #23]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d105      	bne.n	8003e04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df8:	4b39      	ldr	r3, [pc, #228]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfc:	4a38      	ldr	r2, [pc, #224]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 80a1 	beq.w	8003f50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e0e:	4b34      	ldr	r3, [pc, #208]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 030c 	and.w	r3, r3, #12
 8003e16:	2b08      	cmp	r3, #8
 8003e18:	d05c      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d141      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e22:	4b31      	ldr	r3, [pc, #196]	; (8003ee8 <HAL_RCC_OscConfig+0x478>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e28:	f7fe fcd4 	bl	80027d4 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e30:	f7fe fcd0 	bl	80027d4 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e087      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e42:	4b27      	ldr	r3, [pc, #156]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1f0      	bne.n	8003e30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69da      	ldr	r2, [r3, #28]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	019b      	lsls	r3, r3, #6
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e64:	085b      	lsrs	r3, r3, #1
 8003e66:	3b01      	subs	r3, #1
 8003e68:	041b      	lsls	r3, r3, #16
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e70:	061b      	lsls	r3, r3, #24
 8003e72:	491b      	ldr	r1, [pc, #108]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e78:	4b1b      	ldr	r3, [pc, #108]	; (8003ee8 <HAL_RCC_OscConfig+0x478>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7e:	f7fe fca9 	bl	80027d4 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e86:	f7fe fca5 	bl	80027d4 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e05c      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e98:	4b11      	ldr	r3, [pc, #68]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f0      	beq.n	8003e86 <HAL_RCC_OscConfig+0x416>
 8003ea4:	e054      	b.n	8003f50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea6:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <HAL_RCC_OscConfig+0x478>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eac:	f7fe fc92 	bl	80027d4 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eb4:	f7fe fc8e 	bl	80027d4 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e045      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ec6:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1f0      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x444>
 8003ed2:	e03d      	b.n	8003f50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d107      	bne.n	8003eec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e038      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	40007000 	.word	0x40007000
 8003ee8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003eec:	4b1b      	ldr	r3, [pc, #108]	; (8003f5c <HAL_RCC_OscConfig+0x4ec>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d028      	beq.n	8003f4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d121      	bne.n	8003f4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d11a      	bne.n	8003f4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d111      	bne.n	8003f4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f32:	085b      	lsrs	r3, r3, #1
 8003f34:	3b01      	subs	r3, #1
 8003f36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d107      	bne.n	8003f4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d001      	beq.n	8003f50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e000      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40023800 	.word	0x40023800

08003f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e0cc      	b.n	800410e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f74:	4b68      	ldr	r3, [pc, #416]	; (8004118 <HAL_RCC_ClockConfig+0x1b8>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d90c      	bls.n	8003f9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f82:	4b65      	ldr	r3, [pc, #404]	; (8004118 <HAL_RCC_ClockConfig+0x1b8>)
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8a:	4b63      	ldr	r3, [pc, #396]	; (8004118 <HAL_RCC_ClockConfig+0x1b8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d001      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0b8      	b.n	800410e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d020      	beq.n	8003fea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d005      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fb4:	4b59      	ldr	r3, [pc, #356]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	4a58      	ldr	r2, [pc, #352]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8003fba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0308 	and.w	r3, r3, #8
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fcc:	4b53      	ldr	r3, [pc, #332]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	4a52      	ldr	r2, [pc, #328]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fd8:	4b50      	ldr	r3, [pc, #320]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	494d      	ldr	r1, [pc, #308]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d044      	beq.n	8004080 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d107      	bne.n	800400e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ffe:	4b47      	ldr	r3, [pc, #284]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d119      	bne.n	800403e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e07f      	b.n	800410e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b02      	cmp	r3, #2
 8004014:	d003      	beq.n	800401e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800401a:	2b03      	cmp	r3, #3
 800401c:	d107      	bne.n	800402e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800401e:	4b3f      	ldr	r3, [pc, #252]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d109      	bne.n	800403e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e06f      	b.n	800410e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800402e:	4b3b      	ldr	r3, [pc, #236]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e067      	b.n	800410e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800403e:	4b37      	ldr	r3, [pc, #220]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f023 0203 	bic.w	r2, r3, #3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	4934      	ldr	r1, [pc, #208]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 800404c:	4313      	orrs	r3, r2
 800404e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004050:	f7fe fbc0 	bl	80027d4 <HAL_GetTick>
 8004054:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004056:	e00a      	b.n	800406e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004058:	f7fe fbbc 	bl	80027d4 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	f241 3288 	movw	r2, #5000	; 0x1388
 8004066:	4293      	cmp	r3, r2
 8004068:	d901      	bls.n	800406e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e04f      	b.n	800410e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406e:	4b2b      	ldr	r3, [pc, #172]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 020c 	and.w	r2, r3, #12
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	429a      	cmp	r2, r3
 800407e:	d1eb      	bne.n	8004058 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004080:	4b25      	ldr	r3, [pc, #148]	; (8004118 <HAL_RCC_ClockConfig+0x1b8>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	429a      	cmp	r2, r3
 800408c:	d20c      	bcs.n	80040a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408e:	4b22      	ldr	r3, [pc, #136]	; (8004118 <HAL_RCC_ClockConfig+0x1b8>)
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004096:	4b20      	ldr	r3, [pc, #128]	; (8004118 <HAL_RCC_ClockConfig+0x1b8>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d001      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e032      	b.n	800410e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d008      	beq.n	80040c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040b4:	4b19      	ldr	r3, [pc, #100]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	4916      	ldr	r1, [pc, #88]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d009      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040d2:	4b12      	ldr	r3, [pc, #72]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	490e      	ldr	r1, [pc, #56]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040e6:	f000 f821 	bl	800412c <HAL_RCC_GetSysClockFreq>
 80040ea:	4602      	mov	r2, r0
 80040ec:	4b0b      	ldr	r3, [pc, #44]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	091b      	lsrs	r3, r3, #4
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	490a      	ldr	r1, [pc, #40]	; (8004120 <HAL_RCC_ClockConfig+0x1c0>)
 80040f8:	5ccb      	ldrb	r3, [r1, r3]
 80040fa:	fa22 f303 	lsr.w	r3, r2, r3
 80040fe:	4a09      	ldr	r2, [pc, #36]	; (8004124 <HAL_RCC_ClockConfig+0x1c4>)
 8004100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004102:	4b09      	ldr	r3, [pc, #36]	; (8004128 <HAL_RCC_ClockConfig+0x1c8>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f7fe fb20 	bl	800274c <HAL_InitTick>

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40023c00 	.word	0x40023c00
 800411c:	40023800 	.word	0x40023800
 8004120:	08006170 	.word	0x08006170
 8004124:	20000060 	.word	0x20000060
 8004128:	20000064 	.word	0x20000064

0800412c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800412c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004130:	b090      	sub	sp, #64	; 0x40
 8004132:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	637b      	str	r3, [r7, #52]	; 0x34
 8004138:	2300      	movs	r3, #0
 800413a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800413c:	2300      	movs	r3, #0
 800413e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004144:	4b59      	ldr	r3, [pc, #356]	; (80042ac <HAL_RCC_GetSysClockFreq+0x180>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f003 030c 	and.w	r3, r3, #12
 800414c:	2b08      	cmp	r3, #8
 800414e:	d00d      	beq.n	800416c <HAL_RCC_GetSysClockFreq+0x40>
 8004150:	2b08      	cmp	r3, #8
 8004152:	f200 80a1 	bhi.w	8004298 <HAL_RCC_GetSysClockFreq+0x16c>
 8004156:	2b00      	cmp	r3, #0
 8004158:	d002      	beq.n	8004160 <HAL_RCC_GetSysClockFreq+0x34>
 800415a:	2b04      	cmp	r3, #4
 800415c:	d003      	beq.n	8004166 <HAL_RCC_GetSysClockFreq+0x3a>
 800415e:	e09b      	b.n	8004298 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004160:	4b53      	ldr	r3, [pc, #332]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004162:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004164:	e09b      	b.n	800429e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004166:	4b53      	ldr	r3, [pc, #332]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004168:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800416a:	e098      	b.n	800429e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800416c:	4b4f      	ldr	r3, [pc, #316]	; (80042ac <HAL_RCC_GetSysClockFreq+0x180>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004174:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004176:	4b4d      	ldr	r3, [pc, #308]	; (80042ac <HAL_RCC_GetSysClockFreq+0x180>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d028      	beq.n	80041d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004182:	4b4a      	ldr	r3, [pc, #296]	; (80042ac <HAL_RCC_GetSysClockFreq+0x180>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	099b      	lsrs	r3, r3, #6
 8004188:	2200      	movs	r2, #0
 800418a:	623b      	str	r3, [r7, #32]
 800418c:	627a      	str	r2, [r7, #36]	; 0x24
 800418e:	6a3b      	ldr	r3, [r7, #32]
 8004190:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004194:	2100      	movs	r1, #0
 8004196:	4b47      	ldr	r3, [pc, #284]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004198:	fb03 f201 	mul.w	r2, r3, r1
 800419c:	2300      	movs	r3, #0
 800419e:	fb00 f303 	mul.w	r3, r0, r3
 80041a2:	4413      	add	r3, r2
 80041a4:	4a43      	ldr	r2, [pc, #268]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80041a6:	fba0 1202 	umull	r1, r2, r0, r2
 80041aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041ac:	460a      	mov	r2, r1
 80041ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80041b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041b2:	4413      	add	r3, r2
 80041b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b8:	2200      	movs	r2, #0
 80041ba:	61bb      	str	r3, [r7, #24]
 80041bc:	61fa      	str	r2, [r7, #28]
 80041be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80041c6:	f7fc f807 	bl	80001d8 <__aeabi_uldivmod>
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	4613      	mov	r3, r2
 80041d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041d2:	e053      	b.n	800427c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041d4:	4b35      	ldr	r3, [pc, #212]	; (80042ac <HAL_RCC_GetSysClockFreq+0x180>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	099b      	lsrs	r3, r3, #6
 80041da:	2200      	movs	r2, #0
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	617a      	str	r2, [r7, #20]
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80041e6:	f04f 0b00 	mov.w	fp, #0
 80041ea:	4652      	mov	r2, sl
 80041ec:	465b      	mov	r3, fp
 80041ee:	f04f 0000 	mov.w	r0, #0
 80041f2:	f04f 0100 	mov.w	r1, #0
 80041f6:	0159      	lsls	r1, r3, #5
 80041f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041fc:	0150      	lsls	r0, r2, #5
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	ebb2 080a 	subs.w	r8, r2, sl
 8004206:	eb63 090b 	sbc.w	r9, r3, fp
 800420a:	f04f 0200 	mov.w	r2, #0
 800420e:	f04f 0300 	mov.w	r3, #0
 8004212:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004216:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800421a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800421e:	ebb2 0408 	subs.w	r4, r2, r8
 8004222:	eb63 0509 	sbc.w	r5, r3, r9
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	f04f 0300 	mov.w	r3, #0
 800422e:	00eb      	lsls	r3, r5, #3
 8004230:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004234:	00e2      	lsls	r2, r4, #3
 8004236:	4614      	mov	r4, r2
 8004238:	461d      	mov	r5, r3
 800423a:	eb14 030a 	adds.w	r3, r4, sl
 800423e:	603b      	str	r3, [r7, #0]
 8004240:	eb45 030b 	adc.w	r3, r5, fp
 8004244:	607b      	str	r3, [r7, #4]
 8004246:	f04f 0200 	mov.w	r2, #0
 800424a:	f04f 0300 	mov.w	r3, #0
 800424e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004252:	4629      	mov	r1, r5
 8004254:	028b      	lsls	r3, r1, #10
 8004256:	4621      	mov	r1, r4
 8004258:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800425c:	4621      	mov	r1, r4
 800425e:	028a      	lsls	r2, r1, #10
 8004260:	4610      	mov	r0, r2
 8004262:	4619      	mov	r1, r3
 8004264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004266:	2200      	movs	r2, #0
 8004268:	60bb      	str	r3, [r7, #8]
 800426a:	60fa      	str	r2, [r7, #12]
 800426c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004270:	f7fb ffb2 	bl	80001d8 <__aeabi_uldivmod>
 8004274:	4602      	mov	r2, r0
 8004276:	460b      	mov	r3, r1
 8004278:	4613      	mov	r3, r2
 800427a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800427c:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <HAL_RCC_GetSysClockFreq+0x180>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	0c1b      	lsrs	r3, r3, #16
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	3301      	adds	r3, #1
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800428c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004290:	fbb2 f3f3 	udiv	r3, r2, r3
 8004294:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004296:	e002      	b.n	800429e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004298:	4b05      	ldr	r3, [pc, #20]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800429a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800429c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800429e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3740      	adds	r7, #64	; 0x40
 80042a4:	46bd      	mov	sp, r7
 80042a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042aa:	bf00      	nop
 80042ac:	40023800 	.word	0x40023800
 80042b0:	00f42400 	.word	0x00f42400
 80042b4:	018cba80 	.word	0x018cba80

080042b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042bc:	4b03      	ldr	r3, [pc, #12]	; (80042cc <HAL_RCC_GetHCLKFreq+0x14>)
 80042be:	681b      	ldr	r3, [r3, #0]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	20000060 	.word	0x20000060

080042d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042d4:	f7ff fff0 	bl	80042b8 <HAL_RCC_GetHCLKFreq>
 80042d8:	4602      	mov	r2, r0
 80042da:	4b05      	ldr	r3, [pc, #20]	; (80042f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	0a9b      	lsrs	r3, r3, #10
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	4903      	ldr	r1, [pc, #12]	; (80042f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042e6:	5ccb      	ldrb	r3, [r1, r3]
 80042e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	40023800 	.word	0x40023800
 80042f4:	08006180 	.word	0x08006180

080042f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042fc:	f7ff ffdc 	bl	80042b8 <HAL_RCC_GetHCLKFreq>
 8004300:	4602      	mov	r2, r0
 8004302:	4b05      	ldr	r3, [pc, #20]	; (8004318 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	0b5b      	lsrs	r3, r3, #13
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	4903      	ldr	r1, [pc, #12]	; (800431c <HAL_RCC_GetPCLK2Freq+0x24>)
 800430e:	5ccb      	ldrb	r3, [r1, r3]
 8004310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004314:	4618      	mov	r0, r3
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40023800 	.word	0x40023800
 800431c:	08006180 	.word	0x08006180

08004320 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e07b      	b.n	800442a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004336:	2b00      	cmp	r3, #0
 8004338:	d108      	bne.n	800434c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004342:	d009      	beq.n	8004358 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	61da      	str	r2, [r3, #28]
 800434a:	e005      	b.n	8004358 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fe f85e 	bl	8002434 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800438e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043a0:	431a      	orrs	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	431a      	orrs	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043c8:	431a      	orrs	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043dc:	ea42 0103 	orr.w	r1, r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	0c1b      	lsrs	r3, r3, #16
 80043f6:	f003 0104 	and.w	r1, r3, #4
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	f003 0210 	and.w	r2, r3, #16
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69da      	ldr	r2, [r3, #28]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004418:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b088      	sub	sp, #32
 8004436:	af00      	add	r7, sp, #0
 8004438:	60f8      	str	r0, [r7, #12]
 800443a:	60b9      	str	r1, [r7, #8]
 800443c:	603b      	str	r3, [r7, #0]
 800443e:	4613      	mov	r3, r2
 8004440:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800444c:	2b01      	cmp	r3, #1
 800444e:	d101      	bne.n	8004454 <HAL_SPI_Transmit+0x22>
 8004450:	2302      	movs	r3, #2
 8004452:	e126      	b.n	80046a2 <HAL_SPI_Transmit+0x270>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800445c:	f7fe f9ba 	bl	80027d4 <HAL_GetTick>
 8004460:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004462:	88fb      	ldrh	r3, [r7, #6]
 8004464:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b01      	cmp	r3, #1
 8004470:	d002      	beq.n	8004478 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004472:	2302      	movs	r3, #2
 8004474:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004476:	e10b      	b.n	8004690 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <HAL_SPI_Transmit+0x52>
 800447e:	88fb      	ldrh	r3, [r7, #6]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d102      	bne.n	800448a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004488:	e102      	b.n	8004690 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2203      	movs	r2, #3
 800448e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	88fa      	ldrh	r2, [r7, #6]
 80044a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	88fa      	ldrh	r2, [r7, #6]
 80044a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044d0:	d10f      	bne.n	80044f2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fc:	2b40      	cmp	r3, #64	; 0x40
 80044fe:	d007      	beq.n	8004510 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800450e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004518:	d14b      	bne.n	80045b2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <HAL_SPI_Transmit+0xf6>
 8004522:	8afb      	ldrh	r3, [r7, #22]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d13e      	bne.n	80045a6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452c:	881a      	ldrh	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004538:	1c9a      	adds	r2, r3, #2
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004542:	b29b      	uxth	r3, r3
 8004544:	3b01      	subs	r3, #1
 8004546:	b29a      	uxth	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800454c:	e02b      	b.n	80045a6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b02      	cmp	r3, #2
 800455a:	d112      	bne.n	8004582 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	881a      	ldrh	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456c:	1c9a      	adds	r2, r3, #2
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004576:	b29b      	uxth	r3, r3
 8004578:	3b01      	subs	r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004580:	e011      	b.n	80045a6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004582:	f7fe f927 	bl	80027d4 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d803      	bhi.n	800459a <HAL_SPI_Transmit+0x168>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004598:	d102      	bne.n	80045a0 <HAL_SPI_Transmit+0x16e>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d102      	bne.n	80045a6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80045a4:	e074      	b.n	8004690 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1ce      	bne.n	800454e <HAL_SPI_Transmit+0x11c>
 80045b0:	e04c      	b.n	800464c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <HAL_SPI_Transmit+0x18e>
 80045ba:	8afb      	ldrh	r3, [r7, #22]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d140      	bne.n	8004642 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	330c      	adds	r3, #12
 80045ca:	7812      	ldrb	r2, [r2, #0]
 80045cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045dc:	b29b      	uxth	r3, r3
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80045e6:	e02c      	b.n	8004642 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d113      	bne.n	800461e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	330c      	adds	r3, #12
 8004600:	7812      	ldrb	r2, [r2, #0]
 8004602:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004612:	b29b      	uxth	r3, r3
 8004614:	3b01      	subs	r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	86da      	strh	r2, [r3, #54]	; 0x36
 800461c:	e011      	b.n	8004642 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800461e:	f7fe f8d9 	bl	80027d4 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	429a      	cmp	r2, r3
 800462c:	d803      	bhi.n	8004636 <HAL_SPI_Transmit+0x204>
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004634:	d102      	bne.n	800463c <HAL_SPI_Transmit+0x20a>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d102      	bne.n	8004642 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004640:	e026      	b.n	8004690 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004646:	b29b      	uxth	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1cd      	bne.n	80045e8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	6839      	ldr	r1, [r7, #0]
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 f8c1 	bl	80047d8 <SPI_EndRxTxTransaction>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2220      	movs	r2, #32
 8004660:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10a      	bne.n	8004680 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800466a:	2300      	movs	r3, #0
 800466c:	613b      	str	r3, [r7, #16]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	613b      	str	r3, [r7, #16]
 800467e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004684:	2b00      	cmp	r3, #0
 8004686:	d002      	beq.n	800468e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	77fb      	strb	r3, [r7, #31]
 800468c:	e000      	b.n	8004690 <HAL_SPI_Transmit+0x25e>
  }

error:
 800468e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80046a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3720      	adds	r7, #32
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046b8:	b2db      	uxtb	r3, r3
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
	...

080046c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	603b      	str	r3, [r7, #0]
 80046d4:	4613      	mov	r3, r2
 80046d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046d8:	f7fe f87c 	bl	80027d4 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e0:	1a9b      	subs	r3, r3, r2
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	4413      	add	r3, r2
 80046e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046e8:	f7fe f874 	bl	80027d4 <HAL_GetTick>
 80046ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046ee:	4b39      	ldr	r3, [pc, #228]	; (80047d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	015b      	lsls	r3, r3, #5
 80046f4:	0d1b      	lsrs	r3, r3, #20
 80046f6:	69fa      	ldr	r2, [r7, #28]
 80046f8:	fb02 f303 	mul.w	r3, r2, r3
 80046fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046fe:	e054      	b.n	80047aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004706:	d050      	beq.n	80047aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004708:	f7fe f864 	bl	80027d4 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	69fa      	ldr	r2, [r7, #28]
 8004714:	429a      	cmp	r2, r3
 8004716:	d902      	bls.n	800471e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d13d      	bne.n	800479a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800472c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004736:	d111      	bne.n	800475c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004740:	d004      	beq.n	800474c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800474a:	d107      	bne.n	800475c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800475a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004764:	d10f      	bne.n	8004786 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004784:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e017      	b.n	80047ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4013      	ands	r3, r2
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	bf0c      	ite	eq
 80047ba:	2301      	moveq	r3, #1
 80047bc:	2300      	movne	r3, #0
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	461a      	mov	r2, r3
 80047c2:	79fb      	ldrb	r3, [r7, #7]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d19b      	bne.n	8004700 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3720      	adds	r7, #32
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	20000060 	.word	0x20000060

080047d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	af02      	add	r7, sp, #8
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80047e4:	4b1b      	ldr	r3, [pc, #108]	; (8004854 <SPI_EndRxTxTransaction+0x7c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a1b      	ldr	r2, [pc, #108]	; (8004858 <SPI_EndRxTxTransaction+0x80>)
 80047ea:	fba2 2303 	umull	r2, r3, r2, r3
 80047ee:	0d5b      	lsrs	r3, r3, #21
 80047f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047f4:	fb02 f303 	mul.w	r3, r2, r3
 80047f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004802:	d112      	bne.n	800482a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2200      	movs	r2, #0
 800480c:	2180      	movs	r1, #128	; 0x80
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f7ff ff5a 	bl	80046c8 <SPI_WaitFlagStateUntilTimeout>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d016      	beq.n	8004848 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481e:	f043 0220 	orr.w	r2, r3, #32
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e00f      	b.n	800484a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00a      	beq.n	8004846 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	3b01      	subs	r3, #1
 8004834:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004840:	2b80      	cmp	r3, #128	; 0x80
 8004842:	d0f2      	beq.n	800482a <SPI_EndRxTxTransaction+0x52>
 8004844:	e000      	b.n	8004848 <SPI_EndRxTxTransaction+0x70>
        break;
 8004846:	bf00      	nop
  }

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	20000060 	.word	0x20000060
 8004858:	165e9f81 	.word	0x165e9f81

0800485c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e03f      	b.n	80048ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d106      	bne.n	8004888 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7fd fec6 	bl	8002614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2224      	movs	r2, #36	; 0x24
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800489e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 fd7b 	bl	800539c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	691a      	ldr	r2, [r3, #16]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	695a      	ldr	r2, [r3, #20]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2220      	movs	r2, #32
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b08a      	sub	sp, #40	; 0x28
 80048fa:	af02      	add	r7, sp, #8
 80048fc:	60f8      	str	r0, [r7, #12]
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	603b      	str	r3, [r7, #0]
 8004902:	4613      	mov	r3, r2
 8004904:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b20      	cmp	r3, #32
 8004914:	d17c      	bne.n	8004a10 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <HAL_UART_Transmit+0x2c>
 800491c:	88fb      	ldrh	r3, [r7, #6]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e075      	b.n	8004a12 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800492c:	2b01      	cmp	r3, #1
 800492e:	d101      	bne.n	8004934 <HAL_UART_Transmit+0x3e>
 8004930:	2302      	movs	r3, #2
 8004932:	e06e      	b.n	8004a12 <HAL_UART_Transmit+0x11c>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2221      	movs	r2, #33	; 0x21
 8004946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800494a:	f7fd ff43 	bl	80027d4 <HAL_GetTick>
 800494e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	88fa      	ldrh	r2, [r7, #6]
 8004954:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	88fa      	ldrh	r2, [r7, #6]
 800495a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004964:	d108      	bne.n	8004978 <HAL_UART_Transmit+0x82>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d104      	bne.n	8004978 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800496e:	2300      	movs	r3, #0
 8004970:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	61bb      	str	r3, [r7, #24]
 8004976:	e003      	b.n	8004980 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800497c:	2300      	movs	r3, #0
 800497e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004988:	e02a      	b.n	80049e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2200      	movs	r2, #0
 8004992:	2180      	movs	r1, #128	; 0x80
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 faf9 	bl	8004f8c <UART_WaitOnFlagUntilTimeout>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e036      	b.n	8004a12 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10b      	bne.n	80049c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	461a      	mov	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	3302      	adds	r3, #2
 80049be:	61bb      	str	r3, [r7, #24]
 80049c0:	e007      	b.n	80049d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	781a      	ldrb	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	3301      	adds	r3, #1
 80049d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	3b01      	subs	r3, #1
 80049da:	b29a      	uxth	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1cf      	bne.n	800498a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2200      	movs	r2, #0
 80049f2:	2140      	movs	r1, #64	; 0x40
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 fac9 	bl	8004f8c <UART_WaitOnFlagUntilTimeout>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e006      	b.n	8004a12 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	e000      	b.n	8004a12 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a10:	2302      	movs	r3, #2
  }
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3720      	adds	r7, #32
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
	...

08004a1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b0ba      	sub	sp, #232	; 0xe8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004a5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10f      	bne.n	8004a82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a66:	f003 0320 	and.w	r3, r3, #32
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d009      	beq.n	8004a82 <HAL_UART_IRQHandler+0x66>
 8004a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a72:	f003 0320 	and.w	r3, r3, #32
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 fbd3 	bl	8005226 <UART_Receive_IT>
      return;
 8004a80:	e256      	b.n	8004f30 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 80de 	beq.w	8004c48 <HAL_UART_IRQHandler+0x22c>
 8004a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d106      	bne.n	8004aa6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a9c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 80d1 	beq.w	8004c48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00b      	beq.n	8004aca <HAL_UART_IRQHandler+0xae>
 8004ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d005      	beq.n	8004aca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	f043 0201 	orr.w	r2, r3, #1
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00b      	beq.n	8004aee <HAL_UART_IRQHandler+0xd2>
 8004ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	f043 0202 	orr.w	r2, r3, #2
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00b      	beq.n	8004b12 <HAL_UART_IRQHandler+0xf6>
 8004afa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d005      	beq.n	8004b12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	f043 0204 	orr.w	r2, r3, #4
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d011      	beq.n	8004b42 <HAL_UART_IRQHandler+0x126>
 8004b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b22:	f003 0320 	and.w	r3, r3, #32
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d105      	bne.n	8004b36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d005      	beq.n	8004b42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	f043 0208 	orr.w	r2, r3, #8
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 81ed 	beq.w	8004f26 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b50:	f003 0320 	and.w	r3, r3, #32
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d008      	beq.n	8004b6a <HAL_UART_IRQHandler+0x14e>
 8004b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b5c:	f003 0320 	and.w	r3, r3, #32
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d002      	beq.n	8004b6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 fb5e 	bl	8005226 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b74:	2b40      	cmp	r3, #64	; 0x40
 8004b76:	bf0c      	ite	eq
 8004b78:	2301      	moveq	r3, #1
 8004b7a:	2300      	movne	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	f003 0308 	and.w	r3, r3, #8
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d103      	bne.n	8004b96 <HAL_UART_IRQHandler+0x17a>
 8004b8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d04f      	beq.n	8004c36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 fa66 	bl	8005068 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba6:	2b40      	cmp	r3, #64	; 0x40
 8004ba8:	d141      	bne.n	8004c2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	3314      	adds	r3, #20
 8004bb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bb8:	e853 3f00 	ldrex	r3, [r3]
 8004bbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004bc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	3314      	adds	r3, #20
 8004bd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004bd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004bda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004be2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004be6:	e841 2300 	strex	r3, r2, [r1]
 8004bea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004bee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1d9      	bne.n	8004baa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d013      	beq.n	8004c26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c02:	4a7d      	ldr	r2, [pc, #500]	; (8004df8 <HAL_UART_IRQHandler+0x3dc>)
 8004c04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fd ffc5 	bl	8002b9a <HAL_DMA_Abort_IT>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d016      	beq.n	8004c44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c20:	4610      	mov	r0, r2
 8004c22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c24:	e00e      	b.n	8004c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f99a 	bl	8004f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c2c:	e00a      	b.n	8004c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f996 	bl	8004f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c34:	e006      	b.n	8004c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f992 	bl	8004f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004c42:	e170      	b.n	8004f26 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c44:	bf00      	nop
    return;
 8004c46:	e16e      	b.n	8004f26 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	f040 814a 	bne.w	8004ee6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c56:	f003 0310 	and.w	r3, r3, #16
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 8143 	beq.w	8004ee6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c64:	f003 0310 	and.w	r3, r3, #16
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 813c 	beq.w	8004ee6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60bb      	str	r3, [r7, #8]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	60bb      	str	r3, [r7, #8]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	60bb      	str	r3, [r7, #8]
 8004c82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8e:	2b40      	cmp	r3, #64	; 0x40
 8004c90:	f040 80b4 	bne.w	8004dfc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ca0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 8140 	beq.w	8004f2a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	f080 8139 	bcs.w	8004f2a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cbe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cca:	f000 8088 	beq.w	8004dde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	330c      	adds	r3, #12
 8004cd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cdc:	e853 3f00 	ldrex	r3, [r3]
 8004ce0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ce4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	330c      	adds	r3, #12
 8004cf6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004cfa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d0a:	e841 2300 	strex	r3, r2, [r1]
 8004d0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1d9      	bne.n	8004cce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3314      	adds	r3, #20
 8004d20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d24:	e853 3f00 	ldrex	r3, [r3]
 8004d28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d2c:	f023 0301 	bic.w	r3, r3, #1
 8004d30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	3314      	adds	r3, #20
 8004d3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d4a:	e841 2300 	strex	r3, r2, [r1]
 8004d4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1e1      	bne.n	8004d1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3314      	adds	r3, #20
 8004d5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d60:	e853 3f00 	ldrex	r3, [r3]
 8004d64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3314      	adds	r3, #20
 8004d76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d82:	e841 2300 	strex	r3, r2, [r1]
 8004d86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1e3      	bne.n	8004d56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2220      	movs	r2, #32
 8004d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	330c      	adds	r3, #12
 8004da2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da6:	e853 3f00 	ldrex	r3, [r3]
 8004daa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004dac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dae:	f023 0310 	bic.w	r3, r3, #16
 8004db2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	330c      	adds	r3, #12
 8004dbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004dc0:	65ba      	str	r2, [r7, #88]	; 0x58
 8004dc2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004dc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dc8:	e841 2300 	strex	r3, r2, [r1]
 8004dcc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1e3      	bne.n	8004d9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7fd fe6e 	bl	8002aba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	4619      	mov	r1, r3
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f8c0 	bl	8004f74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004df4:	e099      	b.n	8004f2a <HAL_UART_IRQHandler+0x50e>
 8004df6:	bf00      	nop
 8004df8:	0800512f 	.word	0x0800512f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 808b 	beq.w	8004f2e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004e18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 8086 	beq.w	8004f2e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	330c      	adds	r3, #12
 8004e28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2c:	e853 3f00 	ldrex	r3, [r3]
 8004e30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	330c      	adds	r3, #12
 8004e42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004e46:	647a      	str	r2, [r7, #68]	; 0x44
 8004e48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e4e:	e841 2300 	strex	r3, r2, [r1]
 8004e52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1e3      	bne.n	8004e22 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	3314      	adds	r3, #20
 8004e60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	e853 3f00 	ldrex	r3, [r3]
 8004e68:	623b      	str	r3, [r7, #32]
   return(result);
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	f023 0301 	bic.w	r3, r3, #1
 8004e70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3314      	adds	r3, #20
 8004e7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e7e:	633a      	str	r2, [r7, #48]	; 0x30
 8004e80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e86:	e841 2300 	strex	r3, r2, [r1]
 8004e8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1e3      	bne.n	8004e5a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2220      	movs	r2, #32
 8004e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	330c      	adds	r3, #12
 8004ea6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	e853 3f00 	ldrex	r3, [r3]
 8004eae:	60fb      	str	r3, [r7, #12]
   return(result);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0310 	bic.w	r3, r3, #16
 8004eb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	330c      	adds	r3, #12
 8004ec0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ec4:	61fa      	str	r2, [r7, #28]
 8004ec6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec8:	69b9      	ldr	r1, [r7, #24]
 8004eca:	69fa      	ldr	r2, [r7, #28]
 8004ecc:	e841 2300 	strex	r3, r2, [r1]
 8004ed0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1e3      	bne.n	8004ea0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ed8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004edc:	4619      	mov	r1, r3
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f848 	bl	8004f74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ee4:	e023      	b.n	8004f2e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d009      	beq.n	8004f06 <HAL_UART_IRQHandler+0x4ea>
 8004ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f929 	bl	8005156 <UART_Transmit_IT>
    return;
 8004f04:	e014      	b.n	8004f30 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00e      	beq.n	8004f30 <HAL_UART_IRQHandler+0x514>
 8004f12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d008      	beq.n	8004f30 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f969 	bl	80051f6 <UART_EndTransmit_IT>
    return;
 8004f24:	e004      	b.n	8004f30 <HAL_UART_IRQHandler+0x514>
    return;
 8004f26:	bf00      	nop
 8004f28:	e002      	b.n	8004f30 <HAL_UART_IRQHandler+0x514>
      return;
 8004f2a:	bf00      	nop
 8004f2c:	e000      	b.n	8004f30 <HAL_UART_IRQHandler+0x514>
      return;
 8004f2e:	bf00      	nop
  }
}
 8004f30:	37e8      	adds	r7, #232	; 0xe8
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop

08004f38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b090      	sub	sp, #64	; 0x40
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	603b      	str	r3, [r7, #0]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f9c:	e050      	b.n	8005040 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa4:	d04c      	beq.n	8005040 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d007      	beq.n	8004fbc <UART_WaitOnFlagUntilTimeout+0x30>
 8004fac:	f7fd fc12 	bl	80027d4 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d241      	bcs.n	8005040 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	330c      	adds	r3, #12
 8004fc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc6:	e853 3f00 	ldrex	r3, [r3]
 8004fca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	330c      	adds	r3, #12
 8004fda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fdc:	637a      	str	r2, [r7, #52]	; 0x34
 8004fde:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fe4:	e841 2300 	strex	r3, r2, [r1]
 8004fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1e5      	bne.n	8004fbc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	3314      	adds	r3, #20
 8004ff6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	e853 3f00 	ldrex	r3, [r3]
 8004ffe:	613b      	str	r3, [r7, #16]
   return(result);
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f023 0301 	bic.w	r3, r3, #1
 8005006:	63bb      	str	r3, [r7, #56]	; 0x38
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3314      	adds	r3, #20
 800500e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005010:	623a      	str	r2, [r7, #32]
 8005012:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005014:	69f9      	ldr	r1, [r7, #28]
 8005016:	6a3a      	ldr	r2, [r7, #32]
 8005018:	e841 2300 	strex	r3, r2, [r1]
 800501c:	61bb      	str	r3, [r7, #24]
   return(result);
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1e5      	bne.n	8004ff0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2220      	movs	r2, #32
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2220      	movs	r2, #32
 8005030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e00f      	b.n	8005060 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	4013      	ands	r3, r2
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	429a      	cmp	r2, r3
 800504e:	bf0c      	ite	eq
 8005050:	2301      	moveq	r3, #1
 8005052:	2300      	movne	r3, #0
 8005054:	b2db      	uxtb	r3, r3
 8005056:	461a      	mov	r2, r3
 8005058:	79fb      	ldrb	r3, [r7, #7]
 800505a:	429a      	cmp	r2, r3
 800505c:	d09f      	beq.n	8004f9e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3740      	adds	r7, #64	; 0x40
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005068:	b480      	push	{r7}
 800506a:	b095      	sub	sp, #84	; 0x54
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	330c      	adds	r3, #12
 8005076:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800507a:	e853 3f00 	ldrex	r3, [r3]
 800507e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005082:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005086:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	330c      	adds	r3, #12
 800508e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005090:	643a      	str	r2, [r7, #64]	; 0x40
 8005092:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005094:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005096:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005098:	e841 2300 	strex	r3, r2, [r1]
 800509c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800509e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1e5      	bne.n	8005070 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	3314      	adds	r3, #20
 80050aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	e853 3f00 	ldrex	r3, [r3]
 80050b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	f023 0301 	bic.w	r3, r3, #1
 80050ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3314      	adds	r3, #20
 80050c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050cc:	e841 2300 	strex	r3, r2, [r1]
 80050d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1e5      	bne.n	80050a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d119      	bne.n	8005114 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	330c      	adds	r3, #12
 80050e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	e853 3f00 	ldrex	r3, [r3]
 80050ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	f023 0310 	bic.w	r3, r3, #16
 80050f6:	647b      	str	r3, [r7, #68]	; 0x44
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	330c      	adds	r3, #12
 80050fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005100:	61ba      	str	r2, [r7, #24]
 8005102:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005104:	6979      	ldr	r1, [r7, #20]
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	e841 2300 	strex	r3, r2, [r1]
 800510c:	613b      	str	r3, [r7, #16]
   return(result);
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1e5      	bne.n	80050e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2220      	movs	r2, #32
 8005118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005122:	bf00      	nop
 8005124:	3754      	adds	r7, #84	; 0x54
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b084      	sub	sp, #16
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f7ff ff09 	bl	8004f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800514e:	bf00      	nop
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005156:	b480      	push	{r7}
 8005158:	b085      	sub	sp, #20
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b21      	cmp	r3, #33	; 0x21
 8005168:	d13e      	bne.n	80051e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005172:	d114      	bne.n	800519e <UART_Transmit_IT+0x48>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d110      	bne.n	800519e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	881b      	ldrh	r3, [r3, #0]
 8005186:	461a      	mov	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005190:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	1c9a      	adds	r2, r3, #2
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	621a      	str	r2, [r3, #32]
 800519c:	e008      	b.n	80051b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	1c59      	adds	r1, r3, #1
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	6211      	str	r1, [r2, #32]
 80051a8:	781a      	ldrb	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	4619      	mov	r1, r3
 80051be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10f      	bne.n	80051e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051e4:	2300      	movs	r3, #0
 80051e6:	e000      	b.n	80051ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051e8:	2302      	movs	r3, #2
  }
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b082      	sub	sp, #8
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800520c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2220      	movs	r2, #32
 8005212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7ff fe8e 	bl	8004f38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b08c      	sub	sp, #48	; 0x30
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b22      	cmp	r3, #34	; 0x22
 8005238:	f040 80ab 	bne.w	8005392 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005244:	d117      	bne.n	8005276 <UART_Receive_IT+0x50>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d113      	bne.n	8005276 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800524e:	2300      	movs	r3, #0
 8005250:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005256:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	b29b      	uxth	r3, r3
 8005260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005264:	b29a      	uxth	r2, r3
 8005266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005268:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526e:	1c9a      	adds	r2, r3, #2
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	629a      	str	r2, [r3, #40]	; 0x28
 8005274:	e026      	b.n	80052c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800527c:	2300      	movs	r3, #0
 800527e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005288:	d007      	beq.n	800529a <UART_Receive_IT+0x74>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10a      	bne.n	80052a8 <UART_Receive_IT+0x82>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d106      	bne.n	80052a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a4:	701a      	strb	r2, [r3, #0]
 80052a6:	e008      	b.n	80052ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052b4:	b2da      	uxtb	r2, r3
 80052b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	4619      	mov	r1, r3
 80052d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d15a      	bne.n	800538e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68da      	ldr	r2, [r3, #12]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0220 	bic.w	r2, r2, #32
 80052e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	695a      	ldr	r2, [r3, #20]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0201 	bic.w	r2, r2, #1
 8005306:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2220      	movs	r2, #32
 800530c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005314:	2b01      	cmp	r3, #1
 8005316:	d135      	bne.n	8005384 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	330c      	adds	r3, #12
 8005324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	e853 3f00 	ldrex	r3, [r3]
 800532c:	613b      	str	r3, [r7, #16]
   return(result);
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f023 0310 	bic.w	r3, r3, #16
 8005334:	627b      	str	r3, [r7, #36]	; 0x24
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	330c      	adds	r3, #12
 800533c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800533e:	623a      	str	r2, [r7, #32]
 8005340:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	69f9      	ldr	r1, [r7, #28]
 8005344:	6a3a      	ldr	r2, [r7, #32]
 8005346:	e841 2300 	strex	r3, r2, [r1]
 800534a:	61bb      	str	r3, [r7, #24]
   return(result);
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1e5      	bne.n	800531e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0310 	and.w	r3, r3, #16
 800535c:	2b10      	cmp	r3, #16
 800535e:	d10a      	bne.n	8005376 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005360:	2300      	movs	r3, #0
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800537a:	4619      	mov	r1, r3
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7ff fdf9 	bl	8004f74 <HAL_UARTEx_RxEventCallback>
 8005382:	e002      	b.n	800538a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7ff fde1 	bl	8004f4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	e002      	b.n	8005394 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800538e:	2300      	movs	r3, #0
 8005390:	e000      	b.n	8005394 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005392:	2302      	movs	r3, #2
  }
}
 8005394:	4618      	mov	r0, r3
 8005396:	3730      	adds	r7, #48	; 0x30
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800539c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053a0:	b0c0      	sub	sp, #256	; 0x100
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80053b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b8:	68d9      	ldr	r1, [r3, #12]
 80053ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	ea40 0301 	orr.w	r3, r0, r1
 80053c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	431a      	orrs	r2, r3
 80053d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	431a      	orrs	r2, r3
 80053dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80053e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80053f4:	f021 010c 	bic.w	r1, r1, #12
 80053f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005402:	430b      	orrs	r3, r1
 8005404:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005416:	6999      	ldr	r1, [r3, #24]
 8005418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	ea40 0301 	orr.w	r3, r0, r1
 8005422:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	4b8f      	ldr	r3, [pc, #572]	; (8005668 <UART_SetConfig+0x2cc>)
 800542c:	429a      	cmp	r2, r3
 800542e:	d005      	beq.n	800543c <UART_SetConfig+0xa0>
 8005430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	4b8d      	ldr	r3, [pc, #564]	; (800566c <UART_SetConfig+0x2d0>)
 8005438:	429a      	cmp	r2, r3
 800543a:	d104      	bne.n	8005446 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800543c:	f7fe ff5c 	bl	80042f8 <HAL_RCC_GetPCLK2Freq>
 8005440:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005444:	e003      	b.n	800544e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005446:	f7fe ff43 	bl	80042d0 <HAL_RCC_GetPCLK1Freq>
 800544a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800544e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005452:	69db      	ldr	r3, [r3, #28]
 8005454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005458:	f040 810c 	bne.w	8005674 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800545c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005460:	2200      	movs	r2, #0
 8005462:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005466:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800546a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800546e:	4622      	mov	r2, r4
 8005470:	462b      	mov	r3, r5
 8005472:	1891      	adds	r1, r2, r2
 8005474:	65b9      	str	r1, [r7, #88]	; 0x58
 8005476:	415b      	adcs	r3, r3
 8005478:	65fb      	str	r3, [r7, #92]	; 0x5c
 800547a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800547e:	4621      	mov	r1, r4
 8005480:	eb12 0801 	adds.w	r8, r2, r1
 8005484:	4629      	mov	r1, r5
 8005486:	eb43 0901 	adc.w	r9, r3, r1
 800548a:	f04f 0200 	mov.w	r2, #0
 800548e:	f04f 0300 	mov.w	r3, #0
 8005492:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005496:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800549a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800549e:	4690      	mov	r8, r2
 80054a0:	4699      	mov	r9, r3
 80054a2:	4623      	mov	r3, r4
 80054a4:	eb18 0303 	adds.w	r3, r8, r3
 80054a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80054ac:	462b      	mov	r3, r5
 80054ae:	eb49 0303 	adc.w	r3, r9, r3
 80054b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80054b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80054c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80054c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80054ca:	460b      	mov	r3, r1
 80054cc:	18db      	adds	r3, r3, r3
 80054ce:	653b      	str	r3, [r7, #80]	; 0x50
 80054d0:	4613      	mov	r3, r2
 80054d2:	eb42 0303 	adc.w	r3, r2, r3
 80054d6:	657b      	str	r3, [r7, #84]	; 0x54
 80054d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80054dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80054e0:	f7fa fe7a 	bl	80001d8 <__aeabi_uldivmod>
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	4b61      	ldr	r3, [pc, #388]	; (8005670 <UART_SetConfig+0x2d4>)
 80054ea:	fba3 2302 	umull	r2, r3, r3, r2
 80054ee:	095b      	lsrs	r3, r3, #5
 80054f0:	011c      	lsls	r4, r3, #4
 80054f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054f6:	2200      	movs	r2, #0
 80054f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005500:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005504:	4642      	mov	r2, r8
 8005506:	464b      	mov	r3, r9
 8005508:	1891      	adds	r1, r2, r2
 800550a:	64b9      	str	r1, [r7, #72]	; 0x48
 800550c:	415b      	adcs	r3, r3
 800550e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005510:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005514:	4641      	mov	r1, r8
 8005516:	eb12 0a01 	adds.w	sl, r2, r1
 800551a:	4649      	mov	r1, r9
 800551c:	eb43 0b01 	adc.w	fp, r3, r1
 8005520:	f04f 0200 	mov.w	r2, #0
 8005524:	f04f 0300 	mov.w	r3, #0
 8005528:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800552c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005530:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005534:	4692      	mov	sl, r2
 8005536:	469b      	mov	fp, r3
 8005538:	4643      	mov	r3, r8
 800553a:	eb1a 0303 	adds.w	r3, sl, r3
 800553e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005542:	464b      	mov	r3, r9
 8005544:	eb4b 0303 	adc.w	r3, fp, r3
 8005548:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800554c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005558:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800555c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005560:	460b      	mov	r3, r1
 8005562:	18db      	adds	r3, r3, r3
 8005564:	643b      	str	r3, [r7, #64]	; 0x40
 8005566:	4613      	mov	r3, r2
 8005568:	eb42 0303 	adc.w	r3, r2, r3
 800556c:	647b      	str	r3, [r7, #68]	; 0x44
 800556e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005572:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005576:	f7fa fe2f 	bl	80001d8 <__aeabi_uldivmod>
 800557a:	4602      	mov	r2, r0
 800557c:	460b      	mov	r3, r1
 800557e:	4611      	mov	r1, r2
 8005580:	4b3b      	ldr	r3, [pc, #236]	; (8005670 <UART_SetConfig+0x2d4>)
 8005582:	fba3 2301 	umull	r2, r3, r3, r1
 8005586:	095b      	lsrs	r3, r3, #5
 8005588:	2264      	movs	r2, #100	; 0x64
 800558a:	fb02 f303 	mul.w	r3, r2, r3
 800558e:	1acb      	subs	r3, r1, r3
 8005590:	00db      	lsls	r3, r3, #3
 8005592:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005596:	4b36      	ldr	r3, [pc, #216]	; (8005670 <UART_SetConfig+0x2d4>)
 8005598:	fba3 2302 	umull	r2, r3, r3, r2
 800559c:	095b      	lsrs	r3, r3, #5
 800559e:	005b      	lsls	r3, r3, #1
 80055a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80055a4:	441c      	add	r4, r3
 80055a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055aa:	2200      	movs	r2, #0
 80055ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80055b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80055b8:	4642      	mov	r2, r8
 80055ba:	464b      	mov	r3, r9
 80055bc:	1891      	adds	r1, r2, r2
 80055be:	63b9      	str	r1, [r7, #56]	; 0x38
 80055c0:	415b      	adcs	r3, r3
 80055c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80055c8:	4641      	mov	r1, r8
 80055ca:	1851      	adds	r1, r2, r1
 80055cc:	6339      	str	r1, [r7, #48]	; 0x30
 80055ce:	4649      	mov	r1, r9
 80055d0:	414b      	adcs	r3, r1
 80055d2:	637b      	str	r3, [r7, #52]	; 0x34
 80055d4:	f04f 0200 	mov.w	r2, #0
 80055d8:	f04f 0300 	mov.w	r3, #0
 80055dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80055e0:	4659      	mov	r1, fp
 80055e2:	00cb      	lsls	r3, r1, #3
 80055e4:	4651      	mov	r1, sl
 80055e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055ea:	4651      	mov	r1, sl
 80055ec:	00ca      	lsls	r2, r1, #3
 80055ee:	4610      	mov	r0, r2
 80055f0:	4619      	mov	r1, r3
 80055f2:	4603      	mov	r3, r0
 80055f4:	4642      	mov	r2, r8
 80055f6:	189b      	adds	r3, r3, r2
 80055f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055fc:	464b      	mov	r3, r9
 80055fe:	460a      	mov	r2, r1
 8005600:	eb42 0303 	adc.w	r3, r2, r3
 8005604:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005614:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005618:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800561c:	460b      	mov	r3, r1
 800561e:	18db      	adds	r3, r3, r3
 8005620:	62bb      	str	r3, [r7, #40]	; 0x28
 8005622:	4613      	mov	r3, r2
 8005624:	eb42 0303 	adc.w	r3, r2, r3
 8005628:	62fb      	str	r3, [r7, #44]	; 0x2c
 800562a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800562e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005632:	f7fa fdd1 	bl	80001d8 <__aeabi_uldivmod>
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	4b0d      	ldr	r3, [pc, #52]	; (8005670 <UART_SetConfig+0x2d4>)
 800563c:	fba3 1302 	umull	r1, r3, r3, r2
 8005640:	095b      	lsrs	r3, r3, #5
 8005642:	2164      	movs	r1, #100	; 0x64
 8005644:	fb01 f303 	mul.w	r3, r1, r3
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	00db      	lsls	r3, r3, #3
 800564c:	3332      	adds	r3, #50	; 0x32
 800564e:	4a08      	ldr	r2, [pc, #32]	; (8005670 <UART_SetConfig+0x2d4>)
 8005650:	fba2 2303 	umull	r2, r3, r2, r3
 8005654:	095b      	lsrs	r3, r3, #5
 8005656:	f003 0207 	and.w	r2, r3, #7
 800565a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4422      	add	r2, r4
 8005662:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005664:	e105      	b.n	8005872 <UART_SetConfig+0x4d6>
 8005666:	bf00      	nop
 8005668:	40011000 	.word	0x40011000
 800566c:	40011400 	.word	0x40011400
 8005670:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005674:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005678:	2200      	movs	r2, #0
 800567a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800567e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005682:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005686:	4642      	mov	r2, r8
 8005688:	464b      	mov	r3, r9
 800568a:	1891      	adds	r1, r2, r2
 800568c:	6239      	str	r1, [r7, #32]
 800568e:	415b      	adcs	r3, r3
 8005690:	627b      	str	r3, [r7, #36]	; 0x24
 8005692:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005696:	4641      	mov	r1, r8
 8005698:	1854      	adds	r4, r2, r1
 800569a:	4649      	mov	r1, r9
 800569c:	eb43 0501 	adc.w	r5, r3, r1
 80056a0:	f04f 0200 	mov.w	r2, #0
 80056a4:	f04f 0300 	mov.w	r3, #0
 80056a8:	00eb      	lsls	r3, r5, #3
 80056aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056ae:	00e2      	lsls	r2, r4, #3
 80056b0:	4614      	mov	r4, r2
 80056b2:	461d      	mov	r5, r3
 80056b4:	4643      	mov	r3, r8
 80056b6:	18e3      	adds	r3, r4, r3
 80056b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80056bc:	464b      	mov	r3, r9
 80056be:	eb45 0303 	adc.w	r3, r5, r3
 80056c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80056d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80056d6:	f04f 0200 	mov.w	r2, #0
 80056da:	f04f 0300 	mov.w	r3, #0
 80056de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80056e2:	4629      	mov	r1, r5
 80056e4:	008b      	lsls	r3, r1, #2
 80056e6:	4621      	mov	r1, r4
 80056e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056ec:	4621      	mov	r1, r4
 80056ee:	008a      	lsls	r2, r1, #2
 80056f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80056f4:	f7fa fd70 	bl	80001d8 <__aeabi_uldivmod>
 80056f8:	4602      	mov	r2, r0
 80056fa:	460b      	mov	r3, r1
 80056fc:	4b60      	ldr	r3, [pc, #384]	; (8005880 <UART_SetConfig+0x4e4>)
 80056fe:	fba3 2302 	umull	r2, r3, r3, r2
 8005702:	095b      	lsrs	r3, r3, #5
 8005704:	011c      	lsls	r4, r3, #4
 8005706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800570a:	2200      	movs	r2, #0
 800570c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005710:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005714:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005718:	4642      	mov	r2, r8
 800571a:	464b      	mov	r3, r9
 800571c:	1891      	adds	r1, r2, r2
 800571e:	61b9      	str	r1, [r7, #24]
 8005720:	415b      	adcs	r3, r3
 8005722:	61fb      	str	r3, [r7, #28]
 8005724:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005728:	4641      	mov	r1, r8
 800572a:	1851      	adds	r1, r2, r1
 800572c:	6139      	str	r1, [r7, #16]
 800572e:	4649      	mov	r1, r9
 8005730:	414b      	adcs	r3, r1
 8005732:	617b      	str	r3, [r7, #20]
 8005734:	f04f 0200 	mov.w	r2, #0
 8005738:	f04f 0300 	mov.w	r3, #0
 800573c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005740:	4659      	mov	r1, fp
 8005742:	00cb      	lsls	r3, r1, #3
 8005744:	4651      	mov	r1, sl
 8005746:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800574a:	4651      	mov	r1, sl
 800574c:	00ca      	lsls	r2, r1, #3
 800574e:	4610      	mov	r0, r2
 8005750:	4619      	mov	r1, r3
 8005752:	4603      	mov	r3, r0
 8005754:	4642      	mov	r2, r8
 8005756:	189b      	adds	r3, r3, r2
 8005758:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800575c:	464b      	mov	r3, r9
 800575e:	460a      	mov	r2, r1
 8005760:	eb42 0303 	adc.w	r3, r2, r3
 8005764:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	67bb      	str	r3, [r7, #120]	; 0x78
 8005772:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005774:	f04f 0200 	mov.w	r2, #0
 8005778:	f04f 0300 	mov.w	r3, #0
 800577c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005780:	4649      	mov	r1, r9
 8005782:	008b      	lsls	r3, r1, #2
 8005784:	4641      	mov	r1, r8
 8005786:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800578a:	4641      	mov	r1, r8
 800578c:	008a      	lsls	r2, r1, #2
 800578e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005792:	f7fa fd21 	bl	80001d8 <__aeabi_uldivmod>
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	4b39      	ldr	r3, [pc, #228]	; (8005880 <UART_SetConfig+0x4e4>)
 800579c:	fba3 1302 	umull	r1, r3, r3, r2
 80057a0:	095b      	lsrs	r3, r3, #5
 80057a2:	2164      	movs	r1, #100	; 0x64
 80057a4:	fb01 f303 	mul.w	r3, r1, r3
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	011b      	lsls	r3, r3, #4
 80057ac:	3332      	adds	r3, #50	; 0x32
 80057ae:	4a34      	ldr	r2, [pc, #208]	; (8005880 <UART_SetConfig+0x4e4>)
 80057b0:	fba2 2303 	umull	r2, r3, r2, r3
 80057b4:	095b      	lsrs	r3, r3, #5
 80057b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057ba:	441c      	add	r4, r3
 80057bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057c0:	2200      	movs	r2, #0
 80057c2:	673b      	str	r3, [r7, #112]	; 0x70
 80057c4:	677a      	str	r2, [r7, #116]	; 0x74
 80057c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80057ca:	4642      	mov	r2, r8
 80057cc:	464b      	mov	r3, r9
 80057ce:	1891      	adds	r1, r2, r2
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	415b      	adcs	r3, r3
 80057d4:	60fb      	str	r3, [r7, #12]
 80057d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057da:	4641      	mov	r1, r8
 80057dc:	1851      	adds	r1, r2, r1
 80057de:	6039      	str	r1, [r7, #0]
 80057e0:	4649      	mov	r1, r9
 80057e2:	414b      	adcs	r3, r1
 80057e4:	607b      	str	r3, [r7, #4]
 80057e6:	f04f 0200 	mov.w	r2, #0
 80057ea:	f04f 0300 	mov.w	r3, #0
 80057ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057f2:	4659      	mov	r1, fp
 80057f4:	00cb      	lsls	r3, r1, #3
 80057f6:	4651      	mov	r1, sl
 80057f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057fc:	4651      	mov	r1, sl
 80057fe:	00ca      	lsls	r2, r1, #3
 8005800:	4610      	mov	r0, r2
 8005802:	4619      	mov	r1, r3
 8005804:	4603      	mov	r3, r0
 8005806:	4642      	mov	r2, r8
 8005808:	189b      	adds	r3, r3, r2
 800580a:	66bb      	str	r3, [r7, #104]	; 0x68
 800580c:	464b      	mov	r3, r9
 800580e:	460a      	mov	r2, r1
 8005810:	eb42 0303 	adc.w	r3, r2, r3
 8005814:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	663b      	str	r3, [r7, #96]	; 0x60
 8005820:	667a      	str	r2, [r7, #100]	; 0x64
 8005822:	f04f 0200 	mov.w	r2, #0
 8005826:	f04f 0300 	mov.w	r3, #0
 800582a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800582e:	4649      	mov	r1, r9
 8005830:	008b      	lsls	r3, r1, #2
 8005832:	4641      	mov	r1, r8
 8005834:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005838:	4641      	mov	r1, r8
 800583a:	008a      	lsls	r2, r1, #2
 800583c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005840:	f7fa fcca 	bl	80001d8 <__aeabi_uldivmod>
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	4b0d      	ldr	r3, [pc, #52]	; (8005880 <UART_SetConfig+0x4e4>)
 800584a:	fba3 1302 	umull	r1, r3, r3, r2
 800584e:	095b      	lsrs	r3, r3, #5
 8005850:	2164      	movs	r1, #100	; 0x64
 8005852:	fb01 f303 	mul.w	r3, r1, r3
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	011b      	lsls	r3, r3, #4
 800585a:	3332      	adds	r3, #50	; 0x32
 800585c:	4a08      	ldr	r2, [pc, #32]	; (8005880 <UART_SetConfig+0x4e4>)
 800585e:	fba2 2303 	umull	r2, r3, r2, r3
 8005862:	095b      	lsrs	r3, r3, #5
 8005864:	f003 020f 	and.w	r2, r3, #15
 8005868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4422      	add	r2, r4
 8005870:	609a      	str	r2, [r3, #8]
}
 8005872:	bf00      	nop
 8005874:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005878:	46bd      	mov	sp, r7
 800587a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800587e:	bf00      	nop
 8005880:	51eb851f 	.word	0x51eb851f

08005884 <__libc_init_array>:
 8005884:	b570      	push	{r4, r5, r6, lr}
 8005886:	4d0d      	ldr	r5, [pc, #52]	; (80058bc <__libc_init_array+0x38>)
 8005888:	4c0d      	ldr	r4, [pc, #52]	; (80058c0 <__libc_init_array+0x3c>)
 800588a:	1b64      	subs	r4, r4, r5
 800588c:	10a4      	asrs	r4, r4, #2
 800588e:	2600      	movs	r6, #0
 8005890:	42a6      	cmp	r6, r4
 8005892:	d109      	bne.n	80058a8 <__libc_init_array+0x24>
 8005894:	4d0b      	ldr	r5, [pc, #44]	; (80058c4 <__libc_init_array+0x40>)
 8005896:	4c0c      	ldr	r4, [pc, #48]	; (80058c8 <__libc_init_array+0x44>)
 8005898:	f000 f830 	bl	80058fc <_init>
 800589c:	1b64      	subs	r4, r4, r5
 800589e:	10a4      	asrs	r4, r4, #2
 80058a0:	2600      	movs	r6, #0
 80058a2:	42a6      	cmp	r6, r4
 80058a4:	d105      	bne.n	80058b2 <__libc_init_array+0x2e>
 80058a6:	bd70      	pop	{r4, r5, r6, pc}
 80058a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ac:	4798      	blx	r3
 80058ae:	3601      	adds	r6, #1
 80058b0:	e7ee      	b.n	8005890 <__libc_init_array+0xc>
 80058b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80058b6:	4798      	blx	r3
 80058b8:	3601      	adds	r6, #1
 80058ba:	e7f2      	b.n	80058a2 <__libc_init_array+0x1e>
 80058bc:	08006190 	.word	0x08006190
 80058c0:	08006190 	.word	0x08006190
 80058c4:	08006190 	.word	0x08006190
 80058c8:	08006194 	.word	0x08006194

080058cc <memcmp>:
 80058cc:	b510      	push	{r4, lr}
 80058ce:	3901      	subs	r1, #1
 80058d0:	4402      	add	r2, r0
 80058d2:	4290      	cmp	r0, r2
 80058d4:	d101      	bne.n	80058da <memcmp+0xe>
 80058d6:	2000      	movs	r0, #0
 80058d8:	e005      	b.n	80058e6 <memcmp+0x1a>
 80058da:	7803      	ldrb	r3, [r0, #0]
 80058dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80058e0:	42a3      	cmp	r3, r4
 80058e2:	d001      	beq.n	80058e8 <memcmp+0x1c>
 80058e4:	1b18      	subs	r0, r3, r4
 80058e6:	bd10      	pop	{r4, pc}
 80058e8:	3001      	adds	r0, #1
 80058ea:	e7f2      	b.n	80058d2 <memcmp+0x6>

080058ec <memset>:
 80058ec:	4402      	add	r2, r0
 80058ee:	4603      	mov	r3, r0
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d100      	bne.n	80058f6 <memset+0xa>
 80058f4:	4770      	bx	lr
 80058f6:	f803 1b01 	strb.w	r1, [r3], #1
 80058fa:	e7f9      	b.n	80058f0 <memset+0x4>

080058fc <_init>:
 80058fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058fe:	bf00      	nop
 8005900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005902:	bc08      	pop	{r3}
 8005904:	469e      	mov	lr, r3
 8005906:	4770      	bx	lr

08005908 <_fini>:
 8005908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800590a:	bf00      	nop
 800590c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800590e:	bc08      	pop	{r3}
 8005910:	469e      	mov	lr, r3
 8005912:	4770      	bx	lr
