
DWM1000-twr-responder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004738  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080048d0  080048d0  000148d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049ac  080049ac  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  080049ac  080049ac  000149ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049b4  080049b4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049b4  080049b4  000149b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049b8  080049b8  000149b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080049bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000068  08004a20  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08004a20  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f27  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d8b  00000000  00000000  00031fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  00034d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  00035e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a922  00000000  00000000  00036d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000154b3  00000000  00000000  000516a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000921af  00000000  00000000  00066b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f8d04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004360  00000000  00000000  000f8d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080048b8 	.word	0x080048b8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	080048b8 	.word	0x080048b8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 80004dc:	b590      	push	{r4, r7, lr}
 80004de:	b087      	sub	sp, #28
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 80004e4:	2300      	movs	r3, #0
 80004e6:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 80004ec:	4b9f      	ldr	r3, [pc, #636]	; (800076c <dwt_initialise+0x290>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2200      	movs	r2, #0
 80004f2:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 80004f4:	4b9d      	ldr	r3, [pc, #628]	; (800076c <dwt_initialise+0x290>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2200      	movs	r2, #0
 80004fa:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 80004fc:	4b9b      	ldr	r3, [pc, #620]	; (800076c <dwt_initialise+0x290>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2200      	movs	r2, #0
 8000502:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 8000504:	4b99      	ldr	r3, [pc, #612]	; (800076c <dwt_initialise+0x290>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2200      	movs	r2, #0
 800050a:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 800050c:	4b97      	ldr	r3, [pc, #604]	; (800076c <dwt_initialise+0x290>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2200      	movs	r2, #0
 8000512:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 8000514:	4b95      	ldr	r3, [pc, #596]	; (800076c <dwt_initialise+0x290>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2200      	movs	r2, #0
 800051a:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 800051c:	4b93      	ldr	r3, [pc, #588]	; (800076c <dwt_initialise+0x290>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2200      	movs	r2, #0
 8000522:	635a      	str	r2, [r3, #52]	; 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 8000524:	f000 f926 	bl	8000774 <dwt_readdevid>
 8000528:	4603      	mov	r3, r0
 800052a:	4a91      	ldr	r2, [pc, #580]	; (8000770 <dwt_initialise+0x294>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d002      	beq.n	8000536 <dwt_initialise+0x5a>
    {
        return DWT_ERROR ;
 8000530:	f04f 33ff 	mov.w	r3, #4294967295
 8000534:	e115      	b.n	8000762 <dwt_initialise+0x286>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f003 0302 	and.w	r3, r3, #2
 800053c:	2b00      	cmp	r3, #0
 800053e:	d101      	bne.n	8000544 <dwt_initialise+0x68>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 8000540:	f000 fe4c 	bl	80011dc <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f003 0302 	and.w	r3, r3, #2
 800054a:	2b00      	cmp	r3, #0
 800054c:	d004      	beq.n	8000558 <dwt_initialise+0x7c>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8000554:	2b00      	cmp	r3, #0
 8000556:	d102      	bne.n	800055e <dwt_initialise+0x82>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8000558:	2000      	movs	r0, #0
 800055a:	f000 fcdf 	bl	8000f1c <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 800055e:	2204      	movs	r2, #4
 8000560:	2100      	movs	r1, #0
 8000562:	2024      	movs	r0, #36	; 0x24
 8000564:	f000 fc08 	bl	8000d78 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	2b00      	cmp	r3, #0
 8000570:	d116      	bne.n	80005a0 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 8000572:	2004      	movs	r0, #4
 8000574:	f000 fc56 	bl	8000e24 <_dwt_otpread>
 8000578:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 800057a:	693b      	ldr	r3, [r7, #16]
 800057c:	b2db      	uxtb	r3, r3
 800057e:	2b00      	cmp	r3, #0
 8000580:	d01f      	beq.n	80005c2 <dwt_initialise+0xe6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 8000582:	2202      	movs	r2, #2
 8000584:	2112      	movs	r1, #18
 8000586:	202d      	movs	r0, #45	; 0x2d
 8000588:	f000 fbf6 	bl	8000d78 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 800058c:	4b77      	ldr	r3, [pc, #476]	; (800076c <dwt_initialise+0x290>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	8ada      	ldrh	r2, [r3, #22]
 8000592:	4b76      	ldr	r3, [pc, #472]	; (800076c <dwt_initialise+0x290>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800059a:	b292      	uxth	r2, r2
 800059c:	82da      	strh	r2, [r3, #22]
 800059e:	e010      	b.n	80005c2 <dwt_initialise+0xe6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 80005a0:	2130      	movs	r1, #48	; 0x30
 80005a2:	2028      	movs	r0, #40	; 0x28
 80005a4:	f000 fb91 	bl	8000cca <dwt_read32bitoffsetreg>
 80005a8:	4603      	mov	r3, r0
 80005aa:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 80005ae:	d008      	beq.n	80005c2 <dwt_initialise+0xe6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 80005b0:	4b6e      	ldr	r3, [pc, #440]	; (800076c <dwt_initialise+0x290>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	8ada      	ldrh	r2, [r3, #22]
 80005b6:	4b6d      	ldr	r3, [pc, #436]	; (800076c <dwt_initialise+0x290>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80005be:	b292      	uxth	r2, r2
 80005c0:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f003 0302 	and.w	r3, r3, #2
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d009      	beq.n	80005e0 <dwt_initialise+0x104>
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d011      	beq.n	80005fa <dwt_initialise+0x11e>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f003 0308 	and.w	r3, r3, #8
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d00c      	beq.n	80005fa <dwt_initialise+0x11e>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 80005e0:	201e      	movs	r0, #30
 80005e2:	f000 fc1f 	bl	8000e24 <_dwt_otpread>
 80005e6:	4603      	mov	r3, r0
 80005e8:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 80005ea:	8afb      	ldrh	r3, [r7, #22]
 80005ec:	0a1b      	lsrs	r3, r3, #8
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	4b5e      	ldr	r3, [pc, #376]	; (800076c <dwt_initialise+0x290>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	b2d2      	uxtb	r2, r2
 80005f6:	72da      	strb	r2, [r3, #11]
 80005f8:	e003      	b.n	8000602 <dwt_initialise+0x126>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 80005fa:	4b5c      	ldr	r3, [pc, #368]	; (800076c <dwt_initialise+0x290>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2200      	movs	r2, #0
 8000600:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f003 0302 	and.w	r3, r3, #2
 8000608:	2b00      	cmp	r3, #0
 800060a:	d10b      	bne.n	8000624 <dwt_initialise+0x148>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 800060c:	8afb      	ldrh	r3, [r7, #22]
 800060e:	f003 031f 	and.w	r3, r3, #31
 8000612:	2b00      	cmp	r3, #0
 8000614:	d101      	bne.n	800061a <dwt_initialise+0x13e>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 8000616:	2310      	movs	r3, #16
 8000618:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 800061a:	8afb      	ldrh	r3, [r7, #22]
 800061c:	b2db      	uxtb	r3, r3
 800061e:	4618      	mov	r0, r3
 8000620:	f000 fe02 	bl	8001228 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f003 0310 	and.w	r3, r3, #16
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <dwt_initialise+0x162>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 800062e:	4b4f      	ldr	r3, [pc, #316]	; (800076c <dwt_initialise+0x290>)
 8000630:	681c      	ldr	r4, [r3, #0]
 8000632:	2006      	movs	r0, #6
 8000634:	f000 fbf6 	bl	8000e24 <_dwt_otpread>
 8000638:	4603      	mov	r3, r0
 800063a:	6023      	str	r3, [r4, #0]
 800063c:	e003      	b.n	8000646 <dwt_initialise+0x16a>
    }
    else
    {
        pdw1000local->partID = 0;
 800063e:	4b4b      	ldr	r3, [pc, #300]	; (800076c <dwt_initialise+0x290>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	f003 0320 	and.w	r3, r3, #32
 800064c:	2b00      	cmp	r3, #0
 800064e:	d007      	beq.n	8000660 <dwt_initialise+0x184>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8000650:	4b46      	ldr	r3, [pc, #280]	; (800076c <dwt_initialise+0x290>)
 8000652:	681c      	ldr	r4, [r3, #0]
 8000654:	2007      	movs	r0, #7
 8000656:	f000 fbe5 	bl	8000e24 <_dwt_otpread>
 800065a:	4603      	mov	r3, r0
 800065c:	6063      	str	r3, [r4, #4]
 800065e:	e003      	b.n	8000668 <dwt_initialise+0x18c>
    }
    else
    {
        pdw1000local->lotID = 0;
 8000660:	4b42      	ldr	r3, [pc, #264]	; (800076c <dwt_initialise+0x290>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2200      	movs	r2, #0
 8000666:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800066e:	2b00      	cmp	r3, #0
 8000670:	d008      	beq.n	8000684 <dwt_initialise+0x1a8>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 8000672:	2008      	movs	r0, #8
 8000674:	f000 fbd6 	bl	8000e24 <_dwt_otpread>
 8000678:	4602      	mov	r2, r0
 800067a:	4b3c      	ldr	r3, [pc, #240]	; (800076c <dwt_initialise+0x290>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	b2d2      	uxtb	r2, r2
 8000680:	721a      	strb	r2, [r3, #8]
 8000682:	e003      	b.n	800068c <dwt_initialise+0x1b0>
    }
    else
    {
        pdw1000local->vBatP = 0;
 8000684:	4b39      	ldr	r3, [pc, #228]	; (800076c <dwt_initialise+0x290>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2200      	movs	r2, #0
 800068a:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000692:	2b00      	cmp	r3, #0
 8000694:	d008      	beq.n	80006a8 <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 8000696:	2009      	movs	r0, #9
 8000698:	f000 fbc4 	bl	8000e24 <_dwt_otpread>
 800069c:	4602      	mov	r2, r0
 800069e:	4b33      	ldr	r3, [pc, #204]	; (800076c <dwt_initialise+0x290>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	b2d2      	uxtb	r2, r2
 80006a4:	725a      	strb	r2, [r3, #9]
 80006a6:	e003      	b.n	80006b0 <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 80006a8:	4b30      	ldr	r3, [pc, #192]	; (800076c <dwt_initialise+0x290>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2200      	movs	r2, #0
 80006ae:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f003 0302 	and.w	r3, r3, #2
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d121      	bne.n	80006fe <dwt_initialise+0x222>
    {
        if(DWT_LOADUCODE & config)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	f003 0301 	and.w	r3, r3, #1
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d00b      	beq.n	80006dc <dwt_initialise+0x200>
        {
            _dwt_loaducodefromrom();
 80006c4:	f000 fbfb 	bl	8000ebe <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 80006c8:	4b28      	ldr	r3, [pc, #160]	; (800076c <dwt_initialise+0x290>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	8ada      	ldrh	r2, [r3, #22]
 80006ce:	4b27      	ldr	r3, [pc, #156]	; (800076c <dwt_initialise+0x290>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80006d6:	b292      	uxth	r2, r2
 80006d8:	82da      	strh	r2, [r3, #22]
 80006da:	e01e      	b.n	800071a <dwt_initialise+0x23e>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 80006dc:	2105      	movs	r1, #5
 80006de:	2036      	movs	r0, #54	; 0x36
 80006e0:	f000 fb1a 	bl	8000d18 <dwt_read16bitoffsetreg>
 80006e4:	4603      	mov	r3, r0
 80006e6:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 80006e8:	89fb      	ldrh	r3, [r7, #14]
 80006ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80006ee:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 80006f0:	89fb      	ldrh	r3, [r7, #14]
 80006f2:	461a      	mov	r2, r3
 80006f4:	2105      	movs	r1, #5
 80006f6:	2036      	movs	r0, #54	; 0x36
 80006f8:	f000 fb51 	bl	8000d9e <dwt_write16bitoffsetreg>
 80006fc:	e00d      	b.n	800071a <dwt_initialise+0x23e>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	f003 0304 	and.w	r3, r3, #4
 8000704:	2b00      	cmp	r3, #0
 8000706:	d108      	bne.n	800071a <dwt_initialise+0x23e>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <dwt_initialise+0x290>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	8ada      	ldrh	r2, [r3, #22]
 800070e:	4b17      	ldr	r3, [pc, #92]	; (800076c <dwt_initialise+0x290>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000716:	b292      	uxth	r2, r2
 8000718:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800071a:	2001      	movs	r0, #1
 800071c:	f000 fbfe 	bl	8000f1c <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 8000720:	2200      	movs	r2, #0
 8000722:	210a      	movs	r1, #10
 8000724:	202c      	movs	r0, #44	; 0x2c
 8000726:	f000 fb27 	bl	8000d78 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <dwt_initialise+0x290>)
 800072c:	681c      	ldr	r4, [r3, #0]
 800072e:	2100      	movs	r1, #0
 8000730:	2004      	movs	r0, #4
 8000732:	f000 faca 	bl	8000cca <dwt_read32bitoffsetreg>
 8000736:	4603      	mov	r3, r0
 8000738:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <dwt_initialise+0x290>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	691b      	ldr	r3, [r3, #16]
 8000740:	0c1b      	lsrs	r3, r3, #16
 8000742:	b2da      	uxtb	r2, r3
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <dwt_initialise+0x290>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f002 0203 	and.w	r2, r2, #3
 800074c:	b2d2      	uxtb	r2, r2
 800074e:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <dwt_initialise+0x290>)
 8000752:	681c      	ldr	r4, [r3, #0]
 8000754:	2100      	movs	r1, #0
 8000756:	2008      	movs	r0, #8
 8000758:	f000 fab7 	bl	8000cca <dwt_read32bitoffsetreg>
 800075c:	4603      	mov	r3, r0
 800075e:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 8000760:	2300      	movs	r3, #0

} // end dwt_initialise()
 8000762:	4618      	mov	r0, r3
 8000764:	371c      	adds	r7, #28
 8000766:	46bd      	mov	sp, r7
 8000768:	bd90      	pop	{r4, r7, pc}
 800076a:	bf00      	nop
 800076c:	20000000 	.word	0x20000000
 8000770:	deca0130 	.word	0xdeca0130

08000774 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 8000778:	2100      	movs	r1, #0
 800077a:	2000      	movs	r0, #0
 800077c:	f000 faa5 	bl	8000cca <dwt_read32bitoffsetreg>
 8000780:	4603      	mov	r3, r0
}
 8000782:	4618      	mov	r0, r3
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	795b      	ldrb	r3, [r3, #5]
 80007a2:	461a      	mov	r2, r3
 80007a4:	4ba1      	ldr	r3, [pc, #644]	; (8000a2c <dwt_configure+0x2a4>)
 80007a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007aa:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	785b      	ldrb	r3, [r3, #1]
 80007b0:	3b01      	subs	r3, #1
 80007b2:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 80007b4:	7cfb      	ldrb	r3, [r7, #19]
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	d002      	beq.n	80007c0 <dwt_configure+0x38>
 80007ba:	7cfb      	ldrb	r3, [r7, #19]
 80007bc:	2b07      	cmp	r3, #7
 80007be:	d101      	bne.n	80007c4 <dwt_configure+0x3c>
 80007c0:	2301      	movs	r3, #1
 80007c2:	e000      	b.n	80007c6 <dwt_configure+0x3e>
 80007c4:	2300      	movs	r3, #0
 80007c6:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	79db      	ldrb	r3, [r3, #7]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d10b      	bne.n	80007e8 <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 80007d0:	4b97      	ldr	r3, [pc, #604]	; (8000a30 <dwt_configure+0x2a8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	691a      	ldr	r2, [r3, #16]
 80007d6:	4b96      	ldr	r3, [pc, #600]	; (8000a30 <dwt_configure+0x2a8>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80007de:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 80007e0:	8abb      	ldrh	r3, [r7, #20]
 80007e2:	08db      	lsrs	r3, r3, #3
 80007e4:	82bb      	strh	r3, [r7, #20]
 80007e6:	e007      	b.n	80007f8 <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 80007e8:	4b91      	ldr	r3, [pc, #580]	; (8000a30 <dwt_configure+0x2a8>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	691a      	ldr	r2, [r3, #16]
 80007ee:	4b90      	ldr	r3, [pc, #576]	; (8000a30 <dwt_configure+0x2a8>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80007f6:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 80007f8:	4b8d      	ldr	r3, [pc, #564]	; (8000a30 <dwt_configure+0x2a8>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	7a12      	ldrb	r2, [r2, #8]
 8000800:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 8000802:	4b8b      	ldr	r3, [pc, #556]	; (8000a30 <dwt_configure+0x2a8>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	691a      	ldr	r2, [r3, #16]
 8000808:	4b89      	ldr	r3, [pc, #548]	; (8000a30 <dwt_configure+0x2a8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000810:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 8000812:	4b87      	ldr	r3, [pc, #540]	; (8000a30 <dwt_configure+0x2a8>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	6919      	ldr	r1, [r3, #16]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	7a1b      	ldrb	r3, [r3, #8]
 800081c:	041b      	lsls	r3, r3, #16
 800081e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000822:	4b83      	ldr	r3, [pc, #524]	; (8000a30 <dwt_configure+0x2a8>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	430a      	orrs	r2, r1
 8000828:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 800082a:	4b81      	ldr	r3, [pc, #516]	; (8000a30 <dwt_configure+0x2a8>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	691b      	ldr	r3, [r3, #16]
 8000830:	461a      	mov	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	2004      	movs	r0, #4
 8000836:	f000 face 	bl	8000dd6 <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 800083a:	8abb      	ldrh	r3, [r7, #20]
 800083c:	461a      	mov	r2, r3
 800083e:	f642 0104 	movw	r1, #10244	; 0x2804
 8000842:	202e      	movs	r0, #46	; 0x2e
 8000844:	f000 faab 	bl	8000d9e <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 8000848:	7cbb      	ldrb	r3, [r7, #18]
 800084a:	4618      	mov	r0, r3
 800084c:	f000 fb17 	bl	8000e7e <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 8000850:	7cfb      	ldrb	r3, [r7, #19]
 8000852:	4a78      	ldr	r2, [pc, #480]	; (8000a34 <dwt_configure+0x2ac>)
 8000854:	5cd3      	ldrb	r3, [r2, r3]
 8000856:	461a      	mov	r2, r3
 8000858:	4b77      	ldr	r3, [pc, #476]	; (8000a38 <dwt_configure+0x2b0>)
 800085a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800085e:	461a      	mov	r2, r3
 8000860:	2107      	movs	r1, #7
 8000862:	202b      	movs	r0, #43	; 0x2b
 8000864:	f000 fab7 	bl	8000dd6 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8000868:	7cfb      	ldrb	r3, [r7, #19]
 800086a:	4a72      	ldr	r2, [pc, #456]	; (8000a34 <dwt_configure+0x2ac>)
 800086c:	5cd3      	ldrb	r3, [r2, r3]
 800086e:	461a      	mov	r2, r3
 8000870:	4b72      	ldr	r3, [pc, #456]	; (8000a3c <dwt_configure+0x2b4>)
 8000872:	5c9b      	ldrb	r3, [r3, r2]
 8000874:	461a      	mov	r2, r3
 8000876:	210b      	movs	r1, #11
 8000878:	202b      	movs	r0, #43	; 0x2b
 800087a:	f000 fa7d 	bl	8000d78 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 800087e:	7c7b      	ldrb	r3, [r7, #17]
 8000880:	4a6f      	ldr	r2, [pc, #444]	; (8000a40 <dwt_configure+0x2b8>)
 8000882:	5cd3      	ldrb	r3, [r2, r3]
 8000884:	461a      	mov	r2, r3
 8000886:	210b      	movs	r1, #11
 8000888:	2028      	movs	r0, #40	; 0x28
 800088a:	f000 fa75 	bl	8000d78 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 800088e:	7cfb      	ldrb	r3, [r7, #19]
 8000890:	4a68      	ldr	r2, [pc, #416]	; (8000a34 <dwt_configure+0x2ac>)
 8000892:	5cd3      	ldrb	r3, [r2, r3]
 8000894:	461a      	mov	r2, r3
 8000896:	4b6b      	ldr	r3, [pc, #428]	; (8000a44 <dwt_configure+0x2bc>)
 8000898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800089c:	461a      	mov	r2, r3
 800089e:	210c      	movs	r1, #12
 80008a0:	2028      	movs	r0, #40	; 0x28
 80008a2:	f000 fa98 	bl	8000dd6 <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	79db      	ldrb	r3, [r3, #7]
 80008aa:	4618      	mov	r0, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	799b      	ldrb	r3, [r3, #6]
 80008b0:	4619      	mov	r1, r3
 80008b2:	4a65      	ldr	r2, [pc, #404]	; (8000a48 <dwt_configure+0x2c0>)
 80008b4:	0043      	lsls	r3, r0, #1
 80008b6:	440b      	add	r3, r1
 80008b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008bc:	461a      	mov	r2, r3
 80008be:	2102      	movs	r1, #2
 80008c0:	2027      	movs	r0, #39	; 0x27
 80008c2:	f000 fa6c 	bl	8000d9e <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 80008c6:	7cbb      	ldrb	r3, [r7, #18]
 80008c8:	4a60      	ldr	r2, [pc, #384]	; (8000a4c <dwt_configure+0x2c4>)
 80008ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008ce:	461a      	mov	r2, r3
 80008d0:	2104      	movs	r1, #4
 80008d2:	2027      	movs	r0, #39	; 0x27
 80008d4:	f000 fa63 	bl	8000d9e <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	79db      	ldrb	r3, [r3, #7]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d105      	bne.n	80008ec <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 80008e0:	2264      	movs	r2, #100	; 0x64
 80008e2:	2106      	movs	r1, #6
 80008e4:	2027      	movs	r0, #39	; 0x27
 80008e6:	f000 fa5a 	bl	8000d9e <dwt_write16bitoffsetreg>
 80008ea:	e018      	b.n	800091e <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	789b      	ldrb	r3, [r3, #2]
 80008f0:	2b04      	cmp	r3, #4
 80008f2:	d10a      	bne.n	800090a <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 80008f4:	2210      	movs	r2, #16
 80008f6:	2106      	movs	r1, #6
 80008f8:	2027      	movs	r0, #39	; 0x27
 80008fa:	f000 fa50 	bl	8000d9e <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 80008fe:	2210      	movs	r2, #16
 8000900:	2126      	movs	r1, #38	; 0x26
 8000902:	2027      	movs	r0, #39	; 0x27
 8000904:	f000 fa38 	bl	8000d78 <dwt_write8bitoffsetreg>
 8000908:	e009      	b.n	800091e <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 800090a:	2220      	movs	r2, #32
 800090c:	2106      	movs	r1, #6
 800090e:	2027      	movs	r0, #39	; 0x27
 8000910:	f000 fa45 	bl	8000d9e <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 8000914:	2228      	movs	r2, #40	; 0x28
 8000916:	2126      	movs	r1, #38	; 0x26
 8000918:	2027      	movs	r0, #39	; 0x27
 800091a:	f000 fa2d 	bl	8000d78 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 800091e:	7cbb      	ldrb	r3, [r7, #18]
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	78d2      	ldrb	r2, [r2, #3]
 8000924:	4611      	mov	r1, r2
 8000926:	4a4a      	ldr	r2, [pc, #296]	; (8000a50 <dwt_configure+0x2c8>)
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	440b      	add	r3, r1
 800092c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000930:	461a      	mov	r2, r3
 8000932:	2108      	movs	r1, #8
 8000934:	2027      	movs	r0, #39	; 0x27
 8000936:	f000 fa4e 	bl	8000dd6 <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	895b      	ldrh	r3, [r3, #10]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d103      	bne.n	800094a <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f241 0241 	movw	r2, #4161	; 0x1041
 8000948:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	895b      	ldrh	r3, [r3, #10]
 800094e:	461a      	mov	r2, r3
 8000950:	2120      	movs	r1, #32
 8000952:	2027      	movs	r0, #39	; 0x27
 8000954:	f000 fa23 	bl	8000d9e <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 8000958:	4b3e      	ldr	r3, [pc, #248]	; (8000a54 <dwt_configure+0x2cc>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	210c      	movs	r1, #12
 8000960:	2023      	movs	r0, #35	; 0x23
 8000962:	f000 fa38 	bl	8000dd6 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 8000966:	7cbb      	ldrb	r3, [r7, #18]
 8000968:	4a3a      	ldr	r2, [pc, #232]	; (8000a54 <dwt_configure+0x2cc>)
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	4413      	add	r3, r2
 800096e:	889b      	ldrh	r3, [r3, #4]
 8000970:	461a      	mov	r2, r3
 8000972:	2104      	movs	r1, #4
 8000974:	2023      	movs	r0, #35	; 0x23
 8000976:	f000 fa12 	bl	8000d9e <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	799b      	ldrb	r3, [r3, #6]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d00d      	beq.n	800099e <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	79db      	ldrb	r3, [r3, #7]
 8000986:	461a      	mov	r2, r3
 8000988:	4b33      	ldr	r3, [pc, #204]	; (8000a58 <dwt_configure+0x2d0>)
 800098a:	5c9b      	ldrb	r3, [r3, r2]
 800098c:	461a      	mov	r2, r3
 800098e:	2100      	movs	r1, #0
 8000990:	2021      	movs	r0, #33	; 0x21
 8000992:	f000 f9f1 	bl	8000d78 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 8000996:	2303      	movs	r3, #3
 8000998:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 800099a:	2301      	movs	r3, #1
 800099c:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800099e:	7cfb      	ldrb	r3, [r7, #19]
 80009a0:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80009a4:	7cfb      	ldrb	r3, [r7, #19]
 80009a6:	011b      	lsls	r3, r3, #4
 80009a8:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80009aa:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	785b      	ldrb	r3, [r3, #1]
 80009b0:	049b      	lsls	r3, r3, #18
 80009b2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80009b6:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80009b8:	7dfb      	ldrb	r3, [r7, #23]
 80009ba:	051b      	lsls	r3, r3, #20
 80009bc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80009c0:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80009c2:	7dbb      	ldrb	r3, [r7, #22]
 80009c4:	045b      	lsls	r3, r3, #17
 80009c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80009ca:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	791b      	ldrb	r3, [r3, #4]
 80009d0:	059b      	lsls	r3, r3, #22
 80009d2:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80009d6:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	795b      	ldrb	r3, [r3, #5]
 80009dc:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80009de:	4313      	orrs	r3, r2
 80009e0:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 80009e2:	68fa      	ldr	r2, [r7, #12]
 80009e4:	2100      	movs	r1, #0
 80009e6:	201f      	movs	r0, #31
 80009e8:	f000 f9f5 	bl	8000dd6 <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	789a      	ldrb	r2, [r3, #2]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	785b      	ldrb	r3, [r3, #1]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	0419      	lsls	r1, r3, #16
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	79db      	ldrb	r3, [r3, #7]
 80009fe:	035a      	lsls	r2, r3, #13
 8000a00:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <dwt_configure+0x2a8>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	430a      	orrs	r2, r1
 8000a06:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <dwt_configure+0x2a8>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	68db      	ldr	r3, [r3, #12]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	2100      	movs	r1, #0
 8000a12:	2008      	movs	r0, #8
 8000a14:	f000 f9df 	bl	8000dd6 <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 8000a18:	2242      	movs	r2, #66	; 0x42
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	200d      	movs	r0, #13
 8000a1e:	f000 f9ab 	bl	8000d78 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8000a22:	bf00      	nop
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	08004960 	.word	0x08004960
 8000a30:	20000000 	.word	0x20000000
 8000a34:	080048e0 	.word	0x080048e0
 8000a38:	08004900 	.word	0x08004900
 8000a3c:	08004918 	.word	0x08004918
 8000a40:	08004920 	.word	0x08004920
 8000a44:	080048e8 	.word	0x080048e8
 8000a48:	08004930 	.word	0x08004930
 8000a4c:	0800493c 	.word	0x0800493c
 8000a50:	08004940 	.word	0x08004940
 8000a54:	08004924 	.word	0x08004924
 8000a58:	0800492c 	.word	0x0800492c

08000a5c <dwt_setrxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxantennadelay(uint16 rxDelay)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	80fb      	strh	r3, [r7, #6]
    // Set the RX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
 8000a66:	88fb      	ldrh	r3, [r7, #6]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	f641 0104 	movw	r1, #6148	; 0x1804
 8000a6e:	202e      	movs	r0, #46	; 0x2e
 8000a70:	f000 f995 	bl	8000d9e <dwt_write16bitoffsetreg>
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <dwt_settxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_settxantennadelay(uint16 txDelay)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	80fb      	strh	r3, [r7, #6]
    // Set the TX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
 8000a86:	88fb      	ldrh	r3, [r7, #6]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	2018      	movs	r0, #24
 8000a8e:	f000 f986 	bl	8000d9e <dwt_write16bitoffsetreg>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	6039      	str	r1, [r7, #0]
 8000aa4:	80fb      	strh	r3, [r7, #6]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	80bb      	strh	r3, [r7, #4]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 8000aaa:	88ba      	ldrh	r2, [r7, #4]
 8000aac:	88fb      	ldrh	r3, [r7, #6]
 8000aae:	4413      	add	r3, r2
 8000ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ab4:	dc09      	bgt.n	8000aca <dwt_writetxdata+0x30>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 8000ab6:	88fb      	ldrh	r3, [r7, #6]
 8000ab8:	3b02      	subs	r3, #2
 8000aba:	461a      	mov	r2, r3
 8000abc:	88b9      	ldrh	r1, [r7, #4]
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	2009      	movs	r0, #9
 8000ac2:	f000 f857 	bl	8000b74 <dwt_writetodevice>
        return DWT_SUCCESS;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e001      	b.n	8000ace <dwt_writetxdata+0x34>
    }
    else
    {
        return DWT_ERROR;
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
    }
} // end dwt_writetxdata()
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	603a      	str	r2, [r7, #0]
 8000ae2:	80fb      	strh	r3, [r7, #6]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	80bb      	strh	r3, [r7, #4]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <dwt_writetxfctrl+0x3c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	68da      	ldr	r2, [r3, #12]
 8000aee:	88fb      	ldrh	r3, [r7, #6]
 8000af0:	431a      	orrs	r2, r3
 8000af2:	88bb      	ldrh	r3, [r7, #4]
 8000af4:	059b      	lsls	r3, r3, #22
 8000af6:	431a      	orrs	r2, r3
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	03db      	lsls	r3, r3, #15
 8000afc:	4313      	orrs	r3, r2
 8000afe:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 8000b00:	68fa      	ldr	r2, [r7, #12]
 8000b02:	2100      	movs	r1, #0
 8000b04:	2008      	movs	r0, #8
 8000b06:	f000 f966 	bl	8000dd6 <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000000 	.word	0x20000000

08000b18 <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	460b      	mov	r3, r1
 8000b22:	807b      	strh	r3, [r7, #2]
 8000b24:	4613      	mov	r3, r2
 8000b26:	803b      	strh	r3, [r7, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 8000b28:	887a      	ldrh	r2, [r7, #2]
 8000b2a:	8839      	ldrh	r1, [r7, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2011      	movs	r0, #17
 8000b30:	f000 f877 	bl	8000c22 <dwt_readfromdevice>
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <dwt_readtxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readtxtimestamp(uint8 * timestamp)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN, timestamp) ; // Read bytes directly into buffer
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2205      	movs	r2, #5
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2017      	movs	r0, #23
 8000b4c:	f000 f869 	bl	8000c22 <dwt_readfromdevice>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <dwt_readrxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readrxtimestamp(uint8 * timestamp)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp) ; // Get the adjusted time of arrival
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2205      	movs	r2, #5
 8000b64:	2100      	movs	r1, #0
 8000b66:	2015      	movs	r0, #21
 8000b68:	f000 f85b 	bl	8000c22 <dwt_readfromdevice>
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60ba      	str	r2, [r7, #8]
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4603      	mov	r3, r0
 8000b80:	81fb      	strh	r3, [r7, #14]
 8000b82:	460b      	mov	r3, r1
 8000b84:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000b8a:	89bb      	ldrh	r3, [r7, #12]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d10c      	bne.n	8000baa <dwt_writetodevice+0x36>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000b90:	89fb      	ldrh	r3, [r7, #14]
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	1c59      	adds	r1, r3, #1
 8000b98:	6179      	str	r1, [r7, #20]
 8000b9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	3318      	adds	r3, #24
 8000ba2:	443b      	add	r3, r7
 8000ba4:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000ba8:	e02f      	b.n	8000c0a <dwt_writetodevice+0x96>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000baa:	89fb      	ldrh	r3, [r7, #14]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	1c59      	adds	r1, r3, #1
 8000bb2:	6179      	str	r1, [r7, #20]
 8000bb4:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	3318      	adds	r3, #24
 8000bbc:	443b      	add	r3, r7
 8000bbe:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000bc2:	89bb      	ldrh	r3, [r7, #12]
 8000bc4:	2b7f      	cmp	r3, #127	; 0x7f
 8000bc6:	d809      	bhi.n	8000bdc <dwt_writetodevice+0x68>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	617a      	str	r2, [r7, #20]
 8000bce:	89ba      	ldrh	r2, [r7, #12]
 8000bd0:	b2d2      	uxtb	r2, r2
 8000bd2:	3318      	adds	r3, #24
 8000bd4:	443b      	add	r3, r7
 8000bd6:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000bda:	e016      	b.n	8000c0a <dwt_writetodevice+0x96>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000bdc:	89bb      	ldrh	r3, [r7, #12]
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	1c59      	adds	r1, r3, #1
 8000be4:	6179      	str	r1, [r7, #20]
 8000be6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000bea:	b2d2      	uxtb	r2, r2
 8000bec:	3318      	adds	r3, #24
 8000bee:	443b      	add	r3, r7
 8000bf0:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000bf4:	89bb      	ldrh	r3, [r7, #12]
 8000bf6:	09db      	lsrs	r3, r3, #7
 8000bf8:	b299      	uxth	r1, r3
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	1c5a      	adds	r2, r3, #1
 8000bfe:	617a      	str	r2, [r7, #20]
 8000c00:	b2ca      	uxtb	r2, r1
 8000c02:	3318      	adds	r3, #24
 8000c04:	443b      	add	r3, r7
 8000c06:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	b298      	uxth	r0, r3
 8000c0e:	f107 0110 	add.w	r1, r7, #16
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	68ba      	ldr	r2, [r7, #8]
 8000c16:	f000 fb49 	bl	80012ac <writetospi>
} // end dwt_writetodevice()
 8000c1a:	bf00      	nop
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b086      	sub	sp, #24
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	60ba      	str	r2, [r7, #8]
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	81fb      	strh	r3, [r7, #14]
 8000c30:	460b      	mov	r3, r1
 8000c32:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000c38:	89bb      	ldrh	r3, [r7, #12]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d109      	bne.n	8000c52 <dwt_readfromdevice+0x30>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	1c5a      	adds	r2, r3, #1
 8000c42:	617a      	str	r2, [r7, #20]
 8000c44:	89fa      	ldrh	r2, [r7, #14]
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	3318      	adds	r3, #24
 8000c4a:	443b      	add	r3, r7
 8000c4c:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000c50:	e02f      	b.n	8000cb2 <dwt_readfromdevice+0x90>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000c52:	89fb      	ldrh	r3, [r7, #14]
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	1c59      	adds	r1, r3, #1
 8000c5a:	6179      	str	r1, [r7, #20]
 8000c5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	3318      	adds	r3, #24
 8000c64:	443b      	add	r3, r7
 8000c66:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000c6a:	89bb      	ldrh	r3, [r7, #12]
 8000c6c:	2b7f      	cmp	r3, #127	; 0x7f
 8000c6e:	d809      	bhi.n	8000c84 <dwt_readfromdevice+0x62>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	1c5a      	adds	r2, r3, #1
 8000c74:	617a      	str	r2, [r7, #20]
 8000c76:	89ba      	ldrh	r2, [r7, #12]
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	3318      	adds	r3, #24
 8000c7c:	443b      	add	r3, r7
 8000c7e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000c82:	e016      	b.n	8000cb2 <dwt_readfromdevice+0x90>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000c84:	89bb      	ldrh	r3, [r7, #12]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	1c59      	adds	r1, r3, #1
 8000c8c:	6179      	str	r1, [r7, #20]
 8000c8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	3318      	adds	r3, #24
 8000c96:	443b      	add	r3, r7
 8000c98:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000c9c:	89bb      	ldrh	r3, [r7, #12]
 8000c9e:	09db      	lsrs	r3, r3, #7
 8000ca0:	b299      	uxth	r1, r3
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	1c5a      	adds	r2, r3, #1
 8000ca6:	617a      	str	r2, [r7, #20]
 8000ca8:	b2ca      	uxtb	r2, r1
 8000caa:	3318      	adds	r3, #24
 8000cac:	443b      	add	r3, r7
 8000cae:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	b298      	uxth	r0, r3
 8000cb6:	f107 0110 	add.w	r1, r7, #16
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	68ba      	ldr	r2, [r7, #8]
 8000cbe:	f000 fb29 	bl	8001314 <readfromspi>
} // end dwt_readfromdevice()
 8000cc2:	bf00      	nop
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
 8000cd2:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	b298      	uxth	r0, r3
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b299      	uxth	r1, r3
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	2204      	movs	r2, #4
 8000ce6:	f7ff ff9c 	bl	8000c22 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8000cea:	2303      	movs	r3, #3
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	e00b      	b.n	8000d08 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	021b      	lsls	r3, r3, #8
 8000cf4:	f107 010c 	add.w	r1, r7, #12
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	440a      	add	r2, r1
 8000cfc:	7812      	ldrb	r2, [r2, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	3b01      	subs	r3, #1
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	daf0      	bge.n	8000cf0 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8000d0e:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8000d10:	4618      	mov	r0, r3
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8000d22:	2300      	movs	r3, #0
 8000d24:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	b298      	uxth	r0, r3
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	b299      	uxth	r1, r3
 8000d2e:	f107 030c 	add.w	r3, r7, #12
 8000d32:	2202      	movs	r2, #2
 8000d34:	f7ff ff75 	bl	8000c22 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8000d38:	7b7b      	ldrb	r3, [r7, #13]
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	021b      	lsls	r3, r3, #8
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	7b3b      	ldrb	r3, [r7, #12]
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	4413      	add	r3, r2
 8000d46:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8000d48:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b084      	sub	sp, #16
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	b298      	uxth	r0, r3
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	b299      	uxth	r1, r3
 8000d64:	f107 030f 	add.w	r3, r7, #15
 8000d68:	2201      	movs	r2, #1
 8000d6a:	f7ff ff5a 	bl	8000c22 <dwt_readfromdevice>

    return regval ;
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	4613      	mov	r3, r2
 8000d84:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	b298      	uxth	r0, r3
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	b299      	uxth	r1, r3
 8000d8e:	1dfb      	adds	r3, r7, #7
 8000d90:	2201      	movs	r2, #1
 8000d92:	f7ff feef 	bl	8000b74 <dwt_writetodevice>
}
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b086      	sub	sp, #24
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	60f8      	str	r0, [r7, #12]
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	4613      	mov	r3, r2
 8000daa:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8000dac:	88fb      	ldrh	r3, [r7, #6]
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	b298      	uxth	r0, r3
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	b299      	uxth	r1, r3
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2202      	movs	r2, #2
 8000dca:	f7ff fed3 	bl	8000b74 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8000dce:	bf00      	nop
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b086      	sub	sp, #24
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	60f8      	str	r0, [r7, #12]
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
 8000de6:	e00d      	b.n	8000e04 <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	b2d9      	uxtb	r1, r3
 8000dec:	f107 0210 	add.w	r2, r7, #16
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	4413      	add	r3, r2
 8000df4:	460a      	mov	r2, r1
 8000df6:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	0a1b      	lsrs	r3, r3, #8
 8000dfc:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	3301      	adds	r3, #1
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	2b03      	cmp	r3, #3
 8000e08:	ddee      	ble.n	8000de8 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	b298      	uxth	r0, r3
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	b299      	uxth	r1, r3
 8000e12:	f107 0310 	add.w	r3, r7, #16
 8000e16:	2204      	movs	r2, #4
 8000e18:	f7ff feac 	bl	8000b74 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8000e1c:	bf00      	nop
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8000e2e:	88fb      	ldrh	r3, [r7, #6]
 8000e30:	461a      	mov	r2, r3
 8000e32:	2104      	movs	r1, #4
 8000e34:	202d      	movs	r0, #45	; 0x2d
 8000e36:	f7ff ffb2 	bl	8000d9e <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	2106      	movs	r1, #6
 8000e3e:	202d      	movs	r0, #45	; 0x2d
 8000e40:	f7ff ff9a 	bl	8000d78 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8000e44:	2200      	movs	r2, #0
 8000e46:	2106      	movs	r1, #6
 8000e48:	202d      	movs	r0, #45	; 0x2d
 8000e4a:	f7ff ff95 	bl	8000d78 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8000e4e:	210a      	movs	r1, #10
 8000e50:	202d      	movs	r0, #45	; 0x2d
 8000e52:	f7ff ff3a 	bl	8000cca <dwt_read32bitoffsetreg>
 8000e56:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8000e58:	68fb      	ldr	r3, [r7, #12]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8000e66:	2200      	movs	r2, #0
 8000e68:	2102      	movs	r1, #2
 8000e6a:	202c      	movs	r0, #44	; 0x2c
 8000e6c:	f7ff ff84 	bl	8000d78 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 8000e70:	2202      	movs	r2, #2
 8000e72:	2102      	movs	r1, #2
 8000e74:	202c      	movs	r0, #44	; 0x2c
 8000e76:	f7ff ff7f 	bl	8000d78 <dwt_write8bitoffsetreg>
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 8000e86:	226d      	movs	r2, #109	; 0x6d
 8000e88:	f640 0106 	movw	r1, #2054	; 0x806
 8000e8c:	202e      	movs	r0, #46	; 0x2e
 8000e8e:	f7ff ff73 	bl	8000d78 <dwt_write8bitoffsetreg>

    if(prfIndex)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d007      	beq.n	8000ea8 <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8000e98:	f240 6207 	movw	r2, #1543	; 0x607
 8000e9c:	f641 0106 	movw	r1, #6150	; 0x1806
 8000ea0:	202e      	movs	r0, #46	; 0x2e
 8000ea2:	f7ff ff7c 	bl	8000d9e <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8000ea6:	e006      	b.n	8000eb6 <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8000ea8:	f241 6207 	movw	r2, #5639	; 0x1607
 8000eac:	f641 0106 	movw	r1, #6150	; 0x1806
 8000eb0:	202e      	movs	r0, #46	; 0x2e
 8000eb2:	f7ff ff74 	bl	8000d9e <dwt_write16bitoffsetreg>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8000ec2:	200e      	movs	r0, #14
 8000ec4:	f000 f82a 	bl	8000f1c <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8000ec8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ecc:	2106      	movs	r1, #6
 8000ece:	202d      	movs	r0, #45	; 0x2d
 8000ed0:	f7ff ff65 	bl	8000d9e <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f000 f9dd 	bl	8001294 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8000eda:	2001      	movs	r0, #1
 8000edc:	f000 f81e 	bl	8000f1c <_dwt_enableclocks>
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <dwt_setrxaftertxdelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxaftertxdelay(uint32 rxDelayTime)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
    uint32 val = dwt_read32bitreg(ACK_RESP_T_ID) ; // Read ACK_RESP_T_ID register
 8000eec:	2100      	movs	r1, #0
 8000eee:	201a      	movs	r0, #26
 8000ef0:	f7ff feeb 	bl	8000cca <dwt_read32bitoffsetreg>
 8000ef4:	60f8      	str	r0, [r7, #12]

    val &= ~(ACK_RESP_T_W4R_TIM_MASK) ; // Clear the timer (19:0)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	0d1b      	lsrs	r3, r3, #20
 8000efa:	051b      	lsls	r3, r3, #20
 8000efc:	60fb      	str	r3, [r7, #12]

    val |= (rxDelayTime & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000f04:	68fa      	ldr	r2, [r7, #12]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(ACK_RESP_T_ID, val) ;
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	201a      	movs	r0, #26
 8000f10:	f7ff ff61 	bl	8000dd6 <dwt_write32bitoffsetreg>
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	2202      	movs	r2, #2
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	2036      	movs	r0, #54	; 0x36
 8000f2e:	f7ff fe78 	bl	8000c22 <dwt_readfromdevice>
    switch(clocks)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b0e      	cmp	r3, #14
 8000f36:	d876      	bhi.n	8001026 <_dwt_enableclocks+0x10a>
 8000f38:	a201      	add	r2, pc, #4	; (adr r2, 8000f40 <_dwt_enableclocks+0x24>)
 8000f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3e:	bf00      	nop
 8000f40:	08000f8d 	.word	0x08000f8d
 8000f44:	08000f7d 	.word	0x08000f7d
 8000f48:	08000fa3 	.word	0x08000fa3
 8000f4c:	08001027 	.word	0x08001027
 8000f50:	08001027 	.word	0x08001027
 8000f54:	08001027 	.word	0x08001027
 8000f58:	08001027 	.word	0x08001027
 8000f5c:	08000fb9 	.word	0x08000fb9
 8000f60:	08000fd9 	.word	0x08000fd9
 8000f64:	08001027 	.word	0x08001027
 8000f68:	08001027 	.word	0x08001027
 8000f6c:	08000fef 	.word	0x08000fef
 8000f70:	08000ffb 	.word	0x08000ffb
 8000f74:	08001007 	.word	0x08001007
 8000f78:	0800101d 	.word	0x0800101d
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8000f80:	7b7b      	ldrb	r3, [r7, #13]
 8000f82:	f023 0301 	bic.w	r3, r3, #1
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f8a:	e04d      	b.n	8001028 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8000f8c:	7b3b      	ldrb	r3, [r7, #12]
 8000f8e:	b25b      	sxtb	r3, r3
 8000f90:	f023 0303 	bic.w	r3, r3, #3
 8000f94:	b25b      	sxtb	r3, r3
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	b25b      	sxtb	r3, r3
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000fa0:	e042      	b.n	8001028 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8000fa2:	7b3b      	ldrb	r3, [r7, #12]
 8000fa4:	b25b      	sxtb	r3, r3
 8000fa6:	f023 0303 	bic.w	r3, r3, #3
 8000faa:	b25b      	sxtb	r3, r3
 8000fac:	f043 0302 	orr.w	r3, r3, #2
 8000fb0:	b25b      	sxtb	r3, r3
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000fb6:	e037      	b.n	8001028 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8000fb8:	7b3b      	ldrb	r3, [r7, #12]
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8000fc6:	b25b      	sxtb	r3, r3
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8000fcc:	7b7b      	ldrb	r3, [r7, #13]
 8000fce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000fd6:	e027      	b.n	8001028 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8000fd8:	7b3b      	ldrb	r3, [r7, #12]
 8000fda:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8000fe2:	7b7b      	ldrb	r3, [r7, #13]
 8000fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000fec:	e01c      	b.n	8001028 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8000fee:	7b7b      	ldrb	r3, [r7, #13]
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000ff8:	e016      	b.n	8001028 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8000ffa:	7b7b      	ldrb	r3, [r7, #13]
 8000ffc:	f023 0302 	bic.w	r3, r3, #2
 8001000:	b2db      	uxtb	r3, r3
 8001002:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001004:	e010      	b.n	8001028 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8001006:	7b3b      	ldrb	r3, [r7, #12]
 8001008:	b25b      	sxtb	r3, r3
 800100a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800100e:	b25b      	sxtb	r3, r3
 8001010:	f043 0320 	orr.w	r3, r3, #32
 8001014:	b25b      	sxtb	r3, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	733b      	strb	r3, [r7, #12]
        }
        break;
 800101a:	e005      	b.n	8001028 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 800101c:	2301      	movs	r3, #1
 800101e:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8001020:	2303      	movs	r3, #3
 8001022:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001024:	e000      	b.n	8001028 <_dwt_enableclocks+0x10c>
        default:
        break;
 8001026:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	2201      	movs	r2, #1
 800102e:	2100      	movs	r1, #0
 8001030:	2036      	movs	r0, #54	; 0x36
 8001032:	f7ff fd9f 	bl	8000b74 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8001036:	f107 030c 	add.w	r3, r7, #12
 800103a:	3301      	adds	r3, #1
 800103c:	2201      	movs	r2, #1
 800103e:	2101      	movs	r1, #1
 8001040:	2036      	movs	r0, #54	; 0x36
 8001042:	f7ff fd97 	bl	8000b74 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop

08001050 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8001054:	2000      	movs	r0, #0
 8001056:	f7ff ff61 	bl	8000f1c <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 800105a:	2200      	movs	r2, #0
 800105c:	2104      	movs	r1, #4
 800105e:	2036      	movs	r0, #54	; 0x36
 8001060:	f7ff fe9d 	bl	8000d9e <dwt_write16bitoffsetreg>
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}

08001068 <dwt_setdelayedtrxtime>:
 * output parameters none
 *
 * no return value
 */
void dwt_setdelayedtrxtime(uint32 starttime)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
    dwt_write32bitoffsetreg(DX_TIME_ID, 1, starttime); // Write at offset 1 as the lower 9 bits of this register are ignored
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	2101      	movs	r1, #1
 8001074:	200a      	movs	r0, #10
 8001076:	f7ff feae 	bl	8000dd6 <dwt_write32bitoffsetreg>

} // end dwt_setdelayedtrxtime()
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
    int retval = DWT_SUCCESS ;
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 8001092:	2300      	movs	r3, #0
 8001094:	72fb      	strb	r3, [r7, #11]
    uint16 checkTxOK = 0 ;
 8001096:	2300      	movs	r3, #0
 8001098:	813b      	strh	r3, [r7, #8]

    if(mode & DWT_RESPONSE_EXPECTED)
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d005      	beq.n	80010b0 <dwt_starttx+0x2c>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	72fb      	strb	r3, [r7, #11]
        pdw1000local->wait4resp = 1;
 80010a8:	4b1c      	ldr	r3, [pc, #112]	; (800111c <dwt_starttx+0x98>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2201      	movs	r2, #1
 80010ae:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d020      	beq.n	80010fc <dwt_starttx+0x78>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 80010ba:	7afb      	ldrb	r3, [r7, #11]
 80010bc:	f043 0306 	orr.w	r3, r3, #6
 80010c0:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 80010c2:	7afb      	ldrb	r3, [r7, #11]
 80010c4:	461a      	mov	r2, r3
 80010c6:	2100      	movs	r1, #0
 80010c8:	200d      	movs	r0, #13
 80010ca:	f7ff fe55 	bl	8000d78 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 80010ce:	2103      	movs	r1, #3
 80010d0:	200f      	movs	r0, #15
 80010d2:	f7ff fe21 	bl	8000d18 <dwt_read16bitoffsetreg>
 80010d6:	4603      	mov	r3, r0
 80010d8:	813b      	strh	r3, [r7, #8]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 80010da:	893b      	ldrh	r3, [r7, #8]
 80010dc:	f403 6381 	and.w	r3, r3, #1032	; 0x408
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <dwt_starttx+0x66>
        {
            retval = DWT_SUCCESS ; // All okay
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	e012      	b.n	8001110 <dwt_starttx+0x8c>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 80010ea:	2240      	movs	r2, #64	; 0x40
 80010ec:	2100      	movs	r1, #0
 80010ee:	200d      	movs	r0, #13
 80010f0:	f7ff fe42 	bl	8000d78 <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 80010f4:	f04f 33ff 	mov.w	r3, #4294967295
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	e009      	b.n	8001110 <dwt_starttx+0x8c>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 80010fc:	7afb      	ldrb	r3, [r7, #11]
 80010fe:	f043 0302 	orr.w	r3, r3, #2
 8001102:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8001104:	7afb      	ldrb	r3, [r7, #11]
 8001106:	461a      	mov	r2, r3
 8001108:	2100      	movs	r1, #0
 800110a:	200d      	movs	r0, #13
 800110c:	f7ff fe34 	bl	8000d78 <dwt_write8bitoffsetreg>
    }

    return retval;
 8001110:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000000 	.word	0x20000000

08001120 <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	80fb      	strh	r3, [r7, #6]
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
 800112a:	2103      	movs	r1, #3
 800112c:	2004      	movs	r0, #4
 800112e:	f7ff fe10 	bl	8000d52 <dwt_read8bitoffsetreg>
 8001132:	4603      	mov	r3, r0
 8001134:	73fb      	strb	r3, [r7, #15]

    if(time > 0)
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d018      	beq.n	800116e <dwt_setrxtimeout+0x4e>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
 800113c:	88fb      	ldrh	r3, [r7, #6]
 800113e:	461a      	mov	r2, r3
 8001140:	2100      	movs	r1, #0
 8001142:	200c      	movs	r0, #12
 8001144:	f7ff fe2b 	bl	8000d9e <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	f043 0310 	orr.w	r3, r3, #16
 800114e:	73fb      	strb	r3, [r7, #15]
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <dwt_setrxtimeout+0x7c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	691a      	ldr	r2, [r3, #16]
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <dwt_setrxtimeout+0x7c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800115e:	611a      	str	r2, [r3, #16]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	461a      	mov	r2, r3
 8001164:	2103      	movs	r1, #3
 8001166:	2004      	movs	r0, #4
 8001168:	f7ff fe06 	bl	8000d78 <dwt_write8bitoffsetreg>
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
 800116c:	e011      	b.n	8001192 <dwt_setrxtimeout+0x72>
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	f023 0310 	bic.w	r3, r3, #16
 8001174:	73fb      	strb	r3, [r7, #15]
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <dwt_setrxtimeout+0x7c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	691a      	ldr	r2, [r3, #16]
 800117c:	4b07      	ldr	r3, [pc, #28]	; (800119c <dwt_setrxtimeout+0x7c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001184:	611a      	str	r2, [r3, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	461a      	mov	r2, r3
 800118a:	2103      	movs	r1, #3
 800118c:	2004      	movs	r0, #4
 800118e:	f7ff fdf3 	bl	8000d78 <dwt_write8bitoffsetreg>
} // end dwt_setrxtimeout()
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000000 	.word	0x20000000

080011a0 <dwt_setpreambledetecttimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setpreambledetecttimeout(uint16 timeout)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	80fb      	strh	r3, [r7, #6]
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_PRETOC_OFFSET, timeout);
 80011aa:	88fb      	ldrh	r3, [r7, #6]
 80011ac:	461a      	mov	r2, r3
 80011ae:	2124      	movs	r1, #36	; 0x24
 80011b0:	2027      	movs	r0, #39	; 0x27
 80011b2:	f7ff fdf4 	bl	8000d9e <dwt_write16bitoffsetreg>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	af00      	add	r7, sp, #0
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 80011c2:	22e0      	movs	r2, #224	; 0xe0
 80011c4:	2103      	movs	r1, #3
 80011c6:	2036      	movs	r0, #54	; 0x36
 80011c8:	f7ff fdd6 	bl	8000d78 <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 80011cc:	22f0      	movs	r2, #240	; 0xf0
 80011ce:	2103      	movs	r1, #3
 80011d0:	2036      	movs	r0, #54	; 0x36
 80011d2:	f7ff fdd1 	bl	8000d78 <dwt_write8bitoffsetreg>
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 80011e0:	f7ff ff36 	bl	8001050 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2100      	movs	r1, #0
 80011e8:	202c      	movs	r0, #44	; 0x2c
 80011ea:	f7ff fdd8 	bl	8000d9e <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2106      	movs	r1, #6
 80011f2:	202c      	movs	r0, #44	; 0x2c
 80011f4:	f7ff fdc0 	bl	8000d78 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 80011f8:	f7ff fe33 	bl	8000e62 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2103      	movs	r1, #3
 8001200:	2036      	movs	r0, #54	; 0x36
 8001202:	f7ff fdb9 	bl	8000d78 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8001206:	2001      	movs	r0, #1
 8001208:	f000 f844 	bl	8001294 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 800120c:	22f0      	movs	r2, #240	; 0xf0
 800120e:	2103      	movs	r1, #3
 8001210:	2036      	movs	r0, #54	; 0x36
 8001212:	f7ff fdb1 	bl	8000d78 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8001216:	4b03      	ldr	r3, [pc, #12]	; (8001224 <dwt_softreset+0x48>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2200      	movs	r2, #0
 800121c:	755a      	strb	r2, [r3, #21]
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000000 	.word	0x20000000

08001228 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	f003 031f 	and.w	r3, r3, #31
 800123a:	b25b      	sxtb	r3, r3
 800123c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001240:	b25b      	sxtb	r3, r3
 8001242:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	461a      	mov	r2, r3
 8001248:	210e      	movs	r1, #14
 800124a:	202b      	movs	r0, #43	; 0x2b
 800124c:	f7ff fd94 	bl	8000d78 <dwt_write8bitoffsetreg>
}
 8001250:	bf00      	nop
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 800125e:	f000 f9bb 	bl	80015d8 <port_GetEXT_IRQStatus>
 8001262:	4603      	mov	r3, r0
 8001264:	607b      	str	r3, [r7, #4]

	if(s) {
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 800126c:	f000 f9a6 	bl	80015bc <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 8001270:	687b      	ldr	r3, [r7, #4]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 8001288:	f000 f99f 	bl	80015ca <port_EnableEXT_IRQ>
	}
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f8ef 	bl	8001480 <Sleep>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 80012ac:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80012b0:	4683      	mov	fp, r0
 80012b2:	468a      	mov	sl, r1
 80012b4:	4690      	mov	r8, r2
 80012b6:	4699      	mov	r9, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 80012b8:	f7ff ffce 	bl	8001258 <decamutexon>

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80012bc:	4d13      	ldr	r5, [pc, #76]	; (800130c <writetospi+0x60>)
    stat = decamutexon() ;
 80012be:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80012c0:	4628      	mov	r0, r5
 80012c2:	f002 f9d0 	bl	8003666 <HAL_SPI_GetState>
 80012c6:	2801      	cmp	r0, #1
 80012c8:	4604      	mov	r4, r0
 80012ca:	d1f9      	bne.n	80012c0 <writetospi+0x14>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 80012cc:	4810      	ldr	r0, [pc, #64]	; (8001310 <writetospi+0x64>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	2140      	movs	r1, #64	; 0x40
 80012d2:	f001 fa4d 	bl	8002770 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 80012d6:	465a      	mov	r2, fp
 80012d8:	4651      	mov	r1, sl
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	480b      	ldr	r0, [pc, #44]	; (800130c <writetospi+0x60>)
 80012e0:	f002 f885 	bl	80033ee <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295
 80012e8:	4649      	mov	r1, r9
 80012ea:	fa1f f288 	uxth.w	r2, r8
 80012ee:	4807      	ldr	r0, [pc, #28]	; (800130c <writetospi+0x60>)
 80012f0:	f002 f87d 	bl	80033ee <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80012f4:	4622      	mov	r2, r4
 80012f6:	2140      	movs	r1, #64	; 0x40
 80012f8:	4805      	ldr	r0, [pc, #20]	; (8001310 <writetospi+0x64>)
 80012fa:	f001 fa39 	bl	8002770 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80012fe:	4630      	mov	r0, r6
 8001300:	f7ff ffbb 	bl	800127a <decamutexoff>

    return 0;
} // end writetospi()
 8001304:	2000      	movs	r0, #0
 8001306:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 800130a:	bf00      	nop
 800130c:	20000148 	.word	0x20000148
 8001310:	40020400 	.word	0x40020400

08001314 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 8001314:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 8001318:	4681      	mov	r9, r0
 800131a:	460c      	mov	r4, r1
 800131c:	4690      	mov	r8, r2
 800131e:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001320:	f7ff ff9a 	bl	8001258 <decamutexon>

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001324:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80013a4 <readfromspi+0x90>
    stat = decamutexon() ;
 8001328:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800132a:	4650      	mov	r0, sl
 800132c:	f002 f99b 	bl	8003666 <HAL_SPI_GetState>
 8001330:	2801      	cmp	r0, #1
 8001332:	d1fa      	bne.n	800132a <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8001334:	481a      	ldr	r0, [pc, #104]	; (80013a0 <readfromspi+0x8c>)
 8001336:	2200      	movs	r2, #0
 8001338:	2140      	movs	r1, #64	; 0x40
 800133a:	f001 fa19 	bl	8002770 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 800133e:	f1b9 0f00 	cmp.w	r9, #0
 8001342:	d00c      	beq.n	800135e <readfromspi+0x4a>
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8001344:	f8df a05c 	ldr.w	sl, [pc, #92]	; 80013a4 <readfromspi+0x90>
 8001348:	44a1      	add	r9, r4
 800134a:	2201      	movs	r2, #1
 800134c:	4621      	mov	r1, r4
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
    for(i=0; i<headerLength; i++)
 8001352:	4414      	add	r4, r2
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8001354:	4650      	mov	r0, sl
 8001356:	f002 f84a 	bl	80033ee <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 800135a:	454c      	cmp	r4, r9
 800135c:	d1f5      	bne.n	800134a <readfromspi+0x36>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 800135e:	f1b8 0f00 	cmp.w	r8, #0
 8001362:	d012      	beq.n	800138a <readfromspi+0x76>
 8001364:	f8df c03c 	ldr.w	ip, [pc, #60]	; 80013a4 <readfromspi+0x90>
 8001368:	eb05 0008 	add.w	r0, r5, r8
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 800136c:	2400      	movs	r4, #0
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 800136e:	f8dc 2000 	ldr.w	r2, [ip]
 8001372:	6891      	ldr	r1, [r2, #8]
 8001374:	0789      	lsls	r1, r1, #30
 8001376:	d5fc      	bpl.n	8001372 <readfromspi+0x5e>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8001378:	60d4      	str	r4, [r2, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 800137a:	6891      	ldr	r1, [r2, #8]
 800137c:	07cb      	lsls	r3, r1, #31
 800137e:	d5fc      	bpl.n	800137a <readfromspi+0x66>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 8001380:	68d3      	ldr	r3, [r2, #12]
 8001382:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 8001386:	4285      	cmp	r5, r0
 8001388:	d1f1      	bne.n	800136e <readfromspi+0x5a>
    }

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800138a:	2201      	movs	r2, #1
 800138c:	2140      	movs	r1, #64	; 0x40
 800138e:	4804      	ldr	r0, [pc, #16]	; (80013a0 <readfromspi+0x8c>)
 8001390:	f001 f9ee 	bl	8002770 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8001394:	4630      	mov	r0, r6
 8001396:	f7ff ff70 	bl	800127a <decamutexoff>

    return 0;
} // end readfromspi()
 800139a:	2000      	movs	r0, #0
 800139c:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 80013a0:	40020400 	.word	0x40020400
 80013a4:	20000148 	.word	0x20000148

080013a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	db0b      	blt.n	80013d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	f003 021f 	and.w	r2, r3, #31
 80013c0:	4907      	ldr	r1, [pc, #28]	; (80013e0 <__NVIC_EnableIRQ+0x38>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	095b      	lsrs	r3, r3, #5
 80013c8:	2001      	movs	r0, #1
 80013ca:	fa00 f202 	lsl.w	r2, r0, r2
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000e100 	.word	0xe000e100

080013e4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	db12      	blt.n	800141c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	f003 021f 	and.w	r2, r3, #31
 80013fc:	490a      	ldr	r1, [pc, #40]	; (8001428 <__NVIC_DisableIRQ+0x44>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	095b      	lsrs	r3, r3, #5
 8001404:	2001      	movs	r0, #1
 8001406:	fa00 f202 	lsl.w	r2, r0, r2
 800140a:	3320      	adds	r3, #32
 800140c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001410:	f3bf 8f4f 	dsb	sy
}
 8001414:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001416:	f3bf 8f6f 	isb	sy
}
 800141a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000e100 	.word	0xe000e100

0800142c <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
int usleep(useconds_t usec)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	e012      	b.n	8001460 <usleep+0x34>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	e004      	b.n	800144a <usleep+0x1e>
        {
            __NOP();
 8001440:	bf00      	nop
            __NOP();
 8001442:	bf00      	nop
        for(j=0;j<2;j++)
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	3301      	adds	r3, #1
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	2b01      	cmp	r3, #1
 800144e:	bfd4      	ite	le
 8001450:	2301      	movle	r3, #1
 8001452:	2300      	movgt	r3, #0
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f2      	bne.n	8001440 <usleep+0x14>
    for(i=0;i<usec;i++)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	3301      	adds	r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	429a      	cmp	r2, r3
 8001466:	bf8c      	ite	hi
 8001468:	2301      	movhi	r3, #1
 800146a:	2300      	movls	r3, #0
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1e3      	bne.n	800143a <usleep+0xe>
        }
    }
    return 0;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 fdf3 	bl	8002074 <HAL_Delay>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 80014a0:	4a0b      	ldr	r2, [pc, #44]	; (80014d0 <EXTI_GetITEnStatus+0x38>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	095b      	lsrs	r3, r3, #5
 80014a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f003 031f 	and.w	r3, r3, #31
 80014b0:	fa22 f303 	lsr.w	r3, r2, r3
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	bf14      	ite	ne
 80014bc:	2301      	movne	r3, #1
 80014be:	2300      	moveq	r3, #0
 80014c0:	b2db      	uxtb	r3, r3
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000e100 	.word	0xe000e100

080014d4 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RST_Pin;
 80014da:	2301      	movs	r3, #1
 80014dc:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80014de:	2311      	movs	r3, #17
 80014e0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	4619      	mov	r1, r3
 80014ea:	480a      	ldr	r0, [pc, #40]	; (8001514 <reset_DW1000+0x40>)
 80014ec:	f000 ffbc 	bl	8002468 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2101      	movs	r1, #1
 80014f4:	4807      	ldr	r0, [pc, #28]	; (8001514 <reset_DW1000+0x40>)
 80014f6:	f001 f93b 	bl	8002770 <HAL_GPIO_WritePin>

    usleep(1);
 80014fa:	2001      	movs	r0, #1
 80014fc:	f7ff ff96 	bl	800142c <usleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 8001500:	2000      	movs	r0, #0
 8001502:	f000 f809 	bl	8001518 <setup_DW1000RSTnIRQ>



    Sleep(2);
 8001506:	2002      	movs	r0, #2
 8001508:	f7ff ffba 	bl	8001480 <Sleep>
}
 800150c:	bf00      	nop
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40020000 	.word	0x40020000

08001518 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b088      	sub	sp, #32
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d015      	beq.n	8001552 <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8001526:	2301      	movs	r3, #1
 8001528:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800152a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800152e:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001534:	f107 030c 	add.w	r3, r7, #12
 8001538:	4619      	mov	r1, r3
 800153a:	4813      	ldr	r0, [pc, #76]	; (8001588 <setup_DW1000RSTnIRQ+0x70>)
 800153c:	f000 ff94 	bl	8002468 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 8001540:	2006      	movs	r0, #6
 8001542:	f000 fed6 	bl	80022f2 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	2105      	movs	r1, #5
 800154a:	2006      	movs	r0, #6
 800154c:	f000 feb5 	bl	80022ba <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
    }
}
 8001550:	e015      	b.n	800157e <setup_DW1000RSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 8001552:	2006      	movs	r0, #6
 8001554:	f000 fedb 	bl	800230e <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8001558:	2301      	movs	r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800155c:	2311      	movs	r3, #17
 800155e:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001564:	2302      	movs	r3, #2
 8001566:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	4619      	mov	r1, r3
 800156e:	4806      	ldr	r0, [pc, #24]	; (8001588 <setup_DW1000RSTnIRQ+0x70>)
 8001570:	f000 ff7a 	bl	8002468 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
 8001574:	2201      	movs	r2, #1
 8001576:	2101      	movs	r1, #1
 8001578:	4803      	ldr	r0, [pc, #12]	; (8001588 <setup_DW1000RSTnIRQ+0x70>)
 800157a:	f001 f8f9 	bl	8002770 <HAL_GPIO_WritePin>
}
 800157e:	bf00      	nop
 8001580:	3720      	adds	r7, #32
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40020000 	.word	0x40020000

0800158c <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001590:	4b03      	ldr	r3, [pc, #12]	; (80015a0 <port_set_dw1000_slowrate+0x14>)
 8001592:	2220      	movs	r2, #32
 8001594:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8001596:	4802      	ldr	r0, [pc, #8]	; (80015a0 <port_set_dw1000_slowrate+0x14>)
 8001598:	f001 fea0 	bl	80032dc <HAL_SPI_Init>
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000148 	.word	0x20000148

080015a4 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80015a8:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <port_set_dw1000_fastrate+0x14>)
 80015aa:	2208      	movs	r2, #8
 80015ac:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 80015ae:	4802      	ldr	r0, [pc, #8]	; (80015b8 <port_set_dw1000_fastrate+0x14>)
 80015b0:	f001 fe94 	bl	80032dc <HAL_SPI_Init>
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000148 	.word	0x20000148

080015bc <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 80015c0:	2017      	movs	r0, #23
 80015c2:	f7ff ff0f 	bl	80013e4 <__NVIC_DisableIRQ>
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}

080015ca <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 80015ce:	2017      	movs	r0, #23
 80015d0:	f7ff feea 	bl	80013a8 <__NVIC_EnableIRQ>
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 80015dc:	2017      	movs	r0, #23
 80015de:	f7ff ff5b 	bl	8001498 <EXTI_GetITEnStatus>
 80015e2:	4603      	mov	r3, r0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <MX_GPIO_Init+0xe0>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a30      	ldr	r2, [pc, #192]	; (80016c8 <MX_GPIO_Init+0xe0>)
 8001608:	f043 0304 	orr.w	r3, r3, #4
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b2e      	ldr	r3, [pc, #184]	; (80016c8 <MX_GPIO_Init+0xe0>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0304 	and.w	r3, r3, #4
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	4b2a      	ldr	r3, [pc, #168]	; (80016c8 <MX_GPIO_Init+0xe0>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a29      	ldr	r2, [pc, #164]	; (80016c8 <MX_GPIO_Init+0xe0>)
 8001624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b27      	ldr	r3, [pc, #156]	; (80016c8 <MX_GPIO_Init+0xe0>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	4b23      	ldr	r3, [pc, #140]	; (80016c8 <MX_GPIO_Init+0xe0>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a22      	ldr	r2, [pc, #136]	; (80016c8 <MX_GPIO_Init+0xe0>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <MX_GPIO_Init+0xe0>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <MX_GPIO_Init+0xe0>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a1b      	ldr	r2, [pc, #108]	; (80016c8 <MX_GPIO_Init+0xe0>)
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <MX_GPIO_Init+0xe0>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DW_RST_Pin|DW_IRQ_Pin, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	f241 0101 	movw	r1, #4097	; 0x1001
 8001674:	4815      	ldr	r0, [pc, #84]	; (80016cc <MX_GPIO_Init+0xe4>)
 8001676:	f001 f87b 	bl	8002770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	2140      	movs	r1, #64	; 0x40
 800167e:	4814      	ldr	r0, [pc, #80]	; (80016d0 <MX_GPIO_Init+0xe8>)
 8001680:	f001 f876 	bl	8002770 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DW_RST_Pin|DW_IRQ_Pin;
 8001684:	f241 0301 	movw	r3, #4097	; 0x1001
 8001688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168a:	2301      	movs	r3, #1
 800168c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001696:	f107 0314 	add.w	r3, r7, #20
 800169a:	4619      	mov	r1, r3
 800169c:	480b      	ldr	r0, [pc, #44]	; (80016cc <MX_GPIO_Init+0xe4>)
 800169e:	f000 fee3 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_CS_Pin;
 80016a2:	2340      	movs	r3, #64	; 0x40
 80016a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a6:	2301      	movs	r3, #1
 80016a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	2300      	movs	r3, #0
 80016b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4619      	mov	r1, r3
 80016b8:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_GPIO_Init+0xe8>)
 80016ba:	f000 fed5 	bl	8002468 <HAL_GPIO_Init>

}
 80016be:	bf00      	nop
 80016c0:	3728      	adds	r7, #40	; 0x28
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020000 	.word	0x40020000
 80016d0:	40020400 	.word	0x40020400

080016d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <MX_I2C1_Init+0x50>)
 80016da:	4a13      	ldr	r2, [pc, #76]	; (8001728 <MX_I2C1_Init+0x54>)
 80016dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016de:	4b11      	ldr	r3, [pc, #68]	; (8001724 <MX_I2C1_Init+0x50>)
 80016e0:	4a12      	ldr	r2, [pc, #72]	; (800172c <MX_I2C1_Init+0x58>)
 80016e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016e4:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <MX_I2C1_Init+0x50>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <MX_I2C1_Init+0x50>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <MX_I2C1_Init+0x50>)
 80016f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016f8:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <MX_I2C1_Init+0x50>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <MX_I2C1_Init+0x50>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001704:	4b07      	ldr	r3, [pc, #28]	; (8001724 <MX_I2C1_Init+0x50>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <MX_I2C1_Init+0x50>)
 800170c:	2200      	movs	r2, #0
 800170e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001710:	4804      	ldr	r0, [pc, #16]	; (8001724 <MX_I2C1_Init+0x50>)
 8001712:	f001 f847 	bl	80027a4 <HAL_I2C_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800171c:	f000 faa2 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	200000bc 	.word	0x200000bc
 8001728:	40005400 	.word	0x40005400
 800172c:	000186a0 	.word	0x000186a0

08001730 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08a      	sub	sp, #40	; 0x28
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a19      	ldr	r2, [pc, #100]	; (80017b4 <HAL_I2C_MspInit+0x84>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d12c      	bne.n	80017ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
 8001756:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <HAL_I2C_MspInit+0x88>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a17      	ldr	r2, [pc, #92]	; (80017b8 <HAL_I2C_MspInit+0x88>)
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <HAL_I2C_MspInit+0x88>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800176e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001774:	2312      	movs	r3, #18
 8001776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177c:	2303      	movs	r3, #3
 800177e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001780:	2304      	movs	r3, #4
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	4619      	mov	r1, r3
 800178a:	480c      	ldr	r0, [pc, #48]	; (80017bc <HAL_I2C_MspInit+0x8c>)
 800178c:	f000 fe6c 	bl	8002468 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <HAL_I2C_MspInit+0x88>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	4a07      	ldr	r2, [pc, #28]	; (80017b8 <HAL_I2C_MspInit+0x88>)
 800179a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800179e:	6413      	str	r3, [r2, #64]	; 0x40
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <HAL_I2C_MspInit+0x88>)
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80017ac:	bf00      	nop
 80017ae:	3728      	adds	r7, #40	; 0x28
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40005400 	.word	0x40005400
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40020400 	.word	0x40020400

080017c0 <dw_main>:
 * @param  none
 *
 * @return none
 */
int dw_main(void)
{
 80017c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017c4:	b088      	sub	sp, #32
 80017c6:	af00      	add	r7, sp, #0
    /* Display application name on LCD. */
   HAL_UART_Transmit(&huart2, app_name, sizeof(app_name), HAL_MAX_DELAY);
 80017c8:	f04f 33ff 	mov.w	r3, #4294967295
 80017cc:	2211      	movs	r2, #17
 80017ce:	4985      	ldr	r1, [pc, #532]	; (80019e4 <dw_main+0x224>)
 80017d0:	4885      	ldr	r0, [pc, #532]	; (80019e8 <dw_main+0x228>)
 80017d2:	f002 f86e 	bl	80038b2 <HAL_UART_Transmit>

    /* Reset and initialise DW1000.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 80017d6:	f7ff fe7d 	bl	80014d4 <reset_DW1000>
    port_set_dw1000_slowrate();
 80017da:	f7ff fed7 	bl	800158c <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR)
 80017de:	2001      	movs	r0, #1
 80017e0:	f7fe fe7c 	bl	80004dc <dwt_initialise>
 80017e4:	4603      	mov	r3, r0
 80017e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ea:	d107      	bne.n	80017fc <dw_main+0x3c>
    {
//        lcd_display_str("INIT FAILED");
    	HAL_UART_Transmit(&huart2, "Init Failed!!!", 15, HAL_MAX_DELAY);
 80017ec:	f04f 33ff 	mov.w	r3, #4294967295
 80017f0:	220f      	movs	r2, #15
 80017f2:	497e      	ldr	r1, [pc, #504]	; (80019ec <dw_main+0x22c>)
 80017f4:	487c      	ldr	r0, [pc, #496]	; (80019e8 <dw_main+0x228>)
 80017f6:	f002 f85c 	bl	80038b2 <HAL_UART_Transmit>
        while (1)
 80017fa:	e7fe      	b.n	80017fa <dw_main+0x3a>
        { };
    }
    port_set_dw1000_fastrate();
 80017fc:	f7ff fed2 	bl	80015a4 <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 7 below. */
    dwt_configure(&config);
 8001800:	487b      	ldr	r0, [pc, #492]	; (80019f0 <dw_main+0x230>)
 8001802:	f7fe ffc1 	bl	8000788 <dwt_configure>

    /* Apply default antenna delay value. See NOTE 1 below. */
    dwt_setrxantennadelay(RX_ANT_DLY);
 8001806:	f244 0034 	movw	r0, #16436	; 0x4034
 800180a:	f7ff f927 	bl	8000a5c <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 800180e:	f244 0034 	movw	r0, #16436	; 0x4034
 8001812:	f7ff f933 	bl	8000a7c <dwt_settxantennadelay>

    /* Set expected response's delay and timeout. See NOTE 4, 5 and 6 below.
     * As this example only handles one incoming frame with always the same delay and timeout, those values can be set here once for all. */
    dwt_setrxaftertxdelay(POLL_TX_TO_RESP_RX_DLY_UUS);
 8001816:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800181a:	f7ff fb63 	bl	8000ee4 <dwt_setrxaftertxdelay>
    dwt_setrxtimeout(RESP_RX_TIMEOUT_UUS);
 800181e:	f640 208c 	movw	r0, #2700	; 0xa8c
 8001822:	f7ff fc7d 	bl	8001120 <dwt_setrxtimeout>
    dwt_setpreambledetecttimeout(PRE_TIMEOUT);
 8001826:	2008      	movs	r0, #8
 8001828:	f7ff fcba 	bl	80011a0 <dwt_setpreambledetecttimeout>

    /* Loop forever initiating ranging exchanges. */
    while (1)
    {
        /* Write frame data to DW1000 and prepare transmission. See NOTE 8 below. */
        tx_poll_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 800182c:	4b71      	ldr	r3, [pc, #452]	; (80019f4 <dw_main+0x234>)
 800182e:	781a      	ldrb	r2, [r3, #0]
 8001830:	4b71      	ldr	r3, [pc, #452]	; (80019f8 <dw_main+0x238>)
 8001832:	709a      	strb	r2, [r3, #2]
        dwt_writetxdata(sizeof(tx_poll_msg), tx_poll_msg, 0); /* Zero offset in TX buffer. */
 8001834:	2200      	movs	r2, #0
 8001836:	4970      	ldr	r1, [pc, #448]	; (80019f8 <dw_main+0x238>)
 8001838:	200c      	movs	r0, #12
 800183a:	f7ff f92e 	bl	8000a9a <dwt_writetxdata>
        dwt_writetxfctrl(sizeof(tx_poll_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
 800183e:	2201      	movs	r2, #1
 8001840:	2100      	movs	r1, #0
 8001842:	200c      	movs	r0, #12
 8001844:	f7ff f948 	bl	8000ad8 <dwt_writetxfctrl>

        /* Start transmission, indicating that a response is expected so that reception is enabled automatically after the frame is sent and the delay
         * set by dwt_setrxaftertxdelay() has elapsed. */
        dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED);
 8001848:	2002      	movs	r0, #2
 800184a:	f7ff fc1b 	bl	8001084 <dwt_starttx>

        /* We assume that the transmission is achieved correctly, poll for reception of a frame or error/timeout. See NOTE 9 below. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 800184e:	bf00      	nop
 8001850:	2100      	movs	r1, #0
 8001852:	200f      	movs	r0, #15
 8001854:	f7ff fa39 	bl	8000cca <dwt_read32bitoffsetreg>
 8001858:	4603      	mov	r3, r0
 800185a:	4a68      	ldr	r2, [pc, #416]	; (80019fc <dw_main+0x23c>)
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	4b67      	ldr	r3, [pc, #412]	; (80019fc <dw_main+0x23c>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4b67      	ldr	r3, [pc, #412]	; (8001a00 <dw_main+0x240>)
 8001864:	4013      	ands	r3, r2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f2      	beq.n	8001850 <dw_main+0x90>
        { };

        /* Increment frame sequence number after transmission of the poll message (modulo 256). */
        frame_seq_nb++;
 800186a:	4b62      	ldr	r3, [pc, #392]	; (80019f4 <dw_main+0x234>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	3301      	adds	r3, #1
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4b60      	ldr	r3, [pc, #384]	; (80019f4 <dw_main+0x234>)
 8001874:	701a      	strb	r2, [r3, #0]

        if (status_reg & SYS_STATUS_RXFCG)
 8001876:	4b61      	ldr	r3, [pc, #388]	; (80019fc <dw_main+0x23c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 80a4 	beq.w	80019cc <dw_main+0x20c>
        {
            uint32 frame_len;

            /* Clear good RX frame event and TX frame sent in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG | SYS_STATUS_TXFRS);
 8001884:	f44f 4281 	mov.w	r2, #16512	; 0x4080
 8001888:	2100      	movs	r1, #0
 800188a:	200f      	movs	r0, #15
 800188c:	f7ff faa3 	bl	8000dd6 <dwt_write32bitoffsetreg>

            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_MASK;
 8001890:	2100      	movs	r1, #0
 8001892:	2010      	movs	r0, #16
 8001894:	f7ff fa19 	bl	8000cca <dwt_read32bitoffsetreg>
 8001898:	4603      	mov	r3, r0
 800189a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800189e:	61fb      	str	r3, [r7, #28]
            if (frame_len <= RX_BUF_LEN)
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	2b14      	cmp	r3, #20
 80018a4:	d806      	bhi.n	80018b4 <dw_main+0xf4>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	2200      	movs	r2, #0
 80018ac:	4619      	mov	r1, r3
 80018ae:	4855      	ldr	r0, [pc, #340]	; (8001a04 <dw_main+0x244>)
 80018b0:	f7ff f932 	bl	8000b18 <dwt_readrxdata>
            }

            /* Check that the frame is the expected response from the companion "DS TWR responder" example.
             * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
            rx_buffer[ALL_MSG_SN_IDX] = 0;
 80018b4:	4b53      	ldr	r3, [pc, #332]	; (8001a04 <dw_main+0x244>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	709a      	strb	r2, [r3, #2]
            if (memcmp(rx_buffer, rx_resp_msg, ALL_MSG_COMMON_LEN) == 0)
 80018ba:	220a      	movs	r2, #10
 80018bc:	4952      	ldr	r1, [pc, #328]	; (8001a08 <dw_main+0x248>)
 80018be:	4851      	ldr	r0, [pc, #324]	; (8001a04 <dw_main+0x244>)
 80018c0:	f002 ffe2 	bl	8004888 <memcmp>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f040 8087 	bne.w	80019da <dw_main+0x21a>
            {
                uint32 final_tx_time;
                int ret;

                /* Retrieve poll transmission and response reception timestamp. */
                poll_tx_ts = get_tx_timestamp_u64();
 80018cc:	f000 f8b0 	bl	8001a30 <get_tx_timestamp_u64>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	494d      	ldr	r1, [pc, #308]	; (8001a0c <dw_main+0x24c>)
 80018d6:	e9c1 2300 	strd	r2, r3, [r1]
                resp_rx_ts = get_rx_timestamp_u64();
 80018da:	f000 f8e4 	bl	8001aa6 <get_rx_timestamp_u64>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	494b      	ldr	r1, [pc, #300]	; (8001a10 <dw_main+0x250>)
 80018e4:	e9c1 2300 	strd	r2, r3, [r1]

                /* Compute final message transmission time. See NOTE 10 below. */
                final_tx_time = (resp_rx_ts + (RESP_RX_TO_FINAL_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
 80018e8:	4b49      	ldr	r3, [pc, #292]	; (8001a10 <dw_main+0x250>)
 80018ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ee:	4949      	ldr	r1, [pc, #292]	; (8001a14 <dw_main+0x254>)
 80018f0:	eb12 0801 	adds.w	r8, r2, r1
 80018f4:	f143 0900 	adc.w	r9, r3, #0
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	f04f 0300 	mov.w	r3, #0
 8001900:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8001904:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
 8001908:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800190c:	4613      	mov	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
                dwt_setdelayedtrxtime(final_tx_time);
 8001910:	69b8      	ldr	r0, [r7, #24]
 8001912:	f7ff fba9 	bl	8001068 <dwt_setdelayedtrxtime>

                /* Final TX timestamp is the transmission time we programmed plus the TX antenna delay. */
                final_tx_ts = (((uint64)(final_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY;
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	2200      	movs	r2, #0
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	60fa      	str	r2, [r7, #12]
 800191e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001922:	460b      	mov	r3, r1
 8001924:	ea4f 6b13 	mov.w	fp, r3, lsr #24
 8001928:	460b      	mov	r3, r1
 800192a:	ea4f 2a03 	mov.w	sl, r3, lsl #8
 800192e:	f42a 74ff 	bic.w	r4, sl, #510	; 0x1fe
 8001932:	f024 0401 	bic.w	r4, r4, #1
 8001936:	f00b 05ff 	and.w	r5, fp, #255	; 0xff
 800193a:	f244 0334 	movw	r3, #16436	; 0x4034
 800193e:	18e3      	adds	r3, r4, r3
 8001940:	603b      	str	r3, [r7, #0]
 8001942:	f145 0300 	adc.w	r3, r5, #0
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	4b33      	ldr	r3, [pc, #204]	; (8001a18 <dw_main+0x258>)
 800194a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800194e:	e9c3 1200 	strd	r1, r2, [r3]

                /* Write all timestamps in the final message. See NOTE 11 below. */
                final_msg_set_ts(&tx_final_msg[FINAL_MSG_POLL_TX_TS_IDX], poll_tx_ts);
 8001952:	4b2e      	ldr	r3, [pc, #184]	; (8001a0c <dw_main+0x24c>)
 8001954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001958:	4830      	ldr	r0, [pc, #192]	; (8001a1c <dw_main+0x25c>)
 800195a:	f000 f8df 	bl	8001b1c <final_msg_set_ts>
                final_msg_set_ts(&tx_final_msg[FINAL_MSG_RESP_RX_TS_IDX], resp_rx_ts);
 800195e:	4b2c      	ldr	r3, [pc, #176]	; (8001a10 <dw_main+0x250>)
 8001960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001964:	482e      	ldr	r0, [pc, #184]	; (8001a20 <dw_main+0x260>)
 8001966:	f000 f8d9 	bl	8001b1c <final_msg_set_ts>
                final_msg_set_ts(&tx_final_msg[FINAL_MSG_FINAL_TX_TS_IDX], final_tx_ts);
 800196a:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <dw_main+0x258>)
 800196c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001970:	482c      	ldr	r0, [pc, #176]	; (8001a24 <dw_main+0x264>)
 8001972:	f000 f8d3 	bl	8001b1c <final_msg_set_ts>

                /* Write and send final message. See NOTE 8 below. */
                tx_final_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8001976:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <dw_main+0x234>)
 8001978:	781a      	ldrb	r2, [r3, #0]
 800197a:	4b2b      	ldr	r3, [pc, #172]	; (8001a28 <dw_main+0x268>)
 800197c:	709a      	strb	r2, [r3, #2]
                dwt_writetxdata(sizeof(tx_final_msg), tx_final_msg, 0); /* Zero offset in TX buffer. */
 800197e:	2200      	movs	r2, #0
 8001980:	4929      	ldr	r1, [pc, #164]	; (8001a28 <dw_main+0x268>)
 8001982:	2018      	movs	r0, #24
 8001984:	f7ff f889 	bl	8000a9a <dwt_writetxdata>
                dwt_writetxfctrl(sizeof(tx_final_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
 8001988:	2201      	movs	r2, #1
 800198a:	2100      	movs	r1, #0
 800198c:	2018      	movs	r0, #24
 800198e:	f7ff f8a3 	bl	8000ad8 <dwt_writetxfctrl>
                ret = dwt_starttx(DWT_START_TX_DELAYED);
 8001992:	2001      	movs	r0, #1
 8001994:	f7ff fb76 	bl	8001084 <dwt_starttx>
 8001998:	6178      	str	r0, [r7, #20]

                /* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 12 below. */
                if (ret == DWT_SUCCESS)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d11c      	bne.n	80019da <dw_main+0x21a>
                {
                    /* Poll DW1000 until TX frame sent event set. See NOTE 9 below. */
                    while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS))
 80019a0:	bf00      	nop
 80019a2:	2100      	movs	r1, #0
 80019a4:	200f      	movs	r0, #15
 80019a6:	f7ff f990 	bl	8000cca <dwt_read32bitoffsetreg>
 80019aa:	4603      	mov	r3, r0
 80019ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f6      	beq.n	80019a2 <dw_main+0x1e2>
                    { };

                    /* Clear TXFRS event. */
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
 80019b4:	2280      	movs	r2, #128	; 0x80
 80019b6:	2100      	movs	r1, #0
 80019b8:	200f      	movs	r0, #15
 80019ba:	f7ff fa0c 	bl	8000dd6 <dwt_write32bitoffsetreg>

                    /* Increment frame sequence number after transmission of the final message (modulo 256). */
                    frame_seq_nb++;
 80019be:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <dw_main+0x234>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	3301      	adds	r3, #1
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <dw_main+0x234>)
 80019c8:	701a      	strb	r2, [r3, #0]
 80019ca:	e006      	b.n	80019da <dw_main+0x21a>
            }
        }
        else
        {
            /* Clear RX error/timeout events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 80019cc:	4a17      	ldr	r2, [pc, #92]	; (8001a2c <dw_main+0x26c>)
 80019ce:	2100      	movs	r1, #0
 80019d0:	200f      	movs	r0, #15
 80019d2:	f7ff fa00 	bl	8000dd6 <dwt_write32bitoffsetreg>

            /* Reset RX to properly reinitialise LDE operation. */
            dwt_rxreset();
 80019d6:	f7ff fbf2 	bl	80011be <dwt_rxreset>
        }

        /* Execute a delay between ranging exchanges. */
        Sleep(RNG_DELAY_MS);
 80019da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019de:	f7ff fd4f 	bl	8001480 <Sleep>
        tx_poll_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 80019e2:	e723      	b.n	800182c <dw_main+0x6c>
 80019e4:	20000004 	.word	0x20000004
 80019e8:	200001a0 	.word	0x200001a0
 80019ec:	080048d0 	.word	0x080048d0
 80019f0:	20000018 	.word	0x20000018
 80019f4:	20000110 	.word	0x20000110
 80019f8:	20000024 	.word	0x20000024
 80019fc:	20000128 	.word	0x20000128
 8001a00:	2427d000 	.word	0x2427d000
 8001a04:	20000114 	.word	0x20000114
 8001a08:	20000030 	.word	0x20000030
 8001a0c:	20000130 	.word	0x20000130
 8001a10:	20000138 	.word	0x20000138
 8001a14:	0c1c0000 	.word	0x0c1c0000
 8001a18:	20000140 	.word	0x20000140
 8001a1c:	2000004a 	.word	0x2000004a
 8001a20:	2000004e 	.word	0x2000004e
 8001a24:	20000052 	.word	0x20000052
 8001a28:	20000040 	.word	0x20000040
 8001a2c:	24279000 	.word	0x24279000

08001a30 <get_tx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_tx_timestamp_u64(void)
{
 8001a30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a34:	b086      	sub	sp, #24
 8001a36:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int i;
    dwt_readtxtimestamp(ts_tab);
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff f878 	bl	8000b3c <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--)
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	e01e      	b.n	8001a90 <get_tx_timestamp_u64+0x60>
    {
        ts <<= 8;
 8001a52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	020b      	lsls	r3, r1, #8
 8001a60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8001a64:	0202      	lsls	r2, r0, #8
 8001a66:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ts |= ts_tab[i];
 8001a6a:	1d3a      	adds	r2, r7, #4
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4413      	add	r3, r2
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2200      	movs	r2, #0
 8001a76:	461c      	mov	r4, r3
 8001a78:	4615      	mov	r5, r2
 8001a7a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a7e:	ea42 0804 	orr.w	r8, r2, r4
 8001a82:	ea43 0905 	orr.w	r9, r3, r5
 8001a86:	e9c7 8904 	strd	r8, r9, [r7, #16]
    for (i = 4; i >= 0; i--)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	dadd      	bge.n	8001a52 <get_tx_timestamp_u64+0x22>
    }
    return ts;
 8001a96:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001aa6 <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_rx_timestamp_u64(void)
{
 8001aa6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int i;
    dwt_readrxtimestamp(ts_tab);
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff f84b 	bl	8000b58 <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	e01e      	b.n	8001b06 <get_rx_timestamp_u64+0x60>
    {
        ts <<= 8;
 8001ac8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001acc:	f04f 0200 	mov.w	r2, #0
 8001ad0:	f04f 0300 	mov.w	r3, #0
 8001ad4:	020b      	lsls	r3, r1, #8
 8001ad6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8001ada:	0202      	lsls	r2, r0, #8
 8001adc:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ts |= ts_tab[i];
 8001ae0:	1d3a      	adds	r2, r7, #4
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2200      	movs	r2, #0
 8001aec:	461c      	mov	r4, r3
 8001aee:	4615      	mov	r5, r2
 8001af0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001af4:	ea42 0804 	orr.w	r8, r2, r4
 8001af8:	ea43 0905 	orr.w	r9, r3, r5
 8001afc:	e9c7 8904 	strd	r8, r9, [r7, #16]
    for (i = 4; i >= 0; i--)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	dadd      	bge.n	8001ac8 <get_rx_timestamp_u64+0x22>
    }
    return ts;
 8001b0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8001b10:	4610      	mov	r0, r2
 8001b12:	4619      	mov	r1, r3
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001b1c <final_msg_set_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
static void final_msg_set_ts(uint8 *ts_field, uint64 ts)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b087      	sub	sp, #28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	e9c7 2300 	strd	r2, r3, [r7]
    int i;
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	e013      	b.n	8001b56 <final_msg_set_ts+0x3a>
    {
        ts_field[i] = (uint8) ts;
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	4413      	add	r3, r2
 8001b34:	783a      	ldrb	r2, [r7, #0]
 8001b36:	701a      	strb	r2, [r3, #0]
        ts >>= 8;
 8001b38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	0a02      	lsrs	r2, r0, #8
 8001b46:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001b4a:	0a0b      	lsrs	r3, r1, #8
 8001b4c:	e9c7 2300 	strd	r2, r3, [r7]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	3301      	adds	r3, #1
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	dde8      	ble.n	8001b2e <final_msg_set_ts+0x12>
    }
}
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	371c      	adds	r7, #28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b6e:	f000 fa0f 	bl	8001f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b72:	f000 f80f 	bl	8001b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b76:	f7ff fd37 	bl	80015e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b7a:	f000 f965 	bl	8001e48 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001b7e:	f7ff fda9 	bl	80016d4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001b82:	f000 f875 	bl	8001c70 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  setup_DW1000RSTnIRQ(0);
 8001b86:	2000      	movs	r0, #0
 8001b88:	f7ff fcc6 	bl	8001518 <setup_DW1000RSTnIRQ>
  dw_main();
 8001b8c:	f7ff fe18 	bl	80017c0 <dw_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <main+0x26>
	...

08001b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b094      	sub	sp, #80	; 0x50
 8001b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b9a:	f107 0320 	add.w	r3, r7, #32
 8001b9e:	2230      	movs	r2, #48	; 0x30
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f002 fe80 	bl	80048a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ba8:	f107 030c 	add.w	r3, r7, #12
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	4b27      	ldr	r3, [pc, #156]	; (8001c5c <SystemClock_Config+0xc8>)
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	4a26      	ldr	r2, [pc, #152]	; (8001c5c <SystemClock_Config+0xc8>)
 8001bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc8:	4b24      	ldr	r3, [pc, #144]	; (8001c5c <SystemClock_Config+0xc8>)
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	607b      	str	r3, [r7, #4]
 8001bd8:	4b21      	ldr	r3, [pc, #132]	; (8001c60 <SystemClock_Config+0xcc>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a20      	ldr	r2, [pc, #128]	; (8001c60 <SystemClock_Config+0xcc>)
 8001bde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <SystemClock_Config+0xcc>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bfe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 8001c04:	230d      	movs	r3, #13
 8001c06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001c08:	2364      	movs	r3, #100	; 0x64
 8001c0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c10:	2304      	movs	r3, #4
 8001c12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c14:	f107 0320 	add.w	r3, r7, #32
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f000 ff07 	bl	8002a2c <HAL_RCC_OscConfig>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c24:	f000 f81e 	bl	8001c64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c28:	230f      	movs	r3, #15
 8001c2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c3e:	f107 030c 	add.w	r3, r7, #12
 8001c42:	2103      	movs	r1, #3
 8001c44:	4618      	mov	r0, r3
 8001c46:	f001 f969 	bl	8002f1c <HAL_RCC_ClockConfig>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c50:	f000 f808 	bl	8001c64 <Error_Handler>
  }
}
 8001c54:	bf00      	nop
 8001c56:	3750      	adds	r7, #80	; 0x50
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40007000 	.word	0x40007000

08001c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c68:	b672      	cpsid	i
}
 8001c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <Error_Handler+0x8>
	...

08001c70 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001c74:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001c76:	4a18      	ldr	r2, [pc, #96]	; (8001cd8 <MX_SPI1_Init+0x68>)
 8001c78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c7a:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001c7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c82:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c88:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c94:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ca8:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cae:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cb4:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001cbc:	220a      	movs	r2, #10
 8001cbe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cc0:	4804      	ldr	r0, [pc, #16]	; (8001cd4 <MX_SPI1_Init+0x64>)
 8001cc2:	f001 fb0b 	bl	80032dc <HAL_SPI_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ccc:	f7ff ffca 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20000148 	.word	0x20000148
 8001cd8:	40013000 	.word	0x40013000

08001cdc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	; 0x28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a19      	ldr	r2, [pc, #100]	; (8001d60 <HAL_SPI_MspInit+0x84>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d12b      	bne.n	8001d56 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <HAL_SPI_MspInit+0x88>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	4a17      	ldr	r2, [pc, #92]	; (8001d64 <HAL_SPI_MspInit+0x88>)
 8001d08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <HAL_SPI_MspInit+0x88>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <HAL_SPI_MspInit+0x88>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a10      	ldr	r2, [pc, #64]	; (8001d64 <HAL_SPI_MspInit+0x88>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <HAL_SPI_MspInit+0x88>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d36:	23e0      	movs	r3, #224	; 0xe0
 8001d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d42:	2303      	movs	r3, #3
 8001d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d46:	2305      	movs	r3, #5
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4a:	f107 0314 	add.w	r3, r7, #20
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4805      	ldr	r0, [pc, #20]	; (8001d68 <HAL_SPI_MspInit+0x8c>)
 8001d52:	f000 fb89 	bl	8002468 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d56:	bf00      	nop
 8001d58:	3728      	adds	r7, #40	; 0x28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40013000 	.word	0x40013000
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40020000 	.word	0x40020000

08001d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <HAL_MspInit+0x4c>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	4a0f      	ldr	r2, [pc, #60]	; (8001db8 <HAL_MspInit+0x4c>)
 8001d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d80:	6453      	str	r3, [r2, #68]	; 0x44
 8001d82:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <HAL_MspInit+0x4c>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	603b      	str	r3, [r7, #0]
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_MspInit+0x4c>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	4a08      	ldr	r2, [pc, #32]	; (8001db8 <HAL_MspInit+0x4c>)
 8001d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_MspInit+0x4c>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001daa:	2007      	movs	r0, #7
 8001dac:	f000 fa7a 	bl	80022a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40023800 	.word	0x40023800

08001dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <NMI_Handler+0x4>

08001dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dc6:	e7fe      	b.n	8001dc6 <HardFault_Handler+0x4>

08001dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <MemManage_Handler+0x4>

08001dce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <BusFault_Handler+0x4>

08001dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <UsageFault_Handler+0x4>

08001dda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e08:	f000 f914 	bl	8002034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <USART2_IRQHandler+0x10>)
 8001e16:	f001 fddf 	bl	80039d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	200001a0 	.word	0x200001a0

08001e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <SystemInit+0x20>)
 8001e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2e:	4a05      	ldr	r2, [pc, #20]	; (8001e44 <SystemInit+0x20>)
 8001e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <MX_USART2_UART_Init+0x4c>)
 8001e4e:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <MX_USART2_UART_Init+0x50>)
 8001e50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <MX_USART2_UART_Init+0x4c>)
 8001e54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e5a:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <MX_USART2_UART_Init+0x4c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <MX_USART2_UART_Init+0x4c>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <MX_USART2_UART_Init+0x4c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <MX_USART2_UART_Init+0x4c>)
 8001e6e:	220c      	movs	r2, #12
 8001e70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e72:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <MX_USART2_UART_Init+0x4c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <MX_USART2_UART_Init+0x4c>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e7e:	4805      	ldr	r0, [pc, #20]	; (8001e94 <MX_USART2_UART_Init+0x4c>)
 8001e80:	f001 fcca 	bl	8003818 <HAL_UART_Init>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e8a:	f7ff feeb 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	200001a0 	.word	0x200001a0
 8001e98:	40004400 	.word	0x40004400

08001e9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08a      	sub	sp, #40	; 0x28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a1d      	ldr	r2, [pc, #116]	; (8001f30 <HAL_UART_MspInit+0x94>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d133      	bne.n	8001f26 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	4b1c      	ldr	r3, [pc, #112]	; (8001f34 <HAL_UART_MspInit+0x98>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	4a1b      	ldr	r2, [pc, #108]	; (8001f34 <HAL_UART_MspInit+0x98>)
 8001ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ece:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <HAL_UART_MspInit+0x98>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <HAL_UART_MspInit+0x98>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a14      	ldr	r2, [pc, #80]	; (8001f34 <HAL_UART_MspInit+0x98>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <HAL_UART_MspInit+0x98>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ef6:	230c      	movs	r3, #12
 8001ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f02:	2303      	movs	r3, #3
 8001f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f06:	2307      	movs	r3, #7
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0a:	f107 0314 	add.w	r3, r7, #20
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4809      	ldr	r0, [pc, #36]	; (8001f38 <HAL_UART_MspInit+0x9c>)
 8001f12:	f000 faa9 	bl	8002468 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2100      	movs	r1, #0
 8001f1a:	2026      	movs	r0, #38	; 0x26
 8001f1c:	f000 f9cd 	bl	80022ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f20:	2026      	movs	r0, #38	; 0x26
 8001f22:	f000 f9e6 	bl	80022f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f26:	bf00      	nop
 8001f28:	3728      	adds	r7, #40	; 0x28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40004400 	.word	0x40004400
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40020000 	.word	0x40020000

08001f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f40:	480d      	ldr	r0, [pc, #52]	; (8001f78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f42:	490e      	ldr	r1, [pc, #56]	; (8001f7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f44:	4a0e      	ldr	r2, [pc, #56]	; (8001f80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f48:	e002      	b.n	8001f50 <LoopCopyDataInit>

08001f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f4e:	3304      	adds	r3, #4

08001f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f54:	d3f9      	bcc.n	8001f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f56:	4a0b      	ldr	r2, [pc, #44]	; (8001f84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f58:	4c0b      	ldr	r4, [pc, #44]	; (8001f88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f5c:	e001      	b.n	8001f62 <LoopFillZerobss>

08001f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f60:	3204      	adds	r2, #4

08001f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f64:	d3fb      	bcc.n	8001f5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f66:	f7ff ff5d 	bl	8001e24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f6a:	f002 fc69 	bl	8004840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f6e:	f7ff fdfc 	bl	8001b6a <main>
  bx  lr    
 8001f72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f7c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001f80:	080049bc 	.word	0x080049bc
  ldr r2, =_sbss
 8001f84:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001f88:	200001e8 	.word	0x200001e8

08001f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f8c:	e7fe      	b.n	8001f8c <ADC_IRQHandler>
	...

08001f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f94:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <HAL_Init+0x40>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a0d      	ldr	r2, [pc, #52]	; (8001fd0 <HAL_Init+0x40>)
 8001f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_Init+0x40>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <HAL_Init+0x40>)
 8001fa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fac:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <HAL_Init+0x40>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a07      	ldr	r2, [pc, #28]	; (8001fd0 <HAL_Init+0x40>)
 8001fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb8:	2003      	movs	r0, #3
 8001fba:	f000 f973 	bl	80022a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f000 f808 	bl	8001fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc4:	f7ff fed2 	bl	8001d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023c00 	.word	0x40023c00

08001fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fdc:	4b12      	ldr	r3, [pc, #72]	; (8002028 <HAL_InitTick+0x54>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_InitTick+0x58>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 f999 	bl	800232a <HAL_SYSTICK_Config>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e00e      	b.n	8002020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b0f      	cmp	r3, #15
 8002006:	d80a      	bhi.n	800201e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002008:	2200      	movs	r2, #0
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	f04f 30ff 	mov.w	r0, #4294967295
 8002010:	f000 f953 	bl	80022ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002014:	4a06      	ldr	r2, [pc, #24]	; (8002030 <HAL_InitTick+0x5c>)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
 800201c:	e000      	b.n	8002020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
}
 8002020:	4618      	mov	r0, r3
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000058 	.word	0x20000058
 800202c:	20000060 	.word	0x20000060
 8002030:	2000005c 	.word	0x2000005c

08002034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_IncTick+0x20>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_IncTick+0x24>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4413      	add	r3, r2
 8002044:	4a04      	ldr	r2, [pc, #16]	; (8002058 <HAL_IncTick+0x24>)
 8002046:	6013      	str	r3, [r2, #0]
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	20000060 	.word	0x20000060
 8002058:	200001e4 	.word	0x200001e4

0800205c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return uwTick;
 8002060:	4b03      	ldr	r3, [pc, #12]	; (8002070 <HAL_GetTick+0x14>)
 8002062:	681b      	ldr	r3, [r3, #0]
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	200001e4 	.word	0x200001e4

08002074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800207c:	f7ff ffee 	bl	800205c <HAL_GetTick>
 8002080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208c:	d005      	beq.n	800209a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800208e:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <HAL_Delay+0x44>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4413      	add	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800209a:	bf00      	nop
 800209c:	f7ff ffde 	bl	800205c <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d8f7      	bhi.n	800209c <HAL_Delay+0x28>
  {
  }
}
 80020ac:	bf00      	nop
 80020ae:	bf00      	nop
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000060 	.word	0x20000060

080020bc <__NVIC_SetPriorityGrouping>:
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020cc:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <__NVIC_SetPriorityGrouping+0x44>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020d8:	4013      	ands	r3, r2
 80020da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ee:	4a04      	ldr	r2, [pc, #16]	; (8002100 <__NVIC_SetPriorityGrouping+0x44>)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	60d3      	str	r3, [r2, #12]
}
 80020f4:	bf00      	nop
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <__NVIC_GetPriorityGrouping>:
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002108:	4b04      	ldr	r3, [pc, #16]	; (800211c <__NVIC_GetPriorityGrouping+0x18>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	0a1b      	lsrs	r3, r3, #8
 800210e:	f003 0307 	and.w	r3, r3, #7
}
 8002112:	4618      	mov	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <__NVIC_EnableIRQ>:
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	2b00      	cmp	r3, #0
 8002130:	db0b      	blt.n	800214a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	f003 021f 	and.w	r2, r3, #31
 8002138:	4907      	ldr	r1, [pc, #28]	; (8002158 <__NVIC_EnableIRQ+0x38>)
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	095b      	lsrs	r3, r3, #5
 8002140:	2001      	movs	r0, #1
 8002142:	fa00 f202 	lsl.w	r2, r0, r2
 8002146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	e000e100 	.word	0xe000e100

0800215c <__NVIC_DisableIRQ>:
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	2b00      	cmp	r3, #0
 800216c:	db12      	blt.n	8002194 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	f003 021f 	and.w	r2, r3, #31
 8002174:	490a      	ldr	r1, [pc, #40]	; (80021a0 <__NVIC_DisableIRQ+0x44>)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	095b      	lsrs	r3, r3, #5
 800217c:	2001      	movs	r0, #1
 800217e:	fa00 f202 	lsl.w	r2, r0, r2
 8002182:	3320      	adds	r3, #32
 8002184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002188:	f3bf 8f4f 	dsb	sy
}
 800218c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800218e:	f3bf 8f6f 	isb	sy
}
 8002192:	bf00      	nop
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000e100 	.word	0xe000e100

080021a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	6039      	str	r1, [r7, #0]
 80021ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	db0a      	blt.n	80021ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	490c      	ldr	r1, [pc, #48]	; (80021f0 <__NVIC_SetPriority+0x4c>)
 80021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c2:	0112      	lsls	r2, r2, #4
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	440b      	add	r3, r1
 80021c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021cc:	e00a      	b.n	80021e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	4908      	ldr	r1, [pc, #32]	; (80021f4 <__NVIC_SetPriority+0x50>)
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	3b04      	subs	r3, #4
 80021dc:	0112      	lsls	r2, r2, #4
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	440b      	add	r3, r1
 80021e2:	761a      	strb	r2, [r3, #24]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	e000e100 	.word	0xe000e100
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b089      	sub	sp, #36	; 0x24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f1c3 0307 	rsb	r3, r3, #7
 8002212:	2b04      	cmp	r3, #4
 8002214:	bf28      	it	cs
 8002216:	2304      	movcs	r3, #4
 8002218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	3304      	adds	r3, #4
 800221e:	2b06      	cmp	r3, #6
 8002220:	d902      	bls.n	8002228 <NVIC_EncodePriority+0x30>
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3b03      	subs	r3, #3
 8002226:	e000      	b.n	800222a <NVIC_EncodePriority+0x32>
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800222c:	f04f 32ff 	mov.w	r2, #4294967295
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43da      	mvns	r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	401a      	ands	r2, r3
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002240:	f04f 31ff 	mov.w	r1, #4294967295
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	fa01 f303 	lsl.w	r3, r1, r3
 800224a:	43d9      	mvns	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002250:	4313      	orrs	r3, r2
         );
}
 8002252:	4618      	mov	r0, r3
 8002254:	3724      	adds	r7, #36	; 0x24
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3b01      	subs	r3, #1
 800226c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002270:	d301      	bcc.n	8002276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002272:	2301      	movs	r3, #1
 8002274:	e00f      	b.n	8002296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002276:	4a0a      	ldr	r2, [pc, #40]	; (80022a0 <SysTick_Config+0x40>)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3b01      	subs	r3, #1
 800227c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800227e:	210f      	movs	r1, #15
 8002280:	f04f 30ff 	mov.w	r0, #4294967295
 8002284:	f7ff ff8e 	bl	80021a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002288:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <SysTick_Config+0x40>)
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800228e:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <SysTick_Config+0x40>)
 8002290:	2207      	movs	r2, #7
 8002292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	e000e010 	.word	0xe000e010

080022a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff ff05 	bl	80020bc <__NVIC_SetPriorityGrouping>
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b086      	sub	sp, #24
 80022be:	af00      	add	r7, sp, #0
 80022c0:	4603      	mov	r3, r0
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	607a      	str	r2, [r7, #4]
 80022c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022cc:	f7ff ff1a 	bl	8002104 <__NVIC_GetPriorityGrouping>
 80022d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	6978      	ldr	r0, [r7, #20]
 80022d8:	f7ff ff8e 	bl	80021f8 <NVIC_EncodePriority>
 80022dc:	4602      	mov	r2, r0
 80022de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff ff5d 	bl	80021a4 <__NVIC_SetPriority>
}
 80022ea:	bf00      	nop
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	4603      	mov	r3, r0
 80022fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff ff0d 	bl	8002120 <__NVIC_EnableIRQ>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
 8002314:	4603      	mov	r3, r0
 8002316:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff ff1d 	bl	800215c <__NVIC_DisableIRQ>
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff ff94 	bl	8002260 <SysTick_Config>
 8002338:	4603      	mov	r3, r0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002350:	f7ff fe84 	bl	800205c <HAL_GetTick>
 8002354:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d008      	beq.n	8002374 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2280      	movs	r2, #128	; 0x80
 8002366:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e052      	b.n	800241a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 0216 	bic.w	r2, r2, #22
 8002382:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002392:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	2b00      	cmp	r3, #0
 800239a:	d103      	bne.n	80023a4 <HAL_DMA_Abort+0x62>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d007      	beq.n	80023b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0208 	bic.w	r2, r2, #8
 80023b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0201 	bic.w	r2, r2, #1
 80023c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023c4:	e013      	b.n	80023ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023c6:	f7ff fe49 	bl	800205c <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b05      	cmp	r3, #5
 80023d2:	d90c      	bls.n	80023ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2220      	movs	r2, #32
 80023d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2203      	movs	r2, #3
 80023de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e015      	b.n	800241a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1e4      	bne.n	80023c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002400:	223f      	movs	r2, #63	; 0x3f
 8002402:	409a      	lsls	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d004      	beq.n	8002440 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2280      	movs	r2, #128	; 0x80
 800243a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e00c      	b.n	800245a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2205      	movs	r2, #5
 8002444:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0201 	bic.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
	...

08002468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002468:	b480      	push	{r7}
 800246a:	b089      	sub	sp, #36	; 0x24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002476:	2300      	movs	r3, #0
 8002478:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800247a:	2300      	movs	r3, #0
 800247c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
 8002482:	e159      	b.n	8002738 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002484:	2201      	movs	r2, #1
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	4013      	ands	r3, r2
 8002496:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	429a      	cmp	r2, r3
 800249e:	f040 8148 	bne.w	8002732 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d005      	beq.n	80024ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d130      	bne.n	800251c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	2203      	movs	r2, #3
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024f0:	2201      	movs	r2, #1
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	f003 0201 	and.w	r2, r3, #1
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	2b03      	cmp	r3, #3
 8002526:	d017      	beq.n	8002558 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	2203      	movs	r2, #3
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d123      	bne.n	80025ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	08da      	lsrs	r2, r3, #3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3208      	adds	r2, #8
 800256c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002570:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	220f      	movs	r2, #15
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	08da      	lsrs	r2, r3, #3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3208      	adds	r2, #8
 80025a6:	69b9      	ldr	r1, [r7, #24]
 80025a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	2203      	movs	r2, #3
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 0203 	and.w	r2, r3, #3
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80a2 	beq.w	8002732 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	4b57      	ldr	r3, [pc, #348]	; (8002750 <HAL_GPIO_Init+0x2e8>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	4a56      	ldr	r2, [pc, #344]	; (8002750 <HAL_GPIO_Init+0x2e8>)
 80025f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025fc:	6453      	str	r3, [r2, #68]	; 0x44
 80025fe:	4b54      	ldr	r3, [pc, #336]	; (8002750 <HAL_GPIO_Init+0x2e8>)
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800260a:	4a52      	ldr	r2, [pc, #328]	; (8002754 <HAL_GPIO_Init+0x2ec>)
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	089b      	lsrs	r3, r3, #2
 8002610:	3302      	adds	r3, #2
 8002612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	220f      	movs	r2, #15
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a49      	ldr	r2, [pc, #292]	; (8002758 <HAL_GPIO_Init+0x2f0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d019      	beq.n	800266a <HAL_GPIO_Init+0x202>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a48      	ldr	r2, [pc, #288]	; (800275c <HAL_GPIO_Init+0x2f4>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d013      	beq.n	8002666 <HAL_GPIO_Init+0x1fe>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a47      	ldr	r2, [pc, #284]	; (8002760 <HAL_GPIO_Init+0x2f8>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d00d      	beq.n	8002662 <HAL_GPIO_Init+0x1fa>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a46      	ldr	r2, [pc, #280]	; (8002764 <HAL_GPIO_Init+0x2fc>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d007      	beq.n	800265e <HAL_GPIO_Init+0x1f6>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a45      	ldr	r2, [pc, #276]	; (8002768 <HAL_GPIO_Init+0x300>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d101      	bne.n	800265a <HAL_GPIO_Init+0x1f2>
 8002656:	2304      	movs	r3, #4
 8002658:	e008      	b.n	800266c <HAL_GPIO_Init+0x204>
 800265a:	2307      	movs	r3, #7
 800265c:	e006      	b.n	800266c <HAL_GPIO_Init+0x204>
 800265e:	2303      	movs	r3, #3
 8002660:	e004      	b.n	800266c <HAL_GPIO_Init+0x204>
 8002662:	2302      	movs	r3, #2
 8002664:	e002      	b.n	800266c <HAL_GPIO_Init+0x204>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <HAL_GPIO_Init+0x204>
 800266a:	2300      	movs	r3, #0
 800266c:	69fa      	ldr	r2, [r7, #28]
 800266e:	f002 0203 	and.w	r2, r2, #3
 8002672:	0092      	lsls	r2, r2, #2
 8002674:	4093      	lsls	r3, r2
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800267c:	4935      	ldr	r1, [pc, #212]	; (8002754 <HAL_GPIO_Init+0x2ec>)
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	089b      	lsrs	r3, r3, #2
 8002682:	3302      	adds	r3, #2
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800268a:	4b38      	ldr	r3, [pc, #224]	; (800276c <HAL_GPIO_Init+0x304>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ae:	4a2f      	ldr	r2, [pc, #188]	; (800276c <HAL_GPIO_Init+0x304>)
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026b4:	4b2d      	ldr	r3, [pc, #180]	; (800276c <HAL_GPIO_Init+0x304>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026d8:	4a24      	ldr	r2, [pc, #144]	; (800276c <HAL_GPIO_Init+0x304>)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026de:	4b23      	ldr	r3, [pc, #140]	; (800276c <HAL_GPIO_Init+0x304>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002702:	4a1a      	ldr	r2, [pc, #104]	; (800276c <HAL_GPIO_Init+0x304>)
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002708:	4b18      	ldr	r3, [pc, #96]	; (800276c <HAL_GPIO_Init+0x304>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800272c:	4a0f      	ldr	r2, [pc, #60]	; (800276c <HAL_GPIO_Init+0x304>)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3301      	adds	r3, #1
 8002736:	61fb      	str	r3, [r7, #28]
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	2b0f      	cmp	r3, #15
 800273c:	f67f aea2 	bls.w	8002484 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002740:	bf00      	nop
 8002742:	bf00      	nop
 8002744:	3724      	adds	r7, #36	; 0x24
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40023800 	.word	0x40023800
 8002754:	40013800 	.word	0x40013800
 8002758:	40020000 	.word	0x40020000
 800275c:	40020400 	.word	0x40020400
 8002760:	40020800 	.word	0x40020800
 8002764:	40020c00 	.word	0x40020c00
 8002768:	40021000 	.word	0x40021000
 800276c:	40013c00 	.word	0x40013c00

08002770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	807b      	strh	r3, [r7, #2]
 800277c:	4613      	mov	r3, r2
 800277e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002780:	787b      	ldrb	r3, [r7, #1]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002786:	887a      	ldrh	r2, [r7, #2]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800278c:	e003      	b.n	8002796 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800278e:	887b      	ldrh	r3, [r7, #2]
 8002790:	041a      	lsls	r2, r3, #16
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	619a      	str	r2, [r3, #24]
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
	...

080027a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e12b      	b.n	8002a0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d106      	bne.n	80027d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7fe ffb0 	bl	8001730 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2224      	movs	r2, #36	; 0x24
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0201 	bic.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002806:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002808:	f000 fd40 	bl	800328c <HAL_RCC_GetPCLK1Freq>
 800280c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	4a81      	ldr	r2, [pc, #516]	; (8002a18 <HAL_I2C_Init+0x274>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d807      	bhi.n	8002828 <HAL_I2C_Init+0x84>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4a80      	ldr	r2, [pc, #512]	; (8002a1c <HAL_I2C_Init+0x278>)
 800281c:	4293      	cmp	r3, r2
 800281e:	bf94      	ite	ls
 8002820:	2301      	movls	r3, #1
 8002822:	2300      	movhi	r3, #0
 8002824:	b2db      	uxtb	r3, r3
 8002826:	e006      	b.n	8002836 <HAL_I2C_Init+0x92>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4a7d      	ldr	r2, [pc, #500]	; (8002a20 <HAL_I2C_Init+0x27c>)
 800282c:	4293      	cmp	r3, r2
 800282e:	bf94      	ite	ls
 8002830:	2301      	movls	r3, #1
 8002832:	2300      	movhi	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e0e7      	b.n	8002a0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4a78      	ldr	r2, [pc, #480]	; (8002a24 <HAL_I2C_Init+0x280>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	0c9b      	lsrs	r3, r3, #18
 8002848:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	430a      	orrs	r2, r1
 800285c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	4a6a      	ldr	r2, [pc, #424]	; (8002a18 <HAL_I2C_Init+0x274>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d802      	bhi.n	8002878 <HAL_I2C_Init+0xd4>
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	3301      	adds	r3, #1
 8002876:	e009      	b.n	800288c <HAL_I2C_Init+0xe8>
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800287e:	fb02 f303 	mul.w	r3, r2, r3
 8002882:	4a69      	ldr	r2, [pc, #420]	; (8002a28 <HAL_I2C_Init+0x284>)
 8002884:	fba2 2303 	umull	r2, r3, r2, r3
 8002888:	099b      	lsrs	r3, r3, #6
 800288a:	3301      	adds	r3, #1
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	430b      	orrs	r3, r1
 8002892:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800289e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	495c      	ldr	r1, [pc, #368]	; (8002a18 <HAL_I2C_Init+0x274>)
 80028a8:	428b      	cmp	r3, r1
 80028aa:	d819      	bhi.n	80028e0 <HAL_I2C_Init+0x13c>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	1e59      	subs	r1, r3, #1
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80028ba:	1c59      	adds	r1, r3, #1
 80028bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028c0:	400b      	ands	r3, r1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00a      	beq.n	80028dc <HAL_I2C_Init+0x138>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	1e59      	subs	r1, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80028d4:	3301      	adds	r3, #1
 80028d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028da:	e051      	b.n	8002980 <HAL_I2C_Init+0x1dc>
 80028dc:	2304      	movs	r3, #4
 80028de:	e04f      	b.n	8002980 <HAL_I2C_Init+0x1dc>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d111      	bne.n	800290c <HAL_I2C_Init+0x168>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	1e58      	subs	r0, r3, #1
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6859      	ldr	r1, [r3, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	440b      	add	r3, r1
 80028f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028fa:	3301      	adds	r3, #1
 80028fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002900:	2b00      	cmp	r3, #0
 8002902:	bf0c      	ite	eq
 8002904:	2301      	moveq	r3, #1
 8002906:	2300      	movne	r3, #0
 8002908:	b2db      	uxtb	r3, r3
 800290a:	e012      	b.n	8002932 <HAL_I2C_Init+0x18e>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	1e58      	subs	r0, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6859      	ldr	r1, [r3, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	0099      	lsls	r1, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002922:	3301      	adds	r3, #1
 8002924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002928:	2b00      	cmp	r3, #0
 800292a:	bf0c      	ite	eq
 800292c:	2301      	moveq	r3, #1
 800292e:	2300      	movne	r3, #0
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_I2C_Init+0x196>
 8002936:	2301      	movs	r3, #1
 8002938:	e022      	b.n	8002980 <HAL_I2C_Init+0x1dc>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10e      	bne.n	8002960 <HAL_I2C_Init+0x1bc>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1e58      	subs	r0, r3, #1
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6859      	ldr	r1, [r3, #4]
 800294a:	460b      	mov	r3, r1
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	440b      	add	r3, r1
 8002950:	fbb0 f3f3 	udiv	r3, r0, r3
 8002954:	3301      	adds	r3, #1
 8002956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800295a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800295e:	e00f      	b.n	8002980 <HAL_I2C_Init+0x1dc>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	1e58      	subs	r0, r3, #1
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6859      	ldr	r1, [r3, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	0099      	lsls	r1, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	fbb0 f3f3 	udiv	r3, r0, r3
 8002976:	3301      	adds	r3, #1
 8002978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800297c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	6809      	ldr	r1, [r1, #0]
 8002984:	4313      	orrs	r3, r2
 8002986:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69da      	ldr	r2, [r3, #28]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6911      	ldr	r1, [r2, #16]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	68d2      	ldr	r2, [r2, #12]
 80029ba:	4311      	orrs	r1, r2
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6812      	ldr	r2, [r2, #0]
 80029c0:	430b      	orrs	r3, r1
 80029c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695a      	ldr	r2, [r3, #20]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0201 	orr.w	r2, r2, #1
 80029ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2220      	movs	r2, #32
 80029fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	000186a0 	.word	0x000186a0
 8002a1c:	001e847f 	.word	0x001e847f
 8002a20:	003d08ff 	.word	0x003d08ff
 8002a24:	431bde83 	.word	0x431bde83
 8002a28:	10624dd3 	.word	0x10624dd3

08002a2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e267      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d075      	beq.n	8002b36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a4a:	4b88      	ldr	r3, [pc, #544]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d00c      	beq.n	8002a70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a56:	4b85      	ldr	r3, [pc, #532]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d112      	bne.n	8002a88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a62:	4b82      	ldr	r3, [pc, #520]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a6e:	d10b      	bne.n	8002a88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a70:	4b7e      	ldr	r3, [pc, #504]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d05b      	beq.n	8002b34 <HAL_RCC_OscConfig+0x108>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d157      	bne.n	8002b34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e242      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a90:	d106      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x74>
 8002a92:	4b76      	ldr	r3, [pc, #472]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a75      	ldr	r2, [pc, #468]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	e01d      	b.n	8002adc <HAL_RCC_OscConfig+0xb0>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x98>
 8002aaa:	4b70      	ldr	r3, [pc, #448]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a6f      	ldr	r2, [pc, #444]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4b6d      	ldr	r3, [pc, #436]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a6c      	ldr	r2, [pc, #432]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e00b      	b.n	8002adc <HAL_RCC_OscConfig+0xb0>
 8002ac4:	4b69      	ldr	r3, [pc, #420]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a68      	ldr	r2, [pc, #416]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	4b66      	ldr	r3, [pc, #408]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a65      	ldr	r2, [pc, #404]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d013      	beq.n	8002b0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7ff faba 	bl	800205c <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aec:	f7ff fab6 	bl	800205c <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	; 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e207      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afe:	4b5b      	ldr	r3, [pc, #364]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0xc0>
 8002b0a:	e014      	b.n	8002b36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0c:	f7ff faa6 	bl	800205c <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b14:	f7ff faa2 	bl	800205c <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	; 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e1f3      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b26:	4b51      	ldr	r3, [pc, #324]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0xe8>
 8002b32:	e000      	b.n	8002b36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d063      	beq.n	8002c0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b42:	4b4a      	ldr	r3, [pc, #296]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00b      	beq.n	8002b66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b4e:	4b47      	ldr	r3, [pc, #284]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d11c      	bne.n	8002b94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b5a:	4b44      	ldr	r3, [pc, #272]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d116      	bne.n	8002b94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b66:	4b41      	ldr	r3, [pc, #260]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <HAL_RCC_OscConfig+0x152>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d001      	beq.n	8002b7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e1c7      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7e:	4b3b      	ldr	r3, [pc, #236]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4937      	ldr	r1, [pc, #220]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b92:	e03a      	b.n	8002c0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d020      	beq.n	8002bde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b9c:	4b34      	ldr	r3, [pc, #208]	; (8002c70 <HAL_RCC_OscConfig+0x244>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba2:	f7ff fa5b 	bl	800205c <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002baa:	f7ff fa57 	bl	800205c <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e1a8      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bbc:	4b2b      	ldr	r3, [pc, #172]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc8:	4b28      	ldr	r3, [pc, #160]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	4925      	ldr	r1, [pc, #148]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	600b      	str	r3, [r1, #0]
 8002bdc:	e015      	b.n	8002c0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bde:	4b24      	ldr	r3, [pc, #144]	; (8002c70 <HAL_RCC_OscConfig+0x244>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be4:	f7ff fa3a 	bl	800205c <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bec:	f7ff fa36 	bl	800205c <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e187      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfe:	4b1b      	ldr	r3, [pc, #108]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d036      	beq.n	8002c84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d016      	beq.n	8002c4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c1e:	4b15      	ldr	r3, [pc, #84]	; (8002c74 <HAL_RCC_OscConfig+0x248>)
 8002c20:	2201      	movs	r2, #1
 8002c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c24:	f7ff fa1a 	bl	800205c <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c2c:	f7ff fa16 	bl	800205c <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e167      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3e:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCC_OscConfig+0x200>
 8002c4a:	e01b      	b.n	8002c84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c4c:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <HAL_RCC_OscConfig+0x248>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c52:	f7ff fa03 	bl	800205c <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c58:	e00e      	b.n	8002c78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c5a:	f7ff f9ff 	bl	800205c <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d907      	bls.n	8002c78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e150      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	42470000 	.word	0x42470000
 8002c74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c78:	4b88      	ldr	r3, [pc, #544]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1ea      	bne.n	8002c5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 8097 	beq.w	8002dc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c92:	2300      	movs	r3, #0
 8002c94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c96:	4b81      	ldr	r3, [pc, #516]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10f      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	4b7d      	ldr	r3, [pc, #500]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	4a7c      	ldr	r2, [pc, #496]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb2:	4b7a      	ldr	r3, [pc, #488]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc2:	4b77      	ldr	r3, [pc, #476]	; (8002ea0 <HAL_RCC_OscConfig+0x474>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d118      	bne.n	8002d00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cce:	4b74      	ldr	r3, [pc, #464]	; (8002ea0 <HAL_RCC_OscConfig+0x474>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a73      	ldr	r2, [pc, #460]	; (8002ea0 <HAL_RCC_OscConfig+0x474>)
 8002cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cda:	f7ff f9bf 	bl	800205c <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce2:	f7ff f9bb 	bl	800205c <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e10c      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf4:	4b6a      	ldr	r3, [pc, #424]	; (8002ea0 <HAL_RCC_OscConfig+0x474>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f0      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d106      	bne.n	8002d16 <HAL_RCC_OscConfig+0x2ea>
 8002d08:	4b64      	ldr	r3, [pc, #400]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0c:	4a63      	ldr	r2, [pc, #396]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	6713      	str	r3, [r2, #112]	; 0x70
 8002d14:	e01c      	b.n	8002d50 <HAL_RCC_OscConfig+0x324>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	2b05      	cmp	r3, #5
 8002d1c:	d10c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x30c>
 8002d1e:	4b5f      	ldr	r3, [pc, #380]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d22:	4a5e      	ldr	r2, [pc, #376]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d24:	f043 0304 	orr.w	r3, r3, #4
 8002d28:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2a:	4b5c      	ldr	r3, [pc, #368]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2e:	4a5b      	ldr	r2, [pc, #364]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	6713      	str	r3, [r2, #112]	; 0x70
 8002d36:	e00b      	b.n	8002d50 <HAL_RCC_OscConfig+0x324>
 8002d38:	4b58      	ldr	r3, [pc, #352]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3c:	4a57      	ldr	r2, [pc, #348]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d3e:	f023 0301 	bic.w	r3, r3, #1
 8002d42:	6713      	str	r3, [r2, #112]	; 0x70
 8002d44:	4b55      	ldr	r3, [pc, #340]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d48:	4a54      	ldr	r2, [pc, #336]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d4a:	f023 0304 	bic.w	r3, r3, #4
 8002d4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d015      	beq.n	8002d84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d58:	f7ff f980 	bl	800205c <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d5e:	e00a      	b.n	8002d76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d60:	f7ff f97c 	bl	800205c <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e0cb      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d76:	4b49      	ldr	r3, [pc, #292]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0ee      	beq.n	8002d60 <HAL_RCC_OscConfig+0x334>
 8002d82:	e014      	b.n	8002dae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d84:	f7ff f96a 	bl	800205c <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d8a:	e00a      	b.n	8002da2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d8c:	f7ff f966 	bl	800205c <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e0b5      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da2:	4b3e      	ldr	r3, [pc, #248]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1ee      	bne.n	8002d8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dae:	7dfb      	ldrb	r3, [r7, #23]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d105      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db4:	4b39      	ldr	r3, [pc, #228]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	4a38      	ldr	r2, [pc, #224]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002dba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 80a1 	beq.w	8002f0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dca:	4b34      	ldr	r3, [pc, #208]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 030c 	and.w	r3, r3, #12
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d05c      	beq.n	8002e90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d141      	bne.n	8002e62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dde:	4b31      	ldr	r3, [pc, #196]	; (8002ea4 <HAL_RCC_OscConfig+0x478>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de4:	f7ff f93a 	bl	800205c <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dec:	f7ff f936 	bl	800205c <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e087      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfe:	4b27      	ldr	r3, [pc, #156]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69da      	ldr	r2, [r3, #28]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	019b      	lsls	r3, r3, #6
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e20:	085b      	lsrs	r3, r3, #1
 8002e22:	3b01      	subs	r3, #1
 8002e24:	041b      	lsls	r3, r3, #16
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2c:	061b      	lsls	r3, r3, #24
 8002e2e:	491b      	ldr	r1, [pc, #108]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e34:	4b1b      	ldr	r3, [pc, #108]	; (8002ea4 <HAL_RCC_OscConfig+0x478>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3a:	f7ff f90f 	bl	800205c <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e42:	f7ff f90b 	bl	800205c <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e05c      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e54:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0x416>
 8002e60:	e054      	b.n	8002f0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e62:	4b10      	ldr	r3, [pc, #64]	; (8002ea4 <HAL_RCC_OscConfig+0x478>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e68:	f7ff f8f8 	bl	800205c <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e70:	f7ff f8f4 	bl	800205c <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e045      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e82:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0x444>
 8002e8e:	e03d      	b.n	8002f0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d107      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e038      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40007000 	.word	0x40007000
 8002ea4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ea8:	4b1b      	ldr	r3, [pc, #108]	; (8002f18 <HAL_RCC_OscConfig+0x4ec>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d028      	beq.n	8002f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d121      	bne.n	8002f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d11a      	bne.n	8002f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ed8:	4013      	ands	r3, r2
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ede:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d111      	bne.n	8002f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eee:	085b      	lsrs	r3, r3, #1
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d107      	bne.n	8002f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40023800 	.word	0x40023800

08002f1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0cc      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f30:	4b68      	ldr	r3, [pc, #416]	; (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d90c      	bls.n	8002f58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3e:	4b65      	ldr	r3, [pc, #404]	; (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f46:	4b63      	ldr	r3, [pc, #396]	; (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d001      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0b8      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d020      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f70:	4b59      	ldr	r3, [pc, #356]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	4a58      	ldr	r2, [pc, #352]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f88:	4b53      	ldr	r3, [pc, #332]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	4a52      	ldr	r2, [pc, #328]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f94:	4b50      	ldr	r3, [pc, #320]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	494d      	ldr	r1, [pc, #308]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d044      	beq.n	800303c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d107      	bne.n	8002fca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fba:	4b47      	ldr	r3, [pc, #284]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d119      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e07f      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d003      	beq.n	8002fda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fd6:	2b03      	cmp	r3, #3
 8002fd8:	d107      	bne.n	8002fea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fda:	4b3f      	ldr	r3, [pc, #252]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d109      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e06f      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fea:	4b3b      	ldr	r3, [pc, #236]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e067      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ffa:	4b37      	ldr	r3, [pc, #220]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f023 0203 	bic.w	r2, r3, #3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4934      	ldr	r1, [pc, #208]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003008:	4313      	orrs	r3, r2
 800300a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800300c:	f7ff f826 	bl	800205c <HAL_GetTick>
 8003010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003012:	e00a      	b.n	800302a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003014:	f7ff f822 	bl	800205c <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003022:	4293      	cmp	r3, r2
 8003024:	d901      	bls.n	800302a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e04f      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302a:	4b2b      	ldr	r3, [pc, #172]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 020c 	and.w	r2, r3, #12
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	429a      	cmp	r2, r3
 800303a:	d1eb      	bne.n	8003014 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800303c:	4b25      	ldr	r3, [pc, #148]	; (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d20c      	bcs.n	8003064 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304a:	4b22      	ldr	r3, [pc, #136]	; (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003052:	4b20      	ldr	r3, [pc, #128]	; (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d001      	beq.n	8003064 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e032      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	d008      	beq.n	8003082 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003070:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	4916      	ldr	r1, [pc, #88]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	4313      	orrs	r3, r2
 8003080:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d009      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800308e:	4b12      	ldr	r3, [pc, #72]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	490e      	ldr	r1, [pc, #56]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030a2:	f000 f821 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 80030a6:	4602      	mov	r2, r0
 80030a8:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	091b      	lsrs	r3, r3, #4
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	490a      	ldr	r1, [pc, #40]	; (80030dc <HAL_RCC_ClockConfig+0x1c0>)
 80030b4:	5ccb      	ldrb	r3, [r1, r3]
 80030b6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ba:	4a09      	ldr	r2, [pc, #36]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 80030bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030be:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <HAL_RCC_ClockConfig+0x1c8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fe ff86 	bl	8001fd4 <HAL_InitTick>

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40023c00 	.word	0x40023c00
 80030d8:	40023800 	.word	0x40023800
 80030dc:	08004994 	.word	0x08004994
 80030e0:	20000058 	.word	0x20000058
 80030e4:	2000005c 	.word	0x2000005c

080030e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030ec:	b090      	sub	sp, #64	; 0x40
 80030ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	637b      	str	r3, [r7, #52]	; 0x34
 80030f4:	2300      	movs	r3, #0
 80030f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030f8:	2300      	movs	r3, #0
 80030fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003100:	4b59      	ldr	r3, [pc, #356]	; (8003268 <HAL_RCC_GetSysClockFreq+0x180>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 030c 	and.w	r3, r3, #12
 8003108:	2b08      	cmp	r3, #8
 800310a:	d00d      	beq.n	8003128 <HAL_RCC_GetSysClockFreq+0x40>
 800310c:	2b08      	cmp	r3, #8
 800310e:	f200 80a1 	bhi.w	8003254 <HAL_RCC_GetSysClockFreq+0x16c>
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0x34>
 8003116:	2b04      	cmp	r3, #4
 8003118:	d003      	beq.n	8003122 <HAL_RCC_GetSysClockFreq+0x3a>
 800311a:	e09b      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800311c:	4b53      	ldr	r3, [pc, #332]	; (800326c <HAL_RCC_GetSysClockFreq+0x184>)
 800311e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003120:	e09b      	b.n	800325a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003122:	4b53      	ldr	r3, [pc, #332]	; (8003270 <HAL_RCC_GetSysClockFreq+0x188>)
 8003124:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003126:	e098      	b.n	800325a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003128:	4b4f      	ldr	r3, [pc, #316]	; (8003268 <HAL_RCC_GetSysClockFreq+0x180>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003130:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003132:	4b4d      	ldr	r3, [pc, #308]	; (8003268 <HAL_RCC_GetSysClockFreq+0x180>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d028      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800313e:	4b4a      	ldr	r3, [pc, #296]	; (8003268 <HAL_RCC_GetSysClockFreq+0x180>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	099b      	lsrs	r3, r3, #6
 8003144:	2200      	movs	r2, #0
 8003146:	623b      	str	r3, [r7, #32]
 8003148:	627a      	str	r2, [r7, #36]	; 0x24
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003150:	2100      	movs	r1, #0
 8003152:	4b47      	ldr	r3, [pc, #284]	; (8003270 <HAL_RCC_GetSysClockFreq+0x188>)
 8003154:	fb03 f201 	mul.w	r2, r3, r1
 8003158:	2300      	movs	r3, #0
 800315a:	fb00 f303 	mul.w	r3, r0, r3
 800315e:	4413      	add	r3, r2
 8003160:	4a43      	ldr	r2, [pc, #268]	; (8003270 <HAL_RCC_GetSysClockFreq+0x188>)
 8003162:	fba0 1202 	umull	r1, r2, r0, r2
 8003166:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003168:	460a      	mov	r2, r1
 800316a:	62ba      	str	r2, [r7, #40]	; 0x28
 800316c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800316e:	4413      	add	r3, r2
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003174:	2200      	movs	r2, #0
 8003176:	61bb      	str	r3, [r7, #24]
 8003178:	61fa      	str	r2, [r7, #28]
 800317a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800317e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003182:	f7fd f829 	bl	80001d8 <__aeabi_uldivmod>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	4613      	mov	r3, r2
 800318c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800318e:	e053      	b.n	8003238 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003190:	4b35      	ldr	r3, [pc, #212]	; (8003268 <HAL_RCC_GetSysClockFreq+0x180>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	099b      	lsrs	r3, r3, #6
 8003196:	2200      	movs	r2, #0
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	617a      	str	r2, [r7, #20]
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80031a2:	f04f 0b00 	mov.w	fp, #0
 80031a6:	4652      	mov	r2, sl
 80031a8:	465b      	mov	r3, fp
 80031aa:	f04f 0000 	mov.w	r0, #0
 80031ae:	f04f 0100 	mov.w	r1, #0
 80031b2:	0159      	lsls	r1, r3, #5
 80031b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031b8:	0150      	lsls	r0, r2, #5
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	ebb2 080a 	subs.w	r8, r2, sl
 80031c2:	eb63 090b 	sbc.w	r9, r3, fp
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80031d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80031d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80031da:	ebb2 0408 	subs.w	r4, r2, r8
 80031de:	eb63 0509 	sbc.w	r5, r3, r9
 80031e2:	f04f 0200 	mov.w	r2, #0
 80031e6:	f04f 0300 	mov.w	r3, #0
 80031ea:	00eb      	lsls	r3, r5, #3
 80031ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031f0:	00e2      	lsls	r2, r4, #3
 80031f2:	4614      	mov	r4, r2
 80031f4:	461d      	mov	r5, r3
 80031f6:	eb14 030a 	adds.w	r3, r4, sl
 80031fa:	603b      	str	r3, [r7, #0]
 80031fc:	eb45 030b 	adc.w	r3, r5, fp
 8003200:	607b      	str	r3, [r7, #4]
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800320e:	4629      	mov	r1, r5
 8003210:	028b      	lsls	r3, r1, #10
 8003212:	4621      	mov	r1, r4
 8003214:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003218:	4621      	mov	r1, r4
 800321a:	028a      	lsls	r2, r1, #10
 800321c:	4610      	mov	r0, r2
 800321e:	4619      	mov	r1, r3
 8003220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003222:	2200      	movs	r2, #0
 8003224:	60bb      	str	r3, [r7, #8]
 8003226:	60fa      	str	r2, [r7, #12]
 8003228:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800322c:	f7fc ffd4 	bl	80001d8 <__aeabi_uldivmod>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4613      	mov	r3, r2
 8003236:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_RCC_GetSysClockFreq+0x180>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	0c1b      	lsrs	r3, r3, #16
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	3301      	adds	r3, #1
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003248:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800324a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003250:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003252:	e002      	b.n	800325a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <HAL_RCC_GetSysClockFreq+0x184>)
 8003256:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003258:	bf00      	nop
    }
  }
  return sysclockfreq;
 800325a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800325c:	4618      	mov	r0, r3
 800325e:	3740      	adds	r7, #64	; 0x40
 8003260:	46bd      	mov	sp, r7
 8003262:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003266:	bf00      	nop
 8003268:	40023800 	.word	0x40023800
 800326c:	00f42400 	.word	0x00f42400
 8003270:	018cba80 	.word	0x018cba80

08003274 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003278:	4b03      	ldr	r3, [pc, #12]	; (8003288 <HAL_RCC_GetHCLKFreq+0x14>)
 800327a:	681b      	ldr	r3, [r3, #0]
}
 800327c:	4618      	mov	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	20000058 	.word	0x20000058

0800328c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003290:	f7ff fff0 	bl	8003274 <HAL_RCC_GetHCLKFreq>
 8003294:	4602      	mov	r2, r0
 8003296:	4b05      	ldr	r3, [pc, #20]	; (80032ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	0a9b      	lsrs	r3, r3, #10
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	4903      	ldr	r1, [pc, #12]	; (80032b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032a2:	5ccb      	ldrb	r3, [r1, r3]
 80032a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40023800 	.word	0x40023800
 80032b0:	080049a4 	.word	0x080049a4

080032b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032b8:	f7ff ffdc 	bl	8003274 <HAL_RCC_GetHCLKFreq>
 80032bc:	4602      	mov	r2, r0
 80032be:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	0b5b      	lsrs	r3, r3, #13
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	4903      	ldr	r1, [pc, #12]	; (80032d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ca:	5ccb      	ldrb	r3, [r1, r3]
 80032cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40023800 	.word	0x40023800
 80032d8:	080049a4 	.word	0x080049a4

080032dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e07b      	b.n	80033e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d108      	bne.n	8003308 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032fe:	d009      	beq.n	8003314 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	61da      	str	r2, [r3, #28]
 8003306:	e005      	b.n	8003314 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7fe fcd4 	bl	8001cdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800334a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800335c:	431a      	orrs	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	431a      	orrs	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003384:	431a      	orrs	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003398:	ea42 0103 	orr.w	r1, r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	0c1b      	lsrs	r3, r3, #16
 80033b2:	f003 0104 	and.w	r1, r3, #4
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	f003 0210 	and.w	r2, r3, #16
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69da      	ldr	r2, [r3, #28]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b088      	sub	sp, #32
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	60f8      	str	r0, [r7, #12]
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	603b      	str	r3, [r7, #0]
 80033fa:	4613      	mov	r3, r2
 80033fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_SPI_Transmit+0x22>
 800340c:	2302      	movs	r3, #2
 800340e:	e126      	b.n	800365e <HAL_SPI_Transmit+0x270>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003418:	f7fe fe20 	bl	800205c <HAL_GetTick>
 800341c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800341e:	88fb      	ldrh	r3, [r7, #6]
 8003420:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b01      	cmp	r3, #1
 800342c:	d002      	beq.n	8003434 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800342e:	2302      	movs	r3, #2
 8003430:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003432:	e10b      	b.n	800364c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <HAL_SPI_Transmit+0x52>
 800343a:	88fb      	ldrh	r3, [r7, #6]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d102      	bne.n	8003446 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003444:	e102      	b.n	800364c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2203      	movs	r2, #3
 800344a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	88fa      	ldrh	r2, [r7, #6]
 800345e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	88fa      	ldrh	r2, [r7, #6]
 8003464:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800348c:	d10f      	bne.n	80034ae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800349c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b8:	2b40      	cmp	r3, #64	; 0x40
 80034ba:	d007      	beq.n	80034cc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034d4:	d14b      	bne.n	800356e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <HAL_SPI_Transmit+0xf6>
 80034de:	8afb      	ldrh	r3, [r7, #22]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d13e      	bne.n	8003562 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e8:	881a      	ldrh	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f4:	1c9a      	adds	r2, r3, #2
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003508:	e02b      	b.n	8003562 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b02      	cmp	r3, #2
 8003516:	d112      	bne.n	800353e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	881a      	ldrh	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003528:	1c9a      	adds	r2, r3, #2
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003532:	b29b      	uxth	r3, r3
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	86da      	strh	r2, [r3, #54]	; 0x36
 800353c:	e011      	b.n	8003562 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800353e:	f7fe fd8d 	bl	800205c <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d803      	bhi.n	8003556 <HAL_SPI_Transmit+0x168>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003554:	d102      	bne.n	800355c <HAL_SPI_Transmit+0x16e>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d102      	bne.n	8003562 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003560:	e074      	b.n	800364c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1ce      	bne.n	800350a <HAL_SPI_Transmit+0x11c>
 800356c:	e04c      	b.n	8003608 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <HAL_SPI_Transmit+0x18e>
 8003576:	8afb      	ldrh	r3, [r7, #22]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d140      	bne.n	80035fe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	330c      	adds	r3, #12
 8003586:	7812      	ldrb	r2, [r2, #0]
 8003588:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80035a2:	e02c      	b.n	80035fe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d113      	bne.n	80035da <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	330c      	adds	r3, #12
 80035bc:	7812      	ldrb	r2, [r2, #0]
 80035be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80035d8:	e011      	b.n	80035fe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035da:	f7fe fd3f 	bl	800205c <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d803      	bhi.n	80035f2 <HAL_SPI_Transmit+0x204>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f0:	d102      	bne.n	80035f8 <HAL_SPI_Transmit+0x20a>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d102      	bne.n	80035fe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035fc:	e026      	b.n	800364c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1cd      	bne.n	80035a4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	6839      	ldr	r1, [r7, #0]
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 f8c1 	bl	8003794 <SPI_EndRxTxTransaction>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10a      	bne.n	800363c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003626:	2300      	movs	r3, #0
 8003628:	613b      	str	r3, [r7, #16]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	613b      	str	r3, [r7, #16]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	77fb      	strb	r3, [r7, #31]
 8003648:	e000      	b.n	800364c <HAL_SPI_Transmit+0x25e>
  }

error:
 800364a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800365c:	7ffb      	ldrb	r3, [r7, #31]
}
 800365e:	4618      	mov	r0, r3
 8003660:	3720      	adds	r7, #32
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003674:	b2db      	uxtb	r3, r3
}
 8003676:	4618      	mov	r0, r3
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
	...

08003684 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b088      	sub	sp, #32
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	4613      	mov	r3, r2
 8003692:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003694:	f7fe fce2 	bl	800205c <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369c:	1a9b      	subs	r3, r3, r2
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	4413      	add	r3, r2
 80036a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036a4:	f7fe fcda 	bl	800205c <HAL_GetTick>
 80036a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036aa:	4b39      	ldr	r3, [pc, #228]	; (8003790 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	015b      	lsls	r3, r3, #5
 80036b0:	0d1b      	lsrs	r3, r3, #20
 80036b2:	69fa      	ldr	r2, [r7, #28]
 80036b4:	fb02 f303 	mul.w	r3, r2, r3
 80036b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036ba:	e054      	b.n	8003766 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c2:	d050      	beq.n	8003766 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036c4:	f7fe fcca 	bl	800205c <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	69fa      	ldr	r2, [r7, #28]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d902      	bls.n	80036da <SPI_WaitFlagStateUntilTimeout+0x56>
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d13d      	bne.n	8003756 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036f2:	d111      	bne.n	8003718 <SPI_WaitFlagStateUntilTimeout+0x94>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036fc:	d004      	beq.n	8003708 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003706:	d107      	bne.n	8003718 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003716:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003720:	d10f      	bne.n	8003742 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003740:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e017      	b.n	8003786 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	3b01      	subs	r3, #1
 8003764:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4013      	ands	r3, r2
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	429a      	cmp	r2, r3
 8003774:	bf0c      	ite	eq
 8003776:	2301      	moveq	r3, #1
 8003778:	2300      	movne	r3, #0
 800377a:	b2db      	uxtb	r3, r3
 800377c:	461a      	mov	r2, r3
 800377e:	79fb      	ldrb	r3, [r7, #7]
 8003780:	429a      	cmp	r2, r3
 8003782:	d19b      	bne.n	80036bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3720      	adds	r7, #32
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	20000058 	.word	0x20000058

08003794 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af02      	add	r7, sp, #8
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80037a0:	4b1b      	ldr	r3, [pc, #108]	; (8003810 <SPI_EndRxTxTransaction+0x7c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a1b      	ldr	r2, [pc, #108]	; (8003814 <SPI_EndRxTxTransaction+0x80>)
 80037a6:	fba2 2303 	umull	r2, r3, r2, r3
 80037aa:	0d5b      	lsrs	r3, r3, #21
 80037ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037b0:	fb02 f303 	mul.w	r3, r2, r3
 80037b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037be:	d112      	bne.n	80037e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2200      	movs	r2, #0
 80037c8:	2180      	movs	r1, #128	; 0x80
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f7ff ff5a 	bl	8003684 <SPI_WaitFlagStateUntilTimeout>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d016      	beq.n	8003804 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037da:	f043 0220 	orr.w	r2, r3, #32
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e00f      	b.n	8003806 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00a      	beq.n	8003802 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fc:	2b80      	cmp	r3, #128	; 0x80
 80037fe:	d0f2      	beq.n	80037e6 <SPI_EndRxTxTransaction+0x52>
 8003800:	e000      	b.n	8003804 <SPI_EndRxTxTransaction+0x70>
        break;
 8003802:	bf00      	nop
  }

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3718      	adds	r7, #24
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	20000058 	.word	0x20000058
 8003814:	165e9f81 	.word	0x165e9f81

08003818 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e03f      	b.n	80038aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d106      	bne.n	8003844 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7fe fb2c 	bl	8001e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2224      	movs	r2, #36	; 0x24
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800385a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 fd7b 	bl	8004358 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	691a      	ldr	r2, [r3, #16]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003870:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	695a      	ldr	r2, [r3, #20]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003880:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003890:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2220      	movs	r2, #32
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b08a      	sub	sp, #40	; 0x28
 80038b6:	af02      	add	r7, sp, #8
 80038b8:	60f8      	str	r0, [r7, #12]
 80038ba:	60b9      	str	r1, [r7, #8]
 80038bc:	603b      	str	r3, [r7, #0]
 80038be:	4613      	mov	r3, r2
 80038c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b20      	cmp	r3, #32
 80038d0:	d17c      	bne.n	80039cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <HAL_UART_Transmit+0x2c>
 80038d8:	88fb      	ldrh	r3, [r7, #6]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e075      	b.n	80039ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d101      	bne.n	80038f0 <HAL_UART_Transmit+0x3e>
 80038ec:	2302      	movs	r3, #2
 80038ee:	e06e      	b.n	80039ce <HAL_UART_Transmit+0x11c>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2221      	movs	r2, #33	; 0x21
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003906:	f7fe fba9 	bl	800205c <HAL_GetTick>
 800390a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	88fa      	ldrh	r2, [r7, #6]
 8003910:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	88fa      	ldrh	r2, [r7, #6]
 8003916:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003920:	d108      	bne.n	8003934 <HAL_UART_Transmit+0x82>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d104      	bne.n	8003934 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800392a:	2300      	movs	r3, #0
 800392c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	61bb      	str	r3, [r7, #24]
 8003932:	e003      	b.n	800393c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003938:	2300      	movs	r3, #0
 800393a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003944:	e02a      	b.n	800399c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2200      	movs	r2, #0
 800394e:	2180      	movs	r1, #128	; 0x80
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 faf9 	bl	8003f48 <UART_WaitOnFlagUntilTimeout>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e036      	b.n	80039ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10b      	bne.n	800397e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003974:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	3302      	adds	r3, #2
 800397a:	61bb      	str	r3, [r7, #24]
 800397c:	e007      	b.n	800398e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	781a      	ldrb	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	3301      	adds	r3, #1
 800398c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1cf      	bne.n	8003946 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2200      	movs	r2, #0
 80039ae:	2140      	movs	r1, #64	; 0x40
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 fac9 	bl	8003f48 <UART_WaitOnFlagUntilTimeout>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e006      	b.n	80039ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039c8:	2300      	movs	r3, #0
 80039ca:	e000      	b.n	80039ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039cc:	2302      	movs	r3, #2
  }
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3720      	adds	r7, #32
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
	...

080039d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b0ba      	sub	sp, #232	; 0xe8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10f      	bne.n	8003a3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a22:	f003 0320 	and.w	r3, r3, #32
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d009      	beq.n	8003a3e <HAL_UART_IRQHandler+0x66>
 8003a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 fbd3 	bl	80041e2 <UART_Receive_IT>
      return;
 8003a3c:	e256      	b.n	8003eec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 80de 	beq.w	8003c04 <HAL_UART_IRQHandler+0x22c>
 8003a48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d106      	bne.n	8003a62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a58:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 80d1 	beq.w	8003c04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00b      	beq.n	8003a86 <HAL_UART_IRQHandler+0xae>
 8003a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d005      	beq.n	8003a86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f043 0201 	orr.w	r2, r3, #1
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a8a:	f003 0304 	and.w	r3, r3, #4
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00b      	beq.n	8003aaa <HAL_UART_IRQHandler+0xd2>
 8003a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d005      	beq.n	8003aaa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f043 0202 	orr.w	r2, r3, #2
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00b      	beq.n	8003ace <HAL_UART_IRQHandler+0xf6>
 8003ab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d005      	beq.n	8003ace <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	f043 0204 	orr.w	r2, r3, #4
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d011      	beq.n	8003afe <HAL_UART_IRQHandler+0x126>
 8003ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d105      	bne.n	8003af2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d005      	beq.n	8003afe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f043 0208 	orr.w	r2, r3, #8
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 81ed 	beq.w	8003ee2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d008      	beq.n	8003b26 <HAL_UART_IRQHandler+0x14e>
 8003b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b18:	f003 0320 	and.w	r3, r3, #32
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d002      	beq.n	8003b26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 fb5e 	bl	80041e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b30:	2b40      	cmp	r3, #64	; 0x40
 8003b32:	bf0c      	ite	eq
 8003b34:	2301      	moveq	r3, #1
 8003b36:	2300      	movne	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d103      	bne.n	8003b52 <HAL_UART_IRQHandler+0x17a>
 8003b4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d04f      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fa66 	bl	8004024 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b62:	2b40      	cmp	r3, #64	; 0x40
 8003b64:	d141      	bne.n	8003bea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	3314      	adds	r3, #20
 8003b6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b74:	e853 3f00 	ldrex	r3, [r3]
 8003b78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	3314      	adds	r3, #20
 8003b8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ba2:	e841 2300 	strex	r3, r2, [r1]
 8003ba6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003baa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1d9      	bne.n	8003b66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d013      	beq.n	8003be2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbe:	4a7d      	ldr	r2, [pc, #500]	; (8003db4 <HAL_UART_IRQHandler+0x3dc>)
 8003bc0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fe fc2b 	bl	8002422 <HAL_DMA_Abort_IT>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d016      	beq.n	8003c00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bdc:	4610      	mov	r0, r2
 8003bde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be0:	e00e      	b.n	8003c00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f99a 	bl	8003f1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be8:	e00a      	b.n	8003c00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f996 	bl	8003f1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf0:	e006      	b.n	8003c00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f992 	bl	8003f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003bfe:	e170      	b.n	8003ee2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c00:	bf00      	nop
    return;
 8003c02:	e16e      	b.n	8003ee2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	f040 814a 	bne.w	8003ea2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c12:	f003 0310 	and.w	r3, r3, #16
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 8143 	beq.w	8003ea2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c20:	f003 0310 	and.w	r3, r3, #16
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 813c 	beq.w	8003ea2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60bb      	str	r3, [r7, #8]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	60bb      	str	r3, [r7, #8]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4a:	2b40      	cmp	r3, #64	; 0x40
 8003c4c:	f040 80b4 	bne.w	8003db8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 8140 	beq.w	8003ee6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	f080 8139 	bcs.w	8003ee6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c7a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c86:	f000 8088 	beq.w	8003d9a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	330c      	adds	r3, #12
 8003c90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c98:	e853 3f00 	ldrex	r3, [r3]
 8003c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ca0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ca8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	330c      	adds	r3, #12
 8003cb2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003cb6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003cba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003cc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003cc6:	e841 2300 	strex	r3, r2, [r1]
 8003cca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003cce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1d9      	bne.n	8003c8a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	3314      	adds	r3, #20
 8003cdc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ce0:	e853 3f00 	ldrex	r3, [r3]
 8003ce4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ce6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ce8:	f023 0301 	bic.w	r3, r3, #1
 8003cec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3314      	adds	r3, #20
 8003cf6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cfa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003cfe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d06:	e841 2300 	strex	r3, r2, [r1]
 8003d0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1e1      	bne.n	8003cd6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3314      	adds	r3, #20
 8003d18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d1c:	e853 3f00 	ldrex	r3, [r3]
 8003d20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3314      	adds	r3, #20
 8003d32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d3e:	e841 2300 	strex	r3, r2, [r1]
 8003d42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1e3      	bne.n	8003d12 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	330c      	adds	r3, #12
 8003d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d62:	e853 3f00 	ldrex	r3, [r3]
 8003d66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d6a:	f023 0310 	bic.w	r3, r3, #16
 8003d6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	330c      	adds	r3, #12
 8003d78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d7c:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d7e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d84:	e841 2300 	strex	r3, r2, [r1]
 8003d88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1e3      	bne.n	8003d58 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fe fad4 	bl	8002342 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	4619      	mov	r1, r3
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f8c0 	bl	8003f30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003db0:	e099      	b.n	8003ee6 <HAL_UART_IRQHandler+0x50e>
 8003db2:	bf00      	nop
 8003db4:	080040eb 	.word	0x080040eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 808b 	beq.w	8003eea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003dd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 8086 	beq.w	8003eea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	330c      	adds	r3, #12
 8003de4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de8:	e853 3f00 	ldrex	r3, [r3]
 8003dec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003df4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	330c      	adds	r3, #12
 8003dfe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e02:	647a      	str	r2, [r7, #68]	; 0x44
 8003e04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e0a:	e841 2300 	strex	r3, r2, [r1]
 8003e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1e3      	bne.n	8003dde <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3314      	adds	r3, #20
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	e853 3f00 	ldrex	r3, [r3]
 8003e24:	623b      	str	r3, [r7, #32]
   return(result);
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	f023 0301 	bic.w	r3, r3, #1
 8003e2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	3314      	adds	r3, #20
 8003e36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e3a:	633a      	str	r2, [r7, #48]	; 0x30
 8003e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e42:	e841 2300 	strex	r3, r2, [r1]
 8003e46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1e3      	bne.n	8003e16 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	330c      	adds	r3, #12
 8003e62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	e853 3f00 	ldrex	r3, [r3]
 8003e6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f023 0310 	bic.w	r3, r3, #16
 8003e72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	330c      	adds	r3, #12
 8003e7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e80:	61fa      	str	r2, [r7, #28]
 8003e82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e84:	69b9      	ldr	r1, [r7, #24]
 8003e86:	69fa      	ldr	r2, [r7, #28]
 8003e88:	e841 2300 	strex	r3, r2, [r1]
 8003e8c:	617b      	str	r3, [r7, #20]
   return(result);
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e3      	bne.n	8003e5c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e98:	4619      	mov	r1, r3
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f848 	bl	8003f30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ea0:	e023      	b.n	8003eea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d009      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x4ea>
 8003eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f929 	bl	8004112 <UART_Transmit_IT>
    return;
 8003ec0:	e014      	b.n	8003eec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00e      	beq.n	8003eec <HAL_UART_IRQHandler+0x514>
 8003ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d008      	beq.n	8003eec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f969 	bl	80041b2 <UART_EndTransmit_IT>
    return;
 8003ee0:	e004      	b.n	8003eec <HAL_UART_IRQHandler+0x514>
    return;
 8003ee2:	bf00      	nop
 8003ee4:	e002      	b.n	8003eec <HAL_UART_IRQHandler+0x514>
      return;
 8003ee6:	bf00      	nop
 8003ee8:	e000      	b.n	8003eec <HAL_UART_IRQHandler+0x514>
      return;
 8003eea:	bf00      	nop
  }
}
 8003eec:	37e8      	adds	r7, #232	; 0xe8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop

08003ef4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b090      	sub	sp, #64	; 0x40
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	603b      	str	r3, [r7, #0]
 8003f54:	4613      	mov	r3, r2
 8003f56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f58:	e050      	b.n	8003ffc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f60:	d04c      	beq.n	8003ffc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d007      	beq.n	8003f78 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f68:	f7fe f878 	bl	800205c <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d241      	bcs.n	8003ffc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	330c      	adds	r3, #12
 8003f7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f82:	e853 3f00 	ldrex	r3, [r3]
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	330c      	adds	r3, #12
 8003f96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f98:	637a      	str	r2, [r7, #52]	; 0x34
 8003f9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fa0:	e841 2300 	strex	r3, r2, [r1]
 8003fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1e5      	bne.n	8003f78 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3314      	adds	r3, #20
 8003fb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	e853 3f00 	ldrex	r3, [r3]
 8003fba:	613b      	str	r3, [r7, #16]
   return(result);
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	f023 0301 	bic.w	r3, r3, #1
 8003fc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3314      	adds	r3, #20
 8003fca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fcc:	623a      	str	r2, [r7, #32]
 8003fce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd0:	69f9      	ldr	r1, [r7, #28]
 8003fd2:	6a3a      	ldr	r2, [r7, #32]
 8003fd4:	e841 2300 	strex	r3, r2, [r1]
 8003fd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1e5      	bne.n	8003fac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e00f      	b.n	800401c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	4013      	ands	r3, r2
 8004006:	68ba      	ldr	r2, [r7, #8]
 8004008:	429a      	cmp	r2, r3
 800400a:	bf0c      	ite	eq
 800400c:	2301      	moveq	r3, #1
 800400e:	2300      	movne	r3, #0
 8004010:	b2db      	uxtb	r3, r3
 8004012:	461a      	mov	r2, r3
 8004014:	79fb      	ldrb	r3, [r7, #7]
 8004016:	429a      	cmp	r2, r3
 8004018:	d09f      	beq.n	8003f5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3740      	adds	r7, #64	; 0x40
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004024:	b480      	push	{r7}
 8004026:	b095      	sub	sp, #84	; 0x54
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	330c      	adds	r3, #12
 8004032:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004036:	e853 3f00 	ldrex	r3, [r3]
 800403a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800403c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004042:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	330c      	adds	r3, #12
 800404a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800404c:	643a      	str	r2, [r7, #64]	; 0x40
 800404e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004050:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004052:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004054:	e841 2300 	strex	r3, r2, [r1]
 8004058:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800405a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1e5      	bne.n	800402c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3314      	adds	r3, #20
 8004066:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	e853 3f00 	ldrex	r3, [r3]
 800406e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f023 0301 	bic.w	r3, r3, #1
 8004076:	64bb      	str	r3, [r7, #72]	; 0x48
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3314      	adds	r3, #20
 800407e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004080:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004082:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004084:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004086:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004088:	e841 2300 	strex	r3, r2, [r1]
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1e5      	bne.n	8004060 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004098:	2b01      	cmp	r3, #1
 800409a:	d119      	bne.n	80040d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	330c      	adds	r3, #12
 80040a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	e853 3f00 	ldrex	r3, [r3]
 80040aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f023 0310 	bic.w	r3, r3, #16
 80040b2:	647b      	str	r3, [r7, #68]	; 0x44
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	330c      	adds	r3, #12
 80040ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040bc:	61ba      	str	r2, [r7, #24]
 80040be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c0:	6979      	ldr	r1, [r7, #20]
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	e841 2300 	strex	r3, r2, [r1]
 80040c8:	613b      	str	r3, [r7, #16]
   return(result);
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1e5      	bne.n	800409c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80040de:	bf00      	nop
 80040e0:	3754      	adds	r7, #84	; 0x54
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b084      	sub	sp, #16
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f7ff ff09 	bl	8003f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800410a:	bf00      	nop
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004112:	b480      	push	{r7}
 8004114:	b085      	sub	sp, #20
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b21      	cmp	r3, #33	; 0x21
 8004124:	d13e      	bne.n	80041a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412e:	d114      	bne.n	800415a <UART_Transmit_IT+0x48>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d110      	bne.n	800415a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800414c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	1c9a      	adds	r2, r3, #2
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	621a      	str	r2, [r3, #32]
 8004158:	e008      	b.n	800416c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	1c59      	adds	r1, r3, #1
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	6211      	str	r1, [r2, #32]
 8004164:	781a      	ldrb	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004170:	b29b      	uxth	r3, r3
 8004172:	3b01      	subs	r3, #1
 8004174:	b29b      	uxth	r3, r3
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	4619      	mov	r1, r3
 800417a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10f      	bne.n	80041a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68da      	ldr	r2, [r3, #12]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800418e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800419e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041a0:	2300      	movs	r3, #0
 80041a2:	e000      	b.n	80041a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041a4:	2302      	movs	r3, #2
  }
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b082      	sub	sp, #8
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68da      	ldr	r2, [r3, #12]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7ff fe8e 	bl	8003ef4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b08c      	sub	sp, #48	; 0x30
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b22      	cmp	r3, #34	; 0x22
 80041f4:	f040 80ab 	bne.w	800434e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004200:	d117      	bne.n	8004232 <UART_Receive_IT+0x50>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d113      	bne.n	8004232 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800420a:	2300      	movs	r3, #0
 800420c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004212:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	b29b      	uxth	r3, r3
 800421c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004220:	b29a      	uxth	r2, r3
 8004222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004224:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422a:	1c9a      	adds	r2, r3, #2
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	629a      	str	r2, [r3, #40]	; 0x28
 8004230:	e026      	b.n	8004280 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004236:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004238:	2300      	movs	r3, #0
 800423a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004244:	d007      	beq.n	8004256 <UART_Receive_IT+0x74>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10a      	bne.n	8004264 <UART_Receive_IT+0x82>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d106      	bne.n	8004264 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	b2da      	uxtb	r2, r3
 800425e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004260:	701a      	strb	r2, [r3, #0]
 8004262:	e008      	b.n	8004276 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	b2db      	uxtb	r3, r3
 800426c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004270:	b2da      	uxtb	r2, r3
 8004272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004274:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004284:	b29b      	uxth	r3, r3
 8004286:	3b01      	subs	r3, #1
 8004288:	b29b      	uxth	r3, r3
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	4619      	mov	r1, r3
 800428e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004290:	2b00      	cmp	r3, #0
 8004292:	d15a      	bne.n	800434a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0220 	bic.w	r2, r2, #32
 80042a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695a      	ldr	r2, [r3, #20]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 0201 	bic.w	r2, r2, #1
 80042c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d135      	bne.n	8004340 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	330c      	adds	r3, #12
 80042e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	e853 3f00 	ldrex	r3, [r3]
 80042e8:	613b      	str	r3, [r7, #16]
   return(result);
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f023 0310 	bic.w	r3, r3, #16
 80042f0:	627b      	str	r3, [r7, #36]	; 0x24
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	330c      	adds	r3, #12
 80042f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042fa:	623a      	str	r2, [r7, #32]
 80042fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fe:	69f9      	ldr	r1, [r7, #28]
 8004300:	6a3a      	ldr	r2, [r7, #32]
 8004302:	e841 2300 	strex	r3, r2, [r1]
 8004306:	61bb      	str	r3, [r7, #24]
   return(result);
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1e5      	bne.n	80042da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0310 	and.w	r3, r3, #16
 8004318:	2b10      	cmp	r3, #16
 800431a:	d10a      	bne.n	8004332 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800431c:	2300      	movs	r3, #0
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004336:	4619      	mov	r1, r3
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7ff fdf9 	bl	8003f30 <HAL_UARTEx_RxEventCallback>
 800433e:	e002      	b.n	8004346 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f7ff fde1 	bl	8003f08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	e002      	b.n	8004350 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800434a:	2300      	movs	r3, #0
 800434c:	e000      	b.n	8004350 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800434e:	2302      	movs	r3, #2
  }
}
 8004350:	4618      	mov	r0, r3
 8004352:	3730      	adds	r7, #48	; 0x30
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800435c:	b0c0      	sub	sp, #256	; 0x100
 800435e:	af00      	add	r7, sp, #0
 8004360:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004374:	68d9      	ldr	r1, [r3, #12]
 8004376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	ea40 0301 	orr.w	r3, r0, r1
 8004380:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	431a      	orrs	r2, r3
 8004390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	431a      	orrs	r2, r3
 8004398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	4313      	orrs	r3, r2
 80043a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80043a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80043b0:	f021 010c 	bic.w	r1, r1, #12
 80043b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043be:	430b      	orrs	r3, r1
 80043c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80043ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d2:	6999      	ldr	r1, [r3, #24]
 80043d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	ea40 0301 	orr.w	r3, r0, r1
 80043de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	4b8f      	ldr	r3, [pc, #572]	; (8004624 <UART_SetConfig+0x2cc>)
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d005      	beq.n	80043f8 <UART_SetConfig+0xa0>
 80043ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	4b8d      	ldr	r3, [pc, #564]	; (8004628 <UART_SetConfig+0x2d0>)
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d104      	bne.n	8004402 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043f8:	f7fe ff5c 	bl	80032b4 <HAL_RCC_GetPCLK2Freq>
 80043fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004400:	e003      	b.n	800440a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004402:	f7fe ff43 	bl	800328c <HAL_RCC_GetPCLK1Freq>
 8004406:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800440a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004414:	f040 810c 	bne.w	8004630 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004418:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800441c:	2200      	movs	r2, #0
 800441e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004422:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004426:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800442a:	4622      	mov	r2, r4
 800442c:	462b      	mov	r3, r5
 800442e:	1891      	adds	r1, r2, r2
 8004430:	65b9      	str	r1, [r7, #88]	; 0x58
 8004432:	415b      	adcs	r3, r3
 8004434:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004436:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800443a:	4621      	mov	r1, r4
 800443c:	eb12 0801 	adds.w	r8, r2, r1
 8004440:	4629      	mov	r1, r5
 8004442:	eb43 0901 	adc.w	r9, r3, r1
 8004446:	f04f 0200 	mov.w	r2, #0
 800444a:	f04f 0300 	mov.w	r3, #0
 800444e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004452:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004456:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800445a:	4690      	mov	r8, r2
 800445c:	4699      	mov	r9, r3
 800445e:	4623      	mov	r3, r4
 8004460:	eb18 0303 	adds.w	r3, r8, r3
 8004464:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004468:	462b      	mov	r3, r5
 800446a:	eb49 0303 	adc.w	r3, r9, r3
 800446e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800447e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004482:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004486:	460b      	mov	r3, r1
 8004488:	18db      	adds	r3, r3, r3
 800448a:	653b      	str	r3, [r7, #80]	; 0x50
 800448c:	4613      	mov	r3, r2
 800448e:	eb42 0303 	adc.w	r3, r2, r3
 8004492:	657b      	str	r3, [r7, #84]	; 0x54
 8004494:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004498:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800449c:	f7fb fe9c 	bl	80001d8 <__aeabi_uldivmod>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4b61      	ldr	r3, [pc, #388]	; (800462c <UART_SetConfig+0x2d4>)
 80044a6:	fba3 2302 	umull	r2, r3, r3, r2
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	011c      	lsls	r4, r3, #4
 80044ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80044bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80044c0:	4642      	mov	r2, r8
 80044c2:	464b      	mov	r3, r9
 80044c4:	1891      	adds	r1, r2, r2
 80044c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80044c8:	415b      	adcs	r3, r3
 80044ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80044d0:	4641      	mov	r1, r8
 80044d2:	eb12 0a01 	adds.w	sl, r2, r1
 80044d6:	4649      	mov	r1, r9
 80044d8:	eb43 0b01 	adc.w	fp, r3, r1
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044f0:	4692      	mov	sl, r2
 80044f2:	469b      	mov	fp, r3
 80044f4:	4643      	mov	r3, r8
 80044f6:	eb1a 0303 	adds.w	r3, sl, r3
 80044fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044fe:	464b      	mov	r3, r9
 8004500:	eb4b 0303 	adc.w	r3, fp, r3
 8004504:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004514:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004518:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800451c:	460b      	mov	r3, r1
 800451e:	18db      	adds	r3, r3, r3
 8004520:	643b      	str	r3, [r7, #64]	; 0x40
 8004522:	4613      	mov	r3, r2
 8004524:	eb42 0303 	adc.w	r3, r2, r3
 8004528:	647b      	str	r3, [r7, #68]	; 0x44
 800452a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800452e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004532:	f7fb fe51 	bl	80001d8 <__aeabi_uldivmod>
 8004536:	4602      	mov	r2, r0
 8004538:	460b      	mov	r3, r1
 800453a:	4611      	mov	r1, r2
 800453c:	4b3b      	ldr	r3, [pc, #236]	; (800462c <UART_SetConfig+0x2d4>)
 800453e:	fba3 2301 	umull	r2, r3, r3, r1
 8004542:	095b      	lsrs	r3, r3, #5
 8004544:	2264      	movs	r2, #100	; 0x64
 8004546:	fb02 f303 	mul.w	r3, r2, r3
 800454a:	1acb      	subs	r3, r1, r3
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004552:	4b36      	ldr	r3, [pc, #216]	; (800462c <UART_SetConfig+0x2d4>)
 8004554:	fba3 2302 	umull	r2, r3, r3, r2
 8004558:	095b      	lsrs	r3, r3, #5
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004560:	441c      	add	r4, r3
 8004562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004566:	2200      	movs	r2, #0
 8004568:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800456c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004570:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004574:	4642      	mov	r2, r8
 8004576:	464b      	mov	r3, r9
 8004578:	1891      	adds	r1, r2, r2
 800457a:	63b9      	str	r1, [r7, #56]	; 0x38
 800457c:	415b      	adcs	r3, r3
 800457e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004580:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004584:	4641      	mov	r1, r8
 8004586:	1851      	adds	r1, r2, r1
 8004588:	6339      	str	r1, [r7, #48]	; 0x30
 800458a:	4649      	mov	r1, r9
 800458c:	414b      	adcs	r3, r1
 800458e:	637b      	str	r3, [r7, #52]	; 0x34
 8004590:	f04f 0200 	mov.w	r2, #0
 8004594:	f04f 0300 	mov.w	r3, #0
 8004598:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800459c:	4659      	mov	r1, fp
 800459e:	00cb      	lsls	r3, r1, #3
 80045a0:	4651      	mov	r1, sl
 80045a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045a6:	4651      	mov	r1, sl
 80045a8:	00ca      	lsls	r2, r1, #3
 80045aa:	4610      	mov	r0, r2
 80045ac:	4619      	mov	r1, r3
 80045ae:	4603      	mov	r3, r0
 80045b0:	4642      	mov	r2, r8
 80045b2:	189b      	adds	r3, r3, r2
 80045b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045b8:	464b      	mov	r3, r9
 80045ba:	460a      	mov	r2, r1
 80045bc:	eb42 0303 	adc.w	r3, r2, r3
 80045c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80045d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80045d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80045d8:	460b      	mov	r3, r1
 80045da:	18db      	adds	r3, r3, r3
 80045dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80045de:	4613      	mov	r3, r2
 80045e0:	eb42 0303 	adc.w	r3, r2, r3
 80045e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80045ee:	f7fb fdf3 	bl	80001d8 <__aeabi_uldivmod>
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	4b0d      	ldr	r3, [pc, #52]	; (800462c <UART_SetConfig+0x2d4>)
 80045f8:	fba3 1302 	umull	r1, r3, r3, r2
 80045fc:	095b      	lsrs	r3, r3, #5
 80045fe:	2164      	movs	r1, #100	; 0x64
 8004600:	fb01 f303 	mul.w	r3, r1, r3
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	3332      	adds	r3, #50	; 0x32
 800460a:	4a08      	ldr	r2, [pc, #32]	; (800462c <UART_SetConfig+0x2d4>)
 800460c:	fba2 2303 	umull	r2, r3, r2, r3
 8004610:	095b      	lsrs	r3, r3, #5
 8004612:	f003 0207 	and.w	r2, r3, #7
 8004616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4422      	add	r2, r4
 800461e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004620:	e105      	b.n	800482e <UART_SetConfig+0x4d6>
 8004622:	bf00      	nop
 8004624:	40011000 	.word	0x40011000
 8004628:	40011400 	.word	0x40011400
 800462c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004630:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004634:	2200      	movs	r2, #0
 8004636:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800463a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800463e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004642:	4642      	mov	r2, r8
 8004644:	464b      	mov	r3, r9
 8004646:	1891      	adds	r1, r2, r2
 8004648:	6239      	str	r1, [r7, #32]
 800464a:	415b      	adcs	r3, r3
 800464c:	627b      	str	r3, [r7, #36]	; 0x24
 800464e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004652:	4641      	mov	r1, r8
 8004654:	1854      	adds	r4, r2, r1
 8004656:	4649      	mov	r1, r9
 8004658:	eb43 0501 	adc.w	r5, r3, r1
 800465c:	f04f 0200 	mov.w	r2, #0
 8004660:	f04f 0300 	mov.w	r3, #0
 8004664:	00eb      	lsls	r3, r5, #3
 8004666:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800466a:	00e2      	lsls	r2, r4, #3
 800466c:	4614      	mov	r4, r2
 800466e:	461d      	mov	r5, r3
 8004670:	4643      	mov	r3, r8
 8004672:	18e3      	adds	r3, r4, r3
 8004674:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004678:	464b      	mov	r3, r9
 800467a:	eb45 0303 	adc.w	r3, r5, r3
 800467e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800468e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004692:	f04f 0200 	mov.w	r2, #0
 8004696:	f04f 0300 	mov.w	r3, #0
 800469a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800469e:	4629      	mov	r1, r5
 80046a0:	008b      	lsls	r3, r1, #2
 80046a2:	4621      	mov	r1, r4
 80046a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046a8:	4621      	mov	r1, r4
 80046aa:	008a      	lsls	r2, r1, #2
 80046ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80046b0:	f7fb fd92 	bl	80001d8 <__aeabi_uldivmod>
 80046b4:	4602      	mov	r2, r0
 80046b6:	460b      	mov	r3, r1
 80046b8:	4b60      	ldr	r3, [pc, #384]	; (800483c <UART_SetConfig+0x4e4>)
 80046ba:	fba3 2302 	umull	r2, r3, r3, r2
 80046be:	095b      	lsrs	r3, r3, #5
 80046c0:	011c      	lsls	r4, r3, #4
 80046c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046c6:	2200      	movs	r2, #0
 80046c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80046cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80046d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80046d4:	4642      	mov	r2, r8
 80046d6:	464b      	mov	r3, r9
 80046d8:	1891      	adds	r1, r2, r2
 80046da:	61b9      	str	r1, [r7, #24]
 80046dc:	415b      	adcs	r3, r3
 80046de:	61fb      	str	r3, [r7, #28]
 80046e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046e4:	4641      	mov	r1, r8
 80046e6:	1851      	adds	r1, r2, r1
 80046e8:	6139      	str	r1, [r7, #16]
 80046ea:	4649      	mov	r1, r9
 80046ec:	414b      	adcs	r3, r1
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	f04f 0300 	mov.w	r3, #0
 80046f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046fc:	4659      	mov	r1, fp
 80046fe:	00cb      	lsls	r3, r1, #3
 8004700:	4651      	mov	r1, sl
 8004702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004706:	4651      	mov	r1, sl
 8004708:	00ca      	lsls	r2, r1, #3
 800470a:	4610      	mov	r0, r2
 800470c:	4619      	mov	r1, r3
 800470e:	4603      	mov	r3, r0
 8004710:	4642      	mov	r2, r8
 8004712:	189b      	adds	r3, r3, r2
 8004714:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004718:	464b      	mov	r3, r9
 800471a:	460a      	mov	r2, r1
 800471c:	eb42 0303 	adc.w	r3, r2, r3
 8004720:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	67bb      	str	r3, [r7, #120]	; 0x78
 800472e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004730:	f04f 0200 	mov.w	r2, #0
 8004734:	f04f 0300 	mov.w	r3, #0
 8004738:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800473c:	4649      	mov	r1, r9
 800473e:	008b      	lsls	r3, r1, #2
 8004740:	4641      	mov	r1, r8
 8004742:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004746:	4641      	mov	r1, r8
 8004748:	008a      	lsls	r2, r1, #2
 800474a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800474e:	f7fb fd43 	bl	80001d8 <__aeabi_uldivmod>
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
 8004756:	4b39      	ldr	r3, [pc, #228]	; (800483c <UART_SetConfig+0x4e4>)
 8004758:	fba3 1302 	umull	r1, r3, r3, r2
 800475c:	095b      	lsrs	r3, r3, #5
 800475e:	2164      	movs	r1, #100	; 0x64
 8004760:	fb01 f303 	mul.w	r3, r1, r3
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	3332      	adds	r3, #50	; 0x32
 800476a:	4a34      	ldr	r2, [pc, #208]	; (800483c <UART_SetConfig+0x4e4>)
 800476c:	fba2 2303 	umull	r2, r3, r2, r3
 8004770:	095b      	lsrs	r3, r3, #5
 8004772:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004776:	441c      	add	r4, r3
 8004778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800477c:	2200      	movs	r2, #0
 800477e:	673b      	str	r3, [r7, #112]	; 0x70
 8004780:	677a      	str	r2, [r7, #116]	; 0x74
 8004782:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004786:	4642      	mov	r2, r8
 8004788:	464b      	mov	r3, r9
 800478a:	1891      	adds	r1, r2, r2
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	415b      	adcs	r3, r3
 8004790:	60fb      	str	r3, [r7, #12]
 8004792:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004796:	4641      	mov	r1, r8
 8004798:	1851      	adds	r1, r2, r1
 800479a:	6039      	str	r1, [r7, #0]
 800479c:	4649      	mov	r1, r9
 800479e:	414b      	adcs	r3, r1
 80047a0:	607b      	str	r3, [r7, #4]
 80047a2:	f04f 0200 	mov.w	r2, #0
 80047a6:	f04f 0300 	mov.w	r3, #0
 80047aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047ae:	4659      	mov	r1, fp
 80047b0:	00cb      	lsls	r3, r1, #3
 80047b2:	4651      	mov	r1, sl
 80047b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047b8:	4651      	mov	r1, sl
 80047ba:	00ca      	lsls	r2, r1, #3
 80047bc:	4610      	mov	r0, r2
 80047be:	4619      	mov	r1, r3
 80047c0:	4603      	mov	r3, r0
 80047c2:	4642      	mov	r2, r8
 80047c4:	189b      	adds	r3, r3, r2
 80047c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80047c8:	464b      	mov	r3, r9
 80047ca:	460a      	mov	r2, r1
 80047cc:	eb42 0303 	adc.w	r3, r2, r3
 80047d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	663b      	str	r3, [r7, #96]	; 0x60
 80047dc:	667a      	str	r2, [r7, #100]	; 0x64
 80047de:	f04f 0200 	mov.w	r2, #0
 80047e2:	f04f 0300 	mov.w	r3, #0
 80047e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80047ea:	4649      	mov	r1, r9
 80047ec:	008b      	lsls	r3, r1, #2
 80047ee:	4641      	mov	r1, r8
 80047f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047f4:	4641      	mov	r1, r8
 80047f6:	008a      	lsls	r2, r1, #2
 80047f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80047fc:	f7fb fcec 	bl	80001d8 <__aeabi_uldivmod>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4b0d      	ldr	r3, [pc, #52]	; (800483c <UART_SetConfig+0x4e4>)
 8004806:	fba3 1302 	umull	r1, r3, r3, r2
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	2164      	movs	r1, #100	; 0x64
 800480e:	fb01 f303 	mul.w	r3, r1, r3
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	011b      	lsls	r3, r3, #4
 8004816:	3332      	adds	r3, #50	; 0x32
 8004818:	4a08      	ldr	r2, [pc, #32]	; (800483c <UART_SetConfig+0x4e4>)
 800481a:	fba2 2303 	umull	r2, r3, r2, r3
 800481e:	095b      	lsrs	r3, r3, #5
 8004820:	f003 020f 	and.w	r2, r3, #15
 8004824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4422      	add	r2, r4
 800482c:	609a      	str	r2, [r3, #8]
}
 800482e:	bf00      	nop
 8004830:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004834:	46bd      	mov	sp, r7
 8004836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800483a:	bf00      	nop
 800483c:	51eb851f 	.word	0x51eb851f

08004840 <__libc_init_array>:
 8004840:	b570      	push	{r4, r5, r6, lr}
 8004842:	4d0d      	ldr	r5, [pc, #52]	; (8004878 <__libc_init_array+0x38>)
 8004844:	4c0d      	ldr	r4, [pc, #52]	; (800487c <__libc_init_array+0x3c>)
 8004846:	1b64      	subs	r4, r4, r5
 8004848:	10a4      	asrs	r4, r4, #2
 800484a:	2600      	movs	r6, #0
 800484c:	42a6      	cmp	r6, r4
 800484e:	d109      	bne.n	8004864 <__libc_init_array+0x24>
 8004850:	4d0b      	ldr	r5, [pc, #44]	; (8004880 <__libc_init_array+0x40>)
 8004852:	4c0c      	ldr	r4, [pc, #48]	; (8004884 <__libc_init_array+0x44>)
 8004854:	f000 f830 	bl	80048b8 <_init>
 8004858:	1b64      	subs	r4, r4, r5
 800485a:	10a4      	asrs	r4, r4, #2
 800485c:	2600      	movs	r6, #0
 800485e:	42a6      	cmp	r6, r4
 8004860:	d105      	bne.n	800486e <__libc_init_array+0x2e>
 8004862:	bd70      	pop	{r4, r5, r6, pc}
 8004864:	f855 3b04 	ldr.w	r3, [r5], #4
 8004868:	4798      	blx	r3
 800486a:	3601      	adds	r6, #1
 800486c:	e7ee      	b.n	800484c <__libc_init_array+0xc>
 800486e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004872:	4798      	blx	r3
 8004874:	3601      	adds	r6, #1
 8004876:	e7f2      	b.n	800485e <__libc_init_array+0x1e>
 8004878:	080049b4 	.word	0x080049b4
 800487c:	080049b4 	.word	0x080049b4
 8004880:	080049b4 	.word	0x080049b4
 8004884:	080049b8 	.word	0x080049b8

08004888 <memcmp>:
 8004888:	b510      	push	{r4, lr}
 800488a:	3901      	subs	r1, #1
 800488c:	4402      	add	r2, r0
 800488e:	4290      	cmp	r0, r2
 8004890:	d101      	bne.n	8004896 <memcmp+0xe>
 8004892:	2000      	movs	r0, #0
 8004894:	e005      	b.n	80048a2 <memcmp+0x1a>
 8004896:	7803      	ldrb	r3, [r0, #0]
 8004898:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800489c:	42a3      	cmp	r3, r4
 800489e:	d001      	beq.n	80048a4 <memcmp+0x1c>
 80048a0:	1b18      	subs	r0, r3, r4
 80048a2:	bd10      	pop	{r4, pc}
 80048a4:	3001      	adds	r0, #1
 80048a6:	e7f2      	b.n	800488e <memcmp+0x6>

080048a8 <memset>:
 80048a8:	4402      	add	r2, r0
 80048aa:	4603      	mov	r3, r0
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d100      	bne.n	80048b2 <memset+0xa>
 80048b0:	4770      	bx	lr
 80048b2:	f803 1b01 	strb.w	r1, [r3], #1
 80048b6:	e7f9      	b.n	80048ac <memset+0x4>

080048b8 <_init>:
 80048b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ba:	bf00      	nop
 80048bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048be:	bc08      	pop	{r3}
 80048c0:	469e      	mov	lr, r3
 80048c2:	4770      	bx	lr

080048c4 <_fini>:
 80048c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c6:	bf00      	nop
 80048c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ca:	bc08      	pop	{r3}
 80048cc:	469e      	mov	lr, r3
 80048ce:	4770      	bx	lr
