
DWM1000-twr-responder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a628  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c88  0800a7c8  0800a7c8  0001a7c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b450  0800b450  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b450  0800b450  0001b450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b458  0800b458  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b458  0800b458  0001b458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b45c  0800b45c  0001b45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800b460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000730  200001fc  0800b65c  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000092c  0800b65c  0002092c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012b68  00000000  00000000  0002026f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034b1  00000000  00000000  00032dd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  00036288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e13  00000000  00000000  00037500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b857  00000000  00000000  00038313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000183cb  00000000  00000000  00053b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094021  00000000  00000000  0006bf35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f6c  00000000  00000000  000fff58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00105ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001fc 	.word	0x200001fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a7b0 	.word	0x0800a7b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000200 	.word	0x20000200
 80001dc:	0800a7b0 	.word	0x0800a7b0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 8001000:	b590      	push	{r4, r7, lr}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8001010:	4b9f      	ldr	r3, [pc, #636]	; (8001290 <dwt_initialise+0x290>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2200      	movs	r2, #0
 8001016:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 8001018:	4b9d      	ldr	r3, [pc, #628]	; (8001290 <dwt_initialise+0x290>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2200      	movs	r2, #0
 800101e:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 8001020:	4b9b      	ldr	r3, [pc, #620]	; (8001290 <dwt_initialise+0x290>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2200      	movs	r2, #0
 8001026:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 8001028:	4b99      	ldr	r3, [pc, #612]	; (8001290 <dwt_initialise+0x290>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2200      	movs	r2, #0
 800102e:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 8001030:	4b97      	ldr	r3, [pc, #604]	; (8001290 <dwt_initialise+0x290>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2200      	movs	r2, #0
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 8001038:	4b95      	ldr	r3, [pc, #596]	; (8001290 <dwt_initialise+0x290>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2200      	movs	r2, #0
 800103e:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 8001040:	4b93      	ldr	r3, [pc, #588]	; (8001290 <dwt_initialise+0x290>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2200      	movs	r2, #0
 8001046:	635a      	str	r2, [r3, #52]	; 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 8001048:	f000 f926 	bl	8001298 <dwt_readdevid>
 800104c:	4603      	mov	r3, r0
 800104e:	4a91      	ldr	r2, [pc, #580]	; (8001294 <dwt_initialise+0x294>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d002      	beq.n	800105a <dwt_initialise+0x5a>
    {
        return DWT_ERROR ;
 8001054:	f04f 33ff 	mov.w	r3, #4294967295
 8001058:	e115      	b.n	8001286 <dwt_initialise+0x286>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d101      	bne.n	8001068 <dwt_initialise+0x68>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 8001064:	f000 fd88 	bl	8001b78 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d004      	beq.n	800107c <dwt_initialise+0x7c>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8001078:	2b00      	cmp	r3, #0
 800107a:	d102      	bne.n	8001082 <dwt_initialise+0x82>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 800107c:	2000      	movs	r0, #0
 800107e:	f000 fc49 	bl	8001914 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 8001082:	2204      	movs	r2, #4
 8001084:	2100      	movs	r1, #0
 8001086:	2024      	movs	r0, #36	; 0x24
 8001088:	f000 fb8e 	bl	80017a8 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d116      	bne.n	80010c4 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 8001096:	2004      	movs	r0, #4
 8001098:	f000 fbdc 	bl	8001854 <_dwt_otpread>
 800109c:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d01f      	beq.n	80010e6 <dwt_initialise+0xe6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 80010a6:	2202      	movs	r2, #2
 80010a8:	2112      	movs	r1, #18
 80010aa:	202d      	movs	r0, #45	; 0x2d
 80010ac:	f000 fb7c 	bl	80017a8 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 80010b0:	4b77      	ldr	r3, [pc, #476]	; (8001290 <dwt_initialise+0x290>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	8ada      	ldrh	r2, [r3, #22]
 80010b6:	4b76      	ldr	r3, [pc, #472]	; (8001290 <dwt_initialise+0x290>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80010be:	b292      	uxth	r2, r2
 80010c0:	82da      	strh	r2, [r3, #22]
 80010c2:	e010      	b.n	80010e6 <dwt_initialise+0xe6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 80010c4:	2130      	movs	r1, #48	; 0x30
 80010c6:	2028      	movs	r0, #40	; 0x28
 80010c8:	f000 fb17 	bl	80016fa <dwt_read32bitoffsetreg>
 80010cc:	4603      	mov	r3, r0
 80010ce:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 80010d2:	d008      	beq.n	80010e6 <dwt_initialise+0xe6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 80010d4:	4b6e      	ldr	r3, [pc, #440]	; (8001290 <dwt_initialise+0x290>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	8ada      	ldrh	r2, [r3, #22]
 80010da:	4b6d      	ldr	r3, [pc, #436]	; (8001290 <dwt_initialise+0x290>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80010e2:	b292      	uxth	r2, r2
 80010e4:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d009      	beq.n	8001104 <dwt_initialise+0x104>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d011      	beq.n	800111e <dwt_initialise+0x11e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00c      	beq.n	800111e <dwt_initialise+0x11e>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8001104:	201e      	movs	r0, #30
 8001106:	f000 fba5 	bl	8001854 <_dwt_otpread>
 800110a:	4603      	mov	r3, r0
 800110c:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 800110e:	8afb      	ldrh	r3, [r7, #22]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	b29a      	uxth	r2, r3
 8001114:	4b5e      	ldr	r3, [pc, #376]	; (8001290 <dwt_initialise+0x290>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	72da      	strb	r2, [r3, #11]
 800111c:	e003      	b.n	8001126 <dwt_initialise+0x126>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 800111e:	4b5c      	ldr	r3, [pc, #368]	; (8001290 <dwt_initialise+0x290>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2200      	movs	r2, #0
 8001124:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d10b      	bne.n	8001148 <dwt_initialise+0x148>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 8001130:	8afb      	ldrh	r3, [r7, #22]
 8001132:	f003 031f 	and.w	r3, r3, #31
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <dwt_initialise+0x13e>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 800113a:	2310      	movs	r3, #16
 800113c:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 800113e:	8afb      	ldrh	r3, [r7, #22]
 8001140:	b2db      	uxtb	r3, r3
 8001142:	4618      	mov	r0, r3
 8001144:	f000 fd3e 	bl	8001bc4 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f003 0310 	and.w	r3, r3, #16
 800114e:	2b00      	cmp	r3, #0
 8001150:	d007      	beq.n	8001162 <dwt_initialise+0x162>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 8001152:	4b4f      	ldr	r3, [pc, #316]	; (8001290 <dwt_initialise+0x290>)
 8001154:	681c      	ldr	r4, [r3, #0]
 8001156:	2006      	movs	r0, #6
 8001158:	f000 fb7c 	bl	8001854 <_dwt_otpread>
 800115c:	4603      	mov	r3, r0
 800115e:	6023      	str	r3, [r4, #0]
 8001160:	e003      	b.n	800116a <dwt_initialise+0x16a>
    }
    else
    {
        pdw1000local->partID = 0;
 8001162:	4b4b      	ldr	r3, [pc, #300]	; (8001290 <dwt_initialise+0x290>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f003 0320 	and.w	r3, r3, #32
 8001170:	2b00      	cmp	r3, #0
 8001172:	d007      	beq.n	8001184 <dwt_initialise+0x184>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8001174:	4b46      	ldr	r3, [pc, #280]	; (8001290 <dwt_initialise+0x290>)
 8001176:	681c      	ldr	r4, [r3, #0]
 8001178:	2007      	movs	r0, #7
 800117a:	f000 fb6b 	bl	8001854 <_dwt_otpread>
 800117e:	4603      	mov	r3, r0
 8001180:	6063      	str	r3, [r4, #4]
 8001182:	e003      	b.n	800118c <dwt_initialise+0x18c>
    }
    else
    {
        pdw1000local->lotID = 0;
 8001184:	4b42      	ldr	r3, [pc, #264]	; (8001290 <dwt_initialise+0x290>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2200      	movs	r2, #0
 800118a:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001192:	2b00      	cmp	r3, #0
 8001194:	d008      	beq.n	80011a8 <dwt_initialise+0x1a8>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 8001196:	2008      	movs	r0, #8
 8001198:	f000 fb5c 	bl	8001854 <_dwt_otpread>
 800119c:	4602      	mov	r2, r0
 800119e:	4b3c      	ldr	r3, [pc, #240]	; (8001290 <dwt_initialise+0x290>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	721a      	strb	r2, [r3, #8]
 80011a6:	e003      	b.n	80011b0 <dwt_initialise+0x1b0>
    }
    else
    {
        pdw1000local->vBatP = 0;
 80011a8:	4b39      	ldr	r3, [pc, #228]	; (8001290 <dwt_initialise+0x290>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2200      	movs	r2, #0
 80011ae:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d008      	beq.n	80011cc <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 80011ba:	2009      	movs	r0, #9
 80011bc:	f000 fb4a 	bl	8001854 <_dwt_otpread>
 80011c0:	4602      	mov	r2, r0
 80011c2:	4b33      	ldr	r3, [pc, #204]	; (8001290 <dwt_initialise+0x290>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	725a      	strb	r2, [r3, #9]
 80011ca:	e003      	b.n	80011d4 <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 80011cc:	4b30      	ldr	r3, [pc, #192]	; (8001290 <dwt_initialise+0x290>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2200      	movs	r2, #0
 80011d2:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d121      	bne.n	8001222 <dwt_initialise+0x222>
    {
        if(DWT_LOADUCODE & config)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d00b      	beq.n	8001200 <dwt_initialise+0x200>
        {
            _dwt_loaducodefromrom();
 80011e8:	f000 fb81 	bl	80018ee <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 80011ec:	4b28      	ldr	r3, [pc, #160]	; (8001290 <dwt_initialise+0x290>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	8ada      	ldrh	r2, [r3, #22]
 80011f2:	4b27      	ldr	r3, [pc, #156]	; (8001290 <dwt_initialise+0x290>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80011fa:	b292      	uxth	r2, r2
 80011fc:	82da      	strh	r2, [r3, #22]
 80011fe:	e01e      	b.n	800123e <dwt_initialise+0x23e>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 8001200:	2105      	movs	r1, #5
 8001202:	2036      	movs	r0, #54	; 0x36
 8001204:	f000 faa0 	bl	8001748 <dwt_read16bitoffsetreg>
 8001208:	4603      	mov	r3, r0
 800120a:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 800120c:	89fb      	ldrh	r3, [r7, #14]
 800120e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001212:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 8001214:	89fb      	ldrh	r3, [r7, #14]
 8001216:	461a      	mov	r2, r3
 8001218:	2105      	movs	r1, #5
 800121a:	2036      	movs	r0, #54	; 0x36
 800121c:	f000 fad7 	bl	80017ce <dwt_write16bitoffsetreg>
 8001220:	e00d      	b.n	800123e <dwt_initialise+0x23e>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	2b00      	cmp	r3, #0
 800122a:	d108      	bne.n	800123e <dwt_initialise+0x23e>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 800122c:	4b18      	ldr	r3, [pc, #96]	; (8001290 <dwt_initialise+0x290>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	8ada      	ldrh	r2, [r3, #22]
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <dwt_initialise+0x290>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800123a:	b292      	uxth	r2, r2
 800123c:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800123e:	2001      	movs	r0, #1
 8001240:	f000 fb68 	bl	8001914 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 8001244:	2200      	movs	r2, #0
 8001246:	210a      	movs	r1, #10
 8001248:	202c      	movs	r0, #44	; 0x2c
 800124a:	f000 faad 	bl	80017a8 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <dwt_initialise+0x290>)
 8001250:	681c      	ldr	r4, [r3, #0]
 8001252:	2100      	movs	r1, #0
 8001254:	2004      	movs	r0, #4
 8001256:	f000 fa50 	bl	80016fa <dwt_read32bitoffsetreg>
 800125a:	4603      	mov	r3, r0
 800125c:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 800125e:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <dwt_initialise+0x290>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	0c1b      	lsrs	r3, r3, #16
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <dwt_initialise+0x290>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f002 0203 	and.w	r2, r2, #3
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <dwt_initialise+0x290>)
 8001276:	681c      	ldr	r4, [r3, #0]
 8001278:	2100      	movs	r1, #0
 800127a:	2008      	movs	r0, #8
 800127c:	f000 fa3d 	bl	80016fa <dwt_read32bitoffsetreg>
 8001280:	4603      	mov	r3, r0
 8001282:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 8001284:	2300      	movs	r3, #0

} // end dwt_initialise()
 8001286:	4618      	mov	r0, r3
 8001288:	371c      	adds	r7, #28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd90      	pop	{r4, r7, pc}
 800128e:	bf00      	nop
 8001290:	20000000 	.word	0x20000000
 8001294:	deca0130 	.word	0xdeca0130

08001298 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 800129c:	2100      	movs	r1, #0
 800129e:	2000      	movs	r0, #0
 80012a0:	f000 fa2b 	bl	80016fa <dwt_read32bitoffsetreg>
 80012a4:	4603      	mov	r3, r0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	795b      	ldrb	r3, [r3, #5]
 80012c6:	461a      	mov	r2, r3
 80012c8:	4ba1      	ldr	r3, [pc, #644]	; (8001550 <dwt_configure+0x2a4>)
 80012ca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80012ce:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	785b      	ldrb	r3, [r3, #1]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 80012d8:	7cfb      	ldrb	r3, [r7, #19]
 80012da:	2b04      	cmp	r3, #4
 80012dc:	d002      	beq.n	80012e4 <dwt_configure+0x38>
 80012de:	7cfb      	ldrb	r3, [r7, #19]
 80012e0:	2b07      	cmp	r3, #7
 80012e2:	d101      	bne.n	80012e8 <dwt_configure+0x3c>
 80012e4:	2301      	movs	r3, #1
 80012e6:	e000      	b.n	80012ea <dwt_configure+0x3e>
 80012e8:	2300      	movs	r3, #0
 80012ea:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	79db      	ldrb	r3, [r3, #7]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d10b      	bne.n	800130c <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 80012f4:	4b97      	ldr	r3, [pc, #604]	; (8001554 <dwt_configure+0x2a8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	691a      	ldr	r2, [r3, #16]
 80012fa:	4b96      	ldr	r3, [pc, #600]	; (8001554 <dwt_configure+0x2a8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001302:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 8001304:	8abb      	ldrh	r3, [r7, #20]
 8001306:	08db      	lsrs	r3, r3, #3
 8001308:	82bb      	strh	r3, [r7, #20]
 800130a:	e007      	b.n	800131c <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 800130c:	4b91      	ldr	r3, [pc, #580]	; (8001554 <dwt_configure+0x2a8>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	691a      	ldr	r2, [r3, #16]
 8001312:	4b90      	ldr	r3, [pc, #576]	; (8001554 <dwt_configure+0x2a8>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800131a:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 800131c:	4b8d      	ldr	r3, [pc, #564]	; (8001554 <dwt_configure+0x2a8>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	7a12      	ldrb	r2, [r2, #8]
 8001324:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 8001326:	4b8b      	ldr	r3, [pc, #556]	; (8001554 <dwt_configure+0x2a8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	691a      	ldr	r2, [r3, #16]
 800132c:	4b89      	ldr	r3, [pc, #548]	; (8001554 <dwt_configure+0x2a8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001334:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 8001336:	4b87      	ldr	r3, [pc, #540]	; (8001554 <dwt_configure+0x2a8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6919      	ldr	r1, [r3, #16]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	7a1b      	ldrb	r3, [r3, #8]
 8001340:	041b      	lsls	r3, r3, #16
 8001342:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001346:	4b83      	ldr	r3, [pc, #524]	; (8001554 <dwt_configure+0x2a8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	430a      	orrs	r2, r1
 800134c:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 800134e:	4b81      	ldr	r3, [pc, #516]	; (8001554 <dwt_configure+0x2a8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	461a      	mov	r2, r3
 8001356:	2100      	movs	r1, #0
 8001358:	2004      	movs	r0, #4
 800135a:	f000 fa54 	bl	8001806 <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 800135e:	8abb      	ldrh	r3, [r7, #20]
 8001360:	461a      	mov	r2, r3
 8001362:	f642 0104 	movw	r1, #10244	; 0x2804
 8001366:	202e      	movs	r0, #46	; 0x2e
 8001368:	f000 fa31 	bl	80017ce <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 800136c:	7cbb      	ldrb	r3, [r7, #18]
 800136e:	4618      	mov	r0, r3
 8001370:	f000 fa9d 	bl	80018ae <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 8001374:	7cfb      	ldrb	r3, [r7, #19]
 8001376:	4a78      	ldr	r2, [pc, #480]	; (8001558 <dwt_configure+0x2ac>)
 8001378:	5cd3      	ldrb	r3, [r2, r3]
 800137a:	461a      	mov	r2, r3
 800137c:	4b77      	ldr	r3, [pc, #476]	; (800155c <dwt_configure+0x2b0>)
 800137e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001382:	461a      	mov	r2, r3
 8001384:	2107      	movs	r1, #7
 8001386:	202b      	movs	r0, #43	; 0x2b
 8001388:	f000 fa3d 	bl	8001806 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 800138c:	7cfb      	ldrb	r3, [r7, #19]
 800138e:	4a72      	ldr	r2, [pc, #456]	; (8001558 <dwt_configure+0x2ac>)
 8001390:	5cd3      	ldrb	r3, [r2, r3]
 8001392:	461a      	mov	r2, r3
 8001394:	4b72      	ldr	r3, [pc, #456]	; (8001560 <dwt_configure+0x2b4>)
 8001396:	5c9b      	ldrb	r3, [r3, r2]
 8001398:	461a      	mov	r2, r3
 800139a:	210b      	movs	r1, #11
 800139c:	202b      	movs	r0, #43	; 0x2b
 800139e:	f000 fa03 	bl	80017a8 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 80013a2:	7c7b      	ldrb	r3, [r7, #17]
 80013a4:	4a6f      	ldr	r2, [pc, #444]	; (8001564 <dwt_configure+0x2b8>)
 80013a6:	5cd3      	ldrb	r3, [r2, r3]
 80013a8:	461a      	mov	r2, r3
 80013aa:	210b      	movs	r1, #11
 80013ac:	2028      	movs	r0, #40	; 0x28
 80013ae:	f000 f9fb 	bl	80017a8 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 80013b2:	7cfb      	ldrb	r3, [r7, #19]
 80013b4:	4a68      	ldr	r2, [pc, #416]	; (8001558 <dwt_configure+0x2ac>)
 80013b6:	5cd3      	ldrb	r3, [r2, r3]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b6b      	ldr	r3, [pc, #428]	; (8001568 <dwt_configure+0x2bc>)
 80013bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c0:	461a      	mov	r2, r3
 80013c2:	210c      	movs	r1, #12
 80013c4:	2028      	movs	r0, #40	; 0x28
 80013c6:	f000 fa1e 	bl	8001806 <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	79db      	ldrb	r3, [r3, #7]
 80013ce:	4618      	mov	r0, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	799b      	ldrb	r3, [r3, #6]
 80013d4:	4619      	mov	r1, r3
 80013d6:	4a65      	ldr	r2, [pc, #404]	; (800156c <dwt_configure+0x2c0>)
 80013d8:	0043      	lsls	r3, r0, #1
 80013da:	440b      	add	r3, r1
 80013dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013e0:	461a      	mov	r2, r3
 80013e2:	2102      	movs	r1, #2
 80013e4:	2027      	movs	r0, #39	; 0x27
 80013e6:	f000 f9f2 	bl	80017ce <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 80013ea:	7cbb      	ldrb	r3, [r7, #18]
 80013ec:	4a60      	ldr	r2, [pc, #384]	; (8001570 <dwt_configure+0x2c4>)
 80013ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013f2:	461a      	mov	r2, r3
 80013f4:	2104      	movs	r1, #4
 80013f6:	2027      	movs	r0, #39	; 0x27
 80013f8:	f000 f9e9 	bl	80017ce <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	79db      	ldrb	r3, [r3, #7]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d105      	bne.n	8001410 <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 8001404:	2264      	movs	r2, #100	; 0x64
 8001406:	2106      	movs	r1, #6
 8001408:	2027      	movs	r0, #39	; 0x27
 800140a:	f000 f9e0 	bl	80017ce <dwt_write16bitoffsetreg>
 800140e:	e018      	b.n	8001442 <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	789b      	ldrb	r3, [r3, #2]
 8001414:	2b04      	cmp	r3, #4
 8001416:	d10a      	bne.n	800142e <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 8001418:	2210      	movs	r2, #16
 800141a:	2106      	movs	r1, #6
 800141c:	2027      	movs	r0, #39	; 0x27
 800141e:	f000 f9d6 	bl	80017ce <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 8001422:	2210      	movs	r2, #16
 8001424:	2126      	movs	r1, #38	; 0x26
 8001426:	2027      	movs	r0, #39	; 0x27
 8001428:	f000 f9be 	bl	80017a8 <dwt_write8bitoffsetreg>
 800142c:	e009      	b.n	8001442 <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 800142e:	2220      	movs	r2, #32
 8001430:	2106      	movs	r1, #6
 8001432:	2027      	movs	r0, #39	; 0x27
 8001434:	f000 f9cb 	bl	80017ce <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 8001438:	2228      	movs	r2, #40	; 0x28
 800143a:	2126      	movs	r1, #38	; 0x26
 800143c:	2027      	movs	r0, #39	; 0x27
 800143e:	f000 f9b3 	bl	80017a8 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 8001442:	7cbb      	ldrb	r3, [r7, #18]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	78d2      	ldrb	r2, [r2, #3]
 8001448:	4611      	mov	r1, r2
 800144a:	4a4a      	ldr	r2, [pc, #296]	; (8001574 <dwt_configure+0x2c8>)
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	440b      	add	r3, r1
 8001450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001454:	461a      	mov	r2, r3
 8001456:	2108      	movs	r1, #8
 8001458:	2027      	movs	r0, #39	; 0x27
 800145a:	f000 f9d4 	bl	8001806 <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	895b      	ldrh	r3, [r3, #10]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d103      	bne.n	800146e <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f241 0241 	movw	r2, #4161	; 0x1041
 800146c:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	895b      	ldrh	r3, [r3, #10]
 8001472:	461a      	mov	r2, r3
 8001474:	2120      	movs	r1, #32
 8001476:	2027      	movs	r0, #39	; 0x27
 8001478:	f000 f9a9 	bl	80017ce <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 800147c:	4b3e      	ldr	r3, [pc, #248]	; (8001578 <dwt_configure+0x2cc>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	461a      	mov	r2, r3
 8001482:	210c      	movs	r1, #12
 8001484:	2023      	movs	r0, #35	; 0x23
 8001486:	f000 f9be 	bl	8001806 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 800148a:	7cbb      	ldrb	r3, [r7, #18]
 800148c:	4a3a      	ldr	r2, [pc, #232]	; (8001578 <dwt_configure+0x2cc>)
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	4413      	add	r3, r2
 8001492:	889b      	ldrh	r3, [r3, #4]
 8001494:	461a      	mov	r2, r3
 8001496:	2104      	movs	r1, #4
 8001498:	2023      	movs	r0, #35	; 0x23
 800149a:	f000 f998 	bl	80017ce <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	799b      	ldrb	r3, [r3, #6]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00d      	beq.n	80014c2 <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	79db      	ldrb	r3, [r3, #7]
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b33      	ldr	r3, [pc, #204]	; (800157c <dwt_configure+0x2d0>)
 80014ae:	5c9b      	ldrb	r3, [r3, r2]
 80014b0:	461a      	mov	r2, r3
 80014b2:	2100      	movs	r1, #0
 80014b4:	2021      	movs	r0, #33	; 0x21
 80014b6:	f000 f977 	bl	80017a8 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 80014ba:	2303      	movs	r3, #3
 80014bc:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 80014be:	2301      	movs	r3, #1
 80014c0:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80014c2:	7cfb      	ldrb	r3, [r7, #19]
 80014c4:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80014c8:	7cfb      	ldrb	r3, [r7, #19]
 80014ca:	011b      	lsls	r3, r3, #4
 80014cc:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80014ce:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	785b      	ldrb	r3, [r3, #1]
 80014d4:	049b      	lsls	r3, r3, #18
 80014d6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80014da:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80014dc:	7dfb      	ldrb	r3, [r7, #23]
 80014de:	051b      	lsls	r3, r3, #20
 80014e0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80014e4:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80014e6:	7dbb      	ldrb	r3, [r7, #22]
 80014e8:	045b      	lsls	r3, r3, #17
 80014ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80014ee:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	791b      	ldrb	r3, [r3, #4]
 80014f4:	059b      	lsls	r3, r3, #22
 80014f6:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80014fa:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	795b      	ldrb	r3, [r3, #5]
 8001500:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8001502:	4313      	orrs	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	2100      	movs	r1, #0
 800150a:	201f      	movs	r0, #31
 800150c:	f000 f97b 	bl	8001806 <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	789a      	ldrb	r2, [r3, #2]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	785b      	ldrb	r3, [r3, #1]
 8001518:	4313      	orrs	r3, r2
 800151a:	b2db      	uxtb	r3, r3
 800151c:	0419      	lsls	r1, r3, #16
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	79db      	ldrb	r3, [r3, #7]
 8001522:	035a      	lsls	r2, r3, #13
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <dwt_configure+0x2a8>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	430a      	orrs	r2, r1
 800152a:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <dwt_configure+0x2a8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	461a      	mov	r2, r3
 8001534:	2100      	movs	r1, #0
 8001536:	2008      	movs	r0, #8
 8001538:	f000 f965 	bl	8001806 <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 800153c:	2242      	movs	r2, #66	; 0x42
 800153e:	2100      	movs	r1, #0
 8001540:	200d      	movs	r0, #13
 8001542:	f000 f931 	bl	80017a8 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8001546:	bf00      	nop
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	0800a870 	.word	0x0800a870
 8001554:	20000000 	.word	0x20000000
 8001558:	0800a7f0 	.word	0x0800a7f0
 800155c:	0800a810 	.word	0x0800a810
 8001560:	0800a828 	.word	0x0800a828
 8001564:	0800a830 	.word	0x0800a830
 8001568:	0800a7f8 	.word	0x0800a7f8
 800156c:	0800a840 	.word	0x0800a840
 8001570:	0800a84c 	.word	0x0800a84c
 8001574:	0800a850 	.word	0x0800a850
 8001578:	0800a834 	.word	0x0800a834
 800157c:	0800a83c 	.word	0x0800a83c

08001580 <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
 800158c:	4613      	mov	r3, r2
 800158e:	803b      	strh	r3, [r7, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 8001590:	887a      	ldrh	r2, [r7, #2]
 8001592:	8839      	ldrh	r1, [r7, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2011      	movs	r0, #17
 8001598:	f000 f85b 	bl	8001652 <dwt_readfromdevice>
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60ba      	str	r2, [r7, #8]
 80015ac:	607b      	str	r3, [r7, #4]
 80015ae:	4603      	mov	r3, r0
 80015b0:	81fb      	strh	r3, [r7, #14]
 80015b2:	460b      	mov	r3, r1
 80015b4:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 80015ba:	89bb      	ldrh	r3, [r7, #12]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d10c      	bne.n	80015da <dwt_writetodevice+0x36>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 80015c0:	89fb      	ldrh	r3, [r7, #14]
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	1c59      	adds	r1, r3, #1
 80015c8:	6179      	str	r1, [r7, #20]
 80015ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	3318      	adds	r3, #24
 80015d2:	443b      	add	r3, r7
 80015d4:	f803 2c08 	strb.w	r2, [r3, #-8]
 80015d8:	e02f      	b.n	800163a <dwt_writetodevice+0x96>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 80015da:	89fb      	ldrh	r3, [r7, #14]
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	1c59      	adds	r1, r3, #1
 80015e2:	6179      	str	r1, [r7, #20]
 80015e4:	f062 023f 	orn	r2, r2, #63	; 0x3f
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	3318      	adds	r3, #24
 80015ec:	443b      	add	r3, r7
 80015ee:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 80015f2:	89bb      	ldrh	r3, [r7, #12]
 80015f4:	2b7f      	cmp	r3, #127	; 0x7f
 80015f6:	d809      	bhi.n	800160c <dwt_writetodevice+0x68>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	617a      	str	r2, [r7, #20]
 80015fe:	89ba      	ldrh	r2, [r7, #12]
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	3318      	adds	r3, #24
 8001604:	443b      	add	r3, r7
 8001606:	f803 2c08 	strb.w	r2, [r3, #-8]
 800160a:	e016      	b.n	800163a <dwt_writetodevice+0x96>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800160c:	89bb      	ldrh	r3, [r7, #12]
 800160e:	b2da      	uxtb	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	1c59      	adds	r1, r3, #1
 8001614:	6179      	str	r1, [r7, #20]
 8001616:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	3318      	adds	r3, #24
 800161e:	443b      	add	r3, r7
 8001620:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8001624:	89bb      	ldrh	r3, [r7, #12]
 8001626:	09db      	lsrs	r3, r3, #7
 8001628:	b299      	uxth	r1, r3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	1c5a      	adds	r2, r3, #1
 800162e:	617a      	str	r2, [r7, #20]
 8001630:	b2ca      	uxtb	r2, r1
 8001632:	3318      	adds	r3, #24
 8001634:	443b      	add	r3, r7
 8001636:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	b298      	uxth	r0, r3
 800163e:	f107 0110 	add.w	r1, r7, #16
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68ba      	ldr	r2, [r7, #8]
 8001646:	f000 faff 	bl	8001c48 <writetospi>
} // end dwt_writetodevice()
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b086      	sub	sp, #24
 8001656:	af00      	add	r7, sp, #0
 8001658:	60ba      	str	r2, [r7, #8]
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	4603      	mov	r3, r0
 800165e:	81fb      	strh	r3, [r7, #14]
 8001660:	460b      	mov	r3, r1
 8001662:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8001668:	89bb      	ldrh	r3, [r7, #12]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d109      	bne.n	8001682 <dwt_readfromdevice+0x30>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	1c5a      	adds	r2, r3, #1
 8001672:	617a      	str	r2, [r7, #20]
 8001674:	89fa      	ldrh	r2, [r7, #14]
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	3318      	adds	r3, #24
 800167a:	443b      	add	r3, r7
 800167c:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001680:	e02f      	b.n	80016e2 <dwt_readfromdevice+0x90>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8001682:	89fb      	ldrh	r3, [r7, #14]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	1c59      	adds	r1, r3, #1
 800168a:	6179      	str	r1, [r7, #20]
 800168c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	3318      	adds	r3, #24
 8001694:	443b      	add	r3, r7
 8001696:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 800169a:	89bb      	ldrh	r3, [r7, #12]
 800169c:	2b7f      	cmp	r3, #127	; 0x7f
 800169e:	d809      	bhi.n	80016b4 <dwt_readfromdevice+0x62>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	617a      	str	r2, [r7, #20]
 80016a6:	89ba      	ldrh	r2, [r7, #12]
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	3318      	adds	r3, #24
 80016ac:	443b      	add	r3, r7
 80016ae:	f803 2c08 	strb.w	r2, [r3, #-8]
 80016b2:	e016      	b.n	80016e2 <dwt_readfromdevice+0x90>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 80016b4:	89bb      	ldrh	r3, [r7, #12]
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	1c59      	adds	r1, r3, #1
 80016bc:	6179      	str	r1, [r7, #20]
 80016be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	3318      	adds	r3, #24
 80016c6:	443b      	add	r3, r7
 80016c8:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 80016cc:	89bb      	ldrh	r3, [r7, #12]
 80016ce:	09db      	lsrs	r3, r3, #7
 80016d0:	b299      	uxth	r1, r3
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	1c5a      	adds	r2, r3, #1
 80016d6:	617a      	str	r2, [r7, #20]
 80016d8:	b2ca      	uxtb	r2, r1
 80016da:	3318      	adds	r3, #24
 80016dc:	443b      	add	r3, r7
 80016de:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	b298      	uxth	r0, r3
 80016e6:	f107 0110 	add.w	r1, r7, #16
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68ba      	ldr	r2, [r7, #8]
 80016ee:	f000 fadf 	bl	8001cb0 <readfromspi>
} // end dwt_readfromdevice()
 80016f2:	bf00      	nop
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	b298      	uxth	r0, r3
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	b299      	uxth	r1, r3
 8001710:	f107 030c 	add.w	r3, r7, #12
 8001714:	2204      	movs	r2, #4
 8001716:	f7ff ff9c 	bl	8001652 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 800171a:	2303      	movs	r3, #3
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	e00b      	b.n	8001738 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	f107 010c 	add.w	r1, r7, #12
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	440a      	add	r2, r1
 800172c:	7812      	ldrb	r2, [r2, #0]
 800172e:	4413      	add	r3, r2
 8001730:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	3b01      	subs	r3, #1
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	2b00      	cmp	r3, #0
 800173c:	daf0      	bge.n	8001720 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 800173e:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8001752:	2300      	movs	r3, #0
 8001754:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	b298      	uxth	r0, r3
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	b299      	uxth	r1, r3
 800175e:	f107 030c 	add.w	r3, r7, #12
 8001762:	2202      	movs	r2, #2
 8001764:	f7ff ff75 	bl	8001652 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8001768:	7b7b      	ldrb	r3, [r7, #13]
 800176a:	b29b      	uxth	r3, r3
 800176c:	021b      	lsls	r3, r3, #8
 800176e:	b29a      	uxth	r2, r3
 8001770:	7b3b      	ldrb	r3, [r7, #12]
 8001772:	b29b      	uxth	r3, r3
 8001774:	4413      	add	r3, r2
 8001776:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8001778:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 800177a:	4618      	mov	r0, r3
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b084      	sub	sp, #16
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	b298      	uxth	r0, r3
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	b299      	uxth	r1, r3
 8001794:	f107 030f 	add.w	r3, r7, #15
 8001798:	2201      	movs	r2, #1
 800179a:	f7ff ff5a 	bl	8001652 <dwt_readfromdevice>

    return regval ;
 800179e:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	4613      	mov	r3, r2
 80017b4:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	b298      	uxth	r0, r3
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	b299      	uxth	r1, r3
 80017be:	1dfb      	adds	r3, r7, #7
 80017c0:	2201      	movs	r2, #1
 80017c2:	f7ff feef 	bl	80015a4 <dwt_writetodevice>
}
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b086      	sub	sp, #24
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	60f8      	str	r0, [r7, #12]
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	4613      	mov	r3, r2
 80017da:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 80017e2:	88fb      	ldrh	r3, [r7, #6]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	b298      	uxth	r0, r3
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	b299      	uxth	r1, r3
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	2202      	movs	r2, #2
 80017fa:	f7ff fed3 	bl	80015a4 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 80017fe:	bf00      	nop
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b086      	sub	sp, #24
 800180a:	af00      	add	r7, sp, #0
 800180c:	60f8      	str	r0, [r7, #12]
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	e00d      	b.n	8001834 <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	b2d9      	uxtb	r1, r3
 800181c:	f107 0210 	add.w	r2, r7, #16
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	4413      	add	r3, r2
 8001824:	460a      	mov	r2, r1
 8001826:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	0a1b      	lsrs	r3, r3, #8
 800182c:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	3301      	adds	r3, #1
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	2b03      	cmp	r3, #3
 8001838:	ddee      	ble.n	8001818 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	b298      	uxth	r0, r3
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	b299      	uxth	r1, r3
 8001842:	f107 0310 	add.w	r3, r7, #16
 8001846:	2204      	movs	r2, #4
 8001848:	f7ff feac 	bl	80015a4 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 800184c:	bf00      	nop
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	461a      	mov	r2, r3
 8001862:	2104      	movs	r1, #4
 8001864:	202d      	movs	r0, #45	; 0x2d
 8001866:	f7ff ffb2 	bl	80017ce <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 800186a:	2203      	movs	r2, #3
 800186c:	2106      	movs	r1, #6
 800186e:	202d      	movs	r0, #45	; 0x2d
 8001870:	f7ff ff9a 	bl	80017a8 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8001874:	2200      	movs	r2, #0
 8001876:	2106      	movs	r1, #6
 8001878:	202d      	movs	r0, #45	; 0x2d
 800187a:	f7ff ff95 	bl	80017a8 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 800187e:	210a      	movs	r1, #10
 8001880:	202d      	movs	r0, #45	; 0x2d
 8001882:	f7ff ff3a 	bl	80016fa <dwt_read32bitoffsetreg>
 8001886:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8001888:	68fb      	ldr	r3, [r7, #12]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8001896:	2200      	movs	r2, #0
 8001898:	2102      	movs	r1, #2
 800189a:	202c      	movs	r0, #44	; 0x2c
 800189c:	f7ff ff84 	bl	80017a8 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 80018a0:	2202      	movs	r2, #2
 80018a2:	2102      	movs	r1, #2
 80018a4:	202c      	movs	r0, #44	; 0x2c
 80018a6:	f7ff ff7f 	bl	80017a8 <dwt_write8bitoffsetreg>
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}

080018ae <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 80018b6:	226d      	movs	r2, #109	; 0x6d
 80018b8:	f640 0106 	movw	r1, #2054	; 0x806
 80018bc:	202e      	movs	r0, #46	; 0x2e
 80018be:	f7ff ff73 	bl	80017a8 <dwt_write8bitoffsetreg>

    if(prfIndex)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d007      	beq.n	80018d8 <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 80018c8:	f240 6207 	movw	r2, #1543	; 0x607
 80018cc:	f641 0106 	movw	r1, #6150	; 0x1806
 80018d0:	202e      	movs	r0, #46	; 0x2e
 80018d2:	f7ff ff7c 	bl	80017ce <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 80018d6:	e006      	b.n	80018e6 <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 80018d8:	f241 6207 	movw	r2, #5639	; 0x1607
 80018dc:	f641 0106 	movw	r1, #6150	; 0x1806
 80018e0:	202e      	movs	r0, #46	; 0x2e
 80018e2:	f7ff ff74 	bl	80017ce <dwt_write16bitoffsetreg>
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 80018f2:	200e      	movs	r0, #14
 80018f4:	f000 f80e 	bl	8001914 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 80018f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018fc:	2106      	movs	r1, #6
 80018fe:	202d      	movs	r0, #45	; 0x2d
 8001900:	f7ff ff65 	bl	80017ce <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8001904:	2001      	movs	r0, #1
 8001906:	f000 f993 	bl	8001c30 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800190a:	2001      	movs	r0, #1
 800190c:	f000 f802 	bl	8001914 <_dwt_enableclocks>
}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}

08001914 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	2202      	movs	r2, #2
 8001922:	2100      	movs	r1, #0
 8001924:	2036      	movs	r0, #54	; 0x36
 8001926:	f7ff fe94 	bl	8001652 <dwt_readfromdevice>
    switch(clocks)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b0e      	cmp	r3, #14
 800192e:	d876      	bhi.n	8001a1e <_dwt_enableclocks+0x10a>
 8001930:	a201      	add	r2, pc, #4	; (adr r2, 8001938 <_dwt_enableclocks+0x24>)
 8001932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001936:	bf00      	nop
 8001938:	08001985 	.word	0x08001985
 800193c:	08001975 	.word	0x08001975
 8001940:	0800199b 	.word	0x0800199b
 8001944:	08001a1f 	.word	0x08001a1f
 8001948:	08001a1f 	.word	0x08001a1f
 800194c:	08001a1f 	.word	0x08001a1f
 8001950:	08001a1f 	.word	0x08001a1f
 8001954:	080019b1 	.word	0x080019b1
 8001958:	080019d1 	.word	0x080019d1
 800195c:	08001a1f 	.word	0x08001a1f
 8001960:	08001a1f 	.word	0x08001a1f
 8001964:	080019e7 	.word	0x080019e7
 8001968:	080019f3 	.word	0x080019f3
 800196c:	080019ff 	.word	0x080019ff
 8001970:	08001a15 	.word	0x08001a15
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8001974:	2300      	movs	r3, #0
 8001976:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8001978:	7b7b      	ldrb	r3, [r7, #13]
 800197a:	f023 0301 	bic.w	r3, r3, #1
 800197e:	b2db      	uxtb	r3, r3
 8001980:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001982:	e04d      	b.n	8001a20 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8001984:	7b3b      	ldrb	r3, [r7, #12]
 8001986:	b25b      	sxtb	r3, r3
 8001988:	f023 0303 	bic.w	r3, r3, #3
 800198c:	b25b      	sxtb	r3, r3
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	b25b      	sxtb	r3, r3
 8001994:	b2db      	uxtb	r3, r3
 8001996:	733b      	strb	r3, [r7, #12]
        }
        break;
 8001998:	e042      	b.n	8001a20 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 800199a:	7b3b      	ldrb	r3, [r7, #12]
 800199c:	b25b      	sxtb	r3, r3
 800199e:	f023 0303 	bic.w	r3, r3, #3
 80019a2:	b25b      	sxtb	r3, r3
 80019a4:	f043 0302 	orr.w	r3, r3, #2
 80019a8:	b25b      	sxtb	r3, r3
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	733b      	strb	r3, [r7, #12]
        }
        break;
 80019ae:	e037      	b.n	8001a20 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 80019b0:	7b3b      	ldrb	r3, [r7, #12]
 80019b2:	b25b      	sxtb	r3, r3
 80019b4:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 80019b8:	b25b      	sxtb	r3, r3
 80019ba:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 80019be:	b25b      	sxtb	r3, r3
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 80019c4:	7b7b      	ldrb	r3, [r7, #13]
 80019c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	737b      	strb	r3, [r7, #13]
        }
        break;
 80019ce:	e027      	b.n	8001a20 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 80019d0:	7b3b      	ldrb	r3, [r7, #12]
 80019d2:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 80019da:	7b7b      	ldrb	r3, [r7, #13]
 80019dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	737b      	strb	r3, [r7, #13]
        }
        break;
 80019e4:	e01c      	b.n	8001a20 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 80019e6:	7b7b      	ldrb	r3, [r7, #13]
 80019e8:	f043 0302 	orr.w	r3, r3, #2
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	737b      	strb	r3, [r7, #13]
        }
        break;
 80019f0:	e016      	b.n	8001a20 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 80019f2:	7b7b      	ldrb	r3, [r7, #13]
 80019f4:	f023 0302 	bic.w	r3, r3, #2
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	737b      	strb	r3, [r7, #13]
        }
        break;
 80019fc:	e010      	b.n	8001a20 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 80019fe:	7b3b      	ldrb	r3, [r7, #12]
 8001a00:	b25b      	sxtb	r3, r3
 8001a02:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a06:	b25b      	sxtb	r3, r3
 8001a08:	f043 0320 	orr.w	r3, r3, #32
 8001a0c:	b25b      	sxtb	r3, r3
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	733b      	strb	r3, [r7, #12]
        }
        break;
 8001a12:	e005      	b.n	8001a20 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8001a14:	2301      	movs	r3, #1
 8001a16:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001a1c:	e000      	b.n	8001a20 <_dwt_enableclocks+0x10c>
        default:
        break;
 8001a1e:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8001a20:	f107 030c 	add.w	r3, r7, #12
 8001a24:	2201      	movs	r2, #1
 8001a26:	2100      	movs	r1, #0
 8001a28:	2036      	movs	r0, #54	; 0x36
 8001a2a:	f7ff fdbb 	bl	80015a4 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8001a2e:	f107 030c 	add.w	r3, r7, #12
 8001a32:	3301      	adds	r3, #1
 8001a34:	2201      	movs	r2, #1
 8001a36:	2101      	movs	r1, #1
 8001a38:	2036      	movs	r0, #54	; 0x36
 8001a3a:	f7ff fdb3 	bl	80015a4 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop

08001a48 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f7ff ff61 	bl	8001914 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8001a52:	2200      	movs	r2, #0
 8001a54:	2104      	movs	r1, #4
 8001a56:	2036      	movs	r0, #54	; 0x36
 8001a58:	f7ff feb9 	bl	80017ce <dwt_write16bitoffsetreg>
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 8001a66:	2100      	movs	r1, #0
 8001a68:	200e      	movs	r0, #14
 8001a6a:	f7ff fe46 	bl	80016fa <dwt_read32bitoffsetreg>
 8001a6e:	6078      	str	r0, [r7, #4]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
 8001a70:	f000 f8c0 	bl	8001bf4 <decamutexon>
 8001a74:	6038      	str	r0, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 8001a76:	2200      	movs	r2, #0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	200e      	movs	r0, #14
 8001a7c:	f7ff fec3 	bl	8001806 <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 8001a80:	2240      	movs	r2, #64	; 0x40
 8001a82:	2100      	movs	r1, #0
 8001a84:	200d      	movs	r0, #13
 8001a86:	f7ff fe8f 	bl	80017a8 <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 8001a8a:	4a0b      	ldr	r2, [pc, #44]	; (8001ab8 <dwt_forcetrxoff+0x58>)
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	200f      	movs	r0, #15
 8001a90:	f7ff feb9 	bl	8001806 <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 8001a94:	f000 f814 	bl	8001ac0 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	200e      	movs	r0, #14
 8001a9e:	f7ff feb2 	bl	8001806 <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 8001aa2:	6838      	ldr	r0, [r7, #0]
 8001aa4:	f000 f8b7 	bl	8001c16 <decamutexoff>
    pdw1000local->wait4resp = 0;
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <dwt_forcetrxoff+0x5c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2200      	movs	r2, #0
 8001aae:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	2427fff8 	.word	0x2427fff8
 8001abc:	20000000 	.word	0x20000000

08001ac0 <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8001ac6:	2103      	movs	r1, #3
 8001ac8:	200f      	movs	r0, #15
 8001aca:	f7ff fe5a 	bl	8001782 <dwt_read8bitoffsetreg>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	71fb      	strb	r3, [r7, #7]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8001ad2:	79fa      	ldrb	r2, [r7, #7]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8001ad8:	4053      	eors	r3, r2
 8001ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d004      	beq.n	8001aec <dwt_syncrxbufptrs+0x2c>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	2103      	movs	r1, #3
 8001ae6:	200d      	movs	r0, #13
 8001ae8:	f7ff fe5e 	bl	80017a8 <dwt_write8bitoffsetreg>
    }
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <dwt_rxenable+0x16>
    {
        dwt_syncrxbufptrs();
 8001b06:	f7ff ffdb 	bl	8001ac0 <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 8001b0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b0e:	81fb      	strh	r3, [r7, #14]

    if (mode & DWT_START_RX_DELAYED)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <dwt_rxenable+0x2e>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 8001b1a:	89fb      	ldrh	r3, [r7, #14]
 8001b1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b20:	81fb      	strh	r3, [r7, #14]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8001b22:	89fb      	ldrh	r3, [r7, #14]
 8001b24:	461a      	mov	r2, r3
 8001b26:	2100      	movs	r1, #0
 8001b28:	200d      	movs	r0, #13
 8001b2a:	f7ff fe50 	bl	80017ce <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d01a      	beq.n	8001b6e <dwt_rxenable+0x7a>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8001b38:	2103      	movs	r1, #3
 8001b3a:	200f      	movs	r0, #15
 8001b3c:	f7ff fe21 	bl	8001782 <dwt_read8bitoffsetreg>
 8001b40:	4603      	mov	r3, r0
 8001b42:	737b      	strb	r3, [r7, #13]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 8001b44:	7b7b      	ldrb	r3, [r7, #13]
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00f      	beq.n	8001b6e <dwt_rxenable+0x7a>
        {
            dwt_forcetrxoff(); // turn the delayed receive off
 8001b4e:	f7ff ff87 	bl	8001a60 <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d105      	bne.n	8001b68 <dwt_rxenable+0x74>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 8001b5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b60:	2100      	movs	r1, #0
 8001b62:	200d      	movs	r0, #13
 8001b64:	f7ff fe33 	bl	80017ce <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 8001b68:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6c:	e000      	b.n	8001b70 <dwt_rxenable+0x7c>
        }
    }

    return DWT_SUCCESS;
 8001b6e:	2300      	movs	r3, #0
} // end dwt_rxenable()
 8001b70:	4618      	mov	r0, r3
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 8001b7c:	f7ff ff64 	bl	8001a48 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2100      	movs	r1, #0
 8001b84:	202c      	movs	r0, #44	; 0x2c
 8001b86:	f7ff fe22 	bl	80017ce <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2106      	movs	r1, #6
 8001b8e:	202c      	movs	r0, #44	; 0x2c
 8001b90:	f7ff fe0a 	bl	80017a8 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8001b94:	f7ff fe7d 	bl	8001892 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2103      	movs	r1, #3
 8001b9c:	2036      	movs	r0, #54	; 0x36
 8001b9e:	f7ff fe03 	bl	80017a8 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8001ba2:	2001      	movs	r0, #1
 8001ba4:	f000 f844 	bl	8001c30 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8001ba8:	22f0      	movs	r2, #240	; 0xf0
 8001baa:	2103      	movs	r1, #3
 8001bac:	2036      	movs	r0, #54	; 0x36
 8001bae:	f7ff fdfb 	bl	80017a8 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8001bb2:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <dwt_softreset+0x48>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	755a      	strb	r2, [r3, #21]
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000000 	.word	0x20000000

08001bc4 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	f003 031f 	and.w	r3, r3, #31
 8001bd6:	b25b      	sxtb	r3, r3
 8001bd8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001bdc:	b25b      	sxtb	r3, r3
 8001bde:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	461a      	mov	r2, r3
 8001be4:	210e      	movs	r1, #14
 8001be6:	202b      	movs	r0, #43	; 0x2b
 8001be8:	f7ff fdde 	bl	80017a8 <dwt_write8bitoffsetreg>
}
 8001bec:	bf00      	nop
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 8001bfa:	f000 f9b9 	bl	8001f70 <port_GetEXT_IRQStatus>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	607b      	str	r3, [r7, #4]

	if(s) {
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 8001c08:	f000 f9a4 	bl	8001f54 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 8001c0c:	687b      	ldr	r3, [r7, #4]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 8001c24:	f000 f99d 	bl	8001f62 <port_EnableEXT_IRQ>
	}
}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f8c5 	bl	8001dc8 <Sleep>
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 8001c48:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8001c4c:	4683      	mov	fp, r0
 8001c4e:	468a      	mov	sl, r1
 8001c50:	4690      	mov	r8, r2
 8001c52:	4699      	mov	r9, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001c54:	f7ff ffce 	bl	8001bf4 <decamutexon>

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001c58:	4d13      	ldr	r5, [pc, #76]	; (8001ca8 <writetospi+0x60>)
    stat = decamutexon() ;
 8001c5a:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001c5c:	4628      	mov	r0, r5
 8001c5e:	f003 f8e4 	bl	8004e2a <HAL_SPI_GetState>
 8001c62:	2801      	cmp	r0, #1
 8001c64:	4604      	mov	r4, r0
 8001c66:	d1f9      	bne.n	8001c5c <writetospi+0x14>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8001c68:	4810      	ldr	r0, [pc, #64]	; (8001cac <writetospi+0x64>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2140      	movs	r1, #64	; 0x40
 8001c6e:	f001 fd13 	bl	8003698 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 8001c72:	465a      	mov	r2, fp
 8001c74:	4651      	mov	r1, sl
 8001c76:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7a:	480b      	ldr	r0, [pc, #44]	; (8001ca8 <writetospi+0x60>)
 8001c7c:	f002 ff99 	bl	8004bb2 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 8001c80:	f04f 33ff 	mov.w	r3, #4294967295
 8001c84:	4649      	mov	r1, r9
 8001c86:	fa1f f288 	uxth.w	r2, r8
 8001c8a:	4807      	ldr	r0, [pc, #28]	; (8001ca8 <writetospi+0x60>)
 8001c8c:	f002 ff91 	bl	8004bb2 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8001c90:	4622      	mov	r2, r4
 8001c92:	2140      	movs	r1, #64	; 0x40
 8001c94:	4805      	ldr	r0, [pc, #20]	; (8001cac <writetospi+0x64>)
 8001c96:	f001 fcff 	bl	8003698 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8001c9a:	4630      	mov	r0, r6
 8001c9c:	f7ff ffbb 	bl	8001c16 <decamutexoff>

    return 0;
} // end writetospi()
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 8001ca6:	bf00      	nop
 8001ca8:	2000073c 	.word	0x2000073c
 8001cac:	40020400 	.word	0x40020400

08001cb0 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 8001cb0:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 8001cb4:	4681      	mov	r9, r0
 8001cb6:	460c      	mov	r4, r1
 8001cb8:	4690      	mov	r8, r2
 8001cba:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001cbc:	f7ff ff9a 	bl	8001bf4 <decamutexon>

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001cc0:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8001d40 <readfromspi+0x90>
    stat = decamutexon() ;
 8001cc4:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001cc6:	4650      	mov	r0, sl
 8001cc8:	f003 f8af 	bl	8004e2a <HAL_SPI_GetState>
 8001ccc:	2801      	cmp	r0, #1
 8001cce:	d1fa      	bne.n	8001cc6 <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8001cd0:	481a      	ldr	r0, [pc, #104]	; (8001d3c <readfromspi+0x8c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2140      	movs	r1, #64	; 0x40
 8001cd6:	f001 fcdf 	bl	8003698 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 8001cda:	f1b9 0f00 	cmp.w	r9, #0
 8001cde:	d00c      	beq.n	8001cfa <readfromspi+0x4a>
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8001ce0:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8001d40 <readfromspi+0x90>
 8001ce4:	44a1      	add	r9, r4
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	4621      	mov	r1, r4
 8001cea:	f04f 33ff 	mov.w	r3, #4294967295
    for(i=0; i<headerLength; i++)
 8001cee:	4414      	add	r4, r2
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8001cf0:	4650      	mov	r0, sl
 8001cf2:	f002 ff5e 	bl	8004bb2 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 8001cf6:	45a1      	cmp	r9, r4
 8001cf8:	d1f5      	bne.n	8001ce6 <readfromspi+0x36>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 8001cfa:	f1b8 0f00 	cmp.w	r8, #0
 8001cfe:	d012      	beq.n	8001d26 <readfromspi+0x76>
 8001d00:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8001d40 <readfromspi+0x90>
 8001d04:	eb05 0008 	add.w	r0, r5, r8
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8001d08:	2400      	movs	r4, #0
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 8001d0a:	f8dc 1000 	ldr.w	r1, [ip]
 8001d0e:	688a      	ldr	r2, [r1, #8]
 8001d10:	0792      	lsls	r2, r2, #30
 8001d12:	d5fc      	bpl.n	8001d0e <readfromspi+0x5e>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8001d14:	60cc      	str	r4, [r1, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 8001d16:	688a      	ldr	r2, [r1, #8]
 8001d18:	07d3      	lsls	r3, r2, #31
 8001d1a:	d5fc      	bpl.n	8001d16 <readfromspi+0x66>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 8001d1c:	68cb      	ldr	r3, [r1, #12]
 8001d1e:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 8001d22:	4285      	cmp	r5, r0
 8001d24:	d1f1      	bne.n	8001d0a <readfromspi+0x5a>
    }

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8001d26:	2201      	movs	r2, #1
 8001d28:	2140      	movs	r1, #64	; 0x40
 8001d2a:	4804      	ldr	r0, [pc, #16]	; (8001d3c <readfromspi+0x8c>)
 8001d2c:	f001 fcb4 	bl	8003698 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8001d30:	4630      	mov	r0, r6
 8001d32:	f7ff ff70 	bl	8001c16 <decamutexoff>

    return 0;
} // end readfromspi()
 8001d36:	2000      	movs	r0, #0
 8001d38:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 8001d3c:	40020400 	.word	0x40020400
 8001d40:	2000073c 	.word	0x2000073c

08001d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	db0b      	blt.n	8001d6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	f003 021f 	and.w	r2, r3, #31
 8001d5c:	4907      	ldr	r1, [pc, #28]	; (8001d7c <__NVIC_EnableIRQ+0x38>)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	095b      	lsrs	r3, r3, #5
 8001d64:	2001      	movs	r0, #1
 8001d66:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000e100 	.word	0xe000e100

08001d80 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	db12      	blt.n	8001db8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	f003 021f 	and.w	r2, r3, #31
 8001d98:	490a      	ldr	r1, [pc, #40]	; (8001dc4 <__NVIC_DisableIRQ+0x44>)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	095b      	lsrs	r3, r3, #5
 8001da0:	2001      	movs	r0, #1
 8001da2:	fa00 f202 	lsl.w	r2, r0, r2
 8001da6:	3320      	adds	r3, #32
 8001da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001dac:	f3bf 8f4f 	dsb	sy
}
 8001db0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001db2:	f3bf 8f6f 	isb	sy
}
 8001db6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000e100 	.word	0xe000e100

08001dc8 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f001 f8cb 	bl	8002f6c <HAL_Delay>
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 8001de8:	4a0b      	ldr	r2, [pc, #44]	; (8001e18 <EXTI_GetITEnStatus+0x38>)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	095b      	lsrs	r3, r3, #5
 8001dee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f003 031f 	and.w	r3, r3, #31
 8001df8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	bf14      	ite	ne
 8001e04:	2301      	movne	r3, #1
 8001e06:	2300      	moveq	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000e100 	.word	0xe000e100

08001e1c <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RST_Pin;
 8001e22:	2301      	movs	r3, #1
 8001e24:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001e26:	2311      	movs	r3, #17
 8001e28:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	4619      	mov	r1, r3
 8001e32:	480a      	ldr	r0, [pc, #40]	; (8001e5c <reset_DW1000+0x40>)
 8001e34:	f001 fa94 	bl	8003360 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	4807      	ldr	r0, [pc, #28]	; (8001e5c <reset_DW1000+0x40>)
 8001e3e:	f001 fc2b 	bl	8003698 <HAL_GPIO_WritePin>

    Sleep(1);
 8001e42:	2001      	movs	r0, #1
 8001e44:	f7ff ffc0 	bl	8001dc8 <Sleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f000 f809 	bl	8001e60 <setup_DW1000RSTnIRQ>



    Sleep(2);
 8001e4e:	2002      	movs	r0, #2
 8001e50:	f7ff ffba 	bl	8001dc8 <Sleep>
}
 8001e54:	bf00      	nop
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40020000 	.word	0x40020000

08001e60 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d015      	beq.n	8001e9a <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e72:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e76:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001e7c:	f107 030c 	add.w	r3, r7, #12
 8001e80:	4619      	mov	r1, r3
 8001e82:	4813      	ldr	r0, [pc, #76]	; (8001ed0 <setup_DW1000RSTnIRQ+0x70>)
 8001e84:	f001 fa6c 	bl	8003360 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 8001e88:	2006      	movs	r0, #6
 8001e8a:	f001 f9ae 	bl	80031ea <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2105      	movs	r1, #5
 8001e92:	2006      	movs	r0, #6
 8001e94:	f001 f98d 	bl	80031b2 <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
    }
}
 8001e98:	e015      	b.n	8001ec6 <setup_DW1000RSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 8001e9a:	2006      	movs	r0, #6
 8001e9c:	f001 f9b3 	bl	8003206 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001ea4:	2311      	movs	r3, #17
 8001ea6:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eac:	2302      	movs	r3, #2
 8001eae:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001eb0:	f107 030c 	add.w	r3, r7, #12
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4806      	ldr	r0, [pc, #24]	; (8001ed0 <setup_DW1000RSTnIRQ+0x70>)
 8001eb8:	f001 fa52 	bl	8003360 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4803      	ldr	r0, [pc, #12]	; (8001ed0 <setup_DW1000RSTnIRQ+0x70>)
 8001ec2:	f001 fbe9 	bl	8003698 <HAL_GPIO_WritePin>
}
 8001ec6:	bf00      	nop
 8001ec8:	3720      	adds	r7, #32
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40020000 	.word	0x40020000

08001ed4 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <port_set_dw1000_slowrate+0x14>)
 8001eda:	2220      	movs	r2, #32
 8001edc:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8001ede:	4802      	ldr	r0, [pc, #8]	; (8001ee8 <port_set_dw1000_slowrate+0x14>)
 8001ee0:	f002 fdde 	bl	8004aa0 <HAL_SPI_Init>
}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	2000073c 	.word	0x2000073c

08001eec <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <port_set_dw1000_fastrate+0x14>)
 8001ef2:	2208      	movs	r2, #8
 8001ef4:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8001ef6:	4802      	ldr	r0, [pc, #8]	; (8001f00 <port_set_dw1000_fastrate+0x14>)
 8001ef8:	f002 fdd2 	bl	8004aa0 <HAL_SPI_Init>
}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	2000073c 	.word	0x2000073c

08001f04 <HAL_GPIO_EXTI_Callback>:
/* @fn      HAL_GPIO_EXTI_Callback
 * @brief   IRQ HAL call-back for all EXTI configured lines
 *          i.e. DW_RESET_Pin and DW_IRQn_Pin
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == DW_RST_Pin)
 8001f0e:	88fb      	ldrh	r3, [r7, #6]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d103      	bne.n	8001f1c <HAL_GPIO_EXTI_Callback+0x18>
    {
        signalResetDone = 1;
 8001f14:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
        process_deca_irq();
    }
    else
    {
    }
}
 8001f1a:	e005      	b.n	8001f28 <HAL_GPIO_EXTI_Callback+0x24>
    else if (GPIO_Pin == DW_IRQ_Pin)
 8001f1c:	88fb      	ldrh	r3, [r7, #6]
 8001f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f22:	d101      	bne.n	8001f28 <HAL_GPIO_EXTI_Callback+0x24>
        process_deca_irq();
 8001f24:	f000 f806 	bl	8001f34 <process_deca_irq>
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20000250 	.word	0x20000250

08001f34 <process_deca_irq>:
 * @brief   main call-back for processing of DW1000 IRQ
 *          it re-enters the IRQ routing and processes all events.
 *          After processing of all events, DW1000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
    while(port_CheckEXT_IRQ() != 0)
 8001f38:	e002      	b.n	8001f40 <process_deca_irq+0xc>
    {

        port_deca_isr();
 8001f3a:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <process_deca_irq+0x1c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4798      	blx	r3
    while(port_CheckEXT_IRQ() != 0)
 8001f40:	f000 f81e 	bl	8001f80 <port_CheckEXT_IRQ>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f7      	bne.n	8001f3a <process_deca_irq+0x6>

    } //while DW1000 IRQ line active
}
 8001f4a:	bf00      	nop
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000254 	.word	0x20000254

08001f54 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8001f58:	2017      	movs	r0, #23
 8001f5a:	f7ff ff11 	bl	8001d80 <__NVIC_DisableIRQ>
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 8001f66:	2017      	movs	r0, #23
 8001f68:	f7ff feec 	bl	8001d44 <__NVIC_EnableIRQ>
}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 8001f74:	2017      	movs	r0, #23
 8001f76:	f7ff ff33 	bl	8001de0 <EXTI_GetITEnStatus>
 8001f7a:	4603      	mov	r3, r0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <port_CheckEXT_IRQ>:

/* @fn      port_CheckEXT_IRQ
 * @brief   wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(DW_IRQ_GPIO_Port, DW_IRQ_Pin);
 8001f84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f88:	4802      	ldr	r0, [pc, #8]	; (8001f94 <port_CheckEXT_IRQ+0x14>)
 8001f8a:	f001 fb6d 	bl	8003668 <HAL_GPIO_ReadPin>
 8001f8e:	4603      	mov	r3, r0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40020000 	.word	0x40020000

08001f98 <SSD1306_InvertDisplay>:
}



void SSD1306_InvertDisplay (int i)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d005      	beq.n	8001fb2 <SSD1306_InvertDisplay+0x1a>
 8001fa6:	22a7      	movs	r2, #167	; 0xa7
 8001fa8:	2100      	movs	r1, #0
 8001faa:	2078      	movs	r0, #120	; 0x78
 8001fac:	f000 faac 	bl	8002508 <ssd1306_I2C_Write>

  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}
 8001fb0:	e004      	b.n	8001fbc <SSD1306_InvertDisplay+0x24>
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
 8001fb2:	22a6      	movs	r2, #166	; 0xa6
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	2078      	movs	r0, #120	; 0x78
 8001fb8:	f000 faa6 	bl	8002508 <ssd1306_I2C_Write>
}
 8001fbc:	bf00      	nop
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001fca:	f000 fa21 	bl	8002410 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001fce:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	2178      	movs	r1, #120	; 0x78
 8001fd6:	485b      	ldr	r0, [pc, #364]	; (8002144 <SSD1306_Init+0x180>)
 8001fd8:	f001 fdd2 	bl	8003b80 <HAL_I2C_IsDeviceReady>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e0a9      	b.n	800213a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001fe6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001fea:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001fec:	e002      	b.n	8001ff4 <SSD1306_Init+0x30>
		p--;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f9      	bne.n	8001fee <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001ffa:	22ae      	movs	r2, #174	; 0xae
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	2078      	movs	r0, #120	; 0x78
 8002000:	f000 fa82 	bl	8002508 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002004:	2220      	movs	r2, #32
 8002006:	2100      	movs	r1, #0
 8002008:	2078      	movs	r0, #120	; 0x78
 800200a:	f000 fa7d 	bl	8002508 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800200e:	2210      	movs	r2, #16
 8002010:	2100      	movs	r1, #0
 8002012:	2078      	movs	r0, #120	; 0x78
 8002014:	f000 fa78 	bl	8002508 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002018:	22b0      	movs	r2, #176	; 0xb0
 800201a:	2100      	movs	r1, #0
 800201c:	2078      	movs	r0, #120	; 0x78
 800201e:	f000 fa73 	bl	8002508 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002022:	22c8      	movs	r2, #200	; 0xc8
 8002024:	2100      	movs	r1, #0
 8002026:	2078      	movs	r0, #120	; 0x78
 8002028:	f000 fa6e 	bl	8002508 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800202c:	2200      	movs	r2, #0
 800202e:	2100      	movs	r1, #0
 8002030:	2078      	movs	r0, #120	; 0x78
 8002032:	f000 fa69 	bl	8002508 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002036:	2210      	movs	r2, #16
 8002038:	2100      	movs	r1, #0
 800203a:	2078      	movs	r0, #120	; 0x78
 800203c:	f000 fa64 	bl	8002508 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002040:	2240      	movs	r2, #64	; 0x40
 8002042:	2100      	movs	r1, #0
 8002044:	2078      	movs	r0, #120	; 0x78
 8002046:	f000 fa5f 	bl	8002508 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800204a:	2281      	movs	r2, #129	; 0x81
 800204c:	2100      	movs	r1, #0
 800204e:	2078      	movs	r0, #120	; 0x78
 8002050:	f000 fa5a 	bl	8002508 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002054:	22ff      	movs	r2, #255	; 0xff
 8002056:	2100      	movs	r1, #0
 8002058:	2078      	movs	r0, #120	; 0x78
 800205a:	f000 fa55 	bl	8002508 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800205e:	22a1      	movs	r2, #161	; 0xa1
 8002060:	2100      	movs	r1, #0
 8002062:	2078      	movs	r0, #120	; 0x78
 8002064:	f000 fa50 	bl	8002508 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002068:	22a6      	movs	r2, #166	; 0xa6
 800206a:	2100      	movs	r1, #0
 800206c:	2078      	movs	r0, #120	; 0x78
 800206e:	f000 fa4b 	bl	8002508 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002072:	22a8      	movs	r2, #168	; 0xa8
 8002074:	2100      	movs	r1, #0
 8002076:	2078      	movs	r0, #120	; 0x78
 8002078:	f000 fa46 	bl	8002508 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800207c:	223f      	movs	r2, #63	; 0x3f
 800207e:	2100      	movs	r1, #0
 8002080:	2078      	movs	r0, #120	; 0x78
 8002082:	f000 fa41 	bl	8002508 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002086:	22a4      	movs	r2, #164	; 0xa4
 8002088:	2100      	movs	r1, #0
 800208a:	2078      	movs	r0, #120	; 0x78
 800208c:	f000 fa3c 	bl	8002508 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002090:	22d3      	movs	r2, #211	; 0xd3
 8002092:	2100      	movs	r1, #0
 8002094:	2078      	movs	r0, #120	; 0x78
 8002096:	f000 fa37 	bl	8002508 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800209a:	2200      	movs	r2, #0
 800209c:	2100      	movs	r1, #0
 800209e:	2078      	movs	r0, #120	; 0x78
 80020a0:	f000 fa32 	bl	8002508 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80020a4:	22d5      	movs	r2, #213	; 0xd5
 80020a6:	2100      	movs	r1, #0
 80020a8:	2078      	movs	r0, #120	; 0x78
 80020aa:	f000 fa2d 	bl	8002508 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80020ae:	22f0      	movs	r2, #240	; 0xf0
 80020b0:	2100      	movs	r1, #0
 80020b2:	2078      	movs	r0, #120	; 0x78
 80020b4:	f000 fa28 	bl	8002508 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80020b8:	22d9      	movs	r2, #217	; 0xd9
 80020ba:	2100      	movs	r1, #0
 80020bc:	2078      	movs	r0, #120	; 0x78
 80020be:	f000 fa23 	bl	8002508 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80020c2:	2222      	movs	r2, #34	; 0x22
 80020c4:	2100      	movs	r1, #0
 80020c6:	2078      	movs	r0, #120	; 0x78
 80020c8:	f000 fa1e 	bl	8002508 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80020cc:	22da      	movs	r2, #218	; 0xda
 80020ce:	2100      	movs	r1, #0
 80020d0:	2078      	movs	r0, #120	; 0x78
 80020d2:	f000 fa19 	bl	8002508 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80020d6:	2212      	movs	r2, #18
 80020d8:	2100      	movs	r1, #0
 80020da:	2078      	movs	r0, #120	; 0x78
 80020dc:	f000 fa14 	bl	8002508 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80020e0:	22db      	movs	r2, #219	; 0xdb
 80020e2:	2100      	movs	r1, #0
 80020e4:	2078      	movs	r0, #120	; 0x78
 80020e6:	f000 fa0f 	bl	8002508 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80020ea:	2220      	movs	r2, #32
 80020ec:	2100      	movs	r1, #0
 80020ee:	2078      	movs	r0, #120	; 0x78
 80020f0:	f000 fa0a 	bl	8002508 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80020f4:	228d      	movs	r2, #141	; 0x8d
 80020f6:	2100      	movs	r1, #0
 80020f8:	2078      	movs	r0, #120	; 0x78
 80020fa:	f000 fa05 	bl	8002508 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80020fe:	2214      	movs	r2, #20
 8002100:	2100      	movs	r1, #0
 8002102:	2078      	movs	r0, #120	; 0x78
 8002104:	f000 fa00 	bl	8002508 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002108:	22af      	movs	r2, #175	; 0xaf
 800210a:	2100      	movs	r1, #0
 800210c:	2078      	movs	r0, #120	; 0x78
 800210e:	f000 f9fb 	bl	8002508 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002112:	222e      	movs	r2, #46	; 0x2e
 8002114:	2100      	movs	r1, #0
 8002116:	2078      	movs	r0, #120	; 0x78
 8002118:	f000 f9f6 	bl	8002508 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800211c:	2000      	movs	r0, #0
 800211e:	f000 f843 	bl	80021a8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002122:	f000 f813 	bl	800214c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002126:	4b08      	ldr	r3, [pc, #32]	; (8002148 <SSD1306_Init+0x184>)
 8002128:	2200      	movs	r2, #0
 800212a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <SSD1306_Init+0x184>)
 800212e:	2200      	movs	r2, #0
 8002130:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002132:	4b05      	ldr	r3, [pc, #20]	; (8002148 <SSD1306_Init+0x184>)
 8002134:	2201      	movs	r2, #1
 8002136:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002138:	2301      	movs	r3, #1
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000660 	.word	0x20000660
 8002148:	20000658 	.word	0x20000658

0800214c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002152:	2300      	movs	r3, #0
 8002154:	71fb      	strb	r3, [r7, #7]
 8002156:	e01d      	b.n	8002194 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	3b50      	subs	r3, #80	; 0x50
 800215c:	b2db      	uxtb	r3, r3
 800215e:	461a      	mov	r2, r3
 8002160:	2100      	movs	r1, #0
 8002162:	2078      	movs	r0, #120	; 0x78
 8002164:	f000 f9d0 	bl	8002508 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002168:	2200      	movs	r2, #0
 800216a:	2100      	movs	r1, #0
 800216c:	2078      	movs	r0, #120	; 0x78
 800216e:	f000 f9cb 	bl	8002508 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002172:	2210      	movs	r2, #16
 8002174:	2100      	movs	r1, #0
 8002176:	2078      	movs	r0, #120	; 0x78
 8002178:	f000 f9c6 	bl	8002508 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	01db      	lsls	r3, r3, #7
 8002180:	4a08      	ldr	r2, [pc, #32]	; (80021a4 <SSD1306_UpdateScreen+0x58>)
 8002182:	441a      	add	r2, r3
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	2140      	movs	r1, #64	; 0x40
 8002188:	2078      	movs	r0, #120	; 0x78
 800218a:	f000 f957 	bl	800243c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	3301      	adds	r3, #1
 8002192:	71fb      	strb	r3, [r7, #7]
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	2b07      	cmp	r3, #7
 8002198:	d9de      	bls.n	8002158 <SSD1306_UpdateScreen+0xc>
	}
}
 800219a:	bf00      	nop
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000258 	.word	0x20000258

080021a8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <SSD1306_Fill+0x14>
 80021b8:	2300      	movs	r3, #0
 80021ba:	e000      	b.n	80021be <SSD1306_Fill+0x16>
 80021bc:	23ff      	movs	r3, #255	; 0xff
 80021be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021c2:	4619      	mov	r1, r3
 80021c4:	4803      	ldr	r0, [pc, #12]	; (80021d4 <SSD1306_Fill+0x2c>)
 80021c6:	f004 feb8 	bl	8006f3a <memset>
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000258 	.word	0x20000258

080021d8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	80fb      	strh	r3, [r7, #6]
 80021e2:	460b      	mov	r3, r1
 80021e4:	80bb      	strh	r3, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	70fb      	strb	r3, [r7, #3]
	if (
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	2b7f      	cmp	r3, #127	; 0x7f
 80021ee:	d848      	bhi.n	8002282 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80021f0:	88bb      	ldrh	r3, [r7, #4]
 80021f2:	2b3f      	cmp	r3, #63	; 0x3f
 80021f4:	d845      	bhi.n	8002282 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80021f6:	4b26      	ldr	r3, [pc, #152]	; (8002290 <SSD1306_DrawPixel+0xb8>)
 80021f8:	791b      	ldrb	r3, [r3, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d006      	beq.n	800220c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80021fe:	78fb      	ldrb	r3, [r7, #3]
 8002200:	2b00      	cmp	r3, #0
 8002202:	bf0c      	ite	eq
 8002204:	2301      	moveq	r3, #1
 8002206:	2300      	movne	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800220c:	78fb      	ldrb	r3, [r7, #3]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d11a      	bne.n	8002248 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002212:	88fa      	ldrh	r2, [r7, #6]
 8002214:	88bb      	ldrh	r3, [r7, #4]
 8002216:	08db      	lsrs	r3, r3, #3
 8002218:	b298      	uxth	r0, r3
 800221a:	4603      	mov	r3, r0
 800221c:	01db      	lsls	r3, r3, #7
 800221e:	4413      	add	r3, r2
 8002220:	4a1c      	ldr	r2, [pc, #112]	; (8002294 <SSD1306_DrawPixel+0xbc>)
 8002222:	5cd3      	ldrb	r3, [r2, r3]
 8002224:	b25a      	sxtb	r2, r3
 8002226:	88bb      	ldrh	r3, [r7, #4]
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	2101      	movs	r1, #1
 800222e:	fa01 f303 	lsl.w	r3, r1, r3
 8002232:	b25b      	sxtb	r3, r3
 8002234:	4313      	orrs	r3, r2
 8002236:	b259      	sxtb	r1, r3
 8002238:	88fa      	ldrh	r2, [r7, #6]
 800223a:	4603      	mov	r3, r0
 800223c:	01db      	lsls	r3, r3, #7
 800223e:	4413      	add	r3, r2
 8002240:	b2c9      	uxtb	r1, r1
 8002242:	4a14      	ldr	r2, [pc, #80]	; (8002294 <SSD1306_DrawPixel+0xbc>)
 8002244:	54d1      	strb	r1, [r2, r3]
 8002246:	e01d      	b.n	8002284 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002248:	88fa      	ldrh	r2, [r7, #6]
 800224a:	88bb      	ldrh	r3, [r7, #4]
 800224c:	08db      	lsrs	r3, r3, #3
 800224e:	b298      	uxth	r0, r3
 8002250:	4603      	mov	r3, r0
 8002252:	01db      	lsls	r3, r3, #7
 8002254:	4413      	add	r3, r2
 8002256:	4a0f      	ldr	r2, [pc, #60]	; (8002294 <SSD1306_DrawPixel+0xbc>)
 8002258:	5cd3      	ldrb	r3, [r2, r3]
 800225a:	b25a      	sxtb	r2, r3
 800225c:	88bb      	ldrh	r3, [r7, #4]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	2101      	movs	r1, #1
 8002264:	fa01 f303 	lsl.w	r3, r1, r3
 8002268:	b25b      	sxtb	r3, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	b25b      	sxtb	r3, r3
 800226e:	4013      	ands	r3, r2
 8002270:	b259      	sxtb	r1, r3
 8002272:	88fa      	ldrh	r2, [r7, #6]
 8002274:	4603      	mov	r3, r0
 8002276:	01db      	lsls	r3, r3, #7
 8002278:	4413      	add	r3, r2
 800227a:	b2c9      	uxtb	r1, r1
 800227c:	4a05      	ldr	r2, [pc, #20]	; (8002294 <SSD1306_DrawPixel+0xbc>)
 800227e:	54d1      	strb	r1, [r2, r3]
 8002280:	e000      	b.n	8002284 <SSD1306_DrawPixel+0xac>
		return;
 8002282:	bf00      	nop
	}
}
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	20000658 	.word	0x20000658
 8002294:	20000258 	.word	0x20000258

08002298 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	460a      	mov	r2, r1
 80022a2:	80fb      	strh	r3, [r7, #6]
 80022a4:	4613      	mov	r3, r2
 80022a6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80022a8:	4a05      	ldr	r2, [pc, #20]	; (80022c0 <SSD1306_GotoXY+0x28>)
 80022aa:	88fb      	ldrh	r3, [r7, #6]
 80022ac:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80022ae:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <SSD1306_GotoXY+0x28>)
 80022b0:	88bb      	ldrh	r3, [r7, #4]
 80022b2:	8053      	strh	r3, [r2, #2]
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	20000658 	.word	0x20000658

080022c4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	6039      	str	r1, [r7, #0]
 80022ce:	71fb      	strb	r3, [r7, #7]
 80022d0:	4613      	mov	r3, r2
 80022d2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80022d4:	4b3a      	ldr	r3, [pc, #232]	; (80023c0 <SSD1306_Putc+0xfc>)
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	4413      	add	r3, r2
	if (
 80022e0:	2b7f      	cmp	r3, #127	; 0x7f
 80022e2:	dc07      	bgt.n	80022f4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80022e4:	4b36      	ldr	r3, [pc, #216]	; (80023c0 <SSD1306_Putc+0xfc>)
 80022e6:	885b      	ldrh	r3, [r3, #2]
 80022e8:	461a      	mov	r2, r3
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	785b      	ldrb	r3, [r3, #1]
 80022ee:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80022f0:	2b3f      	cmp	r3, #63	; 0x3f
 80022f2:	dd01      	ble.n	80022f8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	e05e      	b.n	80023b6 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	e04b      	b.n	8002396 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	3b20      	subs	r3, #32
 8002306:	6839      	ldr	r1, [r7, #0]
 8002308:	7849      	ldrb	r1, [r1, #1]
 800230a:	fb01 f303 	mul.w	r3, r1, r3
 800230e:	4619      	mov	r1, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	440b      	add	r3, r1
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	4413      	add	r3, r2
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800231c:	2300      	movs	r3, #0
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	e030      	b.n	8002384 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d010      	beq.n	8002354 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002332:	4b23      	ldr	r3, [pc, #140]	; (80023c0 <SSD1306_Putc+0xfc>)
 8002334:	881a      	ldrh	r2, [r3, #0]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	b29b      	uxth	r3, r3
 800233a:	4413      	add	r3, r2
 800233c:	b298      	uxth	r0, r3
 800233e:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <SSD1306_Putc+0xfc>)
 8002340:	885a      	ldrh	r2, [r3, #2]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	b29b      	uxth	r3, r3
 8002346:	4413      	add	r3, r2
 8002348:	b29b      	uxth	r3, r3
 800234a:	79ba      	ldrb	r2, [r7, #6]
 800234c:	4619      	mov	r1, r3
 800234e:	f7ff ff43 	bl	80021d8 <SSD1306_DrawPixel>
 8002352:	e014      	b.n	800237e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002354:	4b1a      	ldr	r3, [pc, #104]	; (80023c0 <SSD1306_Putc+0xfc>)
 8002356:	881a      	ldrh	r2, [r3, #0]
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	b29b      	uxth	r3, r3
 800235c:	4413      	add	r3, r2
 800235e:	b298      	uxth	r0, r3
 8002360:	4b17      	ldr	r3, [pc, #92]	; (80023c0 <SSD1306_Putc+0xfc>)
 8002362:	885a      	ldrh	r2, [r3, #2]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	b29b      	uxth	r3, r3
 8002368:	4413      	add	r3, r2
 800236a:	b299      	uxth	r1, r3
 800236c:	79bb      	ldrb	r3, [r7, #6]
 800236e:	2b00      	cmp	r3, #0
 8002370:	bf0c      	ite	eq
 8002372:	2301      	moveq	r3, #1
 8002374:	2300      	movne	r3, #0
 8002376:	b2db      	uxtb	r3, r3
 8002378:	461a      	mov	r2, r3
 800237a:	f7ff ff2d 	bl	80021d8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	3301      	adds	r3, #1
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	461a      	mov	r2, r3
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4293      	cmp	r3, r2
 800238e:	d3c8      	bcc.n	8002322 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	3301      	adds	r3, #1
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	785b      	ldrb	r3, [r3, #1]
 800239a:	461a      	mov	r2, r3
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	4293      	cmp	r3, r2
 80023a0:	d3ad      	bcc.n	80022fe <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80023a2:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <SSD1306_Putc+0xfc>)
 80023a4:	881a      	ldrh	r2, [r3, #0]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	4413      	add	r3, r2
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <SSD1306_Putc+0xfc>)
 80023b2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80023b4:	79fb      	ldrb	r3, [r7, #7]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000658 	.word	0x20000658

080023c4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	4613      	mov	r3, r2
 80023d0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80023d2:	e012      	b.n	80023fa <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	79fa      	ldrb	r2, [r7, #7]
 80023da:	68b9      	ldr	r1, [r7, #8]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff71 	bl	80022c4 <SSD1306_Putc>
 80023e2:	4603      	mov	r3, r0
 80023e4:	461a      	mov	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d002      	beq.n	80023f4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	e008      	b.n	8002406 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	3301      	adds	r3, #1
 80023f8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1e8      	bne.n	80023d4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	781b      	ldrb	r3, [r3, #0]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002416:	4b08      	ldr	r3, [pc, #32]	; (8002438 <ssd1306_I2C_Init+0x28>)
 8002418:	607b      	str	r3, [r7, #4]
	while(p>0)
 800241a:	e002      	b.n	8002422 <ssd1306_I2C_Init+0x12>
		p--;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3b01      	subs	r3, #1
 8002420:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1f9      	bne.n	800241c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	0003d090 	.word	0x0003d090

0800243c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800243c:	b590      	push	{r4, r7, lr}
 800243e:	b0c7      	sub	sp, #284	; 0x11c
 8002440:	af02      	add	r7, sp, #8
 8002442:	4604      	mov	r4, r0
 8002444:	4608      	mov	r0, r1
 8002446:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800244a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800244e:	600a      	str	r2, [r1, #0]
 8002450:	4619      	mov	r1, r3
 8002452:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002456:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800245a:	4622      	mov	r2, r4
 800245c:	701a      	strb	r2, [r3, #0]
 800245e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002462:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002466:	4602      	mov	r2, r0
 8002468:	701a      	strb	r2, [r3, #0]
 800246a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800246e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002472:	460a      	mov	r2, r1
 8002474:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002476:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800247a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800247e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002482:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8002486:	7812      	ldrb	r2, [r2, #0]
 8002488:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800248a:	2300      	movs	r3, #0
 800248c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002490:	e015      	b.n	80024be <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8002492:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002496:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800249a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	441a      	add	r2, r3
 80024a2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80024a6:	3301      	adds	r3, #1
 80024a8:	7811      	ldrb	r1, [r2, #0]
 80024aa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80024ae:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80024b2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80024b4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80024b8:	3301      	adds	r3, #1
 80024ba:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80024be:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80024c8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80024cc:	8812      	ldrh	r2, [r2, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d8df      	bhi.n	8002492 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80024d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024d6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	b299      	uxth	r1, r3
 80024de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	3301      	adds	r3, #1
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	f107 020c 	add.w	r2, r7, #12
 80024f0:	200a      	movs	r0, #10
 80024f2:	9000      	str	r0, [sp, #0]
 80024f4:	4803      	ldr	r0, [pc, #12]	; (8002504 <ssd1306_I2C_WriteMulti+0xc8>)
 80024f6:	f001 fa45 	bl	8003984 <HAL_I2C_Master_Transmit>
}
 80024fa:	bf00      	nop
 80024fc:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002500:	46bd      	mov	sp, r7
 8002502:	bd90      	pop	{r4, r7, pc}
 8002504:	20000660 	.word	0x20000660

08002508 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af02      	add	r7, sp, #8
 800250e:	4603      	mov	r3, r0
 8002510:	71fb      	strb	r3, [r7, #7]
 8002512:	460b      	mov	r3, r1
 8002514:	71bb      	strb	r3, [r7, #6]
 8002516:	4613      	mov	r3, r2
 8002518:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800251a:	79bb      	ldrb	r3, [r7, #6]
 800251c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800251e:	797b      	ldrb	r3, [r7, #5]
 8002520:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	b299      	uxth	r1, r3
 8002526:	f107 020c 	add.w	r2, r7, #12
 800252a:	230a      	movs	r3, #10
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	2302      	movs	r3, #2
 8002530:	4803      	ldr	r0, [pc, #12]	; (8002540 <ssd1306_I2C_Write+0x38>)
 8002532:	f001 fa27 	bl	8003984 <HAL_I2C_Master_Transmit>
}
 8002536:	bf00      	nop
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000660 	.word	0x20000660

08002544 <ssd1306_write>:

void ssd1306_write(uint32_t buff, FontDef_t Font)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	1d3b      	adds	r3, r7, #4
 800254e:	e883 0006 	stmia.w	r3, {r1, r2}
//	SSD1306_Clear ();
//	SSD1306_Fill(SSD1306_COLOR_BLACK);
	SSD1306_Puts(buff, &Font, 1);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1d39      	adds	r1, r7, #4
 8002556:	2201      	movs	r2, #1
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff ff33 	bl	80023c4 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800255e:	f7ff fdf5 	bl	800214c <SSD1306_UpdateScreen>
}
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08a      	sub	sp, #40	; 0x28
 8002570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002572:	f107 0314 	add.w	r3, r7, #20
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	605a      	str	r2, [r3, #4]
 800257c:	609a      	str	r2, [r3, #8]
 800257e:	60da      	str	r2, [r3, #12]
 8002580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	4b3c      	ldr	r3, [pc, #240]	; (8002678 <MX_GPIO_Init+0x10c>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	4a3b      	ldr	r2, [pc, #236]	; (8002678 <MX_GPIO_Init+0x10c>)
 800258c:	f043 0304 	orr.w	r3, r3, #4
 8002590:	6313      	str	r3, [r2, #48]	; 0x30
 8002592:	4b39      	ldr	r3, [pc, #228]	; (8002678 <MX_GPIO_Init+0x10c>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	4b35      	ldr	r3, [pc, #212]	; (8002678 <MX_GPIO_Init+0x10c>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	4a34      	ldr	r2, [pc, #208]	; (8002678 <MX_GPIO_Init+0x10c>)
 80025a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ac:	6313      	str	r3, [r2, #48]	; 0x30
 80025ae:	4b32      	ldr	r3, [pc, #200]	; (8002678 <MX_GPIO_Init+0x10c>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	4b2e      	ldr	r3, [pc, #184]	; (8002678 <MX_GPIO_Init+0x10c>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	4a2d      	ldr	r2, [pc, #180]	; (8002678 <MX_GPIO_Init+0x10c>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ca:	4b2b      	ldr	r3, [pc, #172]	; (8002678 <MX_GPIO_Init+0x10c>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	607b      	str	r3, [r7, #4]
 80025da:	4b27      	ldr	r3, [pc, #156]	; (8002678 <MX_GPIO_Init+0x10c>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	4a26      	ldr	r2, [pc, #152]	; (8002678 <MX_GPIO_Init+0x10c>)
 80025e0:	f043 0302 	orr.w	r3, r3, #2
 80025e4:	6313      	str	r3, [r2, #48]	; 0x30
 80025e6:	4b24      	ldr	r3, [pc, #144]	; (8002678 <MX_GPIO_Init+0x10c>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	607b      	str	r3, [r7, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET);
 80025f2:	2201      	movs	r2, #1
 80025f4:	2140      	movs	r1, #64	; 0x40
 80025f6:	4821      	ldr	r0, [pc, #132]	; (800267c <MX_GPIO_Init+0x110>)
 80025f8:	f001 f84e 	bl	8003698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_RST_Pin;
 80025fc:	2301      	movs	r3, #1
 80025fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002600:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 800260a:	f107 0314 	add.w	r3, r7, #20
 800260e:	4619      	mov	r1, r3
 8002610:	481b      	ldr	r0, [pc, #108]	; (8002680 <MX_GPIO_Init+0x114>)
 8002612:	f000 fea5 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_IRQ_Pin;
 8002616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800261a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800261c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002622:	2302      	movs	r3, #2
 8002624:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DW_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002626:	f107 0314 	add.w	r3, r7, #20
 800262a:	4619      	mov	r1, r3
 800262c:	4814      	ldr	r0, [pc, #80]	; (8002680 <MX_GPIO_Init+0x114>)
 800262e:	f000 fe97 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_CS_Pin;
 8002632:	2340      	movs	r3, #64	; 0x40
 8002634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002636:	2301      	movs	r3, #1
 8002638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263a:	2300      	movs	r3, #0
 800263c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800263e:	2302      	movs	r3, #2
 8002640:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);
 8002642:	f107 0314 	add.w	r3, r7, #20
 8002646:	4619      	mov	r1, r3
 8002648:	480c      	ldr	r0, [pc, #48]	; (800267c <MX_GPIO_Init+0x110>)
 800264a:	f000 fe89 	bl	8003360 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 800264e:	2200      	movs	r2, #0
 8002650:	2103      	movs	r1, #3
 8002652:	2006      	movs	r0, #6
 8002654:	f000 fdad 	bl	80031b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002658:	2006      	movs	r0, #6
 800265a:	f000 fdc6 	bl	80031ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 800265e:	2200      	movs	r2, #0
 8002660:	2104      	movs	r1, #4
 8002662:	2028      	movs	r0, #40	; 0x28
 8002664:	f000 fda5 	bl	80031b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002668:	2028      	movs	r0, #40	; 0x28
 800266a:	f000 fdbe 	bl	80031ea <HAL_NVIC_EnableIRQ>

}
 800266e:	bf00      	nop
 8002670:	3728      	adds	r7, #40	; 0x28
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40023800 	.word	0x40023800
 800267c:	40020400 	.word	0x40020400
 8002680:	40020000 	.word	0x40020000

08002684 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002688:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <MX_I2C1_Init+0x50>)
 800268a:	4a13      	ldr	r2, [pc, #76]	; (80026d8 <MX_I2C1_Init+0x54>)
 800268c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800268e:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <MX_I2C1_Init+0x50>)
 8002690:	4a12      	ldr	r2, [pc, #72]	; (80026dc <MX_I2C1_Init+0x58>)
 8002692:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002694:	4b0f      	ldr	r3, [pc, #60]	; (80026d4 <MX_I2C1_Init+0x50>)
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800269a:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <MX_I2C1_Init+0x50>)
 800269c:	2200      	movs	r2, #0
 800269e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026a0:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <MX_I2C1_Init+0x50>)
 80026a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026a8:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <MX_I2C1_Init+0x50>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80026ae:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <MX_I2C1_Init+0x50>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026b4:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <MX_I2C1_Init+0x50>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026ba:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <MX_I2C1_Init+0x50>)
 80026bc:	2200      	movs	r2, #0
 80026be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026c0:	4804      	ldr	r0, [pc, #16]	; (80026d4 <MX_I2C1_Init+0x50>)
 80026c2:	f001 f81b 	bl	80036fc <HAL_I2C_Init>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80026cc:	f000 f8ce 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026d0:	bf00      	nop
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	20000660 	.word	0x20000660
 80026d8:	40005400 	.word	0x40005400
 80026dc:	00061a80 	.word	0x00061a80

080026e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08a      	sub	sp, #40	; 0x28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e8:	f107 0314 	add.w	r3, r7, #20
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	605a      	str	r2, [r3, #4]
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	60da      	str	r2, [r3, #12]
 80026f6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a19      	ldr	r2, [pc, #100]	; (8002764 <HAL_I2C_MspInit+0x84>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d12c      	bne.n	800275c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	4b18      	ldr	r3, [pc, #96]	; (8002768 <HAL_I2C_MspInit+0x88>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	4a17      	ldr	r2, [pc, #92]	; (8002768 <HAL_I2C_MspInit+0x88>)
 800270c:	f043 0302 	orr.w	r3, r3, #2
 8002710:	6313      	str	r3, [r2, #48]	; 0x30
 8002712:	4b15      	ldr	r3, [pc, #84]	; (8002768 <HAL_I2C_MspInit+0x88>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800271e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002724:	2312      	movs	r3, #18
 8002726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272c:	2303      	movs	r3, #3
 800272e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002730:	2304      	movs	r3, #4
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	4619      	mov	r1, r3
 800273a:	480c      	ldr	r0, [pc, #48]	; (800276c <HAL_I2C_MspInit+0x8c>)
 800273c:	f000 fe10 	bl	8003360 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	4b08      	ldr	r3, [pc, #32]	; (8002768 <HAL_I2C_MspInit+0x88>)
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	4a07      	ldr	r2, [pc, #28]	; (8002768 <HAL_I2C_MspInit+0x88>)
 800274a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800274e:	6413      	str	r3, [r2, #64]	; 0x40
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <HAL_I2C_MspInit+0x88>)
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800275c:	bf00      	nop
 800275e:	3728      	adds	r7, #40	; 0x28
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40005400 	.word	0x40005400
 8002768:	40023800 	.word	0x40023800
 800276c:	40020400 	.word	0x40020400

08002770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002774:	f000 fb88 	bl	8002e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002778:	f000 f810 	bl	800279c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800277c:	f7ff fef6 	bl	800256c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002780:	f000 fade 	bl	8002d40 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002784:	f7ff ff7e 	bl	8002684 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002788:	f000 f918 	bl	80029bc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  setup_DW1000RSTnIRQ(0);
 800278c:	2000      	movs	r0, #0
 800278e:	f7ff fb67 	bl	8001e60 <setup_DW1000RSTnIRQ>
  SSD1306_Init();
 8002792:	f7ff fc17 	bl	8001fc4 <SSD1306_Init>
  dw_main();
 8002796:	f000 f86f 	bl	8002878 <dw_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800279a:	e7fe      	b.n	800279a <main+0x2a>

0800279c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b094      	sub	sp, #80	; 0x50
 80027a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027a2:	f107 0320 	add.w	r3, r7, #32
 80027a6:	2230      	movs	r2, #48	; 0x30
 80027a8:	2100      	movs	r1, #0
 80027aa:	4618      	mov	r0, r3
 80027ac:	f004 fbc5 	bl	8006f3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027b0:	f107 030c 	add.w	r3, r7, #12
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027c0:	2300      	movs	r3, #0
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	4b27      	ldr	r3, [pc, #156]	; (8002864 <SystemClock_Config+0xc8>)
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	4a26      	ldr	r2, [pc, #152]	; (8002864 <SystemClock_Config+0xc8>)
 80027ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ce:	6413      	str	r3, [r2, #64]	; 0x40
 80027d0:	4b24      	ldr	r3, [pc, #144]	; (8002864 <SystemClock_Config+0xc8>)
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027dc:	2300      	movs	r3, #0
 80027de:	607b      	str	r3, [r7, #4]
 80027e0:	4b21      	ldr	r3, [pc, #132]	; (8002868 <SystemClock_Config+0xcc>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a20      	ldr	r2, [pc, #128]	; (8002868 <SystemClock_Config+0xcc>)
 80027e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027ea:	6013      	str	r3, [r2, #0]
 80027ec:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <SystemClock_Config+0xcc>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027f4:	607b      	str	r3, [r7, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027f8:	2301      	movs	r3, #1
 80027fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002802:	2302      	movs	r3, #2
 8002804:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002806:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800280a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 800280c:	230d      	movs	r3, #13
 800280e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002810:	2348      	movs	r3, #72	; 0x48
 8002812:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002814:	2302      	movs	r3, #2
 8002816:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002818:	2304      	movs	r3, #4
 800281a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800281c:	f107 0320 	add.w	r3, r7, #32
 8002820:	4618      	mov	r0, r3
 8002822:	f001 fce5 	bl	80041f0 <HAL_RCC_OscConfig>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800282c:	f000 f81e 	bl	800286c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002830:	230f      	movs	r3, #15
 8002832:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002834:	2302      	movs	r3, #2
 8002836:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800283c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002840:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002846:	f107 030c 	add.w	r3, r7, #12
 800284a:	2102      	movs	r1, #2
 800284c:	4618      	mov	r0, r3
 800284e:	f001 ff47 	bl	80046e0 <HAL_RCC_ClockConfig>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002858:	f000 f808 	bl	800286c <Error_Handler>
  }
}
 800285c:	bf00      	nop
 800285e:	3750      	adds	r7, #80	; 0x50
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40023800 	.word	0x40023800
 8002868:	40007000 	.word	0x40007000

0800286c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002870:	b672      	cpsid	i
}
 8002872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002874:	e7fe      	b.n	8002874 <Error_Handler+0x8>
	...

08002878 <dw_main>:

/**
 * Application entry point.
 */
int dw_main(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
    /* Display application name on LCD. */
    ssd1306_write(buff, Font_7x10);
 800287e:	4843      	ldr	r0, [pc, #268]	; (800298c <dw_main+0x114>)
 8002880:	4b43      	ldr	r3, [pc, #268]	; (8002990 <dw_main+0x118>)
 8002882:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002886:	f7ff fe5d 	bl	8002544 <ssd1306_write>

    /* Reset and initialise DW1000. See NOTE 2 below.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 800288a:	f7ff fac7 	bl	8001e1c <reset_DW1000>
    port_set_dw1000_slowrate();
 800288e:	f7ff fb21 	bl	8001ed4 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADNONE) == DWT_ERROR)
 8002892:	2000      	movs	r0, #0
 8002894:	f7fe fbb4 	bl	8001000 <dwt_initialise>
 8002898:	4603      	mov	r3, r0
 800289a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289e:	d117      	bne.n	80028d0 <dw_main+0x58>
    {
        printf("INIT FAILED");
 80028a0:	483c      	ldr	r0, [pc, #240]	; (8002994 <dw_main+0x11c>)
 80028a2:	f004 fad5 	bl	8006e50 <iprintf>
        HAL_UART_Transmit(&huart2, "Init Failed", 11, HAL_MAX_DELAY);
 80028a6:	f04f 33ff 	mov.w	r3, #4294967295
 80028aa:	220b      	movs	r2, #11
 80028ac:	493a      	ldr	r1, [pc, #232]	; (8002998 <dw_main+0x120>)
 80028ae:	483b      	ldr	r0, [pc, #236]	; (800299c <dw_main+0x124>)
 80028b0:	f002 fbe1 	bl	8005076 <HAL_UART_Transmit>
        SSD1306_GotoXY(0, 10); SSD1306_InvertDisplay(1);
 80028b4:	210a      	movs	r1, #10
 80028b6:	2000      	movs	r0, #0
 80028b8:	f7ff fcee 	bl	8002298 <SSD1306_GotoXY>
 80028bc:	2001      	movs	r0, #1
 80028be:	f7ff fb6b 	bl	8001f98 <SSD1306_InvertDisplay>
        ssd1306_write("Init Failed!!!", Font_7x10);
 80028c2:	4837      	ldr	r0, [pc, #220]	; (80029a0 <dw_main+0x128>)
 80028c4:	4b32      	ldr	r3, [pc, #200]	; (8002990 <dw_main+0x118>)
 80028c6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80028ca:	f7ff fe3b 	bl	8002544 <ssd1306_write>
        while (1)
 80028ce:	e7fe      	b.n	80028ce <dw_main+0x56>
        { };
    }
    port_set_dw1000_fastrate();
 80028d0:	f7ff fb0c 	bl	8001eec <port_set_dw1000_fastrate>

    /* Configure DW1000. */
    dwt_configure(&config);
 80028d4:	4833      	ldr	r0, [pc, #204]	; (80029a4 <dw_main+0x12c>)
 80028d6:	f7fe fce9 	bl	80012ac <dwt_configure>

        /* Clear local RX buffer to avoid having leftovers from previous receptions  This is not necessary but is included here to aid reading
         * the RX buffer.
         * This is a good place to put a breakpoint. Here (after first time through the loop) the local status register will be set for last event
         * and if a good receive has happened the data buffer will have the data in it, and frame_len will be set to the length of the RX frame. */
        for (i = 0 ; i < FRAME_LEN_MAX; i++ )
 80028da:	2300      	movs	r3, #0
 80028dc:	607b      	str	r3, [r7, #4]
 80028de:	e007      	b.n	80028f0 <dw_main+0x78>
        {
            rx_buffer[i] = 0;
 80028e0:	4a31      	ldr	r2, [pc, #196]	; (80029a8 <dw_main+0x130>)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4413      	add	r3, r2
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]
        for (i = 0 ; i < FRAME_LEN_MAX; i++ )
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3301      	adds	r3, #1
 80028ee:	607b      	str	r3, [r7, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b7e      	cmp	r3, #126	; 0x7e
 80028f4:	ddf4      	ble.n	80028e0 <dw_main+0x68>
        }

        /* Activate reception immediately. See NOTE 3 below. */
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 80028f6:	2000      	movs	r0, #0
 80028f8:	f7ff f8fc 	bl	8001af4 <dwt_rxenable>

        /* Poll until a frame is properly received or an error/timeout occurs. See NOTE 4 below.
         * STATUS register is 5 bytes long but, as the event we are looking at is in the first byte of the register, we can use this simplest API
         * function to access it. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR)))
 80028fc:	bf00      	nop
 80028fe:	2100      	movs	r1, #0
 8002900:	200f      	movs	r0, #15
 8002902:	f7fe fefa 	bl	80016fa <dwt_read32bitoffsetreg>
 8002906:	4603      	mov	r3, r0
 8002908:	4a28      	ldr	r2, [pc, #160]	; (80029ac <dw_main+0x134>)
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	4b27      	ldr	r3, [pc, #156]	; (80029ac <dw_main+0x134>)
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4b27      	ldr	r3, [pc, #156]	; (80029b0 <dw_main+0x138>)
 8002912:	4013      	ands	r3, r2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0f2      	beq.n	80028fe <dw_main+0x86>
        { };

        if (status_reg & SYS_STATUS_RXFCG)
 8002918:	4b24      	ldr	r3, [pc, #144]	; (80029ac <dw_main+0x134>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d02d      	beq.n	8002980 <dw_main+0x108>
        {
            /* A frame has been received, copy it to our local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 8002924:	2100      	movs	r1, #0
 8002926:	2010      	movs	r0, #16
 8002928:	f7fe fee7 	bl	80016fa <dwt_read32bitoffsetreg>
 800292c:	4603      	mov	r3, r0
 800292e:	b29b      	uxth	r3, r3
 8002930:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002934:	b29a      	uxth	r2, r3
 8002936:	4b1f      	ldr	r3, [pc, #124]	; (80029b4 <dw_main+0x13c>)
 8002938:	801a      	strh	r2, [r3, #0]
            if (frame_len <= FRAME_LEN_MAX)
 800293a:	4b1e      	ldr	r3, [pc, #120]	; (80029b4 <dw_main+0x13c>)
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	2b7f      	cmp	r3, #127	; 0x7f
 8002940:	d806      	bhi.n	8002950 <dw_main+0xd8>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 8002942:	4b1c      	ldr	r3, [pc, #112]	; (80029b4 <dw_main+0x13c>)
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	2200      	movs	r2, #0
 8002948:	4619      	mov	r1, r3
 800294a:	4817      	ldr	r0, [pc, #92]	; (80029a8 <dw_main+0x130>)
 800294c:	f7fe fe18 	bl	8001580 <dwt_readrxdata>
            }
            SSD1306_GotoXY(0, 30);
 8002950:	211e      	movs	r1, #30
 8002952:	2000      	movs	r0, #0
 8002954:	f7ff fca0 	bl	8002298 <SSD1306_GotoXY>
            ssd1306_write(rx_buffer, Font_7x10);
 8002958:	4813      	ldr	r0, [pc, #76]	; (80029a8 <dw_main+0x130>)
 800295a:	4b0d      	ldr	r3, [pc, #52]	; (8002990 <dw_main+0x118>)
 800295c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002960:	f7ff fdf0 	bl	8002544 <ssd1306_write>
            HAL_UART_Transmit(&huart2, rx_buffer, 10, HAL_MAX_DELAY);
 8002964:	f04f 33ff 	mov.w	r3, #4294967295
 8002968:	220a      	movs	r2, #10
 800296a:	490f      	ldr	r1, [pc, #60]	; (80029a8 <dw_main+0x130>)
 800296c:	480b      	ldr	r0, [pc, #44]	; (800299c <dw_main+0x124>)
 800296e:	f002 fb82 	bl	8005076 <HAL_UART_Transmit>
            /* Clear good RX frame event in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 8002972:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002976:	2100      	movs	r1, #0
 8002978:	200f      	movs	r0, #15
 800297a:	f7fe ff44 	bl	8001806 <dwt_write32bitoffsetreg>
 800297e:	e7ac      	b.n	80028da <dw_main+0x62>

        }
        else
        {
            /* Clear RX error events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR);
 8002980:	4a0d      	ldr	r2, [pc, #52]	; (80029b8 <dw_main+0x140>)
 8002982:	2100      	movs	r1, #0
 8002984:	200f      	movs	r0, #15
 8002986:	f7fe ff3e 	bl	8001806 <dwt_write32bitoffsetreg>
    {
 800298a:	e7a6      	b.n	80028da <dw_main+0x62>
 800298c:	2000000c 	.word	0x2000000c
 8002990:	20000004 	.word	0x20000004
 8002994:	0800a7c8 	.word	0x0800a7c8
 8002998:	0800a7d4 	.word	0x0800a7d4
 800299c:	20000798 	.word	0x20000798
 80029a0:	0800a7e0 	.word	0x0800a7e0
 80029a4:	2000001c 	.word	0x2000001c
 80029a8:	200006b4 	.word	0x200006b4
 80029ac:	20000734 	.word	0x20000734
 80029b0:	2405d000 	.word	0x2405d000
 80029b4:	20000738 	.word	0x20000738
 80029b8:	24059000 	.word	0x24059000

080029bc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80029c0:	4b17      	ldr	r3, [pc, #92]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029c2:	4a18      	ldr	r2, [pc, #96]	; (8002a24 <MX_SPI1_Init+0x68>)
 80029c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029c6:	4b16      	ldr	r3, [pc, #88]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029ce:	4b14      	ldr	r3, [pc, #80]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029d4:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029da:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029dc:	2200      	movs	r2, #0
 80029de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029e0:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029e6:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80029ee:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029f0:	2220      	movs	r2, #32
 80029f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029f4:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a00:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <MX_SPI1_Init+0x64>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a06:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <MX_SPI1_Init+0x64>)
 8002a08:	220a      	movs	r2, #10
 8002a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a0c:	4804      	ldr	r0, [pc, #16]	; (8002a20 <MX_SPI1_Init+0x64>)
 8002a0e:	f002 f847 	bl	8004aa0 <HAL_SPI_Init>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002a18:	f7ff ff28 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a1c:	bf00      	nop
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	2000073c 	.word	0x2000073c
 8002a24:	40013000 	.word	0x40013000

08002a28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08a      	sub	sp, #40	; 0x28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a30:	f107 0314 	add.w	r3, r7, #20
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
 8002a3e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a19      	ldr	r2, [pc, #100]	; (8002aac <HAL_SPI_MspInit+0x84>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d12b      	bne.n	8002aa2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <HAL_SPI_MspInit+0x88>)
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	4a17      	ldr	r2, [pc, #92]	; (8002ab0 <HAL_SPI_MspInit+0x88>)
 8002a54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a58:	6453      	str	r3, [r2, #68]	; 0x44
 8002a5a:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <HAL_SPI_MspInit+0x88>)
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a62:	613b      	str	r3, [r7, #16]
 8002a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <HAL_SPI_MspInit+0x88>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	4a10      	ldr	r2, [pc, #64]	; (8002ab0 <HAL_SPI_MspInit+0x88>)
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	6313      	str	r3, [r2, #48]	; 0x30
 8002a76:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <HAL_SPI_MspInit+0x88>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002a82:	23e0      	movs	r3, #224	; 0xe0
 8002a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a86:	2302      	movs	r3, #2
 8002a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a92:	2305      	movs	r3, #5
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a96:	f107 0314 	add.w	r3, r7, #20
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4805      	ldr	r0, [pc, #20]	; (8002ab4 <HAL_SPI_MspInit+0x8c>)
 8002a9e:	f000 fc5f 	bl	8003360 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	3728      	adds	r7, #40	; 0x28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40013000 	.word	0x40013000
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	40020000 	.word	0x40020000

08002ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	607b      	str	r3, [r7, #4]
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <HAL_MspInit+0x4c>)
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac6:	4a0f      	ldr	r2, [pc, #60]	; (8002b04 <HAL_MspInit+0x4c>)
 8002ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002acc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ace:	4b0d      	ldr	r3, [pc, #52]	; (8002b04 <HAL_MspInit+0x4c>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad6:	607b      	str	r3, [r7, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	603b      	str	r3, [r7, #0]
 8002ade:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <HAL_MspInit+0x4c>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	4a08      	ldr	r2, [pc, #32]	; (8002b04 <HAL_MspInit+0x4c>)
 8002ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aea:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <HAL_MspInit+0x4c>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af2:	603b      	str	r3, [r7, #0]
 8002af4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40023800 	.word	0x40023800

08002b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b0c:	e7fe      	b.n	8002b0c <NMI_Handler+0x4>

08002b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b12:	e7fe      	b.n	8002b12 <HardFault_Handler+0x4>

08002b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b18:	e7fe      	b.n	8002b18 <MemManage_Handler+0x4>

08002b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b1e:	e7fe      	b.n	8002b1e <BusFault_Handler+0x4>

08002b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b24:	e7fe      	b.n	8002b24 <UsageFault_Handler+0x4>

08002b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b54:	f000 f9ea 	bl	8002f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b58:	bf00      	nop
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_RST_Pin);
 8002b60:	2001      	movs	r0, #1
 8002b62:	f000 fdb3 	bl	80036cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
	...

08002b6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b70:	4802      	ldr	r0, [pc, #8]	; (8002b7c <USART2_IRQHandler+0x10>)
 8002b72:	f002 fb13 	bl	800519c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	20000798 	.word	0x20000798

08002b80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_IRQ_Pin);
 8002b84:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002b88:	f000 fda0 	bl	80036cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b8c:	bf00      	nop
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return 1;
 8002b94:	2301      	movs	r3, #1
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <_kill>:

int _kill(int pid, int sig)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002baa:	f004 fa19 	bl	8006fe0 <__errno>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2216      	movs	r2, #22
 8002bb2:	601a      	str	r2, [r3, #0]
  return -1;
 8002bb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <_exit>:

void _exit (int status)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f7ff ffe7 	bl	8002ba0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bd2:	e7fe      	b.n	8002bd2 <_exit+0x12>

08002bd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	e00a      	b.n	8002bfc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002be6:	f3af 8000 	nop.w
 8002bea:	4601      	mov	r1, r0
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	60ba      	str	r2, [r7, #8]
 8002bf2:	b2ca      	uxtb	r2, r1
 8002bf4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	dbf0      	blt.n	8002be6 <_read+0x12>
  }

  return len;
 8002c04:	687b      	ldr	r3, [r7, #4]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b086      	sub	sp, #24
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]
 8002c1e:	e009      	b.n	8002c34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	60ba      	str	r2, [r7, #8]
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	3301      	adds	r3, #1
 8002c32:	617b      	str	r3, [r7, #20]
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	dbf1      	blt.n	8002c20 <_write+0x12>
  }
  return len;
 8002c3c:	687b      	ldr	r3, [r7, #4]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <_close>:

int _close(int file)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
 8002c66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c6e:	605a      	str	r2, [r3, #4]
  return 0;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <_isatty>:

int _isatty(int file)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c86:	2301      	movs	r3, #1
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
	...

08002cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cb8:	4a14      	ldr	r2, [pc, #80]	; (8002d0c <_sbrk+0x5c>)
 8002cba:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <_sbrk+0x60>)
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cc4:	4b13      	ldr	r3, [pc, #76]	; (8002d14 <_sbrk+0x64>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d102      	bne.n	8002cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ccc:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <_sbrk+0x64>)
 8002cce:	4a12      	ldr	r2, [pc, #72]	; (8002d18 <_sbrk+0x68>)
 8002cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cd2:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <_sbrk+0x64>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4413      	add	r3, r2
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d207      	bcs.n	8002cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ce0:	f004 f97e 	bl	8006fe0 <__errno>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	220c      	movs	r2, #12
 8002ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cea:	f04f 33ff 	mov.w	r3, #4294967295
 8002cee:	e009      	b.n	8002d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cf0:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <_sbrk+0x64>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cf6:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <_sbrk+0x64>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	4a05      	ldr	r2, [pc, #20]	; (8002d14 <_sbrk+0x64>)
 8002d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d02:	68fb      	ldr	r3, [r7, #12]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	20020000 	.word	0x20020000
 8002d10:	00000400 	.word	0x00000400
 8002d14:	20000794 	.word	0x20000794
 8002d18:	20000930 	.word	0x20000930

08002d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <SystemInit+0x20>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d26:	4a05      	ldr	r2, [pc, #20]	; (8002d3c <SystemInit+0x20>)
 8002d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d30:	bf00      	nop
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d44:	4b11      	ldr	r3, [pc, #68]	; (8002d8c <MX_USART2_UART_Init+0x4c>)
 8002d46:	4a12      	ldr	r2, [pc, #72]	; (8002d90 <MX_USART2_UART_Init+0x50>)
 8002d48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d4a:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <MX_USART2_UART_Init+0x4c>)
 8002d4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d52:	4b0e      	ldr	r3, [pc, #56]	; (8002d8c <MX_USART2_UART_Init+0x4c>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d58:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <MX_USART2_UART_Init+0x4c>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d5e:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <MX_USART2_UART_Init+0x4c>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d64:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <MX_USART2_UART_Init+0x4c>)
 8002d66:	220c      	movs	r2, #12
 8002d68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d6a:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <MX_USART2_UART_Init+0x4c>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d70:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <MX_USART2_UART_Init+0x4c>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d76:	4805      	ldr	r0, [pc, #20]	; (8002d8c <MX_USART2_UART_Init+0x4c>)
 8002d78:	f002 f930 	bl	8004fdc <HAL_UART_Init>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002d82:	f7ff fd73 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20000798 	.word	0x20000798
 8002d90:	40004400 	.word	0x40004400

08002d94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08a      	sub	sp, #40	; 0x28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9c:	f107 0314 	add.w	r3, r7, #20
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	60da      	str	r2, [r3, #12]
 8002daa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a1d      	ldr	r2, [pc, #116]	; (8002e28 <HAL_UART_MspInit+0x94>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d133      	bne.n	8002e1e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	613b      	str	r3, [r7, #16]
 8002dba:	4b1c      	ldr	r3, [pc, #112]	; (8002e2c <HAL_UART_MspInit+0x98>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	4a1b      	ldr	r2, [pc, #108]	; (8002e2c <HAL_UART_MspInit+0x98>)
 8002dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc6:	4b19      	ldr	r3, [pc, #100]	; (8002e2c <HAL_UART_MspInit+0x98>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dce:	613b      	str	r3, [r7, #16]
 8002dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <HAL_UART_MspInit+0x98>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	4a14      	ldr	r2, [pc, #80]	; (8002e2c <HAL_UART_MspInit+0x98>)
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	6313      	str	r3, [r2, #48]	; 0x30
 8002de2:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <HAL_UART_MspInit+0x98>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002dee:	230c      	movs	r3, #12
 8002df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df2:	2302      	movs	r3, #2
 8002df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dfe:	2307      	movs	r3, #7
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e02:	f107 0314 	add.w	r3, r7, #20
 8002e06:	4619      	mov	r1, r3
 8002e08:	4809      	ldr	r0, [pc, #36]	; (8002e30 <HAL_UART_MspInit+0x9c>)
 8002e0a:	f000 faa9 	bl	8003360 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2100      	movs	r1, #0
 8002e12:	2026      	movs	r0, #38	; 0x26
 8002e14:	f000 f9cd 	bl	80031b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e18:	2026      	movs	r0, #38	; 0x26
 8002e1a:	f000 f9e6 	bl	80031ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002e1e:	bf00      	nop
 8002e20:	3728      	adds	r7, #40	; 0x28
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40004400 	.word	0x40004400
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40020000 	.word	0x40020000

08002e34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e38:	480d      	ldr	r0, [pc, #52]	; (8002e70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e3a:	490e      	ldr	r1, [pc, #56]	; (8002e74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e3c:	4a0e      	ldr	r2, [pc, #56]	; (8002e78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e40:	e002      	b.n	8002e48 <LoopCopyDataInit>

08002e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e46:	3304      	adds	r3, #4

08002e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e4c:	d3f9      	bcc.n	8002e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e4e:	4a0b      	ldr	r2, [pc, #44]	; (8002e7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e50:	4c0b      	ldr	r4, [pc, #44]	; (8002e80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e54:	e001      	b.n	8002e5a <LoopFillZerobss>

08002e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e58:	3204      	adds	r2, #4

08002e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e5c:	d3fb      	bcc.n	8002e56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e5e:	f7ff ff5d 	bl	8002d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e62:	f004 f8c3 	bl	8006fec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e66:	f7ff fc83 	bl	8002770 <main>
  bx  lr    
 8002e6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e74:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002e78:	0800b460 	.word	0x0800b460
  ldr r2, =_sbss
 8002e7c:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8002e80:	2000092c 	.word	0x2000092c

08002e84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e84:	e7fe      	b.n	8002e84 <ADC_IRQHandler>
	...

08002e88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e8c:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <HAL_Init+0x40>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a0d      	ldr	r2, [pc, #52]	; (8002ec8 <HAL_Init+0x40>)
 8002e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <HAL_Init+0x40>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <HAL_Init+0x40>)
 8002e9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ea2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ea4:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <HAL_Init+0x40>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a07      	ldr	r2, [pc, #28]	; (8002ec8 <HAL_Init+0x40>)
 8002eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eb0:	2003      	movs	r0, #3
 8002eb2:	f000 f973 	bl	800319c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	f000 f808 	bl	8002ecc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ebc:	f7ff fdfc 	bl	8002ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40023c00 	.word	0x40023c00

08002ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ed4:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <HAL_InitTick+0x54>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	4b12      	ldr	r3, [pc, #72]	; (8002f24 <HAL_InitTick+0x58>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	4619      	mov	r1, r3
 8002ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 f999 	bl	8003222 <HAL_SYSTICK_Config>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e00e      	b.n	8002f18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b0f      	cmp	r3, #15
 8002efe:	d80a      	bhi.n	8002f16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f00:	2200      	movs	r2, #0
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	f04f 30ff 	mov.w	r0, #4294967295
 8002f08:	f000 f953 	bl	80031b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f0c:	4a06      	ldr	r2, [pc, #24]	; (8002f28 <HAL_InitTick+0x5c>)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	e000      	b.n	8002f18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	20000028 	.word	0x20000028
 8002f24:	20000030 	.word	0x20000030
 8002f28:	2000002c 	.word	0x2000002c

08002f2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f30:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <HAL_IncTick+0x20>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	461a      	mov	r2, r3
 8002f36:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <HAL_IncTick+0x24>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	4a04      	ldr	r2, [pc, #16]	; (8002f50 <HAL_IncTick+0x24>)
 8002f3e:	6013      	str	r3, [r2, #0]
}
 8002f40:	bf00      	nop
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	20000030 	.word	0x20000030
 8002f50:	200007dc 	.word	0x200007dc

08002f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  return uwTick;
 8002f58:	4b03      	ldr	r3, [pc, #12]	; (8002f68 <HAL_GetTick+0x14>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	200007dc 	.word	0x200007dc

08002f6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f74:	f7ff ffee 	bl	8002f54 <HAL_GetTick>
 8002f78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f84:	d005      	beq.n	8002f92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f86:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <HAL_Delay+0x44>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4413      	add	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f92:	bf00      	nop
 8002f94:	f7ff ffde 	bl	8002f54 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d8f7      	bhi.n	8002f94 <HAL_Delay+0x28>
  {
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	bf00      	nop
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	20000030 	.word	0x20000030

08002fb4 <__NVIC_SetPriorityGrouping>:
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fc4:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fe6:	4a04      	ldr	r2, [pc, #16]	; (8002ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	60d3      	str	r3, [r2, #12]
}
 8002fec:	bf00      	nop
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <__NVIC_GetPriorityGrouping>:
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003000:	4b04      	ldr	r3, [pc, #16]	; (8003014 <__NVIC_GetPriorityGrouping+0x18>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	0a1b      	lsrs	r3, r3, #8
 8003006:	f003 0307 	and.w	r3, r3, #7
}
 800300a:	4618      	mov	r0, r3
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <__NVIC_EnableIRQ>:
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003026:	2b00      	cmp	r3, #0
 8003028:	db0b      	blt.n	8003042 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	f003 021f 	and.w	r2, r3, #31
 8003030:	4907      	ldr	r1, [pc, #28]	; (8003050 <__NVIC_EnableIRQ+0x38>)
 8003032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	2001      	movs	r0, #1
 800303a:	fa00 f202 	lsl.w	r2, r0, r2
 800303e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	e000e100 	.word	0xe000e100

08003054 <__NVIC_DisableIRQ>:
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800305e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003062:	2b00      	cmp	r3, #0
 8003064:	db12      	blt.n	800308c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	f003 021f 	and.w	r2, r3, #31
 800306c:	490a      	ldr	r1, [pc, #40]	; (8003098 <__NVIC_DisableIRQ+0x44>)
 800306e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	2001      	movs	r0, #1
 8003076:	fa00 f202 	lsl.w	r2, r0, r2
 800307a:	3320      	adds	r3, #32
 800307c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003080:	f3bf 8f4f 	dsb	sy
}
 8003084:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003086:	f3bf 8f6f 	isb	sy
}
 800308a:	bf00      	nop
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	e000e100 	.word	0xe000e100

0800309c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	6039      	str	r1, [r7, #0]
 80030a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	db0a      	blt.n	80030c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	490c      	ldr	r1, [pc, #48]	; (80030e8 <__NVIC_SetPriority+0x4c>)
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	0112      	lsls	r2, r2, #4
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	440b      	add	r3, r1
 80030c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030c4:	e00a      	b.n	80030dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	4908      	ldr	r1, [pc, #32]	; (80030ec <__NVIC_SetPriority+0x50>)
 80030cc:	79fb      	ldrb	r3, [r7, #7]
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	3b04      	subs	r3, #4
 80030d4:	0112      	lsls	r2, r2, #4
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	440b      	add	r3, r1
 80030da:	761a      	strb	r2, [r3, #24]
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	e000e100 	.word	0xe000e100
 80030ec:	e000ed00 	.word	0xe000ed00

080030f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b089      	sub	sp, #36	; 0x24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	f1c3 0307 	rsb	r3, r3, #7
 800310a:	2b04      	cmp	r3, #4
 800310c:	bf28      	it	cs
 800310e:	2304      	movcs	r3, #4
 8003110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	3304      	adds	r3, #4
 8003116:	2b06      	cmp	r3, #6
 8003118:	d902      	bls.n	8003120 <NVIC_EncodePriority+0x30>
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3b03      	subs	r3, #3
 800311e:	e000      	b.n	8003122 <NVIC_EncodePriority+0x32>
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003124:	f04f 32ff 	mov.w	r2, #4294967295
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43da      	mvns	r2, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	401a      	ands	r2, r3
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003138:	f04f 31ff 	mov.w	r1, #4294967295
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	fa01 f303 	lsl.w	r3, r1, r3
 8003142:	43d9      	mvns	r1, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003148:	4313      	orrs	r3, r2
         );
}
 800314a:	4618      	mov	r0, r3
 800314c:	3724      	adds	r7, #36	; 0x24
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
	...

08003158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3b01      	subs	r3, #1
 8003164:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003168:	d301      	bcc.n	800316e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800316a:	2301      	movs	r3, #1
 800316c:	e00f      	b.n	800318e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800316e:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <SysTick_Config+0x40>)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3b01      	subs	r3, #1
 8003174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003176:	210f      	movs	r1, #15
 8003178:	f04f 30ff 	mov.w	r0, #4294967295
 800317c:	f7ff ff8e 	bl	800309c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003180:	4b05      	ldr	r3, [pc, #20]	; (8003198 <SysTick_Config+0x40>)
 8003182:	2200      	movs	r2, #0
 8003184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003186:	4b04      	ldr	r3, [pc, #16]	; (8003198 <SysTick_Config+0x40>)
 8003188:	2207      	movs	r2, #7
 800318a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	e000e010 	.word	0xe000e010

0800319c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff ff05 	bl	8002fb4 <__NVIC_SetPriorityGrouping>
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b086      	sub	sp, #24
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	4603      	mov	r3, r0
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	607a      	str	r2, [r7, #4]
 80031be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031c4:	f7ff ff1a 	bl	8002ffc <__NVIC_GetPriorityGrouping>
 80031c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	6978      	ldr	r0, [r7, #20]
 80031d0:	f7ff ff8e 	bl	80030f0 <NVIC_EncodePriority>
 80031d4:	4602      	mov	r2, r0
 80031d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031da:	4611      	mov	r1, r2
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff5d 	bl	800309c <__NVIC_SetPriority>
}
 80031e2:	bf00      	nop
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	4603      	mov	r3, r0
 80031f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff ff0d 	bl	8003018 <__NVIC_EnableIRQ>
}
 80031fe:	bf00      	nop
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b082      	sub	sp, #8
 800320a:	af00      	add	r7, sp, #0
 800320c:	4603      	mov	r3, r0
 800320e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff ff1d 	bl	8003054 <__NVIC_DisableIRQ>
}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff ff94 	bl	8003158 <SysTick_Config>
 8003230:	4603      	mov	r3, r0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b084      	sub	sp, #16
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003246:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003248:	f7ff fe84 	bl	8002f54 <HAL_GetTick>
 800324c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d008      	beq.n	800326c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2280      	movs	r2, #128	; 0x80
 800325e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e052      	b.n	8003312 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0216 	bic.w	r2, r2, #22
 800327a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695a      	ldr	r2, [r3, #20]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800328a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	2b00      	cmp	r3, #0
 8003292:	d103      	bne.n	800329c <HAL_DMA_Abort+0x62>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003298:	2b00      	cmp	r3, #0
 800329a:	d007      	beq.n	80032ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0208 	bic.w	r2, r2, #8
 80032aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0201 	bic.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032bc:	e013      	b.n	80032e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032be:	f7ff fe49 	bl	8002f54 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b05      	cmp	r3, #5
 80032ca:	d90c      	bls.n	80032e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2220      	movs	r2, #32
 80032d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2203      	movs	r2, #3
 80032d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e015      	b.n	8003312 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1e4      	bne.n	80032be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f8:	223f      	movs	r2, #63	; 0x3f
 80032fa:	409a      	lsls	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d004      	beq.n	8003338 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2280      	movs	r2, #128	; 0x80
 8003332:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e00c      	b.n	8003352 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2205      	movs	r2, #5
 800333c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0201 	bic.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
	...

08003360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003360:	b480      	push	{r7}
 8003362:	b089      	sub	sp, #36	; 0x24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800336a:	2300      	movs	r3, #0
 800336c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800336e:	2300      	movs	r3, #0
 8003370:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003372:	2300      	movs	r3, #0
 8003374:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003376:	2300      	movs	r3, #0
 8003378:	61fb      	str	r3, [r7, #28]
 800337a:	e159      	b.n	8003630 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800337c:	2201      	movs	r2, #1
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4013      	ands	r3, r2
 800338e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	429a      	cmp	r2, r3
 8003396:	f040 8148 	bne.w	800362a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d005      	beq.n	80033b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d130      	bne.n	8003414 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	2203      	movs	r2, #3
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43db      	mvns	r3, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4013      	ands	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4313      	orrs	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033e8:	2201      	movs	r2, #1
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	091b      	lsrs	r3, r3, #4
 80033fe:	f003 0201 	and.w	r2, r3, #1
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 0303 	and.w	r3, r3, #3
 800341c:	2b03      	cmp	r3, #3
 800341e:	d017      	beq.n	8003450 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	2203      	movs	r2, #3
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	43db      	mvns	r3, r3
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	4013      	ands	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 0303 	and.w	r3, r3, #3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d123      	bne.n	80034a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	08da      	lsrs	r2, r3, #3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3208      	adds	r2, #8
 8003464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003468:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	220f      	movs	r2, #15
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	43db      	mvns	r3, r3
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4013      	ands	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4313      	orrs	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	08da      	lsrs	r2, r3, #3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3208      	adds	r2, #8
 800349e:	69b9      	ldr	r1, [r7, #24]
 80034a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	2203      	movs	r2, #3
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4013      	ands	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 0203 	and.w	r2, r3, #3
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 80a2 	beq.w	800362a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	4b57      	ldr	r3, [pc, #348]	; (8003648 <HAL_GPIO_Init+0x2e8>)
 80034ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ee:	4a56      	ldr	r2, [pc, #344]	; (8003648 <HAL_GPIO_Init+0x2e8>)
 80034f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034f4:	6453      	str	r3, [r2, #68]	; 0x44
 80034f6:	4b54      	ldr	r3, [pc, #336]	; (8003648 <HAL_GPIO_Init+0x2e8>)
 80034f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003502:	4a52      	ldr	r2, [pc, #328]	; (800364c <HAL_GPIO_Init+0x2ec>)
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	089b      	lsrs	r3, r3, #2
 8003508:	3302      	adds	r3, #2
 800350a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800350e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	220f      	movs	r2, #15
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43db      	mvns	r3, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4013      	ands	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a49      	ldr	r2, [pc, #292]	; (8003650 <HAL_GPIO_Init+0x2f0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d019      	beq.n	8003562 <HAL_GPIO_Init+0x202>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a48      	ldr	r2, [pc, #288]	; (8003654 <HAL_GPIO_Init+0x2f4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d013      	beq.n	800355e <HAL_GPIO_Init+0x1fe>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a47      	ldr	r2, [pc, #284]	; (8003658 <HAL_GPIO_Init+0x2f8>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d00d      	beq.n	800355a <HAL_GPIO_Init+0x1fa>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a46      	ldr	r2, [pc, #280]	; (800365c <HAL_GPIO_Init+0x2fc>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d007      	beq.n	8003556 <HAL_GPIO_Init+0x1f6>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a45      	ldr	r2, [pc, #276]	; (8003660 <HAL_GPIO_Init+0x300>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d101      	bne.n	8003552 <HAL_GPIO_Init+0x1f2>
 800354e:	2304      	movs	r3, #4
 8003550:	e008      	b.n	8003564 <HAL_GPIO_Init+0x204>
 8003552:	2307      	movs	r3, #7
 8003554:	e006      	b.n	8003564 <HAL_GPIO_Init+0x204>
 8003556:	2303      	movs	r3, #3
 8003558:	e004      	b.n	8003564 <HAL_GPIO_Init+0x204>
 800355a:	2302      	movs	r3, #2
 800355c:	e002      	b.n	8003564 <HAL_GPIO_Init+0x204>
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <HAL_GPIO_Init+0x204>
 8003562:	2300      	movs	r3, #0
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	f002 0203 	and.w	r2, r2, #3
 800356a:	0092      	lsls	r2, r2, #2
 800356c:	4093      	lsls	r3, r2
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	4313      	orrs	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003574:	4935      	ldr	r1, [pc, #212]	; (800364c <HAL_GPIO_Init+0x2ec>)
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	089b      	lsrs	r3, r3, #2
 800357a:	3302      	adds	r3, #2
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003582:	4b38      	ldr	r3, [pc, #224]	; (8003664 <HAL_GPIO_Init+0x304>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	43db      	mvns	r3, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4013      	ands	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035a6:	4a2f      	ldr	r2, [pc, #188]	; (8003664 <HAL_GPIO_Init+0x304>)
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035ac:	4b2d      	ldr	r3, [pc, #180]	; (8003664 <HAL_GPIO_Init+0x304>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	43db      	mvns	r3, r3
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4013      	ands	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035d0:	4a24      	ldr	r2, [pc, #144]	; (8003664 <HAL_GPIO_Init+0x304>)
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035d6:	4b23      	ldr	r3, [pc, #140]	; (8003664 <HAL_GPIO_Init+0x304>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	43db      	mvns	r3, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4013      	ands	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035fa:	4a1a      	ldr	r2, [pc, #104]	; (8003664 <HAL_GPIO_Init+0x304>)
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003600:	4b18      	ldr	r3, [pc, #96]	; (8003664 <HAL_GPIO_Init+0x304>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	43db      	mvns	r3, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4013      	ands	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003624:	4a0f      	ldr	r2, [pc, #60]	; (8003664 <HAL_GPIO_Init+0x304>)
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	3301      	adds	r3, #1
 800362e:	61fb      	str	r3, [r7, #28]
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	2b0f      	cmp	r3, #15
 8003634:	f67f aea2 	bls.w	800337c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003638:	bf00      	nop
 800363a:	bf00      	nop
 800363c:	3724      	adds	r7, #36	; 0x24
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40023800 	.word	0x40023800
 800364c:	40013800 	.word	0x40013800
 8003650:	40020000 	.word	0x40020000
 8003654:	40020400 	.word	0x40020400
 8003658:	40020800 	.word	0x40020800
 800365c:	40020c00 	.word	0x40020c00
 8003660:	40021000 	.word	0x40021000
 8003664:	40013c00 	.word	0x40013c00

08003668 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	460b      	mov	r3, r1
 8003672:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	887b      	ldrh	r3, [r7, #2]
 800367a:	4013      	ands	r3, r2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003680:	2301      	movs	r3, #1
 8003682:	73fb      	strb	r3, [r7, #15]
 8003684:	e001      	b.n	800368a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003686:	2300      	movs	r3, #0
 8003688:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800368a:	7bfb      	ldrb	r3, [r7, #15]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	460b      	mov	r3, r1
 80036a2:	807b      	strh	r3, [r7, #2]
 80036a4:	4613      	mov	r3, r2
 80036a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036a8:	787b      	ldrb	r3, [r7, #1]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036ae:	887a      	ldrh	r2, [r7, #2]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036b4:	e003      	b.n	80036be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036b6:	887b      	ldrh	r3, [r7, #2]
 80036b8:	041a      	lsls	r2, r3, #16
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	619a      	str	r2, [r3, #24]
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
	...

080036cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036d6:	4b08      	ldr	r3, [pc, #32]	; (80036f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036d8:	695a      	ldr	r2, [r3, #20]
 80036da:	88fb      	ldrh	r3, [r7, #6]
 80036dc:	4013      	ands	r3, r2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d006      	beq.n	80036f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036e2:	4a05      	ldr	r2, [pc, #20]	; (80036f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036e4:	88fb      	ldrh	r3, [r7, #6]
 80036e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036e8:	88fb      	ldrh	r3, [r7, #6]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fe fc0a 	bl	8001f04 <HAL_GPIO_EXTI_Callback>
  }
}
 80036f0:	bf00      	nop
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40013c00 	.word	0x40013c00

080036fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e12b      	b.n	8003966 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d106      	bne.n	8003728 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7fe ffdc 	bl	80026e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2224      	movs	r2, #36	; 0x24
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800374e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800375e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003760:	f001 f976 	bl	8004a50 <HAL_RCC_GetPCLK1Freq>
 8003764:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	4a81      	ldr	r2, [pc, #516]	; (8003970 <HAL_I2C_Init+0x274>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d807      	bhi.n	8003780 <HAL_I2C_Init+0x84>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4a80      	ldr	r2, [pc, #512]	; (8003974 <HAL_I2C_Init+0x278>)
 8003774:	4293      	cmp	r3, r2
 8003776:	bf94      	ite	ls
 8003778:	2301      	movls	r3, #1
 800377a:	2300      	movhi	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	e006      	b.n	800378e <HAL_I2C_Init+0x92>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4a7d      	ldr	r2, [pc, #500]	; (8003978 <HAL_I2C_Init+0x27c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	bf94      	ite	ls
 8003788:	2301      	movls	r3, #1
 800378a:	2300      	movhi	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e0e7      	b.n	8003966 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4a78      	ldr	r2, [pc, #480]	; (800397c <HAL_I2C_Init+0x280>)
 800379a:	fba2 2303 	umull	r2, r3, r2, r3
 800379e:	0c9b      	lsrs	r3, r3, #18
 80037a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	4a6a      	ldr	r2, [pc, #424]	; (8003970 <HAL_I2C_Init+0x274>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d802      	bhi.n	80037d0 <HAL_I2C_Init+0xd4>
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	3301      	adds	r3, #1
 80037ce:	e009      	b.n	80037e4 <HAL_I2C_Init+0xe8>
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037d6:	fb02 f303 	mul.w	r3, r2, r3
 80037da:	4a69      	ldr	r2, [pc, #420]	; (8003980 <HAL_I2C_Init+0x284>)
 80037dc:	fba2 2303 	umull	r2, r3, r2, r3
 80037e0:	099b      	lsrs	r3, r3, #6
 80037e2:	3301      	adds	r3, #1
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6812      	ldr	r2, [r2, #0]
 80037e8:	430b      	orrs	r3, r1
 80037ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	495c      	ldr	r1, [pc, #368]	; (8003970 <HAL_I2C_Init+0x274>)
 8003800:	428b      	cmp	r3, r1
 8003802:	d819      	bhi.n	8003838 <HAL_I2C_Init+0x13c>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	1e59      	subs	r1, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003812:	1c59      	adds	r1, r3, #1
 8003814:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003818:	400b      	ands	r3, r1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_I2C_Init+0x138>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1e59      	subs	r1, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	fbb1 f3f3 	udiv	r3, r1, r3
 800382c:	3301      	adds	r3, #1
 800382e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003832:	e051      	b.n	80038d8 <HAL_I2C_Init+0x1dc>
 8003834:	2304      	movs	r3, #4
 8003836:	e04f      	b.n	80038d8 <HAL_I2C_Init+0x1dc>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d111      	bne.n	8003864 <HAL_I2C_Init+0x168>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	1e58      	subs	r0, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6859      	ldr	r1, [r3, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	440b      	add	r3, r1
 800384e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003852:	3301      	adds	r3, #1
 8003854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003858:	2b00      	cmp	r3, #0
 800385a:	bf0c      	ite	eq
 800385c:	2301      	moveq	r3, #1
 800385e:	2300      	movne	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	e012      	b.n	800388a <HAL_I2C_Init+0x18e>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	1e58      	subs	r0, r3, #1
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6859      	ldr	r1, [r3, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	0099      	lsls	r1, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	fbb0 f3f3 	udiv	r3, r0, r3
 800387a:	3301      	adds	r3, #1
 800387c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003880:	2b00      	cmp	r3, #0
 8003882:	bf0c      	ite	eq
 8003884:	2301      	moveq	r3, #1
 8003886:	2300      	movne	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_I2C_Init+0x196>
 800388e:	2301      	movs	r3, #1
 8003890:	e022      	b.n	80038d8 <HAL_I2C_Init+0x1dc>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10e      	bne.n	80038b8 <HAL_I2C_Init+0x1bc>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1e58      	subs	r0, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6859      	ldr	r1, [r3, #4]
 80038a2:	460b      	mov	r3, r1
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	440b      	add	r3, r1
 80038a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ac:	3301      	adds	r3, #1
 80038ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038b6:	e00f      	b.n	80038d8 <HAL_I2C_Init+0x1dc>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	1e58      	subs	r0, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6859      	ldr	r1, [r3, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	0099      	lsls	r1, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ce:	3301      	adds	r3, #1
 80038d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	6809      	ldr	r1, [r1, #0]
 80038dc:	4313      	orrs	r3, r2
 80038de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69da      	ldr	r2, [r3, #28]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003906:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6911      	ldr	r1, [r2, #16]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	68d2      	ldr	r2, [r2, #12]
 8003912:	4311      	orrs	r1, r2
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	430b      	orrs	r3, r1
 800391a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	695a      	ldr	r2, [r3, #20]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2220      	movs	r2, #32
 8003952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	000186a0 	.word	0x000186a0
 8003974:	001e847f 	.word	0x001e847f
 8003978:	003d08ff 	.word	0x003d08ff
 800397c:	431bde83 	.word	0x431bde83
 8003980:	10624dd3 	.word	0x10624dd3

08003984 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af02      	add	r7, sp, #8
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	607a      	str	r2, [r7, #4]
 800398e:	461a      	mov	r2, r3
 8003990:	460b      	mov	r3, r1
 8003992:	817b      	strh	r3, [r7, #10]
 8003994:	4613      	mov	r3, r2
 8003996:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003998:	f7ff fadc 	bl	8002f54 <HAL_GetTick>
 800399c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	f040 80e0 	bne.w	8003b6c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	2319      	movs	r3, #25
 80039b2:	2201      	movs	r2, #1
 80039b4:	4970      	ldr	r1, [pc, #448]	; (8003b78 <HAL_I2C_Master_Transmit+0x1f4>)
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 fa92 	bl	8003ee0 <I2C_WaitOnFlagUntilTimeout>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80039c2:	2302      	movs	r3, #2
 80039c4:	e0d3      	b.n	8003b6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_I2C_Master_Transmit+0x50>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e0cc      	b.n	8003b6e <HAL_I2C_Master_Transmit+0x1ea>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d007      	beq.n	80039fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f042 0201 	orr.w	r2, r2, #1
 80039f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2221      	movs	r2, #33	; 0x21
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2210      	movs	r2, #16
 8003a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	893a      	ldrh	r2, [r7, #8]
 8003a2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	4a50      	ldr	r2, [pc, #320]	; (8003b7c <HAL_I2C_Master_Transmit+0x1f8>)
 8003a3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a3c:	8979      	ldrh	r1, [r7, #10]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	6a3a      	ldr	r2, [r7, #32]
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 f9ca 	bl	8003ddc <I2C_MasterRequestWrite>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e08d      	b.n	8003b6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a52:	2300      	movs	r3, #0
 8003a54:	613b      	str	r3, [r7, #16]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	613b      	str	r3, [r7, #16]
 8003a66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a68:	e066      	b.n	8003b38 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	6a39      	ldr	r1, [r7, #32]
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 fb0c 	bl	800408c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00d      	beq.n	8003a96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d107      	bne.n	8003a92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e06b      	b.n	8003b6e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	781a      	ldrb	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d11b      	bne.n	8003b0c <HAL_I2C_Master_Transmit+0x188>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d017      	beq.n	8003b0c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	781a      	ldrb	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	1c5a      	adds	r2, r3, #1
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	6a39      	ldr	r1, [r7, #32]
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 fafc 	bl	800410e <I2C_WaitOnBTFFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00d      	beq.n	8003b38 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d107      	bne.n	8003b34 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e01a      	b.n	8003b6e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d194      	bne.n	8003a6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	e000      	b.n	8003b6e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b6c:	2302      	movs	r3, #2
  }
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3718      	adds	r7, #24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	00100002 	.word	0x00100002
 8003b7c:	ffff0000 	.word	0xffff0000

08003b80 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08a      	sub	sp, #40	; 0x28
 8003b84:	af02      	add	r7, sp, #8
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	607a      	str	r2, [r7, #4]
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003b90:	f7ff f9e0 	bl	8002f54 <HAL_GetTick>
 8003b94:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b20      	cmp	r3, #32
 8003ba4:	f040 8111 	bne.w	8003dca <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	2319      	movs	r3, #25
 8003bae:	2201      	movs	r2, #1
 8003bb0:	4988      	ldr	r1, [pc, #544]	; (8003dd4 <HAL_I2C_IsDeviceReady+0x254>)
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 f994 	bl	8003ee0 <I2C_WaitOnFlagUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e104      	b.n	8003dcc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <HAL_I2C_IsDeviceReady+0x50>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e0fd      	b.n	8003dcc <HAL_I2C_IsDeviceReady+0x24c>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d007      	beq.n	8003bf6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f042 0201 	orr.w	r2, r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2224      	movs	r2, #36	; 0x24
 8003c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4a70      	ldr	r2, [pc, #448]	; (8003dd8 <HAL_I2C_IsDeviceReady+0x258>)
 8003c18:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c28:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 f952 	bl	8003ee0 <I2C_WaitOnFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00d      	beq.n	8003c5e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c50:	d103      	bne.n	8003c5a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c58:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e0b6      	b.n	8003dcc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c5e:	897b      	ldrh	r3, [r7, #10]
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c6c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003c6e:	f7ff f971 	bl	8002f54 <HAL_GetTick>
 8003c72:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	bf0c      	ite	eq
 8003c82:	2301      	moveq	r3, #1
 8003c84:	2300      	movne	r3, #0
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c98:	bf0c      	ite	eq
 8003c9a:	2301      	moveq	r3, #1
 8003c9c:	2300      	movne	r3, #0
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003ca2:	e025      	b.n	8003cf0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ca4:	f7ff f956 	bl	8002f54 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d302      	bcc.n	8003cba <HAL_I2C_IsDeviceReady+0x13a>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d103      	bne.n	8003cc2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	22a0      	movs	r2, #160	; 0xa0
 8003cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	bf0c      	ite	eq
 8003cd0:	2301      	moveq	r3, #1
 8003cd2:	2300      	movne	r3, #0
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ce6:	bf0c      	ite	eq
 8003ce8:	2301      	moveq	r3, #1
 8003cea:	2300      	movne	r3, #0
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2ba0      	cmp	r3, #160	; 0xa0
 8003cfa:	d005      	beq.n	8003d08 <HAL_I2C_IsDeviceReady+0x188>
 8003cfc:	7dfb      	ldrb	r3, [r7, #23]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d102      	bne.n	8003d08 <HAL_I2C_IsDeviceReady+0x188>
 8003d02:	7dbb      	ldrb	r3, [r7, #22]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0cd      	beq.n	8003ca4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d129      	bne.n	8003d72 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d2c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d2e:	2300      	movs	r3, #0
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	613b      	str	r3, [r7, #16]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	613b      	str	r3, [r7, #16]
 8003d42:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	2319      	movs	r3, #25
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	4921      	ldr	r1, [pc, #132]	; (8003dd4 <HAL_I2C_IsDeviceReady+0x254>)
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 f8c6 	bl	8003ee0 <I2C_WaitOnFlagUntilTimeout>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e036      	b.n	8003dcc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2220      	movs	r2, #32
 8003d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	e02c      	b.n	8003dcc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d80:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d8a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	2319      	movs	r3, #25
 8003d92:	2201      	movs	r2, #1
 8003d94:	490f      	ldr	r1, [pc, #60]	; (8003dd4 <HAL_I2C_IsDeviceReady+0x254>)
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 f8a2 	bl	8003ee0 <I2C_WaitOnFlagUntilTimeout>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e012      	b.n	8003dcc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	3301      	adds	r3, #1
 8003daa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	f4ff af32 	bcc.w	8003c1a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2220      	movs	r2, #32
 8003dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e000      	b.n	8003dcc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003dca:	2302      	movs	r3, #2
  }
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3720      	adds	r7, #32
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	00100002 	.word	0x00100002
 8003dd8:	ffff0000 	.word	0xffff0000

08003ddc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b088      	sub	sp, #32
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	607a      	str	r2, [r7, #4]
 8003de6:	603b      	str	r3, [r7, #0]
 8003de8:	460b      	mov	r3, r1
 8003dea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d006      	beq.n	8003e06 <I2C_MasterRequestWrite+0x2a>
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d003      	beq.n	8003e06 <I2C_MasterRequestWrite+0x2a>
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e04:	d108      	bne.n	8003e18 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	e00b      	b.n	8003e30 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1c:	2b12      	cmp	r3, #18
 8003e1e:	d107      	bne.n	8003e30 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 f84f 	bl	8003ee0 <I2C_WaitOnFlagUntilTimeout>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00d      	beq.n	8003e64 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e56:	d103      	bne.n	8003e60 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e035      	b.n	8003ed0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e6c:	d108      	bne.n	8003e80 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e6e:	897b      	ldrh	r3, [r7, #10]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	461a      	mov	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e7c:	611a      	str	r2, [r3, #16]
 8003e7e:	e01b      	b.n	8003eb8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e80:	897b      	ldrh	r3, [r7, #10]
 8003e82:	11db      	asrs	r3, r3, #7
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	f003 0306 	and.w	r3, r3, #6
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	f063 030f 	orn	r3, r3, #15
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	490e      	ldr	r1, [pc, #56]	; (8003ed8 <I2C_MasterRequestWrite+0xfc>)
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f875 	bl	8003f8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e010      	b.n	8003ed0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003eae:	897b      	ldrh	r3, [r7, #10]
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	4907      	ldr	r1, [pc, #28]	; (8003edc <I2C_MasterRequestWrite+0x100>)
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 f865 	bl	8003f8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e000      	b.n	8003ed0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	00010008 	.word	0x00010008
 8003edc:	00010002 	.word	0x00010002

08003ee0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	603b      	str	r3, [r7, #0]
 8003eec:	4613      	mov	r3, r2
 8003eee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ef0:	e025      	b.n	8003f3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef8:	d021      	beq.n	8003f3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003efa:	f7ff f82b 	bl	8002f54 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d302      	bcc.n	8003f10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d116      	bne.n	8003f3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	f043 0220 	orr.w	r2, r3, #32
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e023      	b.n	8003f86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	0c1b      	lsrs	r3, r3, #16
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d10d      	bne.n	8003f64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	43da      	mvns	r2, r3
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	4013      	ands	r3, r2
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	bf0c      	ite	eq
 8003f5a:	2301      	moveq	r3, #1
 8003f5c:	2300      	movne	r3, #0
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	461a      	mov	r2, r3
 8003f62:	e00c      	b.n	8003f7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	43da      	mvns	r2, r3
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	bf0c      	ite	eq
 8003f76:	2301      	moveq	r3, #1
 8003f78:	2300      	movne	r3, #0
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	79fb      	ldrb	r3, [r7, #7]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d0b6      	beq.n	8003ef2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b084      	sub	sp, #16
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	60f8      	str	r0, [r7, #12]
 8003f96:	60b9      	str	r1, [r7, #8]
 8003f98:	607a      	str	r2, [r7, #4]
 8003f9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f9c:	e051      	b.n	8004042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fac:	d123      	bne.n	8003ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fbc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fc6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	f043 0204 	orr.w	r2, r3, #4
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e046      	b.n	8004084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffc:	d021      	beq.n	8004042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ffe:	f7fe ffa9 	bl	8002f54 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	429a      	cmp	r2, r3
 800400c:	d302      	bcc.n	8004014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d116      	bne.n	8004042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2220      	movs	r2, #32
 800401e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	f043 0220 	orr.w	r2, r3, #32
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e020      	b.n	8004084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	0c1b      	lsrs	r3, r3, #16
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b01      	cmp	r3, #1
 800404a:	d10c      	bne.n	8004066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	43da      	mvns	r2, r3
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	4013      	ands	r3, r2
 8004058:	b29b      	uxth	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	bf14      	ite	ne
 800405e:	2301      	movne	r3, #1
 8004060:	2300      	moveq	r3, #0
 8004062:	b2db      	uxtb	r3, r3
 8004064:	e00b      	b.n	800407e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	43da      	mvns	r2, r3
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	4013      	ands	r3, r2
 8004072:	b29b      	uxth	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	bf14      	ite	ne
 8004078:	2301      	movne	r3, #1
 800407a:	2300      	moveq	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d18d      	bne.n	8003f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004098:	e02d      	b.n	80040f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 f878 	bl	8004190 <I2C_IsAcknowledgeFailed>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e02d      	b.n	8004106 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b0:	d021      	beq.n	80040f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b2:	f7fe ff4f 	bl	8002f54 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d302      	bcc.n	80040c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d116      	bne.n	80040f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2220      	movs	r2, #32
 80040d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	f043 0220 	orr.w	r2, r3, #32
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e007      	b.n	8004106 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004100:	2b80      	cmp	r3, #128	; 0x80
 8004102:	d1ca      	bne.n	800409a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b084      	sub	sp, #16
 8004112:	af00      	add	r7, sp, #0
 8004114:	60f8      	str	r0, [r7, #12]
 8004116:	60b9      	str	r1, [r7, #8]
 8004118:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800411a:	e02d      	b.n	8004178 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 f837 	bl	8004190 <I2C_IsAcknowledgeFailed>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e02d      	b.n	8004188 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004132:	d021      	beq.n	8004178 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004134:	f7fe ff0e 	bl	8002f54 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	429a      	cmp	r2, r3
 8004142:	d302      	bcc.n	800414a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d116      	bne.n	8004178 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	f043 0220 	orr.w	r2, r3, #32
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e007      	b.n	8004188 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	2b04      	cmp	r3, #4
 8004184:	d1ca      	bne.n	800411c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a6:	d11b      	bne.n	80041e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2220      	movs	r2, #32
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041cc:	f043 0204 	orr.w	r2, r3, #4
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e000      	b.n	80041e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
	...

080041f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e267      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d075      	beq.n	80042fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800420e:	4b88      	ldr	r3, [pc, #544]	; (8004430 <HAL_RCC_OscConfig+0x240>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 030c 	and.w	r3, r3, #12
 8004216:	2b04      	cmp	r3, #4
 8004218:	d00c      	beq.n	8004234 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800421a:	4b85      	ldr	r3, [pc, #532]	; (8004430 <HAL_RCC_OscConfig+0x240>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004222:	2b08      	cmp	r3, #8
 8004224:	d112      	bne.n	800424c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004226:	4b82      	ldr	r3, [pc, #520]	; (8004430 <HAL_RCC_OscConfig+0x240>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800422e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004232:	d10b      	bne.n	800424c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004234:	4b7e      	ldr	r3, [pc, #504]	; (8004430 <HAL_RCC_OscConfig+0x240>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d05b      	beq.n	80042f8 <HAL_RCC_OscConfig+0x108>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d157      	bne.n	80042f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e242      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004254:	d106      	bne.n	8004264 <HAL_RCC_OscConfig+0x74>
 8004256:	4b76      	ldr	r3, [pc, #472]	; (8004430 <HAL_RCC_OscConfig+0x240>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a75      	ldr	r2, [pc, #468]	; (8004430 <HAL_RCC_OscConfig+0x240>)
 800425c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	e01d      	b.n	80042a0 <HAL_RCC_OscConfig+0xb0>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800426c:	d10c      	bne.n	8004288 <HAL_RCC_OscConfig+0x98>
 800426e:	4b70      	ldr	r3, [pc, #448]	; (8004430 <HAL_RCC_OscConfig+0x240>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a6f      	ldr	r2, [pc, #444]	; (8004430 <HAL_RCC_OscConfig+0x240>)
 8004274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	4b6d      	ldr	r3, [pc, #436]	; (8004430 <HAL_RCC_OscConfig+0x240>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a6c      	ldr	r2, [pc, #432]	; (8004430 <HAL_RCC_OscConfig+0x240>)
 8004280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	e00b      	b.n	80042a0 <HAL_RCC_OscConfig+0xb0>
 8004288:	4b69      	ldr	r3, [pc, #420]	; (8004430 <HAL_RCC_OscConfig+0x240>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a68      	ldr	r2, [pc, #416]	; (8004430 <HAL_RCC_OscConfig+0x240>)
 800428e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004292:	6013      	str	r3, [r2, #0]
 8004294:	4b66      	ldr	r3, [pc, #408]	; (8004430 <HAL_RCC_OscConfig+0x240>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a65      	ldr	r2, [pc, #404]	; (8004430 <HAL_RCC_OscConfig+0x240>)
 800429a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800429e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d013      	beq.n	80042d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a8:	f7fe fe54 	bl	8002f54 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042b0:	f7fe fe50 	bl	8002f54 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b64      	cmp	r3, #100	; 0x64
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e207      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c2:	4b5b      	ldr	r3, [pc, #364]	; (8004430 <HAL_RCC_OscConfig+0x240>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d0f0      	beq.n	80042b0 <HAL_RCC_OscConfig+0xc0>
 80042ce:	e014      	b.n	80042fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d0:	f7fe fe40 	bl	8002f54 <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042d8:	f7fe fe3c 	bl	8002f54 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b64      	cmp	r3, #100	; 0x64
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e1f3      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ea:	4b51      	ldr	r3, [pc, #324]	; (8004430 <HAL_RCC_OscConfig+0x240>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1f0      	bne.n	80042d8 <HAL_RCC_OscConfig+0xe8>
 80042f6:	e000      	b.n	80042fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d063      	beq.n	80043ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004306:	4b4a      	ldr	r3, [pc, #296]	; (8004430 <HAL_RCC_OscConfig+0x240>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 030c 	and.w	r3, r3, #12
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00b      	beq.n	800432a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004312:	4b47      	ldr	r3, [pc, #284]	; (8004430 <HAL_RCC_OscConfig+0x240>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800431a:	2b08      	cmp	r3, #8
 800431c:	d11c      	bne.n	8004358 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800431e:	4b44      	ldr	r3, [pc, #272]	; (8004430 <HAL_RCC_OscConfig+0x240>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d116      	bne.n	8004358 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800432a:	4b41      	ldr	r3, [pc, #260]	; (8004430 <HAL_RCC_OscConfig+0x240>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d005      	beq.n	8004342 <HAL_RCC_OscConfig+0x152>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d001      	beq.n	8004342 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e1c7      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004342:	4b3b      	ldr	r3, [pc, #236]	; (8004430 <HAL_RCC_OscConfig+0x240>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	4937      	ldr	r1, [pc, #220]	; (8004430 <HAL_RCC_OscConfig+0x240>)
 8004352:	4313      	orrs	r3, r2
 8004354:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004356:	e03a      	b.n	80043ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d020      	beq.n	80043a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004360:	4b34      	ldr	r3, [pc, #208]	; (8004434 <HAL_RCC_OscConfig+0x244>)
 8004362:	2201      	movs	r2, #1
 8004364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004366:	f7fe fdf5 	bl	8002f54 <HAL_GetTick>
 800436a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800436c:	e008      	b.n	8004380 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800436e:	f7fe fdf1 	bl	8002f54 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e1a8      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004380:	4b2b      	ldr	r3, [pc, #172]	; (8004430 <HAL_RCC_OscConfig+0x240>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d0f0      	beq.n	800436e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800438c:	4b28      	ldr	r3, [pc, #160]	; (8004430 <HAL_RCC_OscConfig+0x240>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	4925      	ldr	r1, [pc, #148]	; (8004430 <HAL_RCC_OscConfig+0x240>)
 800439c:	4313      	orrs	r3, r2
 800439e:	600b      	str	r3, [r1, #0]
 80043a0:	e015      	b.n	80043ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043a2:	4b24      	ldr	r3, [pc, #144]	; (8004434 <HAL_RCC_OscConfig+0x244>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a8:	f7fe fdd4 	bl	8002f54 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043b0:	f7fe fdd0 	bl	8002f54 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e187      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043c2:	4b1b      	ldr	r3, [pc, #108]	; (8004430 <HAL_RCC_OscConfig+0x240>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f0      	bne.n	80043b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0308 	and.w	r3, r3, #8
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d036      	beq.n	8004448 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d016      	beq.n	8004410 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043e2:	4b15      	ldr	r3, [pc, #84]	; (8004438 <HAL_RCC_OscConfig+0x248>)
 80043e4:	2201      	movs	r2, #1
 80043e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e8:	f7fe fdb4 	bl	8002f54 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043f0:	f7fe fdb0 	bl	8002f54 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e167      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004402:	4b0b      	ldr	r3, [pc, #44]	; (8004430 <HAL_RCC_OscConfig+0x240>)
 8004404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0f0      	beq.n	80043f0 <HAL_RCC_OscConfig+0x200>
 800440e:	e01b      	b.n	8004448 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004410:	4b09      	ldr	r3, [pc, #36]	; (8004438 <HAL_RCC_OscConfig+0x248>)
 8004412:	2200      	movs	r2, #0
 8004414:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004416:	f7fe fd9d 	bl	8002f54 <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800441c:	e00e      	b.n	800443c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800441e:	f7fe fd99 	bl	8002f54 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d907      	bls.n	800443c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e150      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
 8004430:	40023800 	.word	0x40023800
 8004434:	42470000 	.word	0x42470000
 8004438:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800443c:	4b88      	ldr	r3, [pc, #544]	; (8004660 <HAL_RCC_OscConfig+0x470>)
 800443e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1ea      	bne.n	800441e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 8097 	beq.w	8004584 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004456:	2300      	movs	r3, #0
 8004458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800445a:	4b81      	ldr	r3, [pc, #516]	; (8004660 <HAL_RCC_OscConfig+0x470>)
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10f      	bne.n	8004486 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004466:	2300      	movs	r3, #0
 8004468:	60bb      	str	r3, [r7, #8]
 800446a:	4b7d      	ldr	r3, [pc, #500]	; (8004660 <HAL_RCC_OscConfig+0x470>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	4a7c      	ldr	r2, [pc, #496]	; (8004660 <HAL_RCC_OscConfig+0x470>)
 8004470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004474:	6413      	str	r3, [r2, #64]	; 0x40
 8004476:	4b7a      	ldr	r3, [pc, #488]	; (8004660 <HAL_RCC_OscConfig+0x470>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447e:	60bb      	str	r3, [r7, #8]
 8004480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004482:	2301      	movs	r3, #1
 8004484:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004486:	4b77      	ldr	r3, [pc, #476]	; (8004664 <HAL_RCC_OscConfig+0x474>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448e:	2b00      	cmp	r3, #0
 8004490:	d118      	bne.n	80044c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004492:	4b74      	ldr	r3, [pc, #464]	; (8004664 <HAL_RCC_OscConfig+0x474>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a73      	ldr	r2, [pc, #460]	; (8004664 <HAL_RCC_OscConfig+0x474>)
 8004498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800449c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800449e:	f7fe fd59 	bl	8002f54 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a4:	e008      	b.n	80044b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a6:	f7fe fd55 	bl	8002f54 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e10c      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b8:	4b6a      	ldr	r3, [pc, #424]	; (8004664 <HAL_RCC_OscConfig+0x474>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0f0      	beq.n	80044a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d106      	bne.n	80044da <HAL_RCC_OscConfig+0x2ea>
 80044cc:	4b64      	ldr	r3, [pc, #400]	; (8004660 <HAL_RCC_OscConfig+0x470>)
 80044ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d0:	4a63      	ldr	r2, [pc, #396]	; (8004660 <HAL_RCC_OscConfig+0x470>)
 80044d2:	f043 0301 	orr.w	r3, r3, #1
 80044d6:	6713      	str	r3, [r2, #112]	; 0x70
 80044d8:	e01c      	b.n	8004514 <HAL_RCC_OscConfig+0x324>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	2b05      	cmp	r3, #5
 80044e0:	d10c      	bne.n	80044fc <HAL_RCC_OscConfig+0x30c>
 80044e2:	4b5f      	ldr	r3, [pc, #380]	; (8004660 <HAL_RCC_OscConfig+0x470>)
 80044e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e6:	4a5e      	ldr	r2, [pc, #376]	; (8004660 <HAL_RCC_OscConfig+0x470>)
 80044e8:	f043 0304 	orr.w	r3, r3, #4
 80044ec:	6713      	str	r3, [r2, #112]	; 0x70
 80044ee:	4b5c      	ldr	r3, [pc, #368]	; (8004660 <HAL_RCC_OscConfig+0x470>)
 80044f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f2:	4a5b      	ldr	r2, [pc, #364]	; (8004660 <HAL_RCC_OscConfig+0x470>)
 80044f4:	f043 0301 	orr.w	r3, r3, #1
 80044f8:	6713      	str	r3, [r2, #112]	; 0x70
 80044fa:	e00b      	b.n	8004514 <HAL_RCC_OscConfig+0x324>
 80044fc:	4b58      	ldr	r3, [pc, #352]	; (8004660 <HAL_RCC_OscConfig+0x470>)
 80044fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004500:	4a57      	ldr	r2, [pc, #348]	; (8004660 <HAL_RCC_OscConfig+0x470>)
 8004502:	f023 0301 	bic.w	r3, r3, #1
 8004506:	6713      	str	r3, [r2, #112]	; 0x70
 8004508:	4b55      	ldr	r3, [pc, #340]	; (8004660 <HAL_RCC_OscConfig+0x470>)
 800450a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450c:	4a54      	ldr	r2, [pc, #336]	; (8004660 <HAL_RCC_OscConfig+0x470>)
 800450e:	f023 0304 	bic.w	r3, r3, #4
 8004512:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d015      	beq.n	8004548 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800451c:	f7fe fd1a 	bl	8002f54 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004522:	e00a      	b.n	800453a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004524:	f7fe fd16 	bl	8002f54 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004532:	4293      	cmp	r3, r2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e0cb      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453a:	4b49      	ldr	r3, [pc, #292]	; (8004660 <HAL_RCC_OscConfig+0x470>)
 800453c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0ee      	beq.n	8004524 <HAL_RCC_OscConfig+0x334>
 8004546:	e014      	b.n	8004572 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004548:	f7fe fd04 	bl	8002f54 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800454e:	e00a      	b.n	8004566 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004550:	f7fe fd00 	bl	8002f54 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	f241 3288 	movw	r2, #5000	; 0x1388
 800455e:	4293      	cmp	r3, r2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e0b5      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004566:	4b3e      	ldr	r3, [pc, #248]	; (8004660 <HAL_RCC_OscConfig+0x470>)
 8004568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1ee      	bne.n	8004550 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004572:	7dfb      	ldrb	r3, [r7, #23]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d105      	bne.n	8004584 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004578:	4b39      	ldr	r3, [pc, #228]	; (8004660 <HAL_RCC_OscConfig+0x470>)
 800457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457c:	4a38      	ldr	r2, [pc, #224]	; (8004660 <HAL_RCC_OscConfig+0x470>)
 800457e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004582:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 80a1 	beq.w	80046d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800458e:	4b34      	ldr	r3, [pc, #208]	; (8004660 <HAL_RCC_OscConfig+0x470>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 030c 	and.w	r3, r3, #12
 8004596:	2b08      	cmp	r3, #8
 8004598:	d05c      	beq.n	8004654 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d141      	bne.n	8004626 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a2:	4b31      	ldr	r3, [pc, #196]	; (8004668 <HAL_RCC_OscConfig+0x478>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a8:	f7fe fcd4 	bl	8002f54 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045b0:	f7fe fcd0 	bl	8002f54 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e087      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c2:	4b27      	ldr	r3, [pc, #156]	; (8004660 <HAL_RCC_OscConfig+0x470>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1f0      	bne.n	80045b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	69da      	ldr	r2, [r3, #28]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	019b      	lsls	r3, r3, #6
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e4:	085b      	lsrs	r3, r3, #1
 80045e6:	3b01      	subs	r3, #1
 80045e8:	041b      	lsls	r3, r3, #16
 80045ea:	431a      	orrs	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f0:	061b      	lsls	r3, r3, #24
 80045f2:	491b      	ldr	r1, [pc, #108]	; (8004660 <HAL_RCC_OscConfig+0x470>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045f8:	4b1b      	ldr	r3, [pc, #108]	; (8004668 <HAL_RCC_OscConfig+0x478>)
 80045fa:	2201      	movs	r2, #1
 80045fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fe:	f7fe fca9 	bl	8002f54 <HAL_GetTick>
 8004602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004604:	e008      	b.n	8004618 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004606:	f7fe fca5 	bl	8002f54 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e05c      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004618:	4b11      	ldr	r3, [pc, #68]	; (8004660 <HAL_RCC_OscConfig+0x470>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0f0      	beq.n	8004606 <HAL_RCC_OscConfig+0x416>
 8004624:	e054      	b.n	80046d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004626:	4b10      	ldr	r3, [pc, #64]	; (8004668 <HAL_RCC_OscConfig+0x478>)
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462c:	f7fe fc92 	bl	8002f54 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004634:	f7fe fc8e 	bl	8002f54 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e045      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004646:	4b06      	ldr	r3, [pc, #24]	; (8004660 <HAL_RCC_OscConfig+0x470>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f0      	bne.n	8004634 <HAL_RCC_OscConfig+0x444>
 8004652:	e03d      	b.n	80046d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d107      	bne.n	800466c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e038      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
 8004660:	40023800 	.word	0x40023800
 8004664:	40007000 	.word	0x40007000
 8004668:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800466c:	4b1b      	ldr	r3, [pc, #108]	; (80046dc <HAL_RCC_OscConfig+0x4ec>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d028      	beq.n	80046cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004684:	429a      	cmp	r2, r3
 8004686:	d121      	bne.n	80046cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004692:	429a      	cmp	r2, r3
 8004694:	d11a      	bne.n	80046cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800469c:	4013      	ands	r3, r2
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d111      	bne.n	80046cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b2:	085b      	lsrs	r3, r3, #1
 80046b4:	3b01      	subs	r3, #1
 80046b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d107      	bne.n	80046cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d001      	beq.n	80046d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e000      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40023800 	.word	0x40023800

080046e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e0cc      	b.n	800488e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046f4:	4b68      	ldr	r3, [pc, #416]	; (8004898 <HAL_RCC_ClockConfig+0x1b8>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d90c      	bls.n	800471c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004702:	4b65      	ldr	r3, [pc, #404]	; (8004898 <HAL_RCC_ClockConfig+0x1b8>)
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800470a:	4b63      	ldr	r3, [pc, #396]	; (8004898 <HAL_RCC_ClockConfig+0x1b8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	429a      	cmp	r2, r3
 8004716:	d001      	beq.n	800471c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e0b8      	b.n	800488e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d020      	beq.n	800476a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004734:	4b59      	ldr	r3, [pc, #356]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	4a58      	ldr	r2, [pc, #352]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 800473a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800473e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b00      	cmp	r3, #0
 800474a:	d005      	beq.n	8004758 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800474c:	4b53      	ldr	r3, [pc, #332]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	4a52      	ldr	r2, [pc, #328]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 8004752:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004756:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004758:	4b50      	ldr	r3, [pc, #320]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	494d      	ldr	r1, [pc, #308]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	4313      	orrs	r3, r2
 8004768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d044      	beq.n	8004800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d107      	bne.n	800478e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800477e:	4b47      	ldr	r3, [pc, #284]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d119      	bne.n	80047be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e07f      	b.n	800488e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2b02      	cmp	r3, #2
 8004794:	d003      	beq.n	800479e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800479a:	2b03      	cmp	r3, #3
 800479c:	d107      	bne.n	80047ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800479e:	4b3f      	ldr	r3, [pc, #252]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d109      	bne.n	80047be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e06f      	b.n	800488e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ae:	4b3b      	ldr	r3, [pc, #236]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e067      	b.n	800488e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047be:	4b37      	ldr	r3, [pc, #220]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f023 0203 	bic.w	r2, r3, #3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	4934      	ldr	r1, [pc, #208]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047d0:	f7fe fbc0 	bl	8002f54 <HAL_GetTick>
 80047d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d6:	e00a      	b.n	80047ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047d8:	f7fe fbbc 	bl	8002f54 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e04f      	b.n	800488e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ee:	4b2b      	ldr	r3, [pc, #172]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 020c 	and.w	r2, r3, #12
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d1eb      	bne.n	80047d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004800:	4b25      	ldr	r3, [pc, #148]	; (8004898 <HAL_RCC_ClockConfig+0x1b8>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	429a      	cmp	r2, r3
 800480c:	d20c      	bcs.n	8004828 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800480e:	4b22      	ldr	r3, [pc, #136]	; (8004898 <HAL_RCC_ClockConfig+0x1b8>)
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004816:	4b20      	ldr	r3, [pc, #128]	; (8004898 <HAL_RCC_ClockConfig+0x1b8>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0307 	and.w	r3, r3, #7
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	429a      	cmp	r2, r3
 8004822:	d001      	beq.n	8004828 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e032      	b.n	800488e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b00      	cmp	r3, #0
 8004832:	d008      	beq.n	8004846 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004834:	4b19      	ldr	r3, [pc, #100]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	4916      	ldr	r1, [pc, #88]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 8004842:	4313      	orrs	r3, r2
 8004844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0308 	and.w	r3, r3, #8
 800484e:	2b00      	cmp	r3, #0
 8004850:	d009      	beq.n	8004866 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004852:	4b12      	ldr	r3, [pc, #72]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	490e      	ldr	r1, [pc, #56]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 8004862:	4313      	orrs	r3, r2
 8004864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004866:	f000 f821 	bl	80048ac <HAL_RCC_GetSysClockFreq>
 800486a:	4602      	mov	r2, r0
 800486c:	4b0b      	ldr	r3, [pc, #44]	; (800489c <HAL_RCC_ClockConfig+0x1bc>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	091b      	lsrs	r3, r3, #4
 8004872:	f003 030f 	and.w	r3, r3, #15
 8004876:	490a      	ldr	r1, [pc, #40]	; (80048a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004878:	5ccb      	ldrb	r3, [r1, r3]
 800487a:	fa22 f303 	lsr.w	r3, r2, r3
 800487e:	4a09      	ldr	r2, [pc, #36]	; (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004882:	4b09      	ldr	r3, [pc, #36]	; (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f7fe fb20 	bl	8002ecc <HAL_InitTick>

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	40023c00 	.word	0x40023c00
 800489c:	40023800 	.word	0x40023800
 80048a0:	0800b010 	.word	0x0800b010
 80048a4:	20000028 	.word	0x20000028
 80048a8:	2000002c 	.word	0x2000002c

080048ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048b0:	b090      	sub	sp, #64	; 0x40
 80048b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	637b      	str	r3, [r7, #52]	; 0x34
 80048b8:	2300      	movs	r3, #0
 80048ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048bc:	2300      	movs	r3, #0
 80048be:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048c4:	4b59      	ldr	r3, [pc, #356]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x180>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 030c 	and.w	r3, r3, #12
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d00d      	beq.n	80048ec <HAL_RCC_GetSysClockFreq+0x40>
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	f200 80a1 	bhi.w	8004a18 <HAL_RCC_GetSysClockFreq+0x16c>
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d002      	beq.n	80048e0 <HAL_RCC_GetSysClockFreq+0x34>
 80048da:	2b04      	cmp	r3, #4
 80048dc:	d003      	beq.n	80048e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80048de:	e09b      	b.n	8004a18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048e0:	4b53      	ldr	r3, [pc, #332]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x184>)
 80048e2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80048e4:	e09b      	b.n	8004a1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048e6:	4b53      	ldr	r3, [pc, #332]	; (8004a34 <HAL_RCC_GetSysClockFreq+0x188>)
 80048e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80048ea:	e098      	b.n	8004a1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048ec:	4b4f      	ldr	r3, [pc, #316]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x180>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048f4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048f6:	4b4d      	ldr	r3, [pc, #308]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x180>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d028      	beq.n	8004954 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004902:	4b4a      	ldr	r3, [pc, #296]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x180>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	099b      	lsrs	r3, r3, #6
 8004908:	2200      	movs	r2, #0
 800490a:	623b      	str	r3, [r7, #32]
 800490c:	627a      	str	r2, [r7, #36]	; 0x24
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004914:	2100      	movs	r1, #0
 8004916:	4b47      	ldr	r3, [pc, #284]	; (8004a34 <HAL_RCC_GetSysClockFreq+0x188>)
 8004918:	fb03 f201 	mul.w	r2, r3, r1
 800491c:	2300      	movs	r3, #0
 800491e:	fb00 f303 	mul.w	r3, r0, r3
 8004922:	4413      	add	r3, r2
 8004924:	4a43      	ldr	r2, [pc, #268]	; (8004a34 <HAL_RCC_GetSysClockFreq+0x188>)
 8004926:	fba0 1202 	umull	r1, r2, r0, r2
 800492a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800492c:	460a      	mov	r2, r1
 800492e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004932:	4413      	add	r3, r2
 8004934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004938:	2200      	movs	r2, #0
 800493a:	61bb      	str	r3, [r7, #24]
 800493c:	61fa      	str	r2, [r7, #28]
 800493e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004942:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004946:	f7fc f9a7 	bl	8000c98 <__aeabi_uldivmod>
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	4613      	mov	r3, r2
 8004950:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004952:	e053      	b.n	80049fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004954:	4b35      	ldr	r3, [pc, #212]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x180>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	099b      	lsrs	r3, r3, #6
 800495a:	2200      	movs	r2, #0
 800495c:	613b      	str	r3, [r7, #16]
 800495e:	617a      	str	r2, [r7, #20]
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004966:	f04f 0b00 	mov.w	fp, #0
 800496a:	4652      	mov	r2, sl
 800496c:	465b      	mov	r3, fp
 800496e:	f04f 0000 	mov.w	r0, #0
 8004972:	f04f 0100 	mov.w	r1, #0
 8004976:	0159      	lsls	r1, r3, #5
 8004978:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800497c:	0150      	lsls	r0, r2, #5
 800497e:	4602      	mov	r2, r0
 8004980:	460b      	mov	r3, r1
 8004982:	ebb2 080a 	subs.w	r8, r2, sl
 8004986:	eb63 090b 	sbc.w	r9, r3, fp
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004996:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800499a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800499e:	ebb2 0408 	subs.w	r4, r2, r8
 80049a2:	eb63 0509 	sbc.w	r5, r3, r9
 80049a6:	f04f 0200 	mov.w	r2, #0
 80049aa:	f04f 0300 	mov.w	r3, #0
 80049ae:	00eb      	lsls	r3, r5, #3
 80049b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049b4:	00e2      	lsls	r2, r4, #3
 80049b6:	4614      	mov	r4, r2
 80049b8:	461d      	mov	r5, r3
 80049ba:	eb14 030a 	adds.w	r3, r4, sl
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	eb45 030b 	adc.w	r3, r5, fp
 80049c4:	607b      	str	r3, [r7, #4]
 80049c6:	f04f 0200 	mov.w	r2, #0
 80049ca:	f04f 0300 	mov.w	r3, #0
 80049ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049d2:	4629      	mov	r1, r5
 80049d4:	028b      	lsls	r3, r1, #10
 80049d6:	4621      	mov	r1, r4
 80049d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049dc:	4621      	mov	r1, r4
 80049de:	028a      	lsls	r2, r1, #10
 80049e0:	4610      	mov	r0, r2
 80049e2:	4619      	mov	r1, r3
 80049e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e6:	2200      	movs	r2, #0
 80049e8:	60bb      	str	r3, [r7, #8]
 80049ea:	60fa      	str	r2, [r7, #12]
 80049ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049f0:	f7fc f952 	bl	8000c98 <__aeabi_uldivmod>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	4613      	mov	r3, r2
 80049fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049fc:	4b0b      	ldr	r3, [pc, #44]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x180>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	0c1b      	lsrs	r3, r3, #16
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	3301      	adds	r3, #1
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004a0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a16:	e002      	b.n	8004a1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a18:	4b05      	ldr	r3, [pc, #20]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a1a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3740      	adds	r7, #64	; 0x40
 8004a24:	46bd      	mov	sp, r7
 8004a26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	00f42400 	.word	0x00f42400
 8004a34:	018cba80 	.word	0x018cba80

08004a38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a3c:	4b03      	ldr	r3, [pc, #12]	; (8004a4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	20000028 	.word	0x20000028

08004a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a54:	f7ff fff0 	bl	8004a38 <HAL_RCC_GetHCLKFreq>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	0a9b      	lsrs	r3, r3, #10
 8004a60:	f003 0307 	and.w	r3, r3, #7
 8004a64:	4903      	ldr	r1, [pc, #12]	; (8004a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a66:	5ccb      	ldrb	r3, [r1, r3]
 8004a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	40023800 	.word	0x40023800
 8004a74:	0800b020 	.word	0x0800b020

08004a78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a7c:	f7ff ffdc 	bl	8004a38 <HAL_RCC_GetHCLKFreq>
 8004a80:	4602      	mov	r2, r0
 8004a82:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	0b5b      	lsrs	r3, r3, #13
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	4903      	ldr	r1, [pc, #12]	; (8004a9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a8e:	5ccb      	ldrb	r3, [r1, r3]
 8004a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	0800b020 	.word	0x0800b020

08004aa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e07b      	b.n	8004baa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d108      	bne.n	8004acc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ac2:	d009      	beq.n	8004ad8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	61da      	str	r2, [r3, #28]
 8004aca:	e005      	b.n	8004ad8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d106      	bne.n	8004af8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7fd ff98 	bl	8002a28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b20:	431a      	orrs	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	431a      	orrs	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5c:	ea42 0103 	orr.w	r1, r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b64:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	0c1b      	lsrs	r3, r3, #16
 8004b76:	f003 0104 	and.w	r1, r3, #4
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	f003 0210 	and.w	r2, r3, #16
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69da      	ldr	r2, [r3, #28]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b088      	sub	sp, #32
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	60f8      	str	r0, [r7, #12]
 8004bba:	60b9      	str	r1, [r7, #8]
 8004bbc:	603b      	str	r3, [r7, #0]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d101      	bne.n	8004bd4 <HAL_SPI_Transmit+0x22>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	e126      	b.n	8004e22 <HAL_SPI_Transmit+0x270>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bdc:	f7fe f9ba 	bl	8002f54 <HAL_GetTick>
 8004be0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004be2:	88fb      	ldrh	r3, [r7, #6]
 8004be4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d002      	beq.n	8004bf8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004bf6:	e10b      	b.n	8004e10 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <HAL_SPI_Transmit+0x52>
 8004bfe:	88fb      	ldrh	r3, [r7, #6]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d102      	bne.n	8004c0a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c08:	e102      	b.n	8004e10 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2203      	movs	r2, #3
 8004c0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	88fa      	ldrh	r2, [r7, #6]
 8004c22:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	88fa      	ldrh	r2, [r7, #6]
 8004c28:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c50:	d10f      	bne.n	8004c72 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7c:	2b40      	cmp	r3, #64	; 0x40
 8004c7e:	d007      	beq.n	8004c90 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c98:	d14b      	bne.n	8004d32 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <HAL_SPI_Transmit+0xf6>
 8004ca2:	8afb      	ldrh	r3, [r7, #22]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d13e      	bne.n	8004d26 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cac:	881a      	ldrh	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb8:	1c9a      	adds	r2, r3, #2
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ccc:	e02b      	b.n	8004d26 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d112      	bne.n	8004d02 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce0:	881a      	ldrh	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cec:	1c9a      	adds	r2, r3, #2
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d00:	e011      	b.n	8004d26 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d02:	f7fe f927 	bl	8002f54 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d803      	bhi.n	8004d1a <HAL_SPI_Transmit+0x168>
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d18:	d102      	bne.n	8004d20 <HAL_SPI_Transmit+0x16e>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d102      	bne.n	8004d26 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d24:	e074      	b.n	8004e10 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1ce      	bne.n	8004cce <HAL_SPI_Transmit+0x11c>
 8004d30:	e04c      	b.n	8004dcc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d002      	beq.n	8004d40 <HAL_SPI_Transmit+0x18e>
 8004d3a:	8afb      	ldrh	r3, [r7, #22]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d140      	bne.n	8004dc2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	330c      	adds	r3, #12
 8004d4a:	7812      	ldrb	r2, [r2, #0]
 8004d4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d52:	1c5a      	adds	r2, r3, #1
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004d66:	e02c      	b.n	8004dc2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d113      	bne.n	8004d9e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	330c      	adds	r3, #12
 8004d80:	7812      	ldrb	r2, [r2, #0]
 8004d82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d88:	1c5a      	adds	r2, r3, #1
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d9c:	e011      	b.n	8004dc2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d9e:	f7fe f8d9 	bl	8002f54 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d803      	bhi.n	8004db6 <HAL_SPI_Transmit+0x204>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db4:	d102      	bne.n	8004dbc <HAL_SPI_Transmit+0x20a>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d102      	bne.n	8004dc2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004dc0:	e026      	b.n	8004e10 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1cd      	bne.n	8004d68 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	6839      	ldr	r1, [r7, #0]
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 f8c1 	bl	8004f58 <SPI_EndRxTxTransaction>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d002      	beq.n	8004de2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2220      	movs	r2, #32
 8004de0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10a      	bne.n	8004e00 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dea:	2300      	movs	r3, #0
 8004dec:	613b      	str	r3, [r7, #16]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	613b      	str	r3, [r7, #16]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	613b      	str	r3, [r7, #16]
 8004dfe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	77fb      	strb	r3, [r7, #31]
 8004e0c:	e000      	b.n	8004e10 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004e0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e20:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3720      	adds	r7, #32
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e38:	b2db      	uxtb	r3, r3
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
	...

08004e48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b088      	sub	sp, #32
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	603b      	str	r3, [r7, #0]
 8004e54:	4613      	mov	r3, r2
 8004e56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e58:	f7fe f87c 	bl	8002f54 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e60:	1a9b      	subs	r3, r3, r2
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	4413      	add	r3, r2
 8004e66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e68:	f7fe f874 	bl	8002f54 <HAL_GetTick>
 8004e6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e6e:	4b39      	ldr	r3, [pc, #228]	; (8004f54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	015b      	lsls	r3, r3, #5
 8004e74:	0d1b      	lsrs	r3, r3, #20
 8004e76:	69fa      	ldr	r2, [r7, #28]
 8004e78:	fb02 f303 	mul.w	r3, r2, r3
 8004e7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e7e:	e054      	b.n	8004f2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e86:	d050      	beq.n	8004f2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e88:	f7fe f864 	bl	8002f54 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	69fa      	ldr	r2, [r7, #28]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d902      	bls.n	8004e9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d13d      	bne.n	8004f1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004eac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eb6:	d111      	bne.n	8004edc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ec0:	d004      	beq.n	8004ecc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eca:	d107      	bne.n	8004edc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ee4:	d10f      	bne.n	8004f06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e017      	b.n	8004f4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689a      	ldr	r2, [r3, #8]
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	4013      	ands	r3, r2
 8004f34:	68ba      	ldr	r2, [r7, #8]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	bf0c      	ite	eq
 8004f3a:	2301      	moveq	r3, #1
 8004f3c:	2300      	movne	r3, #0
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	461a      	mov	r2, r3
 8004f42:	79fb      	ldrb	r3, [r7, #7]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d19b      	bne.n	8004e80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3720      	adds	r7, #32
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	20000028 	.word	0x20000028

08004f58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b088      	sub	sp, #32
 8004f5c:	af02      	add	r7, sp, #8
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f64:	4b1b      	ldr	r3, [pc, #108]	; (8004fd4 <SPI_EndRxTxTransaction+0x7c>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a1b      	ldr	r2, [pc, #108]	; (8004fd8 <SPI_EndRxTxTransaction+0x80>)
 8004f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6e:	0d5b      	lsrs	r3, r3, #21
 8004f70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f74:	fb02 f303 	mul.w	r3, r2, r3
 8004f78:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f82:	d112      	bne.n	8004faa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	2180      	movs	r1, #128	; 0x80
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f7ff ff5a 	bl	8004e48 <SPI_WaitFlagStateUntilTimeout>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d016      	beq.n	8004fc8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9e:	f043 0220 	orr.w	r2, r3, #32
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e00f      	b.n	8004fca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00a      	beq.n	8004fc6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc0:	2b80      	cmp	r3, #128	; 0x80
 8004fc2:	d0f2      	beq.n	8004faa <SPI_EndRxTxTransaction+0x52>
 8004fc4:	e000      	b.n	8004fc8 <SPI_EndRxTxTransaction+0x70>
        break;
 8004fc6:	bf00      	nop
  }

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	20000028 	.word	0x20000028
 8004fd8:	165e9f81 	.word	0x165e9f81

08004fdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e03f      	b.n	800506e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d106      	bne.n	8005008 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7fd fec6 	bl	8002d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2224      	movs	r2, #36	; 0x24
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800501e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 fd7b 	bl	8005b1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005034:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	695a      	ldr	r2, [r3, #20]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005044:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005054:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2220      	movs	r2, #32
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2220      	movs	r2, #32
 8005068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b08a      	sub	sp, #40	; 0x28
 800507a:	af02      	add	r7, sp, #8
 800507c:	60f8      	str	r0, [r7, #12]
 800507e:	60b9      	str	r1, [r7, #8]
 8005080:	603b      	str	r3, [r7, #0]
 8005082:	4613      	mov	r3, r2
 8005084:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b20      	cmp	r3, #32
 8005094:	d17c      	bne.n	8005190 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <HAL_UART_Transmit+0x2c>
 800509c:	88fb      	ldrh	r3, [r7, #6]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e075      	b.n	8005192 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d101      	bne.n	80050b4 <HAL_UART_Transmit+0x3e>
 80050b0:	2302      	movs	r3, #2
 80050b2:	e06e      	b.n	8005192 <HAL_UART_Transmit+0x11c>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2221      	movs	r2, #33	; 0x21
 80050c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050ca:	f7fd ff43 	bl	8002f54 <HAL_GetTick>
 80050ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	88fa      	ldrh	r2, [r7, #6]
 80050d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	88fa      	ldrh	r2, [r7, #6]
 80050da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e4:	d108      	bne.n	80050f8 <HAL_UART_Transmit+0x82>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d104      	bne.n	80050f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80050ee:	2300      	movs	r3, #0
 80050f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	61bb      	str	r3, [r7, #24]
 80050f6:	e003      	b.n	8005100 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050fc:	2300      	movs	r3, #0
 80050fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005108:	e02a      	b.n	8005160 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	2200      	movs	r2, #0
 8005112:	2180      	movs	r1, #128	; 0x80
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 faf9 	bl	800570c <UART_WaitOnFlagUntilTimeout>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e036      	b.n	8005192 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d10b      	bne.n	8005142 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	461a      	mov	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005138:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	3302      	adds	r3, #2
 800513e:	61bb      	str	r3, [r7, #24]
 8005140:	e007      	b.n	8005152 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	781a      	ldrb	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	3301      	adds	r3, #1
 8005150:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005156:	b29b      	uxth	r3, r3
 8005158:	3b01      	subs	r3, #1
 800515a:	b29a      	uxth	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005164:	b29b      	uxth	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1cf      	bne.n	800510a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2200      	movs	r2, #0
 8005172:	2140      	movs	r1, #64	; 0x40
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 fac9 	bl	800570c <UART_WaitOnFlagUntilTimeout>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e006      	b.n	8005192 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2220      	movs	r2, #32
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800518c:	2300      	movs	r3, #0
 800518e:	e000      	b.n	8005192 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005190:	2302      	movs	r3, #2
  }
}
 8005192:	4618      	mov	r0, r3
 8005194:	3720      	adds	r7, #32
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
	...

0800519c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b0ba      	sub	sp, #232	; 0xe8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80051da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10f      	bne.n	8005202 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051e6:	f003 0320 	and.w	r3, r3, #32
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d009      	beq.n	8005202 <HAL_UART_IRQHandler+0x66>
 80051ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051f2:	f003 0320 	and.w	r3, r3, #32
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fbd3 	bl	80059a6 <UART_Receive_IT>
      return;
 8005200:	e256      	b.n	80056b0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005202:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 80de 	beq.w	80053c8 <HAL_UART_IRQHandler+0x22c>
 800520c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	2b00      	cmp	r3, #0
 8005216:	d106      	bne.n	8005226 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800521c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 80d1 	beq.w	80053c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00b      	beq.n	800524a <HAL_UART_IRQHandler+0xae>
 8005232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800523a:	2b00      	cmp	r3, #0
 800523c:	d005      	beq.n	800524a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	f043 0201 	orr.w	r2, r3, #1
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800524a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800524e:	f003 0304 	and.w	r3, r3, #4
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00b      	beq.n	800526e <HAL_UART_IRQHandler+0xd2>
 8005256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d005      	beq.n	800526e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	f043 0202 	orr.w	r2, r3, #2
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800526e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00b      	beq.n	8005292 <HAL_UART_IRQHandler+0xf6>
 800527a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d005      	beq.n	8005292 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	f043 0204 	orr.w	r2, r3, #4
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005296:	f003 0308 	and.w	r3, r3, #8
 800529a:	2b00      	cmp	r3, #0
 800529c:	d011      	beq.n	80052c2 <HAL_UART_IRQHandler+0x126>
 800529e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052a2:	f003 0320 	and.w	r3, r3, #32
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d105      	bne.n	80052b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80052aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d005      	beq.n	80052c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	f043 0208 	orr.w	r2, r3, #8
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f000 81ed 	beq.w	80056a6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052d0:	f003 0320 	and.w	r3, r3, #32
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d008      	beq.n	80052ea <HAL_UART_IRQHandler+0x14e>
 80052d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052dc:	f003 0320 	and.w	r3, r3, #32
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d002      	beq.n	80052ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 fb5e 	bl	80059a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	695b      	ldr	r3, [r3, #20]
 80052f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f4:	2b40      	cmp	r3, #64	; 0x40
 80052f6:	bf0c      	ite	eq
 80052f8:	2301      	moveq	r3, #1
 80052fa:	2300      	movne	r3, #0
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	f003 0308 	and.w	r3, r3, #8
 800530a:	2b00      	cmp	r3, #0
 800530c:	d103      	bne.n	8005316 <HAL_UART_IRQHandler+0x17a>
 800530e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005312:	2b00      	cmp	r3, #0
 8005314:	d04f      	beq.n	80053b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fa66 	bl	80057e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005326:	2b40      	cmp	r3, #64	; 0x40
 8005328:	d141      	bne.n	80053ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3314      	adds	r3, #20
 8005330:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005334:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005338:	e853 3f00 	ldrex	r3, [r3]
 800533c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005340:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005348:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3314      	adds	r3, #20
 8005352:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005356:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800535a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005362:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005366:	e841 2300 	strex	r3, r2, [r1]
 800536a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800536e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1d9      	bne.n	800532a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537a:	2b00      	cmp	r3, #0
 800537c:	d013      	beq.n	80053a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005382:	4a7d      	ldr	r2, [pc, #500]	; (8005578 <HAL_UART_IRQHandler+0x3dc>)
 8005384:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538a:	4618      	mov	r0, r3
 800538c:	f7fd ffc5 	bl	800331a <HAL_DMA_Abort_IT>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d016      	beq.n	80053c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053a0:	4610      	mov	r0, r2
 80053a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a4:	e00e      	b.n	80053c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f99a 	bl	80056e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ac:	e00a      	b.n	80053c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f996 	bl	80056e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b4:	e006      	b.n	80053c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f992 	bl	80056e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80053c2:	e170      	b.n	80056a6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c4:	bf00      	nop
    return;
 80053c6:	e16e      	b.n	80056a6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	f040 814a 	bne.w	8005666 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80053d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d6:	f003 0310 	and.w	r3, r3, #16
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 8143 	beq.w	8005666 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80053e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053e4:	f003 0310 	and.w	r3, r3, #16
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 813c 	beq.w	8005666 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053ee:	2300      	movs	r3, #0
 80053f0:	60bb      	str	r3, [r7, #8]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	60bb      	str	r3, [r7, #8]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	60bb      	str	r3, [r7, #8]
 8005402:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540e:	2b40      	cmp	r3, #64	; 0x40
 8005410:	f040 80b4 	bne.w	800557c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005420:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 8140 	beq.w	80056aa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800542e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005432:	429a      	cmp	r2, r3
 8005434:	f080 8139 	bcs.w	80056aa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800543e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800544a:	f000 8088 	beq.w	800555e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	330c      	adds	r3, #12
 8005454:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005458:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800545c:	e853 3f00 	ldrex	r3, [r3]
 8005460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005464:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800546c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	330c      	adds	r3, #12
 8005476:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800547a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800547e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005482:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005486:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800548a:	e841 2300 	strex	r3, r2, [r1]
 800548e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005492:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1d9      	bne.n	800544e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	3314      	adds	r3, #20
 80054a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054a4:	e853 3f00 	ldrex	r3, [r3]
 80054a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80054aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054ac:	f023 0301 	bic.w	r3, r3, #1
 80054b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	3314      	adds	r3, #20
 80054ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80054be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80054c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80054c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054ca:	e841 2300 	strex	r3, r2, [r1]
 80054ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80054d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1e1      	bne.n	800549a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	3314      	adds	r3, #20
 80054dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054e0:	e853 3f00 	ldrex	r3, [r3]
 80054e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80054e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3314      	adds	r3, #20
 80054f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005500:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005502:	e841 2300 	strex	r3, r2, [r1]
 8005506:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1e3      	bne.n	80054d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2220      	movs	r2, #32
 8005512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	330c      	adds	r3, #12
 8005522:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005526:	e853 3f00 	ldrex	r3, [r3]
 800552a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800552c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800552e:	f023 0310 	bic.w	r3, r3, #16
 8005532:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	330c      	adds	r3, #12
 800553c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005540:	65ba      	str	r2, [r7, #88]	; 0x58
 8005542:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005544:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005546:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005548:	e841 2300 	strex	r3, r2, [r1]
 800554c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800554e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1e3      	bne.n	800551c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005558:	4618      	mov	r0, r3
 800555a:	f7fd fe6e 	bl	800323a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005566:	b29b      	uxth	r3, r3
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	b29b      	uxth	r3, r3
 800556c:	4619      	mov	r1, r3
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f8c0 	bl	80056f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005574:	e099      	b.n	80056aa <HAL_UART_IRQHandler+0x50e>
 8005576:	bf00      	nop
 8005578:	080058af 	.word	0x080058af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005584:	b29b      	uxth	r3, r3
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005590:	b29b      	uxth	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 808b 	beq.w	80056ae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005598:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 8086 	beq.w	80056ae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	330c      	adds	r3, #12
 80055a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ac:	e853 3f00 	ldrex	r3, [r3]
 80055b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	330c      	adds	r3, #12
 80055c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80055c6:	647a      	str	r2, [r7, #68]	; 0x44
 80055c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055ce:	e841 2300 	strex	r3, r2, [r1]
 80055d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1e3      	bne.n	80055a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	3314      	adds	r3, #20
 80055e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e4:	e853 3f00 	ldrex	r3, [r3]
 80055e8:	623b      	str	r3, [r7, #32]
   return(result);
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	f023 0301 	bic.w	r3, r3, #1
 80055f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	3314      	adds	r3, #20
 80055fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80055fe:	633a      	str	r2, [r7, #48]	; 0x30
 8005600:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005602:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005606:	e841 2300 	strex	r3, r2, [r1]
 800560a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800560c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1e3      	bne.n	80055da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2220      	movs	r2, #32
 8005616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	330c      	adds	r3, #12
 8005626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	e853 3f00 	ldrex	r3, [r3]
 800562e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 0310 	bic.w	r3, r3, #16
 8005636:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	330c      	adds	r3, #12
 8005640:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005644:	61fa      	str	r2, [r7, #28]
 8005646:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005648:	69b9      	ldr	r1, [r7, #24]
 800564a:	69fa      	ldr	r2, [r7, #28]
 800564c:	e841 2300 	strex	r3, r2, [r1]
 8005650:	617b      	str	r3, [r7, #20]
   return(result);
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1e3      	bne.n	8005620 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005658:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800565c:	4619      	mov	r1, r3
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f848 	bl	80056f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005664:	e023      	b.n	80056ae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800566a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566e:	2b00      	cmp	r3, #0
 8005670:	d009      	beq.n	8005686 <HAL_UART_IRQHandler+0x4ea>
 8005672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f929 	bl	80058d6 <UART_Transmit_IT>
    return;
 8005684:	e014      	b.n	80056b0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800568a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00e      	beq.n	80056b0 <HAL_UART_IRQHandler+0x514>
 8005692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569a:	2b00      	cmp	r3, #0
 800569c:	d008      	beq.n	80056b0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f969 	bl	8005976 <UART_EndTransmit_IT>
    return;
 80056a4:	e004      	b.n	80056b0 <HAL_UART_IRQHandler+0x514>
    return;
 80056a6:	bf00      	nop
 80056a8:	e002      	b.n	80056b0 <HAL_UART_IRQHandler+0x514>
      return;
 80056aa:	bf00      	nop
 80056ac:	e000      	b.n	80056b0 <HAL_UART_IRQHandler+0x514>
      return;
 80056ae:	bf00      	nop
  }
}
 80056b0:	37e8      	adds	r7, #232	; 0xe8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop

080056b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	460b      	mov	r3, r1
 80056fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b090      	sub	sp, #64	; 0x40
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	603b      	str	r3, [r7, #0]
 8005718:	4613      	mov	r3, r2
 800571a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800571c:	e050      	b.n	80057c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800571e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005724:	d04c      	beq.n	80057c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005728:	2b00      	cmp	r3, #0
 800572a:	d007      	beq.n	800573c <UART_WaitOnFlagUntilTimeout+0x30>
 800572c:	f7fd fc12 	bl	8002f54 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005738:	429a      	cmp	r2, r3
 800573a:	d241      	bcs.n	80057c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	330c      	adds	r3, #12
 8005742:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005746:	e853 3f00 	ldrex	r3, [r3]
 800574a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	330c      	adds	r3, #12
 800575a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800575c:	637a      	str	r2, [r7, #52]	; 0x34
 800575e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005760:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005762:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005764:	e841 2300 	strex	r3, r2, [r1]
 8005768:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800576a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1e5      	bne.n	800573c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3314      	adds	r3, #20
 8005776:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	e853 3f00 	ldrex	r3, [r3]
 800577e:	613b      	str	r3, [r7, #16]
   return(result);
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	f023 0301 	bic.w	r3, r3, #1
 8005786:	63bb      	str	r3, [r7, #56]	; 0x38
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3314      	adds	r3, #20
 800578e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005790:	623a      	str	r2, [r7, #32]
 8005792:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005794:	69f9      	ldr	r1, [r7, #28]
 8005796:	6a3a      	ldr	r2, [r7, #32]
 8005798:	e841 2300 	strex	r3, r2, [r1]
 800579c:	61bb      	str	r3, [r7, #24]
   return(result);
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1e5      	bne.n	8005770 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2220      	movs	r2, #32
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2220      	movs	r2, #32
 80057b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e00f      	b.n	80057e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	4013      	ands	r3, r2
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	bf0c      	ite	eq
 80057d0:	2301      	moveq	r3, #1
 80057d2:	2300      	movne	r3, #0
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	461a      	mov	r2, r3
 80057d8:	79fb      	ldrb	r3, [r7, #7]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d09f      	beq.n	800571e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3740      	adds	r7, #64	; 0x40
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b095      	sub	sp, #84	; 0x54
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	330c      	adds	r3, #12
 80057f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fa:	e853 3f00 	ldrex	r3, [r3]
 80057fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005802:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005806:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	330c      	adds	r3, #12
 800580e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005810:	643a      	str	r2, [r7, #64]	; 0x40
 8005812:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005814:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005816:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005818:	e841 2300 	strex	r3, r2, [r1]
 800581c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800581e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1e5      	bne.n	80057f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	3314      	adds	r3, #20
 800582a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	e853 3f00 	ldrex	r3, [r3]
 8005832:	61fb      	str	r3, [r7, #28]
   return(result);
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	f023 0301 	bic.w	r3, r3, #1
 800583a:	64bb      	str	r3, [r7, #72]	; 0x48
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3314      	adds	r3, #20
 8005842:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005844:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005846:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005848:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800584a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800584c:	e841 2300 	strex	r3, r2, [r1]
 8005850:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1e5      	bne.n	8005824 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585c:	2b01      	cmp	r3, #1
 800585e:	d119      	bne.n	8005894 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	330c      	adds	r3, #12
 8005866:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	e853 3f00 	ldrex	r3, [r3]
 800586e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f023 0310 	bic.w	r3, r3, #16
 8005876:	647b      	str	r3, [r7, #68]	; 0x44
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	330c      	adds	r3, #12
 800587e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005880:	61ba      	str	r2, [r7, #24]
 8005882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005884:	6979      	ldr	r1, [r7, #20]
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	e841 2300 	strex	r3, r2, [r1]
 800588c:	613b      	str	r3, [r7, #16]
   return(result);
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1e5      	bne.n	8005860 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2220      	movs	r2, #32
 8005898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80058a2:	bf00      	nop
 80058a4:	3754      	adds	r7, #84	; 0x54
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b084      	sub	sp, #16
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f7ff ff09 	bl	80056e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058ce:	bf00      	nop
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b085      	sub	sp, #20
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b21      	cmp	r3, #33	; 0x21
 80058e8:	d13e      	bne.n	8005968 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058f2:	d114      	bne.n	800591e <UART_Transmit_IT+0x48>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d110      	bne.n	800591e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	881b      	ldrh	r3, [r3, #0]
 8005906:	461a      	mov	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005910:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	1c9a      	adds	r2, r3, #2
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	621a      	str	r2, [r3, #32]
 800591c:	e008      	b.n	8005930 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	1c59      	adds	r1, r3, #1
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6211      	str	r1, [r2, #32]
 8005928:	781a      	ldrb	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005934:	b29b      	uxth	r3, r3
 8005936:	3b01      	subs	r3, #1
 8005938:	b29b      	uxth	r3, r3
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	4619      	mov	r1, r3
 800593e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10f      	bne.n	8005964 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68da      	ldr	r2, [r3, #12]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005952:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68da      	ldr	r2, [r3, #12]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005962:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005964:	2300      	movs	r3, #0
 8005966:	e000      	b.n	800596a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005968:	2302      	movs	r3, #2
  }
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b082      	sub	sp, #8
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68da      	ldr	r2, [r3, #12]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800598c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2220      	movs	r2, #32
 8005992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7ff fe8e 	bl	80056b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3708      	adds	r7, #8
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b08c      	sub	sp, #48	; 0x30
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b22      	cmp	r3, #34	; 0x22
 80059b8:	f040 80ab 	bne.w	8005b12 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059c4:	d117      	bne.n	80059f6 <UART_Receive_IT+0x50>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d113      	bne.n	80059f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80059ce:	2300      	movs	r3, #0
 80059d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	b29b      	uxth	r3, r3
 80059e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ee:	1c9a      	adds	r2, r3, #2
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	629a      	str	r2, [r3, #40]	; 0x28
 80059f4:	e026      	b.n	8005a44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80059fc:	2300      	movs	r3, #0
 80059fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a08:	d007      	beq.n	8005a1a <UART_Receive_IT+0x74>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10a      	bne.n	8005a28 <UART_Receive_IT+0x82>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d106      	bne.n	8005a28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a24:	701a      	strb	r2, [r3, #0]
 8005a26:	e008      	b.n	8005a3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3e:	1c5a      	adds	r2, r3, #1
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	4619      	mov	r1, r3
 8005a52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d15a      	bne.n	8005b0e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68da      	ldr	r2, [r3, #12]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f022 0220 	bic.w	r2, r2, #32
 8005a66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68da      	ldr	r2, [r3, #12]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	695a      	ldr	r2, [r3, #20]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f022 0201 	bic.w	r2, r2, #1
 8005a86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d135      	bne.n	8005b04 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	330c      	adds	r3, #12
 8005aa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	e853 3f00 	ldrex	r3, [r3]
 8005aac:	613b      	str	r3, [r7, #16]
   return(result);
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f023 0310 	bic.w	r3, r3, #16
 8005ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	330c      	adds	r3, #12
 8005abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005abe:	623a      	str	r2, [r7, #32]
 8005ac0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac2:	69f9      	ldr	r1, [r7, #28]
 8005ac4:	6a3a      	ldr	r2, [r7, #32]
 8005ac6:	e841 2300 	strex	r3, r2, [r1]
 8005aca:	61bb      	str	r3, [r7, #24]
   return(result);
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1e5      	bne.n	8005a9e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0310 	and.w	r3, r3, #16
 8005adc:	2b10      	cmp	r3, #16
 8005ade:	d10a      	bne.n	8005af6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	60fb      	str	r3, [r7, #12]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	60fb      	str	r3, [r7, #12]
 8005af4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005afa:	4619      	mov	r1, r3
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7ff fdf9 	bl	80056f4 <HAL_UARTEx_RxEventCallback>
 8005b02:	e002      	b.n	8005b0a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f7ff fde1 	bl	80056cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	e002      	b.n	8005b14 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	e000      	b.n	8005b14 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005b12:	2302      	movs	r3, #2
  }
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3730      	adds	r7, #48	; 0x30
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b20:	b0c0      	sub	sp, #256	; 0x100
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b38:	68d9      	ldr	r1, [r3, #12]
 8005b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	ea40 0301 	orr.w	r3, r0, r1
 8005b44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	431a      	orrs	r2, r3
 8005b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b74:	f021 010c 	bic.w	r1, r1, #12
 8005b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b82:	430b      	orrs	r3, r1
 8005b84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b96:	6999      	ldr	r1, [r3, #24]
 8005b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	ea40 0301 	orr.w	r3, r0, r1
 8005ba2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	4b8f      	ldr	r3, [pc, #572]	; (8005de8 <UART_SetConfig+0x2cc>)
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d005      	beq.n	8005bbc <UART_SetConfig+0xa0>
 8005bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	4b8d      	ldr	r3, [pc, #564]	; (8005dec <UART_SetConfig+0x2d0>)
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d104      	bne.n	8005bc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bbc:	f7fe ff5c 	bl	8004a78 <HAL_RCC_GetPCLK2Freq>
 8005bc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005bc4:	e003      	b.n	8005bce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bc6:	f7fe ff43 	bl	8004a50 <HAL_RCC_GetPCLK1Freq>
 8005bca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bd8:	f040 810c 	bne.w	8005df4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005be0:	2200      	movs	r2, #0
 8005be2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005be6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005bea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005bee:	4622      	mov	r2, r4
 8005bf0:	462b      	mov	r3, r5
 8005bf2:	1891      	adds	r1, r2, r2
 8005bf4:	65b9      	str	r1, [r7, #88]	; 0x58
 8005bf6:	415b      	adcs	r3, r3
 8005bf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005bfe:	4621      	mov	r1, r4
 8005c00:	eb12 0801 	adds.w	r8, r2, r1
 8005c04:	4629      	mov	r1, r5
 8005c06:	eb43 0901 	adc.w	r9, r3, r1
 8005c0a:	f04f 0200 	mov.w	r2, #0
 8005c0e:	f04f 0300 	mov.w	r3, #0
 8005c12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c1e:	4690      	mov	r8, r2
 8005c20:	4699      	mov	r9, r3
 8005c22:	4623      	mov	r3, r4
 8005c24:	eb18 0303 	adds.w	r3, r8, r3
 8005c28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c2c:	462b      	mov	r3, r5
 8005c2e:	eb49 0303 	adc.w	r3, r9, r3
 8005c32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005c46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	18db      	adds	r3, r3, r3
 8005c4e:	653b      	str	r3, [r7, #80]	; 0x50
 8005c50:	4613      	mov	r3, r2
 8005c52:	eb42 0303 	adc.w	r3, r2, r3
 8005c56:	657b      	str	r3, [r7, #84]	; 0x54
 8005c58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005c60:	f7fb f81a 	bl	8000c98 <__aeabi_uldivmod>
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	4b61      	ldr	r3, [pc, #388]	; (8005df0 <UART_SetConfig+0x2d4>)
 8005c6a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c6e:	095b      	lsrs	r3, r3, #5
 8005c70:	011c      	lsls	r4, r3, #4
 8005c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c76:	2200      	movs	r2, #0
 8005c78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005c80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005c84:	4642      	mov	r2, r8
 8005c86:	464b      	mov	r3, r9
 8005c88:	1891      	adds	r1, r2, r2
 8005c8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005c8c:	415b      	adcs	r3, r3
 8005c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c94:	4641      	mov	r1, r8
 8005c96:	eb12 0a01 	adds.w	sl, r2, r1
 8005c9a:	4649      	mov	r1, r9
 8005c9c:	eb43 0b01 	adc.w	fp, r3, r1
 8005ca0:	f04f 0200 	mov.w	r2, #0
 8005ca4:	f04f 0300 	mov.w	r3, #0
 8005ca8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005cac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005cb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cb4:	4692      	mov	sl, r2
 8005cb6:	469b      	mov	fp, r3
 8005cb8:	4643      	mov	r3, r8
 8005cba:	eb1a 0303 	adds.w	r3, sl, r3
 8005cbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cc2:	464b      	mov	r3, r9
 8005cc4:	eb4b 0303 	adc.w	r3, fp, r3
 8005cc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005cdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	18db      	adds	r3, r3, r3
 8005ce4:	643b      	str	r3, [r7, #64]	; 0x40
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	eb42 0303 	adc.w	r3, r2, r3
 8005cec:	647b      	str	r3, [r7, #68]	; 0x44
 8005cee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005cf2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005cf6:	f7fa ffcf 	bl	8000c98 <__aeabi_uldivmod>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	4611      	mov	r1, r2
 8005d00:	4b3b      	ldr	r3, [pc, #236]	; (8005df0 <UART_SetConfig+0x2d4>)
 8005d02:	fba3 2301 	umull	r2, r3, r3, r1
 8005d06:	095b      	lsrs	r3, r3, #5
 8005d08:	2264      	movs	r2, #100	; 0x64
 8005d0a:	fb02 f303 	mul.w	r3, r2, r3
 8005d0e:	1acb      	subs	r3, r1, r3
 8005d10:	00db      	lsls	r3, r3, #3
 8005d12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005d16:	4b36      	ldr	r3, [pc, #216]	; (8005df0 <UART_SetConfig+0x2d4>)
 8005d18:	fba3 2302 	umull	r2, r3, r3, r2
 8005d1c:	095b      	lsrs	r3, r3, #5
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d24:	441c      	add	r4, r3
 8005d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005d34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005d38:	4642      	mov	r2, r8
 8005d3a:	464b      	mov	r3, r9
 8005d3c:	1891      	adds	r1, r2, r2
 8005d3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d40:	415b      	adcs	r3, r3
 8005d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d48:	4641      	mov	r1, r8
 8005d4a:	1851      	adds	r1, r2, r1
 8005d4c:	6339      	str	r1, [r7, #48]	; 0x30
 8005d4e:	4649      	mov	r1, r9
 8005d50:	414b      	adcs	r3, r1
 8005d52:	637b      	str	r3, [r7, #52]	; 0x34
 8005d54:	f04f 0200 	mov.w	r2, #0
 8005d58:	f04f 0300 	mov.w	r3, #0
 8005d5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005d60:	4659      	mov	r1, fp
 8005d62:	00cb      	lsls	r3, r1, #3
 8005d64:	4651      	mov	r1, sl
 8005d66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d6a:	4651      	mov	r1, sl
 8005d6c:	00ca      	lsls	r2, r1, #3
 8005d6e:	4610      	mov	r0, r2
 8005d70:	4619      	mov	r1, r3
 8005d72:	4603      	mov	r3, r0
 8005d74:	4642      	mov	r2, r8
 8005d76:	189b      	adds	r3, r3, r2
 8005d78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d7c:	464b      	mov	r3, r9
 8005d7e:	460a      	mov	r2, r1
 8005d80:	eb42 0303 	adc.w	r3, r2, r3
 8005d84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005d98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	18db      	adds	r3, r3, r3
 8005da0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005da2:	4613      	mov	r3, r2
 8005da4:	eb42 0303 	adc.w	r3, r2, r3
 8005da8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005daa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005dae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005db2:	f7fa ff71 	bl	8000c98 <__aeabi_uldivmod>
 8005db6:	4602      	mov	r2, r0
 8005db8:	460b      	mov	r3, r1
 8005dba:	4b0d      	ldr	r3, [pc, #52]	; (8005df0 <UART_SetConfig+0x2d4>)
 8005dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8005dc0:	095b      	lsrs	r3, r3, #5
 8005dc2:	2164      	movs	r1, #100	; 0x64
 8005dc4:	fb01 f303 	mul.w	r3, r1, r3
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	3332      	adds	r3, #50	; 0x32
 8005dce:	4a08      	ldr	r2, [pc, #32]	; (8005df0 <UART_SetConfig+0x2d4>)
 8005dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd4:	095b      	lsrs	r3, r3, #5
 8005dd6:	f003 0207 	and.w	r2, r3, #7
 8005dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4422      	add	r2, r4
 8005de2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005de4:	e106      	b.n	8005ff4 <UART_SetConfig+0x4d8>
 8005de6:	bf00      	nop
 8005de8:	40011000 	.word	0x40011000
 8005dec:	40011400 	.word	0x40011400
 8005df0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005dfe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005e06:	4642      	mov	r2, r8
 8005e08:	464b      	mov	r3, r9
 8005e0a:	1891      	adds	r1, r2, r2
 8005e0c:	6239      	str	r1, [r7, #32]
 8005e0e:	415b      	adcs	r3, r3
 8005e10:	627b      	str	r3, [r7, #36]	; 0x24
 8005e12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e16:	4641      	mov	r1, r8
 8005e18:	1854      	adds	r4, r2, r1
 8005e1a:	4649      	mov	r1, r9
 8005e1c:	eb43 0501 	adc.w	r5, r3, r1
 8005e20:	f04f 0200 	mov.w	r2, #0
 8005e24:	f04f 0300 	mov.w	r3, #0
 8005e28:	00eb      	lsls	r3, r5, #3
 8005e2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e2e:	00e2      	lsls	r2, r4, #3
 8005e30:	4614      	mov	r4, r2
 8005e32:	461d      	mov	r5, r3
 8005e34:	4643      	mov	r3, r8
 8005e36:	18e3      	adds	r3, r4, r3
 8005e38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e3c:	464b      	mov	r3, r9
 8005e3e:	eb45 0303 	adc.w	r3, r5, r3
 8005e42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e56:	f04f 0200 	mov.w	r2, #0
 8005e5a:	f04f 0300 	mov.w	r3, #0
 8005e5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005e62:	4629      	mov	r1, r5
 8005e64:	008b      	lsls	r3, r1, #2
 8005e66:	4621      	mov	r1, r4
 8005e68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e6c:	4621      	mov	r1, r4
 8005e6e:	008a      	lsls	r2, r1, #2
 8005e70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005e74:	f7fa ff10 	bl	8000c98 <__aeabi_uldivmod>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	4b60      	ldr	r3, [pc, #384]	; (8006000 <UART_SetConfig+0x4e4>)
 8005e7e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e82:	095b      	lsrs	r3, r3, #5
 8005e84:	011c      	lsls	r4, r3, #4
 8005e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005e94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005e98:	4642      	mov	r2, r8
 8005e9a:	464b      	mov	r3, r9
 8005e9c:	1891      	adds	r1, r2, r2
 8005e9e:	61b9      	str	r1, [r7, #24]
 8005ea0:	415b      	adcs	r3, r3
 8005ea2:	61fb      	str	r3, [r7, #28]
 8005ea4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ea8:	4641      	mov	r1, r8
 8005eaa:	1851      	adds	r1, r2, r1
 8005eac:	6139      	str	r1, [r7, #16]
 8005eae:	4649      	mov	r1, r9
 8005eb0:	414b      	adcs	r3, r1
 8005eb2:	617b      	str	r3, [r7, #20]
 8005eb4:	f04f 0200 	mov.w	r2, #0
 8005eb8:	f04f 0300 	mov.w	r3, #0
 8005ebc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ec0:	4659      	mov	r1, fp
 8005ec2:	00cb      	lsls	r3, r1, #3
 8005ec4:	4651      	mov	r1, sl
 8005ec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eca:	4651      	mov	r1, sl
 8005ecc:	00ca      	lsls	r2, r1, #3
 8005ece:	4610      	mov	r0, r2
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	4642      	mov	r2, r8
 8005ed6:	189b      	adds	r3, r3, r2
 8005ed8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005edc:	464b      	mov	r3, r9
 8005ede:	460a      	mov	r2, r1
 8005ee0:	eb42 0303 	adc.w	r3, r2, r3
 8005ee4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ef2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005ef4:	f04f 0200 	mov.w	r2, #0
 8005ef8:	f04f 0300 	mov.w	r3, #0
 8005efc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005f00:	4649      	mov	r1, r9
 8005f02:	008b      	lsls	r3, r1, #2
 8005f04:	4641      	mov	r1, r8
 8005f06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f0a:	4641      	mov	r1, r8
 8005f0c:	008a      	lsls	r2, r1, #2
 8005f0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005f12:	f7fa fec1 	bl	8000c98 <__aeabi_uldivmod>
 8005f16:	4602      	mov	r2, r0
 8005f18:	460b      	mov	r3, r1
 8005f1a:	4611      	mov	r1, r2
 8005f1c:	4b38      	ldr	r3, [pc, #224]	; (8006000 <UART_SetConfig+0x4e4>)
 8005f1e:	fba3 2301 	umull	r2, r3, r3, r1
 8005f22:	095b      	lsrs	r3, r3, #5
 8005f24:	2264      	movs	r2, #100	; 0x64
 8005f26:	fb02 f303 	mul.w	r3, r2, r3
 8005f2a:	1acb      	subs	r3, r1, r3
 8005f2c:	011b      	lsls	r3, r3, #4
 8005f2e:	3332      	adds	r3, #50	; 0x32
 8005f30:	4a33      	ldr	r2, [pc, #204]	; (8006000 <UART_SetConfig+0x4e4>)
 8005f32:	fba2 2303 	umull	r2, r3, r2, r3
 8005f36:	095b      	lsrs	r3, r3, #5
 8005f38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f3c:	441c      	add	r4, r3
 8005f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f42:	2200      	movs	r2, #0
 8005f44:	673b      	str	r3, [r7, #112]	; 0x70
 8005f46:	677a      	str	r2, [r7, #116]	; 0x74
 8005f48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005f4c:	4642      	mov	r2, r8
 8005f4e:	464b      	mov	r3, r9
 8005f50:	1891      	adds	r1, r2, r2
 8005f52:	60b9      	str	r1, [r7, #8]
 8005f54:	415b      	adcs	r3, r3
 8005f56:	60fb      	str	r3, [r7, #12]
 8005f58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f5c:	4641      	mov	r1, r8
 8005f5e:	1851      	adds	r1, r2, r1
 8005f60:	6039      	str	r1, [r7, #0]
 8005f62:	4649      	mov	r1, r9
 8005f64:	414b      	adcs	r3, r1
 8005f66:	607b      	str	r3, [r7, #4]
 8005f68:	f04f 0200 	mov.w	r2, #0
 8005f6c:	f04f 0300 	mov.w	r3, #0
 8005f70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f74:	4659      	mov	r1, fp
 8005f76:	00cb      	lsls	r3, r1, #3
 8005f78:	4651      	mov	r1, sl
 8005f7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f7e:	4651      	mov	r1, sl
 8005f80:	00ca      	lsls	r2, r1, #3
 8005f82:	4610      	mov	r0, r2
 8005f84:	4619      	mov	r1, r3
 8005f86:	4603      	mov	r3, r0
 8005f88:	4642      	mov	r2, r8
 8005f8a:	189b      	adds	r3, r3, r2
 8005f8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f8e:	464b      	mov	r3, r9
 8005f90:	460a      	mov	r2, r1
 8005f92:	eb42 0303 	adc.w	r3, r2, r3
 8005f96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	663b      	str	r3, [r7, #96]	; 0x60
 8005fa2:	667a      	str	r2, [r7, #100]	; 0x64
 8005fa4:	f04f 0200 	mov.w	r2, #0
 8005fa8:	f04f 0300 	mov.w	r3, #0
 8005fac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005fb0:	4649      	mov	r1, r9
 8005fb2:	008b      	lsls	r3, r1, #2
 8005fb4:	4641      	mov	r1, r8
 8005fb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fba:	4641      	mov	r1, r8
 8005fbc:	008a      	lsls	r2, r1, #2
 8005fbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005fc2:	f7fa fe69 	bl	8000c98 <__aeabi_uldivmod>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	460b      	mov	r3, r1
 8005fca:	4b0d      	ldr	r3, [pc, #52]	; (8006000 <UART_SetConfig+0x4e4>)
 8005fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8005fd0:	095b      	lsrs	r3, r3, #5
 8005fd2:	2164      	movs	r1, #100	; 0x64
 8005fd4:	fb01 f303 	mul.w	r3, r1, r3
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	3332      	adds	r3, #50	; 0x32
 8005fde:	4a08      	ldr	r2, [pc, #32]	; (8006000 <UART_SetConfig+0x4e4>)
 8005fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe4:	095b      	lsrs	r3, r3, #5
 8005fe6:	f003 020f 	and.w	r2, r3, #15
 8005fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4422      	add	r2, r4
 8005ff2:	609a      	str	r2, [r3, #8]
}
 8005ff4:	bf00      	nop
 8005ff6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006000:	51eb851f 	.word	0x51eb851f

08006004 <__cvt>:
 8006004:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006008:	ec55 4b10 	vmov	r4, r5, d0
 800600c:	2d00      	cmp	r5, #0
 800600e:	460e      	mov	r6, r1
 8006010:	4619      	mov	r1, r3
 8006012:	462b      	mov	r3, r5
 8006014:	bfbb      	ittet	lt
 8006016:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800601a:	461d      	movlt	r5, r3
 800601c:	2300      	movge	r3, #0
 800601e:	232d      	movlt	r3, #45	; 0x2d
 8006020:	700b      	strb	r3, [r1, #0]
 8006022:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006024:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006028:	4691      	mov	r9, r2
 800602a:	f023 0820 	bic.w	r8, r3, #32
 800602e:	bfbc      	itt	lt
 8006030:	4622      	movlt	r2, r4
 8006032:	4614      	movlt	r4, r2
 8006034:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006038:	d005      	beq.n	8006046 <__cvt+0x42>
 800603a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800603e:	d100      	bne.n	8006042 <__cvt+0x3e>
 8006040:	3601      	adds	r6, #1
 8006042:	2102      	movs	r1, #2
 8006044:	e000      	b.n	8006048 <__cvt+0x44>
 8006046:	2103      	movs	r1, #3
 8006048:	ab03      	add	r3, sp, #12
 800604a:	9301      	str	r3, [sp, #4]
 800604c:	ab02      	add	r3, sp, #8
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	ec45 4b10 	vmov	d0, r4, r5
 8006054:	4653      	mov	r3, sl
 8006056:	4632      	mov	r2, r6
 8006058:	f001 f87e 	bl	8007158 <_dtoa_r>
 800605c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006060:	4607      	mov	r7, r0
 8006062:	d102      	bne.n	800606a <__cvt+0x66>
 8006064:	f019 0f01 	tst.w	r9, #1
 8006068:	d022      	beq.n	80060b0 <__cvt+0xac>
 800606a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800606e:	eb07 0906 	add.w	r9, r7, r6
 8006072:	d110      	bne.n	8006096 <__cvt+0x92>
 8006074:	783b      	ldrb	r3, [r7, #0]
 8006076:	2b30      	cmp	r3, #48	; 0x30
 8006078:	d10a      	bne.n	8006090 <__cvt+0x8c>
 800607a:	2200      	movs	r2, #0
 800607c:	2300      	movs	r3, #0
 800607e:	4620      	mov	r0, r4
 8006080:	4629      	mov	r1, r5
 8006082:	f7fa fd29 	bl	8000ad8 <__aeabi_dcmpeq>
 8006086:	b918      	cbnz	r0, 8006090 <__cvt+0x8c>
 8006088:	f1c6 0601 	rsb	r6, r6, #1
 800608c:	f8ca 6000 	str.w	r6, [sl]
 8006090:	f8da 3000 	ldr.w	r3, [sl]
 8006094:	4499      	add	r9, r3
 8006096:	2200      	movs	r2, #0
 8006098:	2300      	movs	r3, #0
 800609a:	4620      	mov	r0, r4
 800609c:	4629      	mov	r1, r5
 800609e:	f7fa fd1b 	bl	8000ad8 <__aeabi_dcmpeq>
 80060a2:	b108      	cbz	r0, 80060a8 <__cvt+0xa4>
 80060a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80060a8:	2230      	movs	r2, #48	; 0x30
 80060aa:	9b03      	ldr	r3, [sp, #12]
 80060ac:	454b      	cmp	r3, r9
 80060ae:	d307      	bcc.n	80060c0 <__cvt+0xbc>
 80060b0:	9b03      	ldr	r3, [sp, #12]
 80060b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060b4:	1bdb      	subs	r3, r3, r7
 80060b6:	4638      	mov	r0, r7
 80060b8:	6013      	str	r3, [r2, #0]
 80060ba:	b004      	add	sp, #16
 80060bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060c0:	1c59      	adds	r1, r3, #1
 80060c2:	9103      	str	r1, [sp, #12]
 80060c4:	701a      	strb	r2, [r3, #0]
 80060c6:	e7f0      	b.n	80060aa <__cvt+0xa6>

080060c8 <__exponent>:
 80060c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060ca:	4603      	mov	r3, r0
 80060cc:	2900      	cmp	r1, #0
 80060ce:	bfb8      	it	lt
 80060d0:	4249      	neglt	r1, r1
 80060d2:	f803 2b02 	strb.w	r2, [r3], #2
 80060d6:	bfb4      	ite	lt
 80060d8:	222d      	movlt	r2, #45	; 0x2d
 80060da:	222b      	movge	r2, #43	; 0x2b
 80060dc:	2909      	cmp	r1, #9
 80060de:	7042      	strb	r2, [r0, #1]
 80060e0:	dd2a      	ble.n	8006138 <__exponent+0x70>
 80060e2:	f10d 0207 	add.w	r2, sp, #7
 80060e6:	4617      	mov	r7, r2
 80060e8:	260a      	movs	r6, #10
 80060ea:	4694      	mov	ip, r2
 80060ec:	fb91 f5f6 	sdiv	r5, r1, r6
 80060f0:	fb06 1415 	mls	r4, r6, r5, r1
 80060f4:	3430      	adds	r4, #48	; 0x30
 80060f6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80060fa:	460c      	mov	r4, r1
 80060fc:	2c63      	cmp	r4, #99	; 0x63
 80060fe:	f102 32ff 	add.w	r2, r2, #4294967295
 8006102:	4629      	mov	r1, r5
 8006104:	dcf1      	bgt.n	80060ea <__exponent+0x22>
 8006106:	3130      	adds	r1, #48	; 0x30
 8006108:	f1ac 0402 	sub.w	r4, ip, #2
 800610c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006110:	1c41      	adds	r1, r0, #1
 8006112:	4622      	mov	r2, r4
 8006114:	42ba      	cmp	r2, r7
 8006116:	d30a      	bcc.n	800612e <__exponent+0x66>
 8006118:	f10d 0209 	add.w	r2, sp, #9
 800611c:	eba2 020c 	sub.w	r2, r2, ip
 8006120:	42bc      	cmp	r4, r7
 8006122:	bf88      	it	hi
 8006124:	2200      	movhi	r2, #0
 8006126:	4413      	add	r3, r2
 8006128:	1a18      	subs	r0, r3, r0
 800612a:	b003      	add	sp, #12
 800612c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800612e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006132:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006136:	e7ed      	b.n	8006114 <__exponent+0x4c>
 8006138:	2330      	movs	r3, #48	; 0x30
 800613a:	3130      	adds	r1, #48	; 0x30
 800613c:	7083      	strb	r3, [r0, #2]
 800613e:	70c1      	strb	r1, [r0, #3]
 8006140:	1d03      	adds	r3, r0, #4
 8006142:	e7f1      	b.n	8006128 <__exponent+0x60>

08006144 <_printf_float>:
 8006144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006148:	ed2d 8b02 	vpush	{d8}
 800614c:	b08d      	sub	sp, #52	; 0x34
 800614e:	460c      	mov	r4, r1
 8006150:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006154:	4616      	mov	r6, r2
 8006156:	461f      	mov	r7, r3
 8006158:	4605      	mov	r5, r0
 800615a:	f000 fef7 	bl	8006f4c <_localeconv_r>
 800615e:	f8d0 a000 	ldr.w	sl, [r0]
 8006162:	4650      	mov	r0, sl
 8006164:	f7fa f88c 	bl	8000280 <strlen>
 8006168:	2300      	movs	r3, #0
 800616a:	930a      	str	r3, [sp, #40]	; 0x28
 800616c:	6823      	ldr	r3, [r4, #0]
 800616e:	9305      	str	r3, [sp, #20]
 8006170:	f8d8 3000 	ldr.w	r3, [r8]
 8006174:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006178:	3307      	adds	r3, #7
 800617a:	f023 0307 	bic.w	r3, r3, #7
 800617e:	f103 0208 	add.w	r2, r3, #8
 8006182:	f8c8 2000 	str.w	r2, [r8]
 8006186:	e9d3 8900 	ldrd	r8, r9, [r3]
 800618a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800618e:	9307      	str	r3, [sp, #28]
 8006190:	f8cd 8018 	str.w	r8, [sp, #24]
 8006194:	ee08 0a10 	vmov	s16, r0
 8006198:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800619c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061a0:	4b9e      	ldr	r3, [pc, #632]	; (800641c <_printf_float+0x2d8>)
 80061a2:	f04f 32ff 	mov.w	r2, #4294967295
 80061a6:	f7fa fcc9 	bl	8000b3c <__aeabi_dcmpun>
 80061aa:	bb88      	cbnz	r0, 8006210 <_printf_float+0xcc>
 80061ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061b0:	4b9a      	ldr	r3, [pc, #616]	; (800641c <_printf_float+0x2d8>)
 80061b2:	f04f 32ff 	mov.w	r2, #4294967295
 80061b6:	f7fa fca3 	bl	8000b00 <__aeabi_dcmple>
 80061ba:	bb48      	cbnz	r0, 8006210 <_printf_float+0xcc>
 80061bc:	2200      	movs	r2, #0
 80061be:	2300      	movs	r3, #0
 80061c0:	4640      	mov	r0, r8
 80061c2:	4649      	mov	r1, r9
 80061c4:	f7fa fc92 	bl	8000aec <__aeabi_dcmplt>
 80061c8:	b110      	cbz	r0, 80061d0 <_printf_float+0x8c>
 80061ca:	232d      	movs	r3, #45	; 0x2d
 80061cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061d0:	4a93      	ldr	r2, [pc, #588]	; (8006420 <_printf_float+0x2dc>)
 80061d2:	4b94      	ldr	r3, [pc, #592]	; (8006424 <_printf_float+0x2e0>)
 80061d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80061d8:	bf94      	ite	ls
 80061da:	4690      	movls	r8, r2
 80061dc:	4698      	movhi	r8, r3
 80061de:	2303      	movs	r3, #3
 80061e0:	6123      	str	r3, [r4, #16]
 80061e2:	9b05      	ldr	r3, [sp, #20]
 80061e4:	f023 0304 	bic.w	r3, r3, #4
 80061e8:	6023      	str	r3, [r4, #0]
 80061ea:	f04f 0900 	mov.w	r9, #0
 80061ee:	9700      	str	r7, [sp, #0]
 80061f0:	4633      	mov	r3, r6
 80061f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80061f4:	4621      	mov	r1, r4
 80061f6:	4628      	mov	r0, r5
 80061f8:	f000 f9da 	bl	80065b0 <_printf_common>
 80061fc:	3001      	adds	r0, #1
 80061fe:	f040 8090 	bne.w	8006322 <_printf_float+0x1de>
 8006202:	f04f 30ff 	mov.w	r0, #4294967295
 8006206:	b00d      	add	sp, #52	; 0x34
 8006208:	ecbd 8b02 	vpop	{d8}
 800620c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006210:	4642      	mov	r2, r8
 8006212:	464b      	mov	r3, r9
 8006214:	4640      	mov	r0, r8
 8006216:	4649      	mov	r1, r9
 8006218:	f7fa fc90 	bl	8000b3c <__aeabi_dcmpun>
 800621c:	b140      	cbz	r0, 8006230 <_printf_float+0xec>
 800621e:	464b      	mov	r3, r9
 8006220:	2b00      	cmp	r3, #0
 8006222:	bfbc      	itt	lt
 8006224:	232d      	movlt	r3, #45	; 0x2d
 8006226:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800622a:	4a7f      	ldr	r2, [pc, #508]	; (8006428 <_printf_float+0x2e4>)
 800622c:	4b7f      	ldr	r3, [pc, #508]	; (800642c <_printf_float+0x2e8>)
 800622e:	e7d1      	b.n	80061d4 <_printf_float+0x90>
 8006230:	6863      	ldr	r3, [r4, #4]
 8006232:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006236:	9206      	str	r2, [sp, #24]
 8006238:	1c5a      	adds	r2, r3, #1
 800623a:	d13f      	bne.n	80062bc <_printf_float+0x178>
 800623c:	2306      	movs	r3, #6
 800623e:	6063      	str	r3, [r4, #4]
 8006240:	9b05      	ldr	r3, [sp, #20]
 8006242:	6861      	ldr	r1, [r4, #4]
 8006244:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006248:	2300      	movs	r3, #0
 800624a:	9303      	str	r3, [sp, #12]
 800624c:	ab0a      	add	r3, sp, #40	; 0x28
 800624e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006252:	ab09      	add	r3, sp, #36	; 0x24
 8006254:	ec49 8b10 	vmov	d0, r8, r9
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	6022      	str	r2, [r4, #0]
 800625c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006260:	4628      	mov	r0, r5
 8006262:	f7ff fecf 	bl	8006004 <__cvt>
 8006266:	9b06      	ldr	r3, [sp, #24]
 8006268:	9909      	ldr	r1, [sp, #36]	; 0x24
 800626a:	2b47      	cmp	r3, #71	; 0x47
 800626c:	4680      	mov	r8, r0
 800626e:	d108      	bne.n	8006282 <_printf_float+0x13e>
 8006270:	1cc8      	adds	r0, r1, #3
 8006272:	db02      	blt.n	800627a <_printf_float+0x136>
 8006274:	6863      	ldr	r3, [r4, #4]
 8006276:	4299      	cmp	r1, r3
 8006278:	dd41      	ble.n	80062fe <_printf_float+0x1ba>
 800627a:	f1ab 0302 	sub.w	r3, fp, #2
 800627e:	fa5f fb83 	uxtb.w	fp, r3
 8006282:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006286:	d820      	bhi.n	80062ca <_printf_float+0x186>
 8006288:	3901      	subs	r1, #1
 800628a:	465a      	mov	r2, fp
 800628c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006290:	9109      	str	r1, [sp, #36]	; 0x24
 8006292:	f7ff ff19 	bl	80060c8 <__exponent>
 8006296:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006298:	1813      	adds	r3, r2, r0
 800629a:	2a01      	cmp	r2, #1
 800629c:	4681      	mov	r9, r0
 800629e:	6123      	str	r3, [r4, #16]
 80062a0:	dc02      	bgt.n	80062a8 <_printf_float+0x164>
 80062a2:	6822      	ldr	r2, [r4, #0]
 80062a4:	07d2      	lsls	r2, r2, #31
 80062a6:	d501      	bpl.n	80062ac <_printf_float+0x168>
 80062a8:	3301      	adds	r3, #1
 80062aa:	6123      	str	r3, [r4, #16]
 80062ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d09c      	beq.n	80061ee <_printf_float+0xaa>
 80062b4:	232d      	movs	r3, #45	; 0x2d
 80062b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062ba:	e798      	b.n	80061ee <_printf_float+0xaa>
 80062bc:	9a06      	ldr	r2, [sp, #24]
 80062be:	2a47      	cmp	r2, #71	; 0x47
 80062c0:	d1be      	bne.n	8006240 <_printf_float+0xfc>
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1bc      	bne.n	8006240 <_printf_float+0xfc>
 80062c6:	2301      	movs	r3, #1
 80062c8:	e7b9      	b.n	800623e <_printf_float+0xfa>
 80062ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80062ce:	d118      	bne.n	8006302 <_printf_float+0x1be>
 80062d0:	2900      	cmp	r1, #0
 80062d2:	6863      	ldr	r3, [r4, #4]
 80062d4:	dd0b      	ble.n	80062ee <_printf_float+0x1aa>
 80062d6:	6121      	str	r1, [r4, #16]
 80062d8:	b913      	cbnz	r3, 80062e0 <_printf_float+0x19c>
 80062da:	6822      	ldr	r2, [r4, #0]
 80062dc:	07d0      	lsls	r0, r2, #31
 80062de:	d502      	bpl.n	80062e6 <_printf_float+0x1a2>
 80062e0:	3301      	adds	r3, #1
 80062e2:	440b      	add	r3, r1
 80062e4:	6123      	str	r3, [r4, #16]
 80062e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80062e8:	f04f 0900 	mov.w	r9, #0
 80062ec:	e7de      	b.n	80062ac <_printf_float+0x168>
 80062ee:	b913      	cbnz	r3, 80062f6 <_printf_float+0x1b2>
 80062f0:	6822      	ldr	r2, [r4, #0]
 80062f2:	07d2      	lsls	r2, r2, #31
 80062f4:	d501      	bpl.n	80062fa <_printf_float+0x1b6>
 80062f6:	3302      	adds	r3, #2
 80062f8:	e7f4      	b.n	80062e4 <_printf_float+0x1a0>
 80062fa:	2301      	movs	r3, #1
 80062fc:	e7f2      	b.n	80062e4 <_printf_float+0x1a0>
 80062fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006304:	4299      	cmp	r1, r3
 8006306:	db05      	blt.n	8006314 <_printf_float+0x1d0>
 8006308:	6823      	ldr	r3, [r4, #0]
 800630a:	6121      	str	r1, [r4, #16]
 800630c:	07d8      	lsls	r0, r3, #31
 800630e:	d5ea      	bpl.n	80062e6 <_printf_float+0x1a2>
 8006310:	1c4b      	adds	r3, r1, #1
 8006312:	e7e7      	b.n	80062e4 <_printf_float+0x1a0>
 8006314:	2900      	cmp	r1, #0
 8006316:	bfd4      	ite	le
 8006318:	f1c1 0202 	rsble	r2, r1, #2
 800631c:	2201      	movgt	r2, #1
 800631e:	4413      	add	r3, r2
 8006320:	e7e0      	b.n	80062e4 <_printf_float+0x1a0>
 8006322:	6823      	ldr	r3, [r4, #0]
 8006324:	055a      	lsls	r2, r3, #21
 8006326:	d407      	bmi.n	8006338 <_printf_float+0x1f4>
 8006328:	6923      	ldr	r3, [r4, #16]
 800632a:	4642      	mov	r2, r8
 800632c:	4631      	mov	r1, r6
 800632e:	4628      	mov	r0, r5
 8006330:	47b8      	blx	r7
 8006332:	3001      	adds	r0, #1
 8006334:	d12c      	bne.n	8006390 <_printf_float+0x24c>
 8006336:	e764      	b.n	8006202 <_printf_float+0xbe>
 8006338:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800633c:	f240 80e0 	bls.w	8006500 <_printf_float+0x3bc>
 8006340:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006344:	2200      	movs	r2, #0
 8006346:	2300      	movs	r3, #0
 8006348:	f7fa fbc6 	bl	8000ad8 <__aeabi_dcmpeq>
 800634c:	2800      	cmp	r0, #0
 800634e:	d034      	beq.n	80063ba <_printf_float+0x276>
 8006350:	4a37      	ldr	r2, [pc, #220]	; (8006430 <_printf_float+0x2ec>)
 8006352:	2301      	movs	r3, #1
 8006354:	4631      	mov	r1, r6
 8006356:	4628      	mov	r0, r5
 8006358:	47b8      	blx	r7
 800635a:	3001      	adds	r0, #1
 800635c:	f43f af51 	beq.w	8006202 <_printf_float+0xbe>
 8006360:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006364:	429a      	cmp	r2, r3
 8006366:	db02      	blt.n	800636e <_printf_float+0x22a>
 8006368:	6823      	ldr	r3, [r4, #0]
 800636a:	07d8      	lsls	r0, r3, #31
 800636c:	d510      	bpl.n	8006390 <_printf_float+0x24c>
 800636e:	ee18 3a10 	vmov	r3, s16
 8006372:	4652      	mov	r2, sl
 8006374:	4631      	mov	r1, r6
 8006376:	4628      	mov	r0, r5
 8006378:	47b8      	blx	r7
 800637a:	3001      	adds	r0, #1
 800637c:	f43f af41 	beq.w	8006202 <_printf_float+0xbe>
 8006380:	f04f 0800 	mov.w	r8, #0
 8006384:	f104 091a 	add.w	r9, r4, #26
 8006388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800638a:	3b01      	subs	r3, #1
 800638c:	4543      	cmp	r3, r8
 800638e:	dc09      	bgt.n	80063a4 <_printf_float+0x260>
 8006390:	6823      	ldr	r3, [r4, #0]
 8006392:	079b      	lsls	r3, r3, #30
 8006394:	f100 8107 	bmi.w	80065a6 <_printf_float+0x462>
 8006398:	68e0      	ldr	r0, [r4, #12]
 800639a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800639c:	4298      	cmp	r0, r3
 800639e:	bfb8      	it	lt
 80063a0:	4618      	movlt	r0, r3
 80063a2:	e730      	b.n	8006206 <_printf_float+0xc2>
 80063a4:	2301      	movs	r3, #1
 80063a6:	464a      	mov	r2, r9
 80063a8:	4631      	mov	r1, r6
 80063aa:	4628      	mov	r0, r5
 80063ac:	47b8      	blx	r7
 80063ae:	3001      	adds	r0, #1
 80063b0:	f43f af27 	beq.w	8006202 <_printf_float+0xbe>
 80063b4:	f108 0801 	add.w	r8, r8, #1
 80063b8:	e7e6      	b.n	8006388 <_printf_float+0x244>
 80063ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063bc:	2b00      	cmp	r3, #0
 80063be:	dc39      	bgt.n	8006434 <_printf_float+0x2f0>
 80063c0:	4a1b      	ldr	r2, [pc, #108]	; (8006430 <_printf_float+0x2ec>)
 80063c2:	2301      	movs	r3, #1
 80063c4:	4631      	mov	r1, r6
 80063c6:	4628      	mov	r0, r5
 80063c8:	47b8      	blx	r7
 80063ca:	3001      	adds	r0, #1
 80063cc:	f43f af19 	beq.w	8006202 <_printf_float+0xbe>
 80063d0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80063d4:	4313      	orrs	r3, r2
 80063d6:	d102      	bne.n	80063de <_printf_float+0x29a>
 80063d8:	6823      	ldr	r3, [r4, #0]
 80063da:	07d9      	lsls	r1, r3, #31
 80063dc:	d5d8      	bpl.n	8006390 <_printf_float+0x24c>
 80063de:	ee18 3a10 	vmov	r3, s16
 80063e2:	4652      	mov	r2, sl
 80063e4:	4631      	mov	r1, r6
 80063e6:	4628      	mov	r0, r5
 80063e8:	47b8      	blx	r7
 80063ea:	3001      	adds	r0, #1
 80063ec:	f43f af09 	beq.w	8006202 <_printf_float+0xbe>
 80063f0:	f04f 0900 	mov.w	r9, #0
 80063f4:	f104 0a1a 	add.w	sl, r4, #26
 80063f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063fa:	425b      	negs	r3, r3
 80063fc:	454b      	cmp	r3, r9
 80063fe:	dc01      	bgt.n	8006404 <_printf_float+0x2c0>
 8006400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006402:	e792      	b.n	800632a <_printf_float+0x1e6>
 8006404:	2301      	movs	r3, #1
 8006406:	4652      	mov	r2, sl
 8006408:	4631      	mov	r1, r6
 800640a:	4628      	mov	r0, r5
 800640c:	47b8      	blx	r7
 800640e:	3001      	adds	r0, #1
 8006410:	f43f aef7 	beq.w	8006202 <_printf_float+0xbe>
 8006414:	f109 0901 	add.w	r9, r9, #1
 8006418:	e7ee      	b.n	80063f8 <_printf_float+0x2b4>
 800641a:	bf00      	nop
 800641c:	7fefffff 	.word	0x7fefffff
 8006420:	0800b028 	.word	0x0800b028
 8006424:	0800b02c 	.word	0x0800b02c
 8006428:	0800b030 	.word	0x0800b030
 800642c:	0800b034 	.word	0x0800b034
 8006430:	0800b038 	.word	0x0800b038
 8006434:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006436:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006438:	429a      	cmp	r2, r3
 800643a:	bfa8      	it	ge
 800643c:	461a      	movge	r2, r3
 800643e:	2a00      	cmp	r2, #0
 8006440:	4691      	mov	r9, r2
 8006442:	dc37      	bgt.n	80064b4 <_printf_float+0x370>
 8006444:	f04f 0b00 	mov.w	fp, #0
 8006448:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800644c:	f104 021a 	add.w	r2, r4, #26
 8006450:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006452:	9305      	str	r3, [sp, #20]
 8006454:	eba3 0309 	sub.w	r3, r3, r9
 8006458:	455b      	cmp	r3, fp
 800645a:	dc33      	bgt.n	80064c4 <_printf_float+0x380>
 800645c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006460:	429a      	cmp	r2, r3
 8006462:	db3b      	blt.n	80064dc <_printf_float+0x398>
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	07da      	lsls	r2, r3, #31
 8006468:	d438      	bmi.n	80064dc <_printf_float+0x398>
 800646a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800646e:	eba2 0903 	sub.w	r9, r2, r3
 8006472:	9b05      	ldr	r3, [sp, #20]
 8006474:	1ad2      	subs	r2, r2, r3
 8006476:	4591      	cmp	r9, r2
 8006478:	bfa8      	it	ge
 800647a:	4691      	movge	r9, r2
 800647c:	f1b9 0f00 	cmp.w	r9, #0
 8006480:	dc35      	bgt.n	80064ee <_printf_float+0x3aa>
 8006482:	f04f 0800 	mov.w	r8, #0
 8006486:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800648a:	f104 0a1a 	add.w	sl, r4, #26
 800648e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006492:	1a9b      	subs	r3, r3, r2
 8006494:	eba3 0309 	sub.w	r3, r3, r9
 8006498:	4543      	cmp	r3, r8
 800649a:	f77f af79 	ble.w	8006390 <_printf_float+0x24c>
 800649e:	2301      	movs	r3, #1
 80064a0:	4652      	mov	r2, sl
 80064a2:	4631      	mov	r1, r6
 80064a4:	4628      	mov	r0, r5
 80064a6:	47b8      	blx	r7
 80064a8:	3001      	adds	r0, #1
 80064aa:	f43f aeaa 	beq.w	8006202 <_printf_float+0xbe>
 80064ae:	f108 0801 	add.w	r8, r8, #1
 80064b2:	e7ec      	b.n	800648e <_printf_float+0x34a>
 80064b4:	4613      	mov	r3, r2
 80064b6:	4631      	mov	r1, r6
 80064b8:	4642      	mov	r2, r8
 80064ba:	4628      	mov	r0, r5
 80064bc:	47b8      	blx	r7
 80064be:	3001      	adds	r0, #1
 80064c0:	d1c0      	bne.n	8006444 <_printf_float+0x300>
 80064c2:	e69e      	b.n	8006202 <_printf_float+0xbe>
 80064c4:	2301      	movs	r3, #1
 80064c6:	4631      	mov	r1, r6
 80064c8:	4628      	mov	r0, r5
 80064ca:	9205      	str	r2, [sp, #20]
 80064cc:	47b8      	blx	r7
 80064ce:	3001      	adds	r0, #1
 80064d0:	f43f ae97 	beq.w	8006202 <_printf_float+0xbe>
 80064d4:	9a05      	ldr	r2, [sp, #20]
 80064d6:	f10b 0b01 	add.w	fp, fp, #1
 80064da:	e7b9      	b.n	8006450 <_printf_float+0x30c>
 80064dc:	ee18 3a10 	vmov	r3, s16
 80064e0:	4652      	mov	r2, sl
 80064e2:	4631      	mov	r1, r6
 80064e4:	4628      	mov	r0, r5
 80064e6:	47b8      	blx	r7
 80064e8:	3001      	adds	r0, #1
 80064ea:	d1be      	bne.n	800646a <_printf_float+0x326>
 80064ec:	e689      	b.n	8006202 <_printf_float+0xbe>
 80064ee:	9a05      	ldr	r2, [sp, #20]
 80064f0:	464b      	mov	r3, r9
 80064f2:	4442      	add	r2, r8
 80064f4:	4631      	mov	r1, r6
 80064f6:	4628      	mov	r0, r5
 80064f8:	47b8      	blx	r7
 80064fa:	3001      	adds	r0, #1
 80064fc:	d1c1      	bne.n	8006482 <_printf_float+0x33e>
 80064fe:	e680      	b.n	8006202 <_printf_float+0xbe>
 8006500:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006502:	2a01      	cmp	r2, #1
 8006504:	dc01      	bgt.n	800650a <_printf_float+0x3c6>
 8006506:	07db      	lsls	r3, r3, #31
 8006508:	d53a      	bpl.n	8006580 <_printf_float+0x43c>
 800650a:	2301      	movs	r3, #1
 800650c:	4642      	mov	r2, r8
 800650e:	4631      	mov	r1, r6
 8006510:	4628      	mov	r0, r5
 8006512:	47b8      	blx	r7
 8006514:	3001      	adds	r0, #1
 8006516:	f43f ae74 	beq.w	8006202 <_printf_float+0xbe>
 800651a:	ee18 3a10 	vmov	r3, s16
 800651e:	4652      	mov	r2, sl
 8006520:	4631      	mov	r1, r6
 8006522:	4628      	mov	r0, r5
 8006524:	47b8      	blx	r7
 8006526:	3001      	adds	r0, #1
 8006528:	f43f ae6b 	beq.w	8006202 <_printf_float+0xbe>
 800652c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006530:	2200      	movs	r2, #0
 8006532:	2300      	movs	r3, #0
 8006534:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006538:	f7fa face 	bl	8000ad8 <__aeabi_dcmpeq>
 800653c:	b9d8      	cbnz	r0, 8006576 <_printf_float+0x432>
 800653e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006542:	f108 0201 	add.w	r2, r8, #1
 8006546:	4631      	mov	r1, r6
 8006548:	4628      	mov	r0, r5
 800654a:	47b8      	blx	r7
 800654c:	3001      	adds	r0, #1
 800654e:	d10e      	bne.n	800656e <_printf_float+0x42a>
 8006550:	e657      	b.n	8006202 <_printf_float+0xbe>
 8006552:	2301      	movs	r3, #1
 8006554:	4652      	mov	r2, sl
 8006556:	4631      	mov	r1, r6
 8006558:	4628      	mov	r0, r5
 800655a:	47b8      	blx	r7
 800655c:	3001      	adds	r0, #1
 800655e:	f43f ae50 	beq.w	8006202 <_printf_float+0xbe>
 8006562:	f108 0801 	add.w	r8, r8, #1
 8006566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006568:	3b01      	subs	r3, #1
 800656a:	4543      	cmp	r3, r8
 800656c:	dcf1      	bgt.n	8006552 <_printf_float+0x40e>
 800656e:	464b      	mov	r3, r9
 8006570:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006574:	e6da      	b.n	800632c <_printf_float+0x1e8>
 8006576:	f04f 0800 	mov.w	r8, #0
 800657a:	f104 0a1a 	add.w	sl, r4, #26
 800657e:	e7f2      	b.n	8006566 <_printf_float+0x422>
 8006580:	2301      	movs	r3, #1
 8006582:	4642      	mov	r2, r8
 8006584:	e7df      	b.n	8006546 <_printf_float+0x402>
 8006586:	2301      	movs	r3, #1
 8006588:	464a      	mov	r2, r9
 800658a:	4631      	mov	r1, r6
 800658c:	4628      	mov	r0, r5
 800658e:	47b8      	blx	r7
 8006590:	3001      	adds	r0, #1
 8006592:	f43f ae36 	beq.w	8006202 <_printf_float+0xbe>
 8006596:	f108 0801 	add.w	r8, r8, #1
 800659a:	68e3      	ldr	r3, [r4, #12]
 800659c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800659e:	1a5b      	subs	r3, r3, r1
 80065a0:	4543      	cmp	r3, r8
 80065a2:	dcf0      	bgt.n	8006586 <_printf_float+0x442>
 80065a4:	e6f8      	b.n	8006398 <_printf_float+0x254>
 80065a6:	f04f 0800 	mov.w	r8, #0
 80065aa:	f104 0919 	add.w	r9, r4, #25
 80065ae:	e7f4      	b.n	800659a <_printf_float+0x456>

080065b0 <_printf_common>:
 80065b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065b4:	4616      	mov	r6, r2
 80065b6:	4699      	mov	r9, r3
 80065b8:	688a      	ldr	r2, [r1, #8]
 80065ba:	690b      	ldr	r3, [r1, #16]
 80065bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065c0:	4293      	cmp	r3, r2
 80065c2:	bfb8      	it	lt
 80065c4:	4613      	movlt	r3, r2
 80065c6:	6033      	str	r3, [r6, #0]
 80065c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065cc:	4607      	mov	r7, r0
 80065ce:	460c      	mov	r4, r1
 80065d0:	b10a      	cbz	r2, 80065d6 <_printf_common+0x26>
 80065d2:	3301      	adds	r3, #1
 80065d4:	6033      	str	r3, [r6, #0]
 80065d6:	6823      	ldr	r3, [r4, #0]
 80065d8:	0699      	lsls	r1, r3, #26
 80065da:	bf42      	ittt	mi
 80065dc:	6833      	ldrmi	r3, [r6, #0]
 80065de:	3302      	addmi	r3, #2
 80065e0:	6033      	strmi	r3, [r6, #0]
 80065e2:	6825      	ldr	r5, [r4, #0]
 80065e4:	f015 0506 	ands.w	r5, r5, #6
 80065e8:	d106      	bne.n	80065f8 <_printf_common+0x48>
 80065ea:	f104 0a19 	add.w	sl, r4, #25
 80065ee:	68e3      	ldr	r3, [r4, #12]
 80065f0:	6832      	ldr	r2, [r6, #0]
 80065f2:	1a9b      	subs	r3, r3, r2
 80065f4:	42ab      	cmp	r3, r5
 80065f6:	dc26      	bgt.n	8006646 <_printf_common+0x96>
 80065f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065fc:	1e13      	subs	r3, r2, #0
 80065fe:	6822      	ldr	r2, [r4, #0]
 8006600:	bf18      	it	ne
 8006602:	2301      	movne	r3, #1
 8006604:	0692      	lsls	r2, r2, #26
 8006606:	d42b      	bmi.n	8006660 <_printf_common+0xb0>
 8006608:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800660c:	4649      	mov	r1, r9
 800660e:	4638      	mov	r0, r7
 8006610:	47c0      	blx	r8
 8006612:	3001      	adds	r0, #1
 8006614:	d01e      	beq.n	8006654 <_printf_common+0xa4>
 8006616:	6823      	ldr	r3, [r4, #0]
 8006618:	6922      	ldr	r2, [r4, #16]
 800661a:	f003 0306 	and.w	r3, r3, #6
 800661e:	2b04      	cmp	r3, #4
 8006620:	bf02      	ittt	eq
 8006622:	68e5      	ldreq	r5, [r4, #12]
 8006624:	6833      	ldreq	r3, [r6, #0]
 8006626:	1aed      	subeq	r5, r5, r3
 8006628:	68a3      	ldr	r3, [r4, #8]
 800662a:	bf0c      	ite	eq
 800662c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006630:	2500      	movne	r5, #0
 8006632:	4293      	cmp	r3, r2
 8006634:	bfc4      	itt	gt
 8006636:	1a9b      	subgt	r3, r3, r2
 8006638:	18ed      	addgt	r5, r5, r3
 800663a:	2600      	movs	r6, #0
 800663c:	341a      	adds	r4, #26
 800663e:	42b5      	cmp	r5, r6
 8006640:	d11a      	bne.n	8006678 <_printf_common+0xc8>
 8006642:	2000      	movs	r0, #0
 8006644:	e008      	b.n	8006658 <_printf_common+0xa8>
 8006646:	2301      	movs	r3, #1
 8006648:	4652      	mov	r2, sl
 800664a:	4649      	mov	r1, r9
 800664c:	4638      	mov	r0, r7
 800664e:	47c0      	blx	r8
 8006650:	3001      	adds	r0, #1
 8006652:	d103      	bne.n	800665c <_printf_common+0xac>
 8006654:	f04f 30ff 	mov.w	r0, #4294967295
 8006658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800665c:	3501      	adds	r5, #1
 800665e:	e7c6      	b.n	80065ee <_printf_common+0x3e>
 8006660:	18e1      	adds	r1, r4, r3
 8006662:	1c5a      	adds	r2, r3, #1
 8006664:	2030      	movs	r0, #48	; 0x30
 8006666:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800666a:	4422      	add	r2, r4
 800666c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006670:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006674:	3302      	adds	r3, #2
 8006676:	e7c7      	b.n	8006608 <_printf_common+0x58>
 8006678:	2301      	movs	r3, #1
 800667a:	4622      	mov	r2, r4
 800667c:	4649      	mov	r1, r9
 800667e:	4638      	mov	r0, r7
 8006680:	47c0      	blx	r8
 8006682:	3001      	adds	r0, #1
 8006684:	d0e6      	beq.n	8006654 <_printf_common+0xa4>
 8006686:	3601      	adds	r6, #1
 8006688:	e7d9      	b.n	800663e <_printf_common+0x8e>
	...

0800668c <_printf_i>:
 800668c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006690:	7e0f      	ldrb	r7, [r1, #24]
 8006692:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006694:	2f78      	cmp	r7, #120	; 0x78
 8006696:	4691      	mov	r9, r2
 8006698:	4680      	mov	r8, r0
 800669a:	460c      	mov	r4, r1
 800669c:	469a      	mov	sl, r3
 800669e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80066a2:	d807      	bhi.n	80066b4 <_printf_i+0x28>
 80066a4:	2f62      	cmp	r7, #98	; 0x62
 80066a6:	d80a      	bhi.n	80066be <_printf_i+0x32>
 80066a8:	2f00      	cmp	r7, #0
 80066aa:	f000 80d4 	beq.w	8006856 <_printf_i+0x1ca>
 80066ae:	2f58      	cmp	r7, #88	; 0x58
 80066b0:	f000 80c0 	beq.w	8006834 <_printf_i+0x1a8>
 80066b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80066bc:	e03a      	b.n	8006734 <_printf_i+0xa8>
 80066be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80066c2:	2b15      	cmp	r3, #21
 80066c4:	d8f6      	bhi.n	80066b4 <_printf_i+0x28>
 80066c6:	a101      	add	r1, pc, #4	; (adr r1, 80066cc <_printf_i+0x40>)
 80066c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066cc:	08006725 	.word	0x08006725
 80066d0:	08006739 	.word	0x08006739
 80066d4:	080066b5 	.word	0x080066b5
 80066d8:	080066b5 	.word	0x080066b5
 80066dc:	080066b5 	.word	0x080066b5
 80066e0:	080066b5 	.word	0x080066b5
 80066e4:	08006739 	.word	0x08006739
 80066e8:	080066b5 	.word	0x080066b5
 80066ec:	080066b5 	.word	0x080066b5
 80066f0:	080066b5 	.word	0x080066b5
 80066f4:	080066b5 	.word	0x080066b5
 80066f8:	0800683d 	.word	0x0800683d
 80066fc:	08006765 	.word	0x08006765
 8006700:	080067f7 	.word	0x080067f7
 8006704:	080066b5 	.word	0x080066b5
 8006708:	080066b5 	.word	0x080066b5
 800670c:	0800685f 	.word	0x0800685f
 8006710:	080066b5 	.word	0x080066b5
 8006714:	08006765 	.word	0x08006765
 8006718:	080066b5 	.word	0x080066b5
 800671c:	080066b5 	.word	0x080066b5
 8006720:	080067ff 	.word	0x080067ff
 8006724:	682b      	ldr	r3, [r5, #0]
 8006726:	1d1a      	adds	r2, r3, #4
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	602a      	str	r2, [r5, #0]
 800672c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006730:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006734:	2301      	movs	r3, #1
 8006736:	e09f      	b.n	8006878 <_printf_i+0x1ec>
 8006738:	6820      	ldr	r0, [r4, #0]
 800673a:	682b      	ldr	r3, [r5, #0]
 800673c:	0607      	lsls	r7, r0, #24
 800673e:	f103 0104 	add.w	r1, r3, #4
 8006742:	6029      	str	r1, [r5, #0]
 8006744:	d501      	bpl.n	800674a <_printf_i+0xbe>
 8006746:	681e      	ldr	r6, [r3, #0]
 8006748:	e003      	b.n	8006752 <_printf_i+0xc6>
 800674a:	0646      	lsls	r6, r0, #25
 800674c:	d5fb      	bpl.n	8006746 <_printf_i+0xba>
 800674e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006752:	2e00      	cmp	r6, #0
 8006754:	da03      	bge.n	800675e <_printf_i+0xd2>
 8006756:	232d      	movs	r3, #45	; 0x2d
 8006758:	4276      	negs	r6, r6
 800675a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800675e:	485a      	ldr	r0, [pc, #360]	; (80068c8 <_printf_i+0x23c>)
 8006760:	230a      	movs	r3, #10
 8006762:	e012      	b.n	800678a <_printf_i+0xfe>
 8006764:	682b      	ldr	r3, [r5, #0]
 8006766:	6820      	ldr	r0, [r4, #0]
 8006768:	1d19      	adds	r1, r3, #4
 800676a:	6029      	str	r1, [r5, #0]
 800676c:	0605      	lsls	r5, r0, #24
 800676e:	d501      	bpl.n	8006774 <_printf_i+0xe8>
 8006770:	681e      	ldr	r6, [r3, #0]
 8006772:	e002      	b.n	800677a <_printf_i+0xee>
 8006774:	0641      	lsls	r1, r0, #25
 8006776:	d5fb      	bpl.n	8006770 <_printf_i+0xe4>
 8006778:	881e      	ldrh	r6, [r3, #0]
 800677a:	4853      	ldr	r0, [pc, #332]	; (80068c8 <_printf_i+0x23c>)
 800677c:	2f6f      	cmp	r7, #111	; 0x6f
 800677e:	bf0c      	ite	eq
 8006780:	2308      	moveq	r3, #8
 8006782:	230a      	movne	r3, #10
 8006784:	2100      	movs	r1, #0
 8006786:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800678a:	6865      	ldr	r5, [r4, #4]
 800678c:	60a5      	str	r5, [r4, #8]
 800678e:	2d00      	cmp	r5, #0
 8006790:	bfa2      	ittt	ge
 8006792:	6821      	ldrge	r1, [r4, #0]
 8006794:	f021 0104 	bicge.w	r1, r1, #4
 8006798:	6021      	strge	r1, [r4, #0]
 800679a:	b90e      	cbnz	r6, 80067a0 <_printf_i+0x114>
 800679c:	2d00      	cmp	r5, #0
 800679e:	d04b      	beq.n	8006838 <_printf_i+0x1ac>
 80067a0:	4615      	mov	r5, r2
 80067a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80067a6:	fb03 6711 	mls	r7, r3, r1, r6
 80067aa:	5dc7      	ldrb	r7, [r0, r7]
 80067ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80067b0:	4637      	mov	r7, r6
 80067b2:	42bb      	cmp	r3, r7
 80067b4:	460e      	mov	r6, r1
 80067b6:	d9f4      	bls.n	80067a2 <_printf_i+0x116>
 80067b8:	2b08      	cmp	r3, #8
 80067ba:	d10b      	bne.n	80067d4 <_printf_i+0x148>
 80067bc:	6823      	ldr	r3, [r4, #0]
 80067be:	07de      	lsls	r6, r3, #31
 80067c0:	d508      	bpl.n	80067d4 <_printf_i+0x148>
 80067c2:	6923      	ldr	r3, [r4, #16]
 80067c4:	6861      	ldr	r1, [r4, #4]
 80067c6:	4299      	cmp	r1, r3
 80067c8:	bfde      	ittt	le
 80067ca:	2330      	movle	r3, #48	; 0x30
 80067cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80067d4:	1b52      	subs	r2, r2, r5
 80067d6:	6122      	str	r2, [r4, #16]
 80067d8:	f8cd a000 	str.w	sl, [sp]
 80067dc:	464b      	mov	r3, r9
 80067de:	aa03      	add	r2, sp, #12
 80067e0:	4621      	mov	r1, r4
 80067e2:	4640      	mov	r0, r8
 80067e4:	f7ff fee4 	bl	80065b0 <_printf_common>
 80067e8:	3001      	adds	r0, #1
 80067ea:	d14a      	bne.n	8006882 <_printf_i+0x1f6>
 80067ec:	f04f 30ff 	mov.w	r0, #4294967295
 80067f0:	b004      	add	sp, #16
 80067f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	f043 0320 	orr.w	r3, r3, #32
 80067fc:	6023      	str	r3, [r4, #0]
 80067fe:	4833      	ldr	r0, [pc, #204]	; (80068cc <_printf_i+0x240>)
 8006800:	2778      	movs	r7, #120	; 0x78
 8006802:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	6829      	ldr	r1, [r5, #0]
 800680a:	061f      	lsls	r7, r3, #24
 800680c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006810:	d402      	bmi.n	8006818 <_printf_i+0x18c>
 8006812:	065f      	lsls	r7, r3, #25
 8006814:	bf48      	it	mi
 8006816:	b2b6      	uxthmi	r6, r6
 8006818:	07df      	lsls	r7, r3, #31
 800681a:	bf48      	it	mi
 800681c:	f043 0320 	orrmi.w	r3, r3, #32
 8006820:	6029      	str	r1, [r5, #0]
 8006822:	bf48      	it	mi
 8006824:	6023      	strmi	r3, [r4, #0]
 8006826:	b91e      	cbnz	r6, 8006830 <_printf_i+0x1a4>
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	f023 0320 	bic.w	r3, r3, #32
 800682e:	6023      	str	r3, [r4, #0]
 8006830:	2310      	movs	r3, #16
 8006832:	e7a7      	b.n	8006784 <_printf_i+0xf8>
 8006834:	4824      	ldr	r0, [pc, #144]	; (80068c8 <_printf_i+0x23c>)
 8006836:	e7e4      	b.n	8006802 <_printf_i+0x176>
 8006838:	4615      	mov	r5, r2
 800683a:	e7bd      	b.n	80067b8 <_printf_i+0x12c>
 800683c:	682b      	ldr	r3, [r5, #0]
 800683e:	6826      	ldr	r6, [r4, #0]
 8006840:	6961      	ldr	r1, [r4, #20]
 8006842:	1d18      	adds	r0, r3, #4
 8006844:	6028      	str	r0, [r5, #0]
 8006846:	0635      	lsls	r5, r6, #24
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	d501      	bpl.n	8006850 <_printf_i+0x1c4>
 800684c:	6019      	str	r1, [r3, #0]
 800684e:	e002      	b.n	8006856 <_printf_i+0x1ca>
 8006850:	0670      	lsls	r0, r6, #25
 8006852:	d5fb      	bpl.n	800684c <_printf_i+0x1c0>
 8006854:	8019      	strh	r1, [r3, #0]
 8006856:	2300      	movs	r3, #0
 8006858:	6123      	str	r3, [r4, #16]
 800685a:	4615      	mov	r5, r2
 800685c:	e7bc      	b.n	80067d8 <_printf_i+0x14c>
 800685e:	682b      	ldr	r3, [r5, #0]
 8006860:	1d1a      	adds	r2, r3, #4
 8006862:	602a      	str	r2, [r5, #0]
 8006864:	681d      	ldr	r5, [r3, #0]
 8006866:	6862      	ldr	r2, [r4, #4]
 8006868:	2100      	movs	r1, #0
 800686a:	4628      	mov	r0, r5
 800686c:	f7f9 fcb8 	bl	80001e0 <memchr>
 8006870:	b108      	cbz	r0, 8006876 <_printf_i+0x1ea>
 8006872:	1b40      	subs	r0, r0, r5
 8006874:	6060      	str	r0, [r4, #4]
 8006876:	6863      	ldr	r3, [r4, #4]
 8006878:	6123      	str	r3, [r4, #16]
 800687a:	2300      	movs	r3, #0
 800687c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006880:	e7aa      	b.n	80067d8 <_printf_i+0x14c>
 8006882:	6923      	ldr	r3, [r4, #16]
 8006884:	462a      	mov	r2, r5
 8006886:	4649      	mov	r1, r9
 8006888:	4640      	mov	r0, r8
 800688a:	47d0      	blx	sl
 800688c:	3001      	adds	r0, #1
 800688e:	d0ad      	beq.n	80067ec <_printf_i+0x160>
 8006890:	6823      	ldr	r3, [r4, #0]
 8006892:	079b      	lsls	r3, r3, #30
 8006894:	d413      	bmi.n	80068be <_printf_i+0x232>
 8006896:	68e0      	ldr	r0, [r4, #12]
 8006898:	9b03      	ldr	r3, [sp, #12]
 800689a:	4298      	cmp	r0, r3
 800689c:	bfb8      	it	lt
 800689e:	4618      	movlt	r0, r3
 80068a0:	e7a6      	b.n	80067f0 <_printf_i+0x164>
 80068a2:	2301      	movs	r3, #1
 80068a4:	4632      	mov	r2, r6
 80068a6:	4649      	mov	r1, r9
 80068a8:	4640      	mov	r0, r8
 80068aa:	47d0      	blx	sl
 80068ac:	3001      	adds	r0, #1
 80068ae:	d09d      	beq.n	80067ec <_printf_i+0x160>
 80068b0:	3501      	adds	r5, #1
 80068b2:	68e3      	ldr	r3, [r4, #12]
 80068b4:	9903      	ldr	r1, [sp, #12]
 80068b6:	1a5b      	subs	r3, r3, r1
 80068b8:	42ab      	cmp	r3, r5
 80068ba:	dcf2      	bgt.n	80068a2 <_printf_i+0x216>
 80068bc:	e7eb      	b.n	8006896 <_printf_i+0x20a>
 80068be:	2500      	movs	r5, #0
 80068c0:	f104 0619 	add.w	r6, r4, #25
 80068c4:	e7f5      	b.n	80068b2 <_printf_i+0x226>
 80068c6:	bf00      	nop
 80068c8:	0800b03a 	.word	0x0800b03a
 80068cc:	0800b04b 	.word	0x0800b04b

080068d0 <_scanf_float>:
 80068d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d4:	b087      	sub	sp, #28
 80068d6:	4617      	mov	r7, r2
 80068d8:	9303      	str	r3, [sp, #12]
 80068da:	688b      	ldr	r3, [r1, #8]
 80068dc:	1e5a      	subs	r2, r3, #1
 80068de:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80068e2:	bf83      	ittte	hi
 80068e4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80068e8:	195b      	addhi	r3, r3, r5
 80068ea:	9302      	strhi	r3, [sp, #8]
 80068ec:	2300      	movls	r3, #0
 80068ee:	bf86      	itte	hi
 80068f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80068f4:	608b      	strhi	r3, [r1, #8]
 80068f6:	9302      	strls	r3, [sp, #8]
 80068f8:	680b      	ldr	r3, [r1, #0]
 80068fa:	468b      	mov	fp, r1
 80068fc:	2500      	movs	r5, #0
 80068fe:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006902:	f84b 3b1c 	str.w	r3, [fp], #28
 8006906:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800690a:	4680      	mov	r8, r0
 800690c:	460c      	mov	r4, r1
 800690e:	465e      	mov	r6, fp
 8006910:	46aa      	mov	sl, r5
 8006912:	46a9      	mov	r9, r5
 8006914:	9501      	str	r5, [sp, #4]
 8006916:	68a2      	ldr	r2, [r4, #8]
 8006918:	b152      	cbz	r2, 8006930 <_scanf_float+0x60>
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	2b4e      	cmp	r3, #78	; 0x4e
 8006920:	d864      	bhi.n	80069ec <_scanf_float+0x11c>
 8006922:	2b40      	cmp	r3, #64	; 0x40
 8006924:	d83c      	bhi.n	80069a0 <_scanf_float+0xd0>
 8006926:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800692a:	b2c8      	uxtb	r0, r1
 800692c:	280e      	cmp	r0, #14
 800692e:	d93a      	bls.n	80069a6 <_scanf_float+0xd6>
 8006930:	f1b9 0f00 	cmp.w	r9, #0
 8006934:	d003      	beq.n	800693e <_scanf_float+0x6e>
 8006936:	6823      	ldr	r3, [r4, #0]
 8006938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800693c:	6023      	str	r3, [r4, #0]
 800693e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006942:	f1ba 0f01 	cmp.w	sl, #1
 8006946:	f200 8113 	bhi.w	8006b70 <_scanf_float+0x2a0>
 800694a:	455e      	cmp	r6, fp
 800694c:	f200 8105 	bhi.w	8006b5a <_scanf_float+0x28a>
 8006950:	2501      	movs	r5, #1
 8006952:	4628      	mov	r0, r5
 8006954:	b007      	add	sp, #28
 8006956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800695a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800695e:	2a0d      	cmp	r2, #13
 8006960:	d8e6      	bhi.n	8006930 <_scanf_float+0x60>
 8006962:	a101      	add	r1, pc, #4	; (adr r1, 8006968 <_scanf_float+0x98>)
 8006964:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006968:	08006aa7 	.word	0x08006aa7
 800696c:	08006931 	.word	0x08006931
 8006970:	08006931 	.word	0x08006931
 8006974:	08006931 	.word	0x08006931
 8006978:	08006b07 	.word	0x08006b07
 800697c:	08006adf 	.word	0x08006adf
 8006980:	08006931 	.word	0x08006931
 8006984:	08006931 	.word	0x08006931
 8006988:	08006ab5 	.word	0x08006ab5
 800698c:	08006931 	.word	0x08006931
 8006990:	08006931 	.word	0x08006931
 8006994:	08006931 	.word	0x08006931
 8006998:	08006931 	.word	0x08006931
 800699c:	08006a6d 	.word	0x08006a6d
 80069a0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80069a4:	e7db      	b.n	800695e <_scanf_float+0x8e>
 80069a6:	290e      	cmp	r1, #14
 80069a8:	d8c2      	bhi.n	8006930 <_scanf_float+0x60>
 80069aa:	a001      	add	r0, pc, #4	; (adr r0, 80069b0 <_scanf_float+0xe0>)
 80069ac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80069b0:	08006a5f 	.word	0x08006a5f
 80069b4:	08006931 	.word	0x08006931
 80069b8:	08006a5f 	.word	0x08006a5f
 80069bc:	08006af3 	.word	0x08006af3
 80069c0:	08006931 	.word	0x08006931
 80069c4:	08006a0d 	.word	0x08006a0d
 80069c8:	08006a49 	.word	0x08006a49
 80069cc:	08006a49 	.word	0x08006a49
 80069d0:	08006a49 	.word	0x08006a49
 80069d4:	08006a49 	.word	0x08006a49
 80069d8:	08006a49 	.word	0x08006a49
 80069dc:	08006a49 	.word	0x08006a49
 80069e0:	08006a49 	.word	0x08006a49
 80069e4:	08006a49 	.word	0x08006a49
 80069e8:	08006a49 	.word	0x08006a49
 80069ec:	2b6e      	cmp	r3, #110	; 0x6e
 80069ee:	d809      	bhi.n	8006a04 <_scanf_float+0x134>
 80069f0:	2b60      	cmp	r3, #96	; 0x60
 80069f2:	d8b2      	bhi.n	800695a <_scanf_float+0x8a>
 80069f4:	2b54      	cmp	r3, #84	; 0x54
 80069f6:	d077      	beq.n	8006ae8 <_scanf_float+0x218>
 80069f8:	2b59      	cmp	r3, #89	; 0x59
 80069fa:	d199      	bne.n	8006930 <_scanf_float+0x60>
 80069fc:	2d07      	cmp	r5, #7
 80069fe:	d197      	bne.n	8006930 <_scanf_float+0x60>
 8006a00:	2508      	movs	r5, #8
 8006a02:	e029      	b.n	8006a58 <_scanf_float+0x188>
 8006a04:	2b74      	cmp	r3, #116	; 0x74
 8006a06:	d06f      	beq.n	8006ae8 <_scanf_float+0x218>
 8006a08:	2b79      	cmp	r3, #121	; 0x79
 8006a0a:	e7f6      	b.n	80069fa <_scanf_float+0x12a>
 8006a0c:	6821      	ldr	r1, [r4, #0]
 8006a0e:	05c8      	lsls	r0, r1, #23
 8006a10:	d51a      	bpl.n	8006a48 <_scanf_float+0x178>
 8006a12:	9b02      	ldr	r3, [sp, #8]
 8006a14:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006a18:	6021      	str	r1, [r4, #0]
 8006a1a:	f109 0901 	add.w	r9, r9, #1
 8006a1e:	b11b      	cbz	r3, 8006a28 <_scanf_float+0x158>
 8006a20:	3b01      	subs	r3, #1
 8006a22:	3201      	adds	r2, #1
 8006a24:	9302      	str	r3, [sp, #8]
 8006a26:	60a2      	str	r2, [r4, #8]
 8006a28:	68a3      	ldr	r3, [r4, #8]
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	60a3      	str	r3, [r4, #8]
 8006a2e:	6923      	ldr	r3, [r4, #16]
 8006a30:	3301      	adds	r3, #1
 8006a32:	6123      	str	r3, [r4, #16]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	3b01      	subs	r3, #1
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	607b      	str	r3, [r7, #4]
 8006a3c:	f340 8084 	ble.w	8006b48 <_scanf_float+0x278>
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	3301      	adds	r3, #1
 8006a44:	603b      	str	r3, [r7, #0]
 8006a46:	e766      	b.n	8006916 <_scanf_float+0x46>
 8006a48:	eb1a 0f05 	cmn.w	sl, r5
 8006a4c:	f47f af70 	bne.w	8006930 <_scanf_float+0x60>
 8006a50:	6822      	ldr	r2, [r4, #0]
 8006a52:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006a56:	6022      	str	r2, [r4, #0]
 8006a58:	f806 3b01 	strb.w	r3, [r6], #1
 8006a5c:	e7e4      	b.n	8006a28 <_scanf_float+0x158>
 8006a5e:	6822      	ldr	r2, [r4, #0]
 8006a60:	0610      	lsls	r0, r2, #24
 8006a62:	f57f af65 	bpl.w	8006930 <_scanf_float+0x60>
 8006a66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a6a:	e7f4      	b.n	8006a56 <_scanf_float+0x186>
 8006a6c:	f1ba 0f00 	cmp.w	sl, #0
 8006a70:	d10e      	bne.n	8006a90 <_scanf_float+0x1c0>
 8006a72:	f1b9 0f00 	cmp.w	r9, #0
 8006a76:	d10e      	bne.n	8006a96 <_scanf_float+0x1c6>
 8006a78:	6822      	ldr	r2, [r4, #0]
 8006a7a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006a7e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006a82:	d108      	bne.n	8006a96 <_scanf_float+0x1c6>
 8006a84:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a88:	6022      	str	r2, [r4, #0]
 8006a8a:	f04f 0a01 	mov.w	sl, #1
 8006a8e:	e7e3      	b.n	8006a58 <_scanf_float+0x188>
 8006a90:	f1ba 0f02 	cmp.w	sl, #2
 8006a94:	d055      	beq.n	8006b42 <_scanf_float+0x272>
 8006a96:	2d01      	cmp	r5, #1
 8006a98:	d002      	beq.n	8006aa0 <_scanf_float+0x1d0>
 8006a9a:	2d04      	cmp	r5, #4
 8006a9c:	f47f af48 	bne.w	8006930 <_scanf_float+0x60>
 8006aa0:	3501      	adds	r5, #1
 8006aa2:	b2ed      	uxtb	r5, r5
 8006aa4:	e7d8      	b.n	8006a58 <_scanf_float+0x188>
 8006aa6:	f1ba 0f01 	cmp.w	sl, #1
 8006aaa:	f47f af41 	bne.w	8006930 <_scanf_float+0x60>
 8006aae:	f04f 0a02 	mov.w	sl, #2
 8006ab2:	e7d1      	b.n	8006a58 <_scanf_float+0x188>
 8006ab4:	b97d      	cbnz	r5, 8006ad6 <_scanf_float+0x206>
 8006ab6:	f1b9 0f00 	cmp.w	r9, #0
 8006aba:	f47f af3c 	bne.w	8006936 <_scanf_float+0x66>
 8006abe:	6822      	ldr	r2, [r4, #0]
 8006ac0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006ac4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006ac8:	f47f af39 	bne.w	800693e <_scanf_float+0x6e>
 8006acc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006ad0:	6022      	str	r2, [r4, #0]
 8006ad2:	2501      	movs	r5, #1
 8006ad4:	e7c0      	b.n	8006a58 <_scanf_float+0x188>
 8006ad6:	2d03      	cmp	r5, #3
 8006ad8:	d0e2      	beq.n	8006aa0 <_scanf_float+0x1d0>
 8006ada:	2d05      	cmp	r5, #5
 8006adc:	e7de      	b.n	8006a9c <_scanf_float+0x1cc>
 8006ade:	2d02      	cmp	r5, #2
 8006ae0:	f47f af26 	bne.w	8006930 <_scanf_float+0x60>
 8006ae4:	2503      	movs	r5, #3
 8006ae6:	e7b7      	b.n	8006a58 <_scanf_float+0x188>
 8006ae8:	2d06      	cmp	r5, #6
 8006aea:	f47f af21 	bne.w	8006930 <_scanf_float+0x60>
 8006aee:	2507      	movs	r5, #7
 8006af0:	e7b2      	b.n	8006a58 <_scanf_float+0x188>
 8006af2:	6822      	ldr	r2, [r4, #0]
 8006af4:	0591      	lsls	r1, r2, #22
 8006af6:	f57f af1b 	bpl.w	8006930 <_scanf_float+0x60>
 8006afa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006afe:	6022      	str	r2, [r4, #0]
 8006b00:	f8cd 9004 	str.w	r9, [sp, #4]
 8006b04:	e7a8      	b.n	8006a58 <_scanf_float+0x188>
 8006b06:	6822      	ldr	r2, [r4, #0]
 8006b08:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006b0c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006b10:	d006      	beq.n	8006b20 <_scanf_float+0x250>
 8006b12:	0550      	lsls	r0, r2, #21
 8006b14:	f57f af0c 	bpl.w	8006930 <_scanf_float+0x60>
 8006b18:	f1b9 0f00 	cmp.w	r9, #0
 8006b1c:	f43f af0f 	beq.w	800693e <_scanf_float+0x6e>
 8006b20:	0591      	lsls	r1, r2, #22
 8006b22:	bf58      	it	pl
 8006b24:	9901      	ldrpl	r1, [sp, #4]
 8006b26:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b2a:	bf58      	it	pl
 8006b2c:	eba9 0101 	subpl.w	r1, r9, r1
 8006b30:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006b34:	bf58      	it	pl
 8006b36:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006b3a:	6022      	str	r2, [r4, #0]
 8006b3c:	f04f 0900 	mov.w	r9, #0
 8006b40:	e78a      	b.n	8006a58 <_scanf_float+0x188>
 8006b42:	f04f 0a03 	mov.w	sl, #3
 8006b46:	e787      	b.n	8006a58 <_scanf_float+0x188>
 8006b48:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006b4c:	4639      	mov	r1, r7
 8006b4e:	4640      	mov	r0, r8
 8006b50:	4798      	blx	r3
 8006b52:	2800      	cmp	r0, #0
 8006b54:	f43f aedf 	beq.w	8006916 <_scanf_float+0x46>
 8006b58:	e6ea      	b.n	8006930 <_scanf_float+0x60>
 8006b5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b62:	463a      	mov	r2, r7
 8006b64:	4640      	mov	r0, r8
 8006b66:	4798      	blx	r3
 8006b68:	6923      	ldr	r3, [r4, #16]
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	6123      	str	r3, [r4, #16]
 8006b6e:	e6ec      	b.n	800694a <_scanf_float+0x7a>
 8006b70:	1e6b      	subs	r3, r5, #1
 8006b72:	2b06      	cmp	r3, #6
 8006b74:	d825      	bhi.n	8006bc2 <_scanf_float+0x2f2>
 8006b76:	2d02      	cmp	r5, #2
 8006b78:	d836      	bhi.n	8006be8 <_scanf_float+0x318>
 8006b7a:	455e      	cmp	r6, fp
 8006b7c:	f67f aee8 	bls.w	8006950 <_scanf_float+0x80>
 8006b80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b84:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b88:	463a      	mov	r2, r7
 8006b8a:	4640      	mov	r0, r8
 8006b8c:	4798      	blx	r3
 8006b8e:	6923      	ldr	r3, [r4, #16]
 8006b90:	3b01      	subs	r3, #1
 8006b92:	6123      	str	r3, [r4, #16]
 8006b94:	e7f1      	b.n	8006b7a <_scanf_float+0x2aa>
 8006b96:	9802      	ldr	r0, [sp, #8]
 8006b98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b9c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006ba0:	9002      	str	r0, [sp, #8]
 8006ba2:	463a      	mov	r2, r7
 8006ba4:	4640      	mov	r0, r8
 8006ba6:	4798      	blx	r3
 8006ba8:	6923      	ldr	r3, [r4, #16]
 8006baa:	3b01      	subs	r3, #1
 8006bac:	6123      	str	r3, [r4, #16]
 8006bae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bb2:	fa5f fa8a 	uxtb.w	sl, sl
 8006bb6:	f1ba 0f02 	cmp.w	sl, #2
 8006bba:	d1ec      	bne.n	8006b96 <_scanf_float+0x2c6>
 8006bbc:	3d03      	subs	r5, #3
 8006bbe:	b2ed      	uxtb	r5, r5
 8006bc0:	1b76      	subs	r6, r6, r5
 8006bc2:	6823      	ldr	r3, [r4, #0]
 8006bc4:	05da      	lsls	r2, r3, #23
 8006bc6:	d52f      	bpl.n	8006c28 <_scanf_float+0x358>
 8006bc8:	055b      	lsls	r3, r3, #21
 8006bca:	d510      	bpl.n	8006bee <_scanf_float+0x31e>
 8006bcc:	455e      	cmp	r6, fp
 8006bce:	f67f aebf 	bls.w	8006950 <_scanf_float+0x80>
 8006bd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006bd6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006bda:	463a      	mov	r2, r7
 8006bdc:	4640      	mov	r0, r8
 8006bde:	4798      	blx	r3
 8006be0:	6923      	ldr	r3, [r4, #16]
 8006be2:	3b01      	subs	r3, #1
 8006be4:	6123      	str	r3, [r4, #16]
 8006be6:	e7f1      	b.n	8006bcc <_scanf_float+0x2fc>
 8006be8:	46aa      	mov	sl, r5
 8006bea:	9602      	str	r6, [sp, #8]
 8006bec:	e7df      	b.n	8006bae <_scanf_float+0x2de>
 8006bee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006bf2:	6923      	ldr	r3, [r4, #16]
 8006bf4:	2965      	cmp	r1, #101	; 0x65
 8006bf6:	f103 33ff 	add.w	r3, r3, #4294967295
 8006bfa:	f106 35ff 	add.w	r5, r6, #4294967295
 8006bfe:	6123      	str	r3, [r4, #16]
 8006c00:	d00c      	beq.n	8006c1c <_scanf_float+0x34c>
 8006c02:	2945      	cmp	r1, #69	; 0x45
 8006c04:	d00a      	beq.n	8006c1c <_scanf_float+0x34c>
 8006c06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c0a:	463a      	mov	r2, r7
 8006c0c:	4640      	mov	r0, r8
 8006c0e:	4798      	blx	r3
 8006c10:	6923      	ldr	r3, [r4, #16]
 8006c12:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006c16:	3b01      	subs	r3, #1
 8006c18:	1eb5      	subs	r5, r6, #2
 8006c1a:	6123      	str	r3, [r4, #16]
 8006c1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c20:	463a      	mov	r2, r7
 8006c22:	4640      	mov	r0, r8
 8006c24:	4798      	blx	r3
 8006c26:	462e      	mov	r6, r5
 8006c28:	6825      	ldr	r5, [r4, #0]
 8006c2a:	f015 0510 	ands.w	r5, r5, #16
 8006c2e:	d158      	bne.n	8006ce2 <_scanf_float+0x412>
 8006c30:	7035      	strb	r5, [r6, #0]
 8006c32:	6823      	ldr	r3, [r4, #0]
 8006c34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c3c:	d11c      	bne.n	8006c78 <_scanf_float+0x3a8>
 8006c3e:	9b01      	ldr	r3, [sp, #4]
 8006c40:	454b      	cmp	r3, r9
 8006c42:	eba3 0209 	sub.w	r2, r3, r9
 8006c46:	d124      	bne.n	8006c92 <_scanf_float+0x3c2>
 8006c48:	2200      	movs	r2, #0
 8006c4a:	4659      	mov	r1, fp
 8006c4c:	4640      	mov	r0, r8
 8006c4e:	f002 fc2f 	bl	80094b0 <_strtod_r>
 8006c52:	9b03      	ldr	r3, [sp, #12]
 8006c54:	6821      	ldr	r1, [r4, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f011 0f02 	tst.w	r1, #2
 8006c5c:	ec57 6b10 	vmov	r6, r7, d0
 8006c60:	f103 0204 	add.w	r2, r3, #4
 8006c64:	d020      	beq.n	8006ca8 <_scanf_float+0x3d8>
 8006c66:	9903      	ldr	r1, [sp, #12]
 8006c68:	600a      	str	r2, [r1, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	e9c3 6700 	strd	r6, r7, [r3]
 8006c70:	68e3      	ldr	r3, [r4, #12]
 8006c72:	3301      	adds	r3, #1
 8006c74:	60e3      	str	r3, [r4, #12]
 8006c76:	e66c      	b.n	8006952 <_scanf_float+0x82>
 8006c78:	9b04      	ldr	r3, [sp, #16]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d0e4      	beq.n	8006c48 <_scanf_float+0x378>
 8006c7e:	9905      	ldr	r1, [sp, #20]
 8006c80:	230a      	movs	r3, #10
 8006c82:	462a      	mov	r2, r5
 8006c84:	3101      	adds	r1, #1
 8006c86:	4640      	mov	r0, r8
 8006c88:	f002 fc9a 	bl	80095c0 <_strtol_r>
 8006c8c:	9b04      	ldr	r3, [sp, #16]
 8006c8e:	9e05      	ldr	r6, [sp, #20]
 8006c90:	1ac2      	subs	r2, r0, r3
 8006c92:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006c96:	429e      	cmp	r6, r3
 8006c98:	bf28      	it	cs
 8006c9a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006c9e:	4912      	ldr	r1, [pc, #72]	; (8006ce8 <_scanf_float+0x418>)
 8006ca0:	4630      	mov	r0, r6
 8006ca2:	f000 f8e7 	bl	8006e74 <siprintf>
 8006ca6:	e7cf      	b.n	8006c48 <_scanf_float+0x378>
 8006ca8:	f011 0f04 	tst.w	r1, #4
 8006cac:	9903      	ldr	r1, [sp, #12]
 8006cae:	600a      	str	r2, [r1, #0]
 8006cb0:	d1db      	bne.n	8006c6a <_scanf_float+0x39a>
 8006cb2:	f8d3 8000 	ldr.w	r8, [r3]
 8006cb6:	ee10 2a10 	vmov	r2, s0
 8006cba:	ee10 0a10 	vmov	r0, s0
 8006cbe:	463b      	mov	r3, r7
 8006cc0:	4639      	mov	r1, r7
 8006cc2:	f7f9 ff3b 	bl	8000b3c <__aeabi_dcmpun>
 8006cc6:	b128      	cbz	r0, 8006cd4 <_scanf_float+0x404>
 8006cc8:	4808      	ldr	r0, [pc, #32]	; (8006cec <_scanf_float+0x41c>)
 8006cca:	f000 f9b5 	bl	8007038 <nanf>
 8006cce:	ed88 0a00 	vstr	s0, [r8]
 8006cd2:	e7cd      	b.n	8006c70 <_scanf_float+0x3a0>
 8006cd4:	4630      	mov	r0, r6
 8006cd6:	4639      	mov	r1, r7
 8006cd8:	f7f9 ff8e 	bl	8000bf8 <__aeabi_d2f>
 8006cdc:	f8c8 0000 	str.w	r0, [r8]
 8006ce0:	e7c6      	b.n	8006c70 <_scanf_float+0x3a0>
 8006ce2:	2500      	movs	r5, #0
 8006ce4:	e635      	b.n	8006952 <_scanf_float+0x82>
 8006ce6:	bf00      	nop
 8006ce8:	0800b05c 	.word	0x0800b05c
 8006cec:	0800b3ed 	.word	0x0800b3ed

08006cf0 <std>:
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	b510      	push	{r4, lr}
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	e9c0 3300 	strd	r3, r3, [r0]
 8006cfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cfe:	6083      	str	r3, [r0, #8]
 8006d00:	8181      	strh	r1, [r0, #12]
 8006d02:	6643      	str	r3, [r0, #100]	; 0x64
 8006d04:	81c2      	strh	r2, [r0, #14]
 8006d06:	6183      	str	r3, [r0, #24]
 8006d08:	4619      	mov	r1, r3
 8006d0a:	2208      	movs	r2, #8
 8006d0c:	305c      	adds	r0, #92	; 0x5c
 8006d0e:	f000 f914 	bl	8006f3a <memset>
 8006d12:	4b05      	ldr	r3, [pc, #20]	; (8006d28 <std+0x38>)
 8006d14:	6263      	str	r3, [r4, #36]	; 0x24
 8006d16:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <std+0x3c>)
 8006d18:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d1a:	4b05      	ldr	r3, [pc, #20]	; (8006d30 <std+0x40>)
 8006d1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d1e:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <std+0x44>)
 8006d20:	6224      	str	r4, [r4, #32]
 8006d22:	6323      	str	r3, [r4, #48]	; 0x30
 8006d24:	bd10      	pop	{r4, pc}
 8006d26:	bf00      	nop
 8006d28:	08006eb5 	.word	0x08006eb5
 8006d2c:	08006ed7 	.word	0x08006ed7
 8006d30:	08006f0f 	.word	0x08006f0f
 8006d34:	08006f33 	.word	0x08006f33

08006d38 <stdio_exit_handler>:
 8006d38:	4a02      	ldr	r2, [pc, #8]	; (8006d44 <stdio_exit_handler+0xc>)
 8006d3a:	4903      	ldr	r1, [pc, #12]	; (8006d48 <stdio_exit_handler+0x10>)
 8006d3c:	4803      	ldr	r0, [pc, #12]	; (8006d4c <stdio_exit_handler+0x14>)
 8006d3e:	f000 b869 	b.w	8006e14 <_fwalk_sglue>
 8006d42:	bf00      	nop
 8006d44:	20000034 	.word	0x20000034
 8006d48:	08009c09 	.word	0x08009c09
 8006d4c:	20000040 	.word	0x20000040

08006d50 <cleanup_stdio>:
 8006d50:	6841      	ldr	r1, [r0, #4]
 8006d52:	4b0c      	ldr	r3, [pc, #48]	; (8006d84 <cleanup_stdio+0x34>)
 8006d54:	4299      	cmp	r1, r3
 8006d56:	b510      	push	{r4, lr}
 8006d58:	4604      	mov	r4, r0
 8006d5a:	d001      	beq.n	8006d60 <cleanup_stdio+0x10>
 8006d5c:	f002 ff54 	bl	8009c08 <_fflush_r>
 8006d60:	68a1      	ldr	r1, [r4, #8]
 8006d62:	4b09      	ldr	r3, [pc, #36]	; (8006d88 <cleanup_stdio+0x38>)
 8006d64:	4299      	cmp	r1, r3
 8006d66:	d002      	beq.n	8006d6e <cleanup_stdio+0x1e>
 8006d68:	4620      	mov	r0, r4
 8006d6a:	f002 ff4d 	bl	8009c08 <_fflush_r>
 8006d6e:	68e1      	ldr	r1, [r4, #12]
 8006d70:	4b06      	ldr	r3, [pc, #24]	; (8006d8c <cleanup_stdio+0x3c>)
 8006d72:	4299      	cmp	r1, r3
 8006d74:	d004      	beq.n	8006d80 <cleanup_stdio+0x30>
 8006d76:	4620      	mov	r0, r4
 8006d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d7c:	f002 bf44 	b.w	8009c08 <_fflush_r>
 8006d80:	bd10      	pop	{r4, pc}
 8006d82:	bf00      	nop
 8006d84:	200007e0 	.word	0x200007e0
 8006d88:	20000848 	.word	0x20000848
 8006d8c:	200008b0 	.word	0x200008b0

08006d90 <global_stdio_init.part.0>:
 8006d90:	b510      	push	{r4, lr}
 8006d92:	4b0b      	ldr	r3, [pc, #44]	; (8006dc0 <global_stdio_init.part.0+0x30>)
 8006d94:	4c0b      	ldr	r4, [pc, #44]	; (8006dc4 <global_stdio_init.part.0+0x34>)
 8006d96:	4a0c      	ldr	r2, [pc, #48]	; (8006dc8 <global_stdio_init.part.0+0x38>)
 8006d98:	601a      	str	r2, [r3, #0]
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	2104      	movs	r1, #4
 8006da0:	f7ff ffa6 	bl	8006cf0 <std>
 8006da4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006da8:	2201      	movs	r2, #1
 8006daa:	2109      	movs	r1, #9
 8006dac:	f7ff ffa0 	bl	8006cf0 <std>
 8006db0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006db4:	2202      	movs	r2, #2
 8006db6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dba:	2112      	movs	r1, #18
 8006dbc:	f7ff bf98 	b.w	8006cf0 <std>
 8006dc0:	20000918 	.word	0x20000918
 8006dc4:	200007e0 	.word	0x200007e0
 8006dc8:	08006d39 	.word	0x08006d39

08006dcc <__sfp_lock_acquire>:
 8006dcc:	4801      	ldr	r0, [pc, #4]	; (8006dd4 <__sfp_lock_acquire+0x8>)
 8006dce:	f000 b931 	b.w	8007034 <__retarget_lock_acquire_recursive>
 8006dd2:	bf00      	nop
 8006dd4:	20000921 	.word	0x20000921

08006dd8 <__sfp_lock_release>:
 8006dd8:	4801      	ldr	r0, [pc, #4]	; (8006de0 <__sfp_lock_release+0x8>)
 8006dda:	f000 b92c 	b.w	8007036 <__retarget_lock_release_recursive>
 8006dde:	bf00      	nop
 8006de0:	20000921 	.word	0x20000921

08006de4 <__sinit>:
 8006de4:	b510      	push	{r4, lr}
 8006de6:	4604      	mov	r4, r0
 8006de8:	f7ff fff0 	bl	8006dcc <__sfp_lock_acquire>
 8006dec:	6a23      	ldr	r3, [r4, #32]
 8006dee:	b11b      	cbz	r3, 8006df8 <__sinit+0x14>
 8006df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006df4:	f7ff bff0 	b.w	8006dd8 <__sfp_lock_release>
 8006df8:	4b04      	ldr	r3, [pc, #16]	; (8006e0c <__sinit+0x28>)
 8006dfa:	6223      	str	r3, [r4, #32]
 8006dfc:	4b04      	ldr	r3, [pc, #16]	; (8006e10 <__sinit+0x2c>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1f5      	bne.n	8006df0 <__sinit+0xc>
 8006e04:	f7ff ffc4 	bl	8006d90 <global_stdio_init.part.0>
 8006e08:	e7f2      	b.n	8006df0 <__sinit+0xc>
 8006e0a:	bf00      	nop
 8006e0c:	08006d51 	.word	0x08006d51
 8006e10:	20000918 	.word	0x20000918

08006e14 <_fwalk_sglue>:
 8006e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e18:	4607      	mov	r7, r0
 8006e1a:	4688      	mov	r8, r1
 8006e1c:	4614      	mov	r4, r2
 8006e1e:	2600      	movs	r6, #0
 8006e20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e24:	f1b9 0901 	subs.w	r9, r9, #1
 8006e28:	d505      	bpl.n	8006e36 <_fwalk_sglue+0x22>
 8006e2a:	6824      	ldr	r4, [r4, #0]
 8006e2c:	2c00      	cmp	r4, #0
 8006e2e:	d1f7      	bne.n	8006e20 <_fwalk_sglue+0xc>
 8006e30:	4630      	mov	r0, r6
 8006e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e36:	89ab      	ldrh	r3, [r5, #12]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d907      	bls.n	8006e4c <_fwalk_sglue+0x38>
 8006e3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e40:	3301      	adds	r3, #1
 8006e42:	d003      	beq.n	8006e4c <_fwalk_sglue+0x38>
 8006e44:	4629      	mov	r1, r5
 8006e46:	4638      	mov	r0, r7
 8006e48:	47c0      	blx	r8
 8006e4a:	4306      	orrs	r6, r0
 8006e4c:	3568      	adds	r5, #104	; 0x68
 8006e4e:	e7e9      	b.n	8006e24 <_fwalk_sglue+0x10>

08006e50 <iprintf>:
 8006e50:	b40f      	push	{r0, r1, r2, r3}
 8006e52:	b507      	push	{r0, r1, r2, lr}
 8006e54:	4906      	ldr	r1, [pc, #24]	; (8006e70 <iprintf+0x20>)
 8006e56:	ab04      	add	r3, sp, #16
 8006e58:	6808      	ldr	r0, [r1, #0]
 8006e5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e5e:	6881      	ldr	r1, [r0, #8]
 8006e60:	9301      	str	r3, [sp, #4]
 8006e62:	f002 fd31 	bl	80098c8 <_vfiprintf_r>
 8006e66:	b003      	add	sp, #12
 8006e68:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e6c:	b004      	add	sp, #16
 8006e6e:	4770      	bx	lr
 8006e70:	2000008c 	.word	0x2000008c

08006e74 <siprintf>:
 8006e74:	b40e      	push	{r1, r2, r3}
 8006e76:	b500      	push	{lr}
 8006e78:	b09c      	sub	sp, #112	; 0x70
 8006e7a:	ab1d      	add	r3, sp, #116	; 0x74
 8006e7c:	9002      	str	r0, [sp, #8]
 8006e7e:	9006      	str	r0, [sp, #24]
 8006e80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e84:	4809      	ldr	r0, [pc, #36]	; (8006eac <siprintf+0x38>)
 8006e86:	9107      	str	r1, [sp, #28]
 8006e88:	9104      	str	r1, [sp, #16]
 8006e8a:	4909      	ldr	r1, [pc, #36]	; (8006eb0 <siprintf+0x3c>)
 8006e8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e90:	9105      	str	r1, [sp, #20]
 8006e92:	6800      	ldr	r0, [r0, #0]
 8006e94:	9301      	str	r3, [sp, #4]
 8006e96:	a902      	add	r1, sp, #8
 8006e98:	f002 fbee 	bl	8009678 <_svfiprintf_r>
 8006e9c:	9b02      	ldr	r3, [sp, #8]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	701a      	strb	r2, [r3, #0]
 8006ea2:	b01c      	add	sp, #112	; 0x70
 8006ea4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ea8:	b003      	add	sp, #12
 8006eaa:	4770      	bx	lr
 8006eac:	2000008c 	.word	0x2000008c
 8006eb0:	ffff0208 	.word	0xffff0208

08006eb4 <__sread>:
 8006eb4:	b510      	push	{r4, lr}
 8006eb6:	460c      	mov	r4, r1
 8006eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ebc:	f000 f86c 	bl	8006f98 <_read_r>
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	bfab      	itete	ge
 8006ec4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ec6:	89a3      	ldrhlt	r3, [r4, #12]
 8006ec8:	181b      	addge	r3, r3, r0
 8006eca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ece:	bfac      	ite	ge
 8006ed0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ed2:	81a3      	strhlt	r3, [r4, #12]
 8006ed4:	bd10      	pop	{r4, pc}

08006ed6 <__swrite>:
 8006ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eda:	461f      	mov	r7, r3
 8006edc:	898b      	ldrh	r3, [r1, #12]
 8006ede:	05db      	lsls	r3, r3, #23
 8006ee0:	4605      	mov	r5, r0
 8006ee2:	460c      	mov	r4, r1
 8006ee4:	4616      	mov	r6, r2
 8006ee6:	d505      	bpl.n	8006ef4 <__swrite+0x1e>
 8006ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eec:	2302      	movs	r3, #2
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f000 f840 	bl	8006f74 <_lseek_r>
 8006ef4:	89a3      	ldrh	r3, [r4, #12]
 8006ef6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006efa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006efe:	81a3      	strh	r3, [r4, #12]
 8006f00:	4632      	mov	r2, r6
 8006f02:	463b      	mov	r3, r7
 8006f04:	4628      	mov	r0, r5
 8006f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f0a:	f000 b857 	b.w	8006fbc <_write_r>

08006f0e <__sseek>:
 8006f0e:	b510      	push	{r4, lr}
 8006f10:	460c      	mov	r4, r1
 8006f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f16:	f000 f82d 	bl	8006f74 <_lseek_r>
 8006f1a:	1c43      	adds	r3, r0, #1
 8006f1c:	89a3      	ldrh	r3, [r4, #12]
 8006f1e:	bf15      	itete	ne
 8006f20:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f2a:	81a3      	strheq	r3, [r4, #12]
 8006f2c:	bf18      	it	ne
 8006f2e:	81a3      	strhne	r3, [r4, #12]
 8006f30:	bd10      	pop	{r4, pc}

08006f32 <__sclose>:
 8006f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f36:	f000 b80d 	b.w	8006f54 <_close_r>

08006f3a <memset>:
 8006f3a:	4402      	add	r2, r0
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d100      	bne.n	8006f44 <memset+0xa>
 8006f42:	4770      	bx	lr
 8006f44:	f803 1b01 	strb.w	r1, [r3], #1
 8006f48:	e7f9      	b.n	8006f3e <memset+0x4>
	...

08006f4c <_localeconv_r>:
 8006f4c:	4800      	ldr	r0, [pc, #0]	; (8006f50 <_localeconv_r+0x4>)
 8006f4e:	4770      	bx	lr
 8006f50:	20000180 	.word	0x20000180

08006f54 <_close_r>:
 8006f54:	b538      	push	{r3, r4, r5, lr}
 8006f56:	4d06      	ldr	r5, [pc, #24]	; (8006f70 <_close_r+0x1c>)
 8006f58:	2300      	movs	r3, #0
 8006f5a:	4604      	mov	r4, r0
 8006f5c:	4608      	mov	r0, r1
 8006f5e:	602b      	str	r3, [r5, #0]
 8006f60:	f7fb fe71 	bl	8002c46 <_close>
 8006f64:	1c43      	adds	r3, r0, #1
 8006f66:	d102      	bne.n	8006f6e <_close_r+0x1a>
 8006f68:	682b      	ldr	r3, [r5, #0]
 8006f6a:	b103      	cbz	r3, 8006f6e <_close_r+0x1a>
 8006f6c:	6023      	str	r3, [r4, #0]
 8006f6e:	bd38      	pop	{r3, r4, r5, pc}
 8006f70:	2000091c 	.word	0x2000091c

08006f74 <_lseek_r>:
 8006f74:	b538      	push	{r3, r4, r5, lr}
 8006f76:	4d07      	ldr	r5, [pc, #28]	; (8006f94 <_lseek_r+0x20>)
 8006f78:	4604      	mov	r4, r0
 8006f7a:	4608      	mov	r0, r1
 8006f7c:	4611      	mov	r1, r2
 8006f7e:	2200      	movs	r2, #0
 8006f80:	602a      	str	r2, [r5, #0]
 8006f82:	461a      	mov	r2, r3
 8006f84:	f7fb fe86 	bl	8002c94 <_lseek>
 8006f88:	1c43      	adds	r3, r0, #1
 8006f8a:	d102      	bne.n	8006f92 <_lseek_r+0x1e>
 8006f8c:	682b      	ldr	r3, [r5, #0]
 8006f8e:	b103      	cbz	r3, 8006f92 <_lseek_r+0x1e>
 8006f90:	6023      	str	r3, [r4, #0]
 8006f92:	bd38      	pop	{r3, r4, r5, pc}
 8006f94:	2000091c 	.word	0x2000091c

08006f98 <_read_r>:
 8006f98:	b538      	push	{r3, r4, r5, lr}
 8006f9a:	4d07      	ldr	r5, [pc, #28]	; (8006fb8 <_read_r+0x20>)
 8006f9c:	4604      	mov	r4, r0
 8006f9e:	4608      	mov	r0, r1
 8006fa0:	4611      	mov	r1, r2
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	602a      	str	r2, [r5, #0]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f7fb fe14 	bl	8002bd4 <_read>
 8006fac:	1c43      	adds	r3, r0, #1
 8006fae:	d102      	bne.n	8006fb6 <_read_r+0x1e>
 8006fb0:	682b      	ldr	r3, [r5, #0]
 8006fb2:	b103      	cbz	r3, 8006fb6 <_read_r+0x1e>
 8006fb4:	6023      	str	r3, [r4, #0]
 8006fb6:	bd38      	pop	{r3, r4, r5, pc}
 8006fb8:	2000091c 	.word	0x2000091c

08006fbc <_write_r>:
 8006fbc:	b538      	push	{r3, r4, r5, lr}
 8006fbe:	4d07      	ldr	r5, [pc, #28]	; (8006fdc <_write_r+0x20>)
 8006fc0:	4604      	mov	r4, r0
 8006fc2:	4608      	mov	r0, r1
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	602a      	str	r2, [r5, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	f7fb fe1f 	bl	8002c0e <_write>
 8006fd0:	1c43      	adds	r3, r0, #1
 8006fd2:	d102      	bne.n	8006fda <_write_r+0x1e>
 8006fd4:	682b      	ldr	r3, [r5, #0]
 8006fd6:	b103      	cbz	r3, 8006fda <_write_r+0x1e>
 8006fd8:	6023      	str	r3, [r4, #0]
 8006fda:	bd38      	pop	{r3, r4, r5, pc}
 8006fdc:	2000091c 	.word	0x2000091c

08006fe0 <__errno>:
 8006fe0:	4b01      	ldr	r3, [pc, #4]	; (8006fe8 <__errno+0x8>)
 8006fe2:	6818      	ldr	r0, [r3, #0]
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	2000008c 	.word	0x2000008c

08006fec <__libc_init_array>:
 8006fec:	b570      	push	{r4, r5, r6, lr}
 8006fee:	4d0d      	ldr	r5, [pc, #52]	; (8007024 <__libc_init_array+0x38>)
 8006ff0:	4c0d      	ldr	r4, [pc, #52]	; (8007028 <__libc_init_array+0x3c>)
 8006ff2:	1b64      	subs	r4, r4, r5
 8006ff4:	10a4      	asrs	r4, r4, #2
 8006ff6:	2600      	movs	r6, #0
 8006ff8:	42a6      	cmp	r6, r4
 8006ffa:	d109      	bne.n	8007010 <__libc_init_array+0x24>
 8006ffc:	4d0b      	ldr	r5, [pc, #44]	; (800702c <__libc_init_array+0x40>)
 8006ffe:	4c0c      	ldr	r4, [pc, #48]	; (8007030 <__libc_init_array+0x44>)
 8007000:	f003 fbd6 	bl	800a7b0 <_init>
 8007004:	1b64      	subs	r4, r4, r5
 8007006:	10a4      	asrs	r4, r4, #2
 8007008:	2600      	movs	r6, #0
 800700a:	42a6      	cmp	r6, r4
 800700c:	d105      	bne.n	800701a <__libc_init_array+0x2e>
 800700e:	bd70      	pop	{r4, r5, r6, pc}
 8007010:	f855 3b04 	ldr.w	r3, [r5], #4
 8007014:	4798      	blx	r3
 8007016:	3601      	adds	r6, #1
 8007018:	e7ee      	b.n	8006ff8 <__libc_init_array+0xc>
 800701a:	f855 3b04 	ldr.w	r3, [r5], #4
 800701e:	4798      	blx	r3
 8007020:	3601      	adds	r6, #1
 8007022:	e7f2      	b.n	800700a <__libc_init_array+0x1e>
 8007024:	0800b458 	.word	0x0800b458
 8007028:	0800b458 	.word	0x0800b458
 800702c:	0800b458 	.word	0x0800b458
 8007030:	0800b45c 	.word	0x0800b45c

08007034 <__retarget_lock_acquire_recursive>:
 8007034:	4770      	bx	lr

08007036 <__retarget_lock_release_recursive>:
 8007036:	4770      	bx	lr

08007038 <nanf>:
 8007038:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007040 <nanf+0x8>
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	7fc00000 	.word	0x7fc00000

08007044 <quorem>:
 8007044:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007048:	6903      	ldr	r3, [r0, #16]
 800704a:	690c      	ldr	r4, [r1, #16]
 800704c:	42a3      	cmp	r3, r4
 800704e:	4607      	mov	r7, r0
 8007050:	db7e      	blt.n	8007150 <quorem+0x10c>
 8007052:	3c01      	subs	r4, #1
 8007054:	f101 0814 	add.w	r8, r1, #20
 8007058:	f100 0514 	add.w	r5, r0, #20
 800705c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007060:	9301      	str	r3, [sp, #4]
 8007062:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007066:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800706a:	3301      	adds	r3, #1
 800706c:	429a      	cmp	r2, r3
 800706e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007072:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007076:	fbb2 f6f3 	udiv	r6, r2, r3
 800707a:	d331      	bcc.n	80070e0 <quorem+0x9c>
 800707c:	f04f 0e00 	mov.w	lr, #0
 8007080:	4640      	mov	r0, r8
 8007082:	46ac      	mov	ip, r5
 8007084:	46f2      	mov	sl, lr
 8007086:	f850 2b04 	ldr.w	r2, [r0], #4
 800708a:	b293      	uxth	r3, r2
 800708c:	fb06 e303 	mla	r3, r6, r3, lr
 8007090:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007094:	0c1a      	lsrs	r2, r3, #16
 8007096:	b29b      	uxth	r3, r3
 8007098:	ebaa 0303 	sub.w	r3, sl, r3
 800709c:	f8dc a000 	ldr.w	sl, [ip]
 80070a0:	fa13 f38a 	uxtah	r3, r3, sl
 80070a4:	fb06 220e 	mla	r2, r6, lr, r2
 80070a8:	9300      	str	r3, [sp, #0]
 80070aa:	9b00      	ldr	r3, [sp, #0]
 80070ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80070b0:	b292      	uxth	r2, r2
 80070b2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80070b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070ba:	f8bd 3000 	ldrh.w	r3, [sp]
 80070be:	4581      	cmp	r9, r0
 80070c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070c4:	f84c 3b04 	str.w	r3, [ip], #4
 80070c8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80070cc:	d2db      	bcs.n	8007086 <quorem+0x42>
 80070ce:	f855 300b 	ldr.w	r3, [r5, fp]
 80070d2:	b92b      	cbnz	r3, 80070e0 <quorem+0x9c>
 80070d4:	9b01      	ldr	r3, [sp, #4]
 80070d6:	3b04      	subs	r3, #4
 80070d8:	429d      	cmp	r5, r3
 80070da:	461a      	mov	r2, r3
 80070dc:	d32c      	bcc.n	8007138 <quorem+0xf4>
 80070de:	613c      	str	r4, [r7, #16]
 80070e0:	4638      	mov	r0, r7
 80070e2:	f001 f9f1 	bl	80084c8 <__mcmp>
 80070e6:	2800      	cmp	r0, #0
 80070e8:	db22      	blt.n	8007130 <quorem+0xec>
 80070ea:	3601      	adds	r6, #1
 80070ec:	4629      	mov	r1, r5
 80070ee:	2000      	movs	r0, #0
 80070f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80070f4:	f8d1 c000 	ldr.w	ip, [r1]
 80070f8:	b293      	uxth	r3, r2
 80070fa:	1ac3      	subs	r3, r0, r3
 80070fc:	0c12      	lsrs	r2, r2, #16
 80070fe:	fa13 f38c 	uxtah	r3, r3, ip
 8007102:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007106:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800710a:	b29b      	uxth	r3, r3
 800710c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007110:	45c1      	cmp	r9, r8
 8007112:	f841 3b04 	str.w	r3, [r1], #4
 8007116:	ea4f 4022 	mov.w	r0, r2, asr #16
 800711a:	d2e9      	bcs.n	80070f0 <quorem+0xac>
 800711c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007120:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007124:	b922      	cbnz	r2, 8007130 <quorem+0xec>
 8007126:	3b04      	subs	r3, #4
 8007128:	429d      	cmp	r5, r3
 800712a:	461a      	mov	r2, r3
 800712c:	d30a      	bcc.n	8007144 <quorem+0x100>
 800712e:	613c      	str	r4, [r7, #16]
 8007130:	4630      	mov	r0, r6
 8007132:	b003      	add	sp, #12
 8007134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007138:	6812      	ldr	r2, [r2, #0]
 800713a:	3b04      	subs	r3, #4
 800713c:	2a00      	cmp	r2, #0
 800713e:	d1ce      	bne.n	80070de <quorem+0x9a>
 8007140:	3c01      	subs	r4, #1
 8007142:	e7c9      	b.n	80070d8 <quorem+0x94>
 8007144:	6812      	ldr	r2, [r2, #0]
 8007146:	3b04      	subs	r3, #4
 8007148:	2a00      	cmp	r2, #0
 800714a:	d1f0      	bne.n	800712e <quorem+0xea>
 800714c:	3c01      	subs	r4, #1
 800714e:	e7eb      	b.n	8007128 <quorem+0xe4>
 8007150:	2000      	movs	r0, #0
 8007152:	e7ee      	b.n	8007132 <quorem+0xee>
 8007154:	0000      	movs	r0, r0
	...

08007158 <_dtoa_r>:
 8007158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800715c:	ed2d 8b04 	vpush	{d8-d9}
 8007160:	69c5      	ldr	r5, [r0, #28]
 8007162:	b093      	sub	sp, #76	; 0x4c
 8007164:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007168:	ec57 6b10 	vmov	r6, r7, d0
 800716c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007170:	9107      	str	r1, [sp, #28]
 8007172:	4604      	mov	r4, r0
 8007174:	920a      	str	r2, [sp, #40]	; 0x28
 8007176:	930d      	str	r3, [sp, #52]	; 0x34
 8007178:	b975      	cbnz	r5, 8007198 <_dtoa_r+0x40>
 800717a:	2010      	movs	r0, #16
 800717c:	f000 fe2a 	bl	8007dd4 <malloc>
 8007180:	4602      	mov	r2, r0
 8007182:	61e0      	str	r0, [r4, #28]
 8007184:	b920      	cbnz	r0, 8007190 <_dtoa_r+0x38>
 8007186:	4bae      	ldr	r3, [pc, #696]	; (8007440 <_dtoa_r+0x2e8>)
 8007188:	21ef      	movs	r1, #239	; 0xef
 800718a:	48ae      	ldr	r0, [pc, #696]	; (8007444 <_dtoa_r+0x2ec>)
 800718c:	f002 fe4c 	bl	8009e28 <__assert_func>
 8007190:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007194:	6005      	str	r5, [r0, #0]
 8007196:	60c5      	str	r5, [r0, #12]
 8007198:	69e3      	ldr	r3, [r4, #28]
 800719a:	6819      	ldr	r1, [r3, #0]
 800719c:	b151      	cbz	r1, 80071b4 <_dtoa_r+0x5c>
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	604a      	str	r2, [r1, #4]
 80071a2:	2301      	movs	r3, #1
 80071a4:	4093      	lsls	r3, r2
 80071a6:	608b      	str	r3, [r1, #8]
 80071a8:	4620      	mov	r0, r4
 80071aa:	f000 ff07 	bl	8007fbc <_Bfree>
 80071ae:	69e3      	ldr	r3, [r4, #28]
 80071b0:	2200      	movs	r2, #0
 80071b2:	601a      	str	r2, [r3, #0]
 80071b4:	1e3b      	subs	r3, r7, #0
 80071b6:	bfbb      	ittet	lt
 80071b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80071bc:	9303      	strlt	r3, [sp, #12]
 80071be:	2300      	movge	r3, #0
 80071c0:	2201      	movlt	r2, #1
 80071c2:	bfac      	ite	ge
 80071c4:	f8c8 3000 	strge.w	r3, [r8]
 80071c8:	f8c8 2000 	strlt.w	r2, [r8]
 80071cc:	4b9e      	ldr	r3, [pc, #632]	; (8007448 <_dtoa_r+0x2f0>)
 80071ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80071d2:	ea33 0308 	bics.w	r3, r3, r8
 80071d6:	d11b      	bne.n	8007210 <_dtoa_r+0xb8>
 80071d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80071da:	f242 730f 	movw	r3, #9999	; 0x270f
 80071de:	6013      	str	r3, [r2, #0]
 80071e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80071e4:	4333      	orrs	r3, r6
 80071e6:	f000 8593 	beq.w	8007d10 <_dtoa_r+0xbb8>
 80071ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071ec:	b963      	cbnz	r3, 8007208 <_dtoa_r+0xb0>
 80071ee:	4b97      	ldr	r3, [pc, #604]	; (800744c <_dtoa_r+0x2f4>)
 80071f0:	e027      	b.n	8007242 <_dtoa_r+0xea>
 80071f2:	4b97      	ldr	r3, [pc, #604]	; (8007450 <_dtoa_r+0x2f8>)
 80071f4:	9300      	str	r3, [sp, #0]
 80071f6:	3308      	adds	r3, #8
 80071f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80071fa:	6013      	str	r3, [r2, #0]
 80071fc:	9800      	ldr	r0, [sp, #0]
 80071fe:	b013      	add	sp, #76	; 0x4c
 8007200:	ecbd 8b04 	vpop	{d8-d9}
 8007204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007208:	4b90      	ldr	r3, [pc, #576]	; (800744c <_dtoa_r+0x2f4>)
 800720a:	9300      	str	r3, [sp, #0]
 800720c:	3303      	adds	r3, #3
 800720e:	e7f3      	b.n	80071f8 <_dtoa_r+0xa0>
 8007210:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007214:	2200      	movs	r2, #0
 8007216:	ec51 0b17 	vmov	r0, r1, d7
 800721a:	eeb0 8a47 	vmov.f32	s16, s14
 800721e:	eef0 8a67 	vmov.f32	s17, s15
 8007222:	2300      	movs	r3, #0
 8007224:	f7f9 fc58 	bl	8000ad8 <__aeabi_dcmpeq>
 8007228:	4681      	mov	r9, r0
 800722a:	b160      	cbz	r0, 8007246 <_dtoa_r+0xee>
 800722c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800722e:	2301      	movs	r3, #1
 8007230:	6013      	str	r3, [r2, #0]
 8007232:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007234:	2b00      	cmp	r3, #0
 8007236:	f000 8568 	beq.w	8007d0a <_dtoa_r+0xbb2>
 800723a:	4b86      	ldr	r3, [pc, #536]	; (8007454 <_dtoa_r+0x2fc>)
 800723c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800723e:	6013      	str	r3, [r2, #0]
 8007240:	3b01      	subs	r3, #1
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	e7da      	b.n	80071fc <_dtoa_r+0xa4>
 8007246:	aa10      	add	r2, sp, #64	; 0x40
 8007248:	a911      	add	r1, sp, #68	; 0x44
 800724a:	4620      	mov	r0, r4
 800724c:	eeb0 0a48 	vmov.f32	s0, s16
 8007250:	eef0 0a68 	vmov.f32	s1, s17
 8007254:	f001 fa4e 	bl	80086f4 <__d2b>
 8007258:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800725c:	4682      	mov	sl, r0
 800725e:	2d00      	cmp	r5, #0
 8007260:	d07f      	beq.n	8007362 <_dtoa_r+0x20a>
 8007262:	ee18 3a90 	vmov	r3, s17
 8007266:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800726a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800726e:	ec51 0b18 	vmov	r0, r1, d8
 8007272:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007276:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800727a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800727e:	4619      	mov	r1, r3
 8007280:	2200      	movs	r2, #0
 8007282:	4b75      	ldr	r3, [pc, #468]	; (8007458 <_dtoa_r+0x300>)
 8007284:	f7f9 f808 	bl	8000298 <__aeabi_dsub>
 8007288:	a367      	add	r3, pc, #412	; (adr r3, 8007428 <_dtoa_r+0x2d0>)
 800728a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728e:	f7f9 f9bb 	bl	8000608 <__aeabi_dmul>
 8007292:	a367      	add	r3, pc, #412	; (adr r3, 8007430 <_dtoa_r+0x2d8>)
 8007294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007298:	f7f9 f800 	bl	800029c <__adddf3>
 800729c:	4606      	mov	r6, r0
 800729e:	4628      	mov	r0, r5
 80072a0:	460f      	mov	r7, r1
 80072a2:	f7f9 f947 	bl	8000534 <__aeabi_i2d>
 80072a6:	a364      	add	r3, pc, #400	; (adr r3, 8007438 <_dtoa_r+0x2e0>)
 80072a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ac:	f7f9 f9ac 	bl	8000608 <__aeabi_dmul>
 80072b0:	4602      	mov	r2, r0
 80072b2:	460b      	mov	r3, r1
 80072b4:	4630      	mov	r0, r6
 80072b6:	4639      	mov	r1, r7
 80072b8:	f7f8 fff0 	bl	800029c <__adddf3>
 80072bc:	4606      	mov	r6, r0
 80072be:	460f      	mov	r7, r1
 80072c0:	f7f9 fc52 	bl	8000b68 <__aeabi_d2iz>
 80072c4:	2200      	movs	r2, #0
 80072c6:	4683      	mov	fp, r0
 80072c8:	2300      	movs	r3, #0
 80072ca:	4630      	mov	r0, r6
 80072cc:	4639      	mov	r1, r7
 80072ce:	f7f9 fc0d 	bl	8000aec <__aeabi_dcmplt>
 80072d2:	b148      	cbz	r0, 80072e8 <_dtoa_r+0x190>
 80072d4:	4658      	mov	r0, fp
 80072d6:	f7f9 f92d 	bl	8000534 <__aeabi_i2d>
 80072da:	4632      	mov	r2, r6
 80072dc:	463b      	mov	r3, r7
 80072de:	f7f9 fbfb 	bl	8000ad8 <__aeabi_dcmpeq>
 80072e2:	b908      	cbnz	r0, 80072e8 <_dtoa_r+0x190>
 80072e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80072e8:	f1bb 0f16 	cmp.w	fp, #22
 80072ec:	d857      	bhi.n	800739e <_dtoa_r+0x246>
 80072ee:	4b5b      	ldr	r3, [pc, #364]	; (800745c <_dtoa_r+0x304>)
 80072f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80072f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f8:	ec51 0b18 	vmov	r0, r1, d8
 80072fc:	f7f9 fbf6 	bl	8000aec <__aeabi_dcmplt>
 8007300:	2800      	cmp	r0, #0
 8007302:	d04e      	beq.n	80073a2 <_dtoa_r+0x24a>
 8007304:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007308:	2300      	movs	r3, #0
 800730a:	930c      	str	r3, [sp, #48]	; 0x30
 800730c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800730e:	1b5b      	subs	r3, r3, r5
 8007310:	1e5a      	subs	r2, r3, #1
 8007312:	bf45      	ittet	mi
 8007314:	f1c3 0301 	rsbmi	r3, r3, #1
 8007318:	9305      	strmi	r3, [sp, #20]
 800731a:	2300      	movpl	r3, #0
 800731c:	2300      	movmi	r3, #0
 800731e:	9206      	str	r2, [sp, #24]
 8007320:	bf54      	ite	pl
 8007322:	9305      	strpl	r3, [sp, #20]
 8007324:	9306      	strmi	r3, [sp, #24]
 8007326:	f1bb 0f00 	cmp.w	fp, #0
 800732a:	db3c      	blt.n	80073a6 <_dtoa_r+0x24e>
 800732c:	9b06      	ldr	r3, [sp, #24]
 800732e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007332:	445b      	add	r3, fp
 8007334:	9306      	str	r3, [sp, #24]
 8007336:	2300      	movs	r3, #0
 8007338:	9308      	str	r3, [sp, #32]
 800733a:	9b07      	ldr	r3, [sp, #28]
 800733c:	2b09      	cmp	r3, #9
 800733e:	d868      	bhi.n	8007412 <_dtoa_r+0x2ba>
 8007340:	2b05      	cmp	r3, #5
 8007342:	bfc4      	itt	gt
 8007344:	3b04      	subgt	r3, #4
 8007346:	9307      	strgt	r3, [sp, #28]
 8007348:	9b07      	ldr	r3, [sp, #28]
 800734a:	f1a3 0302 	sub.w	r3, r3, #2
 800734e:	bfcc      	ite	gt
 8007350:	2500      	movgt	r5, #0
 8007352:	2501      	movle	r5, #1
 8007354:	2b03      	cmp	r3, #3
 8007356:	f200 8085 	bhi.w	8007464 <_dtoa_r+0x30c>
 800735a:	e8df f003 	tbb	[pc, r3]
 800735e:	3b2e      	.short	0x3b2e
 8007360:	5839      	.short	0x5839
 8007362:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007366:	441d      	add	r5, r3
 8007368:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800736c:	2b20      	cmp	r3, #32
 800736e:	bfc1      	itttt	gt
 8007370:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007374:	fa08 f803 	lslgt.w	r8, r8, r3
 8007378:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800737c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007380:	bfd6      	itet	le
 8007382:	f1c3 0320 	rsble	r3, r3, #32
 8007386:	ea48 0003 	orrgt.w	r0, r8, r3
 800738a:	fa06 f003 	lslle.w	r0, r6, r3
 800738e:	f7f9 f8c1 	bl	8000514 <__aeabi_ui2d>
 8007392:	2201      	movs	r2, #1
 8007394:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007398:	3d01      	subs	r5, #1
 800739a:	920e      	str	r2, [sp, #56]	; 0x38
 800739c:	e76f      	b.n	800727e <_dtoa_r+0x126>
 800739e:	2301      	movs	r3, #1
 80073a0:	e7b3      	b.n	800730a <_dtoa_r+0x1b2>
 80073a2:	900c      	str	r0, [sp, #48]	; 0x30
 80073a4:	e7b2      	b.n	800730c <_dtoa_r+0x1b4>
 80073a6:	9b05      	ldr	r3, [sp, #20]
 80073a8:	eba3 030b 	sub.w	r3, r3, fp
 80073ac:	9305      	str	r3, [sp, #20]
 80073ae:	f1cb 0300 	rsb	r3, fp, #0
 80073b2:	9308      	str	r3, [sp, #32]
 80073b4:	2300      	movs	r3, #0
 80073b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80073b8:	e7bf      	b.n	800733a <_dtoa_r+0x1e2>
 80073ba:	2300      	movs	r3, #0
 80073bc:	9309      	str	r3, [sp, #36]	; 0x24
 80073be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	dc52      	bgt.n	800746a <_dtoa_r+0x312>
 80073c4:	2301      	movs	r3, #1
 80073c6:	9301      	str	r3, [sp, #4]
 80073c8:	9304      	str	r3, [sp, #16]
 80073ca:	461a      	mov	r2, r3
 80073cc:	920a      	str	r2, [sp, #40]	; 0x28
 80073ce:	e00b      	b.n	80073e8 <_dtoa_r+0x290>
 80073d0:	2301      	movs	r3, #1
 80073d2:	e7f3      	b.n	80073bc <_dtoa_r+0x264>
 80073d4:	2300      	movs	r3, #0
 80073d6:	9309      	str	r3, [sp, #36]	; 0x24
 80073d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073da:	445b      	add	r3, fp
 80073dc:	9301      	str	r3, [sp, #4]
 80073de:	3301      	adds	r3, #1
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	9304      	str	r3, [sp, #16]
 80073e4:	bfb8      	it	lt
 80073e6:	2301      	movlt	r3, #1
 80073e8:	69e0      	ldr	r0, [r4, #28]
 80073ea:	2100      	movs	r1, #0
 80073ec:	2204      	movs	r2, #4
 80073ee:	f102 0614 	add.w	r6, r2, #20
 80073f2:	429e      	cmp	r6, r3
 80073f4:	d93d      	bls.n	8007472 <_dtoa_r+0x31a>
 80073f6:	6041      	str	r1, [r0, #4]
 80073f8:	4620      	mov	r0, r4
 80073fa:	f000 fd9f 	bl	8007f3c <_Balloc>
 80073fe:	9000      	str	r0, [sp, #0]
 8007400:	2800      	cmp	r0, #0
 8007402:	d139      	bne.n	8007478 <_dtoa_r+0x320>
 8007404:	4b16      	ldr	r3, [pc, #88]	; (8007460 <_dtoa_r+0x308>)
 8007406:	4602      	mov	r2, r0
 8007408:	f240 11af 	movw	r1, #431	; 0x1af
 800740c:	e6bd      	b.n	800718a <_dtoa_r+0x32>
 800740e:	2301      	movs	r3, #1
 8007410:	e7e1      	b.n	80073d6 <_dtoa_r+0x27e>
 8007412:	2501      	movs	r5, #1
 8007414:	2300      	movs	r3, #0
 8007416:	9307      	str	r3, [sp, #28]
 8007418:	9509      	str	r5, [sp, #36]	; 0x24
 800741a:	f04f 33ff 	mov.w	r3, #4294967295
 800741e:	9301      	str	r3, [sp, #4]
 8007420:	9304      	str	r3, [sp, #16]
 8007422:	2200      	movs	r2, #0
 8007424:	2312      	movs	r3, #18
 8007426:	e7d1      	b.n	80073cc <_dtoa_r+0x274>
 8007428:	636f4361 	.word	0x636f4361
 800742c:	3fd287a7 	.word	0x3fd287a7
 8007430:	8b60c8b3 	.word	0x8b60c8b3
 8007434:	3fc68a28 	.word	0x3fc68a28
 8007438:	509f79fb 	.word	0x509f79fb
 800743c:	3fd34413 	.word	0x3fd34413
 8007440:	0800b06e 	.word	0x0800b06e
 8007444:	0800b085 	.word	0x0800b085
 8007448:	7ff00000 	.word	0x7ff00000
 800744c:	0800b06a 	.word	0x0800b06a
 8007450:	0800b061 	.word	0x0800b061
 8007454:	0800b039 	.word	0x0800b039
 8007458:	3ff80000 	.word	0x3ff80000
 800745c:	0800b170 	.word	0x0800b170
 8007460:	0800b0dd 	.word	0x0800b0dd
 8007464:	2301      	movs	r3, #1
 8007466:	9309      	str	r3, [sp, #36]	; 0x24
 8007468:	e7d7      	b.n	800741a <_dtoa_r+0x2c2>
 800746a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800746c:	9301      	str	r3, [sp, #4]
 800746e:	9304      	str	r3, [sp, #16]
 8007470:	e7ba      	b.n	80073e8 <_dtoa_r+0x290>
 8007472:	3101      	adds	r1, #1
 8007474:	0052      	lsls	r2, r2, #1
 8007476:	e7ba      	b.n	80073ee <_dtoa_r+0x296>
 8007478:	69e3      	ldr	r3, [r4, #28]
 800747a:	9a00      	ldr	r2, [sp, #0]
 800747c:	601a      	str	r2, [r3, #0]
 800747e:	9b04      	ldr	r3, [sp, #16]
 8007480:	2b0e      	cmp	r3, #14
 8007482:	f200 80a8 	bhi.w	80075d6 <_dtoa_r+0x47e>
 8007486:	2d00      	cmp	r5, #0
 8007488:	f000 80a5 	beq.w	80075d6 <_dtoa_r+0x47e>
 800748c:	f1bb 0f00 	cmp.w	fp, #0
 8007490:	dd38      	ble.n	8007504 <_dtoa_r+0x3ac>
 8007492:	4bc0      	ldr	r3, [pc, #768]	; (8007794 <_dtoa_r+0x63c>)
 8007494:	f00b 020f 	and.w	r2, fp, #15
 8007498:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800749c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80074a0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80074a4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80074a8:	d019      	beq.n	80074de <_dtoa_r+0x386>
 80074aa:	4bbb      	ldr	r3, [pc, #748]	; (8007798 <_dtoa_r+0x640>)
 80074ac:	ec51 0b18 	vmov	r0, r1, d8
 80074b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074b4:	f7f9 f9d2 	bl	800085c <__aeabi_ddiv>
 80074b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074bc:	f008 080f 	and.w	r8, r8, #15
 80074c0:	2503      	movs	r5, #3
 80074c2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007798 <_dtoa_r+0x640>
 80074c6:	f1b8 0f00 	cmp.w	r8, #0
 80074ca:	d10a      	bne.n	80074e2 <_dtoa_r+0x38a>
 80074cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074d0:	4632      	mov	r2, r6
 80074d2:	463b      	mov	r3, r7
 80074d4:	f7f9 f9c2 	bl	800085c <__aeabi_ddiv>
 80074d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074dc:	e02b      	b.n	8007536 <_dtoa_r+0x3de>
 80074de:	2502      	movs	r5, #2
 80074e0:	e7ef      	b.n	80074c2 <_dtoa_r+0x36a>
 80074e2:	f018 0f01 	tst.w	r8, #1
 80074e6:	d008      	beq.n	80074fa <_dtoa_r+0x3a2>
 80074e8:	4630      	mov	r0, r6
 80074ea:	4639      	mov	r1, r7
 80074ec:	e9d9 2300 	ldrd	r2, r3, [r9]
 80074f0:	f7f9 f88a 	bl	8000608 <__aeabi_dmul>
 80074f4:	3501      	adds	r5, #1
 80074f6:	4606      	mov	r6, r0
 80074f8:	460f      	mov	r7, r1
 80074fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80074fe:	f109 0908 	add.w	r9, r9, #8
 8007502:	e7e0      	b.n	80074c6 <_dtoa_r+0x36e>
 8007504:	f000 809f 	beq.w	8007646 <_dtoa_r+0x4ee>
 8007508:	f1cb 0600 	rsb	r6, fp, #0
 800750c:	4ba1      	ldr	r3, [pc, #644]	; (8007794 <_dtoa_r+0x63c>)
 800750e:	4fa2      	ldr	r7, [pc, #648]	; (8007798 <_dtoa_r+0x640>)
 8007510:	f006 020f 	and.w	r2, r6, #15
 8007514:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751c:	ec51 0b18 	vmov	r0, r1, d8
 8007520:	f7f9 f872 	bl	8000608 <__aeabi_dmul>
 8007524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007528:	1136      	asrs	r6, r6, #4
 800752a:	2300      	movs	r3, #0
 800752c:	2502      	movs	r5, #2
 800752e:	2e00      	cmp	r6, #0
 8007530:	d17e      	bne.n	8007630 <_dtoa_r+0x4d8>
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1d0      	bne.n	80074d8 <_dtoa_r+0x380>
 8007536:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007538:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800753c:	2b00      	cmp	r3, #0
 800753e:	f000 8084 	beq.w	800764a <_dtoa_r+0x4f2>
 8007542:	4b96      	ldr	r3, [pc, #600]	; (800779c <_dtoa_r+0x644>)
 8007544:	2200      	movs	r2, #0
 8007546:	4640      	mov	r0, r8
 8007548:	4649      	mov	r1, r9
 800754a:	f7f9 facf 	bl	8000aec <__aeabi_dcmplt>
 800754e:	2800      	cmp	r0, #0
 8007550:	d07b      	beq.n	800764a <_dtoa_r+0x4f2>
 8007552:	9b04      	ldr	r3, [sp, #16]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d078      	beq.n	800764a <_dtoa_r+0x4f2>
 8007558:	9b01      	ldr	r3, [sp, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	dd39      	ble.n	80075d2 <_dtoa_r+0x47a>
 800755e:	4b90      	ldr	r3, [pc, #576]	; (80077a0 <_dtoa_r+0x648>)
 8007560:	2200      	movs	r2, #0
 8007562:	4640      	mov	r0, r8
 8007564:	4649      	mov	r1, r9
 8007566:	f7f9 f84f 	bl	8000608 <__aeabi_dmul>
 800756a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800756e:	9e01      	ldr	r6, [sp, #4]
 8007570:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007574:	3501      	adds	r5, #1
 8007576:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800757a:	4628      	mov	r0, r5
 800757c:	f7f8 ffda 	bl	8000534 <__aeabi_i2d>
 8007580:	4642      	mov	r2, r8
 8007582:	464b      	mov	r3, r9
 8007584:	f7f9 f840 	bl	8000608 <__aeabi_dmul>
 8007588:	4b86      	ldr	r3, [pc, #536]	; (80077a4 <_dtoa_r+0x64c>)
 800758a:	2200      	movs	r2, #0
 800758c:	f7f8 fe86 	bl	800029c <__adddf3>
 8007590:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007598:	9303      	str	r3, [sp, #12]
 800759a:	2e00      	cmp	r6, #0
 800759c:	d158      	bne.n	8007650 <_dtoa_r+0x4f8>
 800759e:	4b82      	ldr	r3, [pc, #520]	; (80077a8 <_dtoa_r+0x650>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	4640      	mov	r0, r8
 80075a4:	4649      	mov	r1, r9
 80075a6:	f7f8 fe77 	bl	8000298 <__aeabi_dsub>
 80075aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075ae:	4680      	mov	r8, r0
 80075b0:	4689      	mov	r9, r1
 80075b2:	f7f9 fab9 	bl	8000b28 <__aeabi_dcmpgt>
 80075b6:	2800      	cmp	r0, #0
 80075b8:	f040 8296 	bne.w	8007ae8 <_dtoa_r+0x990>
 80075bc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80075c0:	4640      	mov	r0, r8
 80075c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075c6:	4649      	mov	r1, r9
 80075c8:	f7f9 fa90 	bl	8000aec <__aeabi_dcmplt>
 80075cc:	2800      	cmp	r0, #0
 80075ce:	f040 8289 	bne.w	8007ae4 <_dtoa_r+0x98c>
 80075d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80075d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f2c0 814e 	blt.w	800787a <_dtoa_r+0x722>
 80075de:	f1bb 0f0e 	cmp.w	fp, #14
 80075e2:	f300 814a 	bgt.w	800787a <_dtoa_r+0x722>
 80075e6:	4b6b      	ldr	r3, [pc, #428]	; (8007794 <_dtoa_r+0x63c>)
 80075e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80075ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f280 80dc 	bge.w	80077b0 <_dtoa_r+0x658>
 80075f8:	9b04      	ldr	r3, [sp, #16]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f300 80d8 	bgt.w	80077b0 <_dtoa_r+0x658>
 8007600:	f040 826f 	bne.w	8007ae2 <_dtoa_r+0x98a>
 8007604:	4b68      	ldr	r3, [pc, #416]	; (80077a8 <_dtoa_r+0x650>)
 8007606:	2200      	movs	r2, #0
 8007608:	4640      	mov	r0, r8
 800760a:	4649      	mov	r1, r9
 800760c:	f7f8 fffc 	bl	8000608 <__aeabi_dmul>
 8007610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007614:	f7f9 fa7e 	bl	8000b14 <__aeabi_dcmpge>
 8007618:	9e04      	ldr	r6, [sp, #16]
 800761a:	4637      	mov	r7, r6
 800761c:	2800      	cmp	r0, #0
 800761e:	f040 8245 	bne.w	8007aac <_dtoa_r+0x954>
 8007622:	9d00      	ldr	r5, [sp, #0]
 8007624:	2331      	movs	r3, #49	; 0x31
 8007626:	f805 3b01 	strb.w	r3, [r5], #1
 800762a:	f10b 0b01 	add.w	fp, fp, #1
 800762e:	e241      	b.n	8007ab4 <_dtoa_r+0x95c>
 8007630:	07f2      	lsls	r2, r6, #31
 8007632:	d505      	bpl.n	8007640 <_dtoa_r+0x4e8>
 8007634:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007638:	f7f8 ffe6 	bl	8000608 <__aeabi_dmul>
 800763c:	3501      	adds	r5, #1
 800763e:	2301      	movs	r3, #1
 8007640:	1076      	asrs	r6, r6, #1
 8007642:	3708      	adds	r7, #8
 8007644:	e773      	b.n	800752e <_dtoa_r+0x3d6>
 8007646:	2502      	movs	r5, #2
 8007648:	e775      	b.n	8007536 <_dtoa_r+0x3de>
 800764a:	9e04      	ldr	r6, [sp, #16]
 800764c:	465f      	mov	r7, fp
 800764e:	e792      	b.n	8007576 <_dtoa_r+0x41e>
 8007650:	9900      	ldr	r1, [sp, #0]
 8007652:	4b50      	ldr	r3, [pc, #320]	; (8007794 <_dtoa_r+0x63c>)
 8007654:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007658:	4431      	add	r1, r6
 800765a:	9102      	str	r1, [sp, #8]
 800765c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800765e:	eeb0 9a47 	vmov.f32	s18, s14
 8007662:	eef0 9a67 	vmov.f32	s19, s15
 8007666:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800766a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800766e:	2900      	cmp	r1, #0
 8007670:	d044      	beq.n	80076fc <_dtoa_r+0x5a4>
 8007672:	494e      	ldr	r1, [pc, #312]	; (80077ac <_dtoa_r+0x654>)
 8007674:	2000      	movs	r0, #0
 8007676:	f7f9 f8f1 	bl	800085c <__aeabi_ddiv>
 800767a:	ec53 2b19 	vmov	r2, r3, d9
 800767e:	f7f8 fe0b 	bl	8000298 <__aeabi_dsub>
 8007682:	9d00      	ldr	r5, [sp, #0]
 8007684:	ec41 0b19 	vmov	d9, r0, r1
 8007688:	4649      	mov	r1, r9
 800768a:	4640      	mov	r0, r8
 800768c:	f7f9 fa6c 	bl	8000b68 <__aeabi_d2iz>
 8007690:	4606      	mov	r6, r0
 8007692:	f7f8 ff4f 	bl	8000534 <__aeabi_i2d>
 8007696:	4602      	mov	r2, r0
 8007698:	460b      	mov	r3, r1
 800769a:	4640      	mov	r0, r8
 800769c:	4649      	mov	r1, r9
 800769e:	f7f8 fdfb 	bl	8000298 <__aeabi_dsub>
 80076a2:	3630      	adds	r6, #48	; 0x30
 80076a4:	f805 6b01 	strb.w	r6, [r5], #1
 80076a8:	ec53 2b19 	vmov	r2, r3, d9
 80076ac:	4680      	mov	r8, r0
 80076ae:	4689      	mov	r9, r1
 80076b0:	f7f9 fa1c 	bl	8000aec <__aeabi_dcmplt>
 80076b4:	2800      	cmp	r0, #0
 80076b6:	d164      	bne.n	8007782 <_dtoa_r+0x62a>
 80076b8:	4642      	mov	r2, r8
 80076ba:	464b      	mov	r3, r9
 80076bc:	4937      	ldr	r1, [pc, #220]	; (800779c <_dtoa_r+0x644>)
 80076be:	2000      	movs	r0, #0
 80076c0:	f7f8 fdea 	bl	8000298 <__aeabi_dsub>
 80076c4:	ec53 2b19 	vmov	r2, r3, d9
 80076c8:	f7f9 fa10 	bl	8000aec <__aeabi_dcmplt>
 80076cc:	2800      	cmp	r0, #0
 80076ce:	f040 80b6 	bne.w	800783e <_dtoa_r+0x6e6>
 80076d2:	9b02      	ldr	r3, [sp, #8]
 80076d4:	429d      	cmp	r5, r3
 80076d6:	f43f af7c 	beq.w	80075d2 <_dtoa_r+0x47a>
 80076da:	4b31      	ldr	r3, [pc, #196]	; (80077a0 <_dtoa_r+0x648>)
 80076dc:	ec51 0b19 	vmov	r0, r1, d9
 80076e0:	2200      	movs	r2, #0
 80076e2:	f7f8 ff91 	bl	8000608 <__aeabi_dmul>
 80076e6:	4b2e      	ldr	r3, [pc, #184]	; (80077a0 <_dtoa_r+0x648>)
 80076e8:	ec41 0b19 	vmov	d9, r0, r1
 80076ec:	2200      	movs	r2, #0
 80076ee:	4640      	mov	r0, r8
 80076f0:	4649      	mov	r1, r9
 80076f2:	f7f8 ff89 	bl	8000608 <__aeabi_dmul>
 80076f6:	4680      	mov	r8, r0
 80076f8:	4689      	mov	r9, r1
 80076fa:	e7c5      	b.n	8007688 <_dtoa_r+0x530>
 80076fc:	ec51 0b17 	vmov	r0, r1, d7
 8007700:	f7f8 ff82 	bl	8000608 <__aeabi_dmul>
 8007704:	9b02      	ldr	r3, [sp, #8]
 8007706:	9d00      	ldr	r5, [sp, #0]
 8007708:	930f      	str	r3, [sp, #60]	; 0x3c
 800770a:	ec41 0b19 	vmov	d9, r0, r1
 800770e:	4649      	mov	r1, r9
 8007710:	4640      	mov	r0, r8
 8007712:	f7f9 fa29 	bl	8000b68 <__aeabi_d2iz>
 8007716:	4606      	mov	r6, r0
 8007718:	f7f8 ff0c 	bl	8000534 <__aeabi_i2d>
 800771c:	3630      	adds	r6, #48	; 0x30
 800771e:	4602      	mov	r2, r0
 8007720:	460b      	mov	r3, r1
 8007722:	4640      	mov	r0, r8
 8007724:	4649      	mov	r1, r9
 8007726:	f7f8 fdb7 	bl	8000298 <__aeabi_dsub>
 800772a:	f805 6b01 	strb.w	r6, [r5], #1
 800772e:	9b02      	ldr	r3, [sp, #8]
 8007730:	429d      	cmp	r5, r3
 8007732:	4680      	mov	r8, r0
 8007734:	4689      	mov	r9, r1
 8007736:	f04f 0200 	mov.w	r2, #0
 800773a:	d124      	bne.n	8007786 <_dtoa_r+0x62e>
 800773c:	4b1b      	ldr	r3, [pc, #108]	; (80077ac <_dtoa_r+0x654>)
 800773e:	ec51 0b19 	vmov	r0, r1, d9
 8007742:	f7f8 fdab 	bl	800029c <__adddf3>
 8007746:	4602      	mov	r2, r0
 8007748:	460b      	mov	r3, r1
 800774a:	4640      	mov	r0, r8
 800774c:	4649      	mov	r1, r9
 800774e:	f7f9 f9eb 	bl	8000b28 <__aeabi_dcmpgt>
 8007752:	2800      	cmp	r0, #0
 8007754:	d173      	bne.n	800783e <_dtoa_r+0x6e6>
 8007756:	ec53 2b19 	vmov	r2, r3, d9
 800775a:	4914      	ldr	r1, [pc, #80]	; (80077ac <_dtoa_r+0x654>)
 800775c:	2000      	movs	r0, #0
 800775e:	f7f8 fd9b 	bl	8000298 <__aeabi_dsub>
 8007762:	4602      	mov	r2, r0
 8007764:	460b      	mov	r3, r1
 8007766:	4640      	mov	r0, r8
 8007768:	4649      	mov	r1, r9
 800776a:	f7f9 f9bf 	bl	8000aec <__aeabi_dcmplt>
 800776e:	2800      	cmp	r0, #0
 8007770:	f43f af2f 	beq.w	80075d2 <_dtoa_r+0x47a>
 8007774:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007776:	1e6b      	subs	r3, r5, #1
 8007778:	930f      	str	r3, [sp, #60]	; 0x3c
 800777a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800777e:	2b30      	cmp	r3, #48	; 0x30
 8007780:	d0f8      	beq.n	8007774 <_dtoa_r+0x61c>
 8007782:	46bb      	mov	fp, r7
 8007784:	e04a      	b.n	800781c <_dtoa_r+0x6c4>
 8007786:	4b06      	ldr	r3, [pc, #24]	; (80077a0 <_dtoa_r+0x648>)
 8007788:	f7f8 ff3e 	bl	8000608 <__aeabi_dmul>
 800778c:	4680      	mov	r8, r0
 800778e:	4689      	mov	r9, r1
 8007790:	e7bd      	b.n	800770e <_dtoa_r+0x5b6>
 8007792:	bf00      	nop
 8007794:	0800b170 	.word	0x0800b170
 8007798:	0800b148 	.word	0x0800b148
 800779c:	3ff00000 	.word	0x3ff00000
 80077a0:	40240000 	.word	0x40240000
 80077a4:	401c0000 	.word	0x401c0000
 80077a8:	40140000 	.word	0x40140000
 80077ac:	3fe00000 	.word	0x3fe00000
 80077b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80077b4:	9d00      	ldr	r5, [sp, #0]
 80077b6:	4642      	mov	r2, r8
 80077b8:	464b      	mov	r3, r9
 80077ba:	4630      	mov	r0, r6
 80077bc:	4639      	mov	r1, r7
 80077be:	f7f9 f84d 	bl	800085c <__aeabi_ddiv>
 80077c2:	f7f9 f9d1 	bl	8000b68 <__aeabi_d2iz>
 80077c6:	9001      	str	r0, [sp, #4]
 80077c8:	f7f8 feb4 	bl	8000534 <__aeabi_i2d>
 80077cc:	4642      	mov	r2, r8
 80077ce:	464b      	mov	r3, r9
 80077d0:	f7f8 ff1a 	bl	8000608 <__aeabi_dmul>
 80077d4:	4602      	mov	r2, r0
 80077d6:	460b      	mov	r3, r1
 80077d8:	4630      	mov	r0, r6
 80077da:	4639      	mov	r1, r7
 80077dc:	f7f8 fd5c 	bl	8000298 <__aeabi_dsub>
 80077e0:	9e01      	ldr	r6, [sp, #4]
 80077e2:	9f04      	ldr	r7, [sp, #16]
 80077e4:	3630      	adds	r6, #48	; 0x30
 80077e6:	f805 6b01 	strb.w	r6, [r5], #1
 80077ea:	9e00      	ldr	r6, [sp, #0]
 80077ec:	1bae      	subs	r6, r5, r6
 80077ee:	42b7      	cmp	r7, r6
 80077f0:	4602      	mov	r2, r0
 80077f2:	460b      	mov	r3, r1
 80077f4:	d134      	bne.n	8007860 <_dtoa_r+0x708>
 80077f6:	f7f8 fd51 	bl	800029c <__adddf3>
 80077fa:	4642      	mov	r2, r8
 80077fc:	464b      	mov	r3, r9
 80077fe:	4606      	mov	r6, r0
 8007800:	460f      	mov	r7, r1
 8007802:	f7f9 f991 	bl	8000b28 <__aeabi_dcmpgt>
 8007806:	b9c8      	cbnz	r0, 800783c <_dtoa_r+0x6e4>
 8007808:	4642      	mov	r2, r8
 800780a:	464b      	mov	r3, r9
 800780c:	4630      	mov	r0, r6
 800780e:	4639      	mov	r1, r7
 8007810:	f7f9 f962 	bl	8000ad8 <__aeabi_dcmpeq>
 8007814:	b110      	cbz	r0, 800781c <_dtoa_r+0x6c4>
 8007816:	9b01      	ldr	r3, [sp, #4]
 8007818:	07db      	lsls	r3, r3, #31
 800781a:	d40f      	bmi.n	800783c <_dtoa_r+0x6e4>
 800781c:	4651      	mov	r1, sl
 800781e:	4620      	mov	r0, r4
 8007820:	f000 fbcc 	bl	8007fbc <_Bfree>
 8007824:	2300      	movs	r3, #0
 8007826:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007828:	702b      	strb	r3, [r5, #0]
 800782a:	f10b 0301 	add.w	r3, fp, #1
 800782e:	6013      	str	r3, [r2, #0]
 8007830:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007832:	2b00      	cmp	r3, #0
 8007834:	f43f ace2 	beq.w	80071fc <_dtoa_r+0xa4>
 8007838:	601d      	str	r5, [r3, #0]
 800783a:	e4df      	b.n	80071fc <_dtoa_r+0xa4>
 800783c:	465f      	mov	r7, fp
 800783e:	462b      	mov	r3, r5
 8007840:	461d      	mov	r5, r3
 8007842:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007846:	2a39      	cmp	r2, #57	; 0x39
 8007848:	d106      	bne.n	8007858 <_dtoa_r+0x700>
 800784a:	9a00      	ldr	r2, [sp, #0]
 800784c:	429a      	cmp	r2, r3
 800784e:	d1f7      	bne.n	8007840 <_dtoa_r+0x6e8>
 8007850:	9900      	ldr	r1, [sp, #0]
 8007852:	2230      	movs	r2, #48	; 0x30
 8007854:	3701      	adds	r7, #1
 8007856:	700a      	strb	r2, [r1, #0]
 8007858:	781a      	ldrb	r2, [r3, #0]
 800785a:	3201      	adds	r2, #1
 800785c:	701a      	strb	r2, [r3, #0]
 800785e:	e790      	b.n	8007782 <_dtoa_r+0x62a>
 8007860:	4ba3      	ldr	r3, [pc, #652]	; (8007af0 <_dtoa_r+0x998>)
 8007862:	2200      	movs	r2, #0
 8007864:	f7f8 fed0 	bl	8000608 <__aeabi_dmul>
 8007868:	2200      	movs	r2, #0
 800786a:	2300      	movs	r3, #0
 800786c:	4606      	mov	r6, r0
 800786e:	460f      	mov	r7, r1
 8007870:	f7f9 f932 	bl	8000ad8 <__aeabi_dcmpeq>
 8007874:	2800      	cmp	r0, #0
 8007876:	d09e      	beq.n	80077b6 <_dtoa_r+0x65e>
 8007878:	e7d0      	b.n	800781c <_dtoa_r+0x6c4>
 800787a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800787c:	2a00      	cmp	r2, #0
 800787e:	f000 80ca 	beq.w	8007a16 <_dtoa_r+0x8be>
 8007882:	9a07      	ldr	r2, [sp, #28]
 8007884:	2a01      	cmp	r2, #1
 8007886:	f300 80ad 	bgt.w	80079e4 <_dtoa_r+0x88c>
 800788a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800788c:	2a00      	cmp	r2, #0
 800788e:	f000 80a5 	beq.w	80079dc <_dtoa_r+0x884>
 8007892:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007896:	9e08      	ldr	r6, [sp, #32]
 8007898:	9d05      	ldr	r5, [sp, #20]
 800789a:	9a05      	ldr	r2, [sp, #20]
 800789c:	441a      	add	r2, r3
 800789e:	9205      	str	r2, [sp, #20]
 80078a0:	9a06      	ldr	r2, [sp, #24]
 80078a2:	2101      	movs	r1, #1
 80078a4:	441a      	add	r2, r3
 80078a6:	4620      	mov	r0, r4
 80078a8:	9206      	str	r2, [sp, #24]
 80078aa:	f000 fc87 	bl	80081bc <__i2b>
 80078ae:	4607      	mov	r7, r0
 80078b0:	b165      	cbz	r5, 80078cc <_dtoa_r+0x774>
 80078b2:	9b06      	ldr	r3, [sp, #24]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	dd09      	ble.n	80078cc <_dtoa_r+0x774>
 80078b8:	42ab      	cmp	r3, r5
 80078ba:	9a05      	ldr	r2, [sp, #20]
 80078bc:	bfa8      	it	ge
 80078be:	462b      	movge	r3, r5
 80078c0:	1ad2      	subs	r2, r2, r3
 80078c2:	9205      	str	r2, [sp, #20]
 80078c4:	9a06      	ldr	r2, [sp, #24]
 80078c6:	1aed      	subs	r5, r5, r3
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	9306      	str	r3, [sp, #24]
 80078cc:	9b08      	ldr	r3, [sp, #32]
 80078ce:	b1f3      	cbz	r3, 800790e <_dtoa_r+0x7b6>
 80078d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f000 80a3 	beq.w	8007a1e <_dtoa_r+0x8c6>
 80078d8:	2e00      	cmp	r6, #0
 80078da:	dd10      	ble.n	80078fe <_dtoa_r+0x7a6>
 80078dc:	4639      	mov	r1, r7
 80078de:	4632      	mov	r2, r6
 80078e0:	4620      	mov	r0, r4
 80078e2:	f000 fd2b 	bl	800833c <__pow5mult>
 80078e6:	4652      	mov	r2, sl
 80078e8:	4601      	mov	r1, r0
 80078ea:	4607      	mov	r7, r0
 80078ec:	4620      	mov	r0, r4
 80078ee:	f000 fc7b 	bl	80081e8 <__multiply>
 80078f2:	4651      	mov	r1, sl
 80078f4:	4680      	mov	r8, r0
 80078f6:	4620      	mov	r0, r4
 80078f8:	f000 fb60 	bl	8007fbc <_Bfree>
 80078fc:	46c2      	mov	sl, r8
 80078fe:	9b08      	ldr	r3, [sp, #32]
 8007900:	1b9a      	subs	r2, r3, r6
 8007902:	d004      	beq.n	800790e <_dtoa_r+0x7b6>
 8007904:	4651      	mov	r1, sl
 8007906:	4620      	mov	r0, r4
 8007908:	f000 fd18 	bl	800833c <__pow5mult>
 800790c:	4682      	mov	sl, r0
 800790e:	2101      	movs	r1, #1
 8007910:	4620      	mov	r0, r4
 8007912:	f000 fc53 	bl	80081bc <__i2b>
 8007916:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007918:	2b00      	cmp	r3, #0
 800791a:	4606      	mov	r6, r0
 800791c:	f340 8081 	ble.w	8007a22 <_dtoa_r+0x8ca>
 8007920:	461a      	mov	r2, r3
 8007922:	4601      	mov	r1, r0
 8007924:	4620      	mov	r0, r4
 8007926:	f000 fd09 	bl	800833c <__pow5mult>
 800792a:	9b07      	ldr	r3, [sp, #28]
 800792c:	2b01      	cmp	r3, #1
 800792e:	4606      	mov	r6, r0
 8007930:	dd7a      	ble.n	8007a28 <_dtoa_r+0x8d0>
 8007932:	f04f 0800 	mov.w	r8, #0
 8007936:	6933      	ldr	r3, [r6, #16]
 8007938:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800793c:	6918      	ldr	r0, [r3, #16]
 800793e:	f000 fbef 	bl	8008120 <__hi0bits>
 8007942:	f1c0 0020 	rsb	r0, r0, #32
 8007946:	9b06      	ldr	r3, [sp, #24]
 8007948:	4418      	add	r0, r3
 800794a:	f010 001f 	ands.w	r0, r0, #31
 800794e:	f000 8094 	beq.w	8007a7a <_dtoa_r+0x922>
 8007952:	f1c0 0320 	rsb	r3, r0, #32
 8007956:	2b04      	cmp	r3, #4
 8007958:	f340 8085 	ble.w	8007a66 <_dtoa_r+0x90e>
 800795c:	9b05      	ldr	r3, [sp, #20]
 800795e:	f1c0 001c 	rsb	r0, r0, #28
 8007962:	4403      	add	r3, r0
 8007964:	9305      	str	r3, [sp, #20]
 8007966:	9b06      	ldr	r3, [sp, #24]
 8007968:	4403      	add	r3, r0
 800796a:	4405      	add	r5, r0
 800796c:	9306      	str	r3, [sp, #24]
 800796e:	9b05      	ldr	r3, [sp, #20]
 8007970:	2b00      	cmp	r3, #0
 8007972:	dd05      	ble.n	8007980 <_dtoa_r+0x828>
 8007974:	4651      	mov	r1, sl
 8007976:	461a      	mov	r2, r3
 8007978:	4620      	mov	r0, r4
 800797a:	f000 fd39 	bl	80083f0 <__lshift>
 800797e:	4682      	mov	sl, r0
 8007980:	9b06      	ldr	r3, [sp, #24]
 8007982:	2b00      	cmp	r3, #0
 8007984:	dd05      	ble.n	8007992 <_dtoa_r+0x83a>
 8007986:	4631      	mov	r1, r6
 8007988:	461a      	mov	r2, r3
 800798a:	4620      	mov	r0, r4
 800798c:	f000 fd30 	bl	80083f0 <__lshift>
 8007990:	4606      	mov	r6, r0
 8007992:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007994:	2b00      	cmp	r3, #0
 8007996:	d072      	beq.n	8007a7e <_dtoa_r+0x926>
 8007998:	4631      	mov	r1, r6
 800799a:	4650      	mov	r0, sl
 800799c:	f000 fd94 	bl	80084c8 <__mcmp>
 80079a0:	2800      	cmp	r0, #0
 80079a2:	da6c      	bge.n	8007a7e <_dtoa_r+0x926>
 80079a4:	2300      	movs	r3, #0
 80079a6:	4651      	mov	r1, sl
 80079a8:	220a      	movs	r2, #10
 80079aa:	4620      	mov	r0, r4
 80079ac:	f000 fb28 	bl	8008000 <__multadd>
 80079b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80079b6:	4682      	mov	sl, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 81b0 	beq.w	8007d1e <_dtoa_r+0xbc6>
 80079be:	2300      	movs	r3, #0
 80079c0:	4639      	mov	r1, r7
 80079c2:	220a      	movs	r2, #10
 80079c4:	4620      	mov	r0, r4
 80079c6:	f000 fb1b 	bl	8008000 <__multadd>
 80079ca:	9b01      	ldr	r3, [sp, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	4607      	mov	r7, r0
 80079d0:	f300 8096 	bgt.w	8007b00 <_dtoa_r+0x9a8>
 80079d4:	9b07      	ldr	r3, [sp, #28]
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	dc59      	bgt.n	8007a8e <_dtoa_r+0x936>
 80079da:	e091      	b.n	8007b00 <_dtoa_r+0x9a8>
 80079dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80079e2:	e758      	b.n	8007896 <_dtoa_r+0x73e>
 80079e4:	9b04      	ldr	r3, [sp, #16]
 80079e6:	1e5e      	subs	r6, r3, #1
 80079e8:	9b08      	ldr	r3, [sp, #32]
 80079ea:	42b3      	cmp	r3, r6
 80079ec:	bfbf      	itttt	lt
 80079ee:	9b08      	ldrlt	r3, [sp, #32]
 80079f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80079f2:	9608      	strlt	r6, [sp, #32]
 80079f4:	1af3      	sublt	r3, r6, r3
 80079f6:	bfb4      	ite	lt
 80079f8:	18d2      	addlt	r2, r2, r3
 80079fa:	1b9e      	subge	r6, r3, r6
 80079fc:	9b04      	ldr	r3, [sp, #16]
 80079fe:	bfbc      	itt	lt
 8007a00:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007a02:	2600      	movlt	r6, #0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	bfb7      	itett	lt
 8007a08:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007a0c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007a10:	1a9d      	sublt	r5, r3, r2
 8007a12:	2300      	movlt	r3, #0
 8007a14:	e741      	b.n	800789a <_dtoa_r+0x742>
 8007a16:	9e08      	ldr	r6, [sp, #32]
 8007a18:	9d05      	ldr	r5, [sp, #20]
 8007a1a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007a1c:	e748      	b.n	80078b0 <_dtoa_r+0x758>
 8007a1e:	9a08      	ldr	r2, [sp, #32]
 8007a20:	e770      	b.n	8007904 <_dtoa_r+0x7ac>
 8007a22:	9b07      	ldr	r3, [sp, #28]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	dc19      	bgt.n	8007a5c <_dtoa_r+0x904>
 8007a28:	9b02      	ldr	r3, [sp, #8]
 8007a2a:	b9bb      	cbnz	r3, 8007a5c <_dtoa_r+0x904>
 8007a2c:	9b03      	ldr	r3, [sp, #12]
 8007a2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a32:	b99b      	cbnz	r3, 8007a5c <_dtoa_r+0x904>
 8007a34:	9b03      	ldr	r3, [sp, #12]
 8007a36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a3a:	0d1b      	lsrs	r3, r3, #20
 8007a3c:	051b      	lsls	r3, r3, #20
 8007a3e:	b183      	cbz	r3, 8007a62 <_dtoa_r+0x90a>
 8007a40:	9b05      	ldr	r3, [sp, #20]
 8007a42:	3301      	adds	r3, #1
 8007a44:	9305      	str	r3, [sp, #20]
 8007a46:	9b06      	ldr	r3, [sp, #24]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	9306      	str	r3, [sp, #24]
 8007a4c:	f04f 0801 	mov.w	r8, #1
 8007a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f47f af6f 	bne.w	8007936 <_dtoa_r+0x7de>
 8007a58:	2001      	movs	r0, #1
 8007a5a:	e774      	b.n	8007946 <_dtoa_r+0x7ee>
 8007a5c:	f04f 0800 	mov.w	r8, #0
 8007a60:	e7f6      	b.n	8007a50 <_dtoa_r+0x8f8>
 8007a62:	4698      	mov	r8, r3
 8007a64:	e7f4      	b.n	8007a50 <_dtoa_r+0x8f8>
 8007a66:	d082      	beq.n	800796e <_dtoa_r+0x816>
 8007a68:	9a05      	ldr	r2, [sp, #20]
 8007a6a:	331c      	adds	r3, #28
 8007a6c:	441a      	add	r2, r3
 8007a6e:	9205      	str	r2, [sp, #20]
 8007a70:	9a06      	ldr	r2, [sp, #24]
 8007a72:	441a      	add	r2, r3
 8007a74:	441d      	add	r5, r3
 8007a76:	9206      	str	r2, [sp, #24]
 8007a78:	e779      	b.n	800796e <_dtoa_r+0x816>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	e7f4      	b.n	8007a68 <_dtoa_r+0x910>
 8007a7e:	9b04      	ldr	r3, [sp, #16]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	dc37      	bgt.n	8007af4 <_dtoa_r+0x99c>
 8007a84:	9b07      	ldr	r3, [sp, #28]
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	dd34      	ble.n	8007af4 <_dtoa_r+0x99c>
 8007a8a:	9b04      	ldr	r3, [sp, #16]
 8007a8c:	9301      	str	r3, [sp, #4]
 8007a8e:	9b01      	ldr	r3, [sp, #4]
 8007a90:	b963      	cbnz	r3, 8007aac <_dtoa_r+0x954>
 8007a92:	4631      	mov	r1, r6
 8007a94:	2205      	movs	r2, #5
 8007a96:	4620      	mov	r0, r4
 8007a98:	f000 fab2 	bl	8008000 <__multadd>
 8007a9c:	4601      	mov	r1, r0
 8007a9e:	4606      	mov	r6, r0
 8007aa0:	4650      	mov	r0, sl
 8007aa2:	f000 fd11 	bl	80084c8 <__mcmp>
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	f73f adbb 	bgt.w	8007622 <_dtoa_r+0x4ca>
 8007aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aae:	9d00      	ldr	r5, [sp, #0]
 8007ab0:	ea6f 0b03 	mvn.w	fp, r3
 8007ab4:	f04f 0800 	mov.w	r8, #0
 8007ab8:	4631      	mov	r1, r6
 8007aba:	4620      	mov	r0, r4
 8007abc:	f000 fa7e 	bl	8007fbc <_Bfree>
 8007ac0:	2f00      	cmp	r7, #0
 8007ac2:	f43f aeab 	beq.w	800781c <_dtoa_r+0x6c4>
 8007ac6:	f1b8 0f00 	cmp.w	r8, #0
 8007aca:	d005      	beq.n	8007ad8 <_dtoa_r+0x980>
 8007acc:	45b8      	cmp	r8, r7
 8007ace:	d003      	beq.n	8007ad8 <_dtoa_r+0x980>
 8007ad0:	4641      	mov	r1, r8
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f000 fa72 	bl	8007fbc <_Bfree>
 8007ad8:	4639      	mov	r1, r7
 8007ada:	4620      	mov	r0, r4
 8007adc:	f000 fa6e 	bl	8007fbc <_Bfree>
 8007ae0:	e69c      	b.n	800781c <_dtoa_r+0x6c4>
 8007ae2:	2600      	movs	r6, #0
 8007ae4:	4637      	mov	r7, r6
 8007ae6:	e7e1      	b.n	8007aac <_dtoa_r+0x954>
 8007ae8:	46bb      	mov	fp, r7
 8007aea:	4637      	mov	r7, r6
 8007aec:	e599      	b.n	8007622 <_dtoa_r+0x4ca>
 8007aee:	bf00      	nop
 8007af0:	40240000 	.word	0x40240000
 8007af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f000 80c8 	beq.w	8007c8c <_dtoa_r+0xb34>
 8007afc:	9b04      	ldr	r3, [sp, #16]
 8007afe:	9301      	str	r3, [sp, #4]
 8007b00:	2d00      	cmp	r5, #0
 8007b02:	dd05      	ble.n	8007b10 <_dtoa_r+0x9b8>
 8007b04:	4639      	mov	r1, r7
 8007b06:	462a      	mov	r2, r5
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f000 fc71 	bl	80083f0 <__lshift>
 8007b0e:	4607      	mov	r7, r0
 8007b10:	f1b8 0f00 	cmp.w	r8, #0
 8007b14:	d05b      	beq.n	8007bce <_dtoa_r+0xa76>
 8007b16:	6879      	ldr	r1, [r7, #4]
 8007b18:	4620      	mov	r0, r4
 8007b1a:	f000 fa0f 	bl	8007f3c <_Balloc>
 8007b1e:	4605      	mov	r5, r0
 8007b20:	b928      	cbnz	r0, 8007b2e <_dtoa_r+0x9d6>
 8007b22:	4b83      	ldr	r3, [pc, #524]	; (8007d30 <_dtoa_r+0xbd8>)
 8007b24:	4602      	mov	r2, r0
 8007b26:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007b2a:	f7ff bb2e 	b.w	800718a <_dtoa_r+0x32>
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	3202      	adds	r2, #2
 8007b32:	0092      	lsls	r2, r2, #2
 8007b34:	f107 010c 	add.w	r1, r7, #12
 8007b38:	300c      	adds	r0, #12
 8007b3a:	f002 f95f 	bl	8009dfc <memcpy>
 8007b3e:	2201      	movs	r2, #1
 8007b40:	4629      	mov	r1, r5
 8007b42:	4620      	mov	r0, r4
 8007b44:	f000 fc54 	bl	80083f0 <__lshift>
 8007b48:	9b00      	ldr	r3, [sp, #0]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	9304      	str	r3, [sp, #16]
 8007b4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b52:	4413      	add	r3, r2
 8007b54:	9308      	str	r3, [sp, #32]
 8007b56:	9b02      	ldr	r3, [sp, #8]
 8007b58:	f003 0301 	and.w	r3, r3, #1
 8007b5c:	46b8      	mov	r8, r7
 8007b5e:	9306      	str	r3, [sp, #24]
 8007b60:	4607      	mov	r7, r0
 8007b62:	9b04      	ldr	r3, [sp, #16]
 8007b64:	4631      	mov	r1, r6
 8007b66:	3b01      	subs	r3, #1
 8007b68:	4650      	mov	r0, sl
 8007b6a:	9301      	str	r3, [sp, #4]
 8007b6c:	f7ff fa6a 	bl	8007044 <quorem>
 8007b70:	4641      	mov	r1, r8
 8007b72:	9002      	str	r0, [sp, #8]
 8007b74:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007b78:	4650      	mov	r0, sl
 8007b7a:	f000 fca5 	bl	80084c8 <__mcmp>
 8007b7e:	463a      	mov	r2, r7
 8007b80:	9005      	str	r0, [sp, #20]
 8007b82:	4631      	mov	r1, r6
 8007b84:	4620      	mov	r0, r4
 8007b86:	f000 fcbb 	bl	8008500 <__mdiff>
 8007b8a:	68c2      	ldr	r2, [r0, #12]
 8007b8c:	4605      	mov	r5, r0
 8007b8e:	bb02      	cbnz	r2, 8007bd2 <_dtoa_r+0xa7a>
 8007b90:	4601      	mov	r1, r0
 8007b92:	4650      	mov	r0, sl
 8007b94:	f000 fc98 	bl	80084c8 <__mcmp>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	4629      	mov	r1, r5
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	9209      	str	r2, [sp, #36]	; 0x24
 8007ba0:	f000 fa0c 	bl	8007fbc <_Bfree>
 8007ba4:	9b07      	ldr	r3, [sp, #28]
 8007ba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ba8:	9d04      	ldr	r5, [sp, #16]
 8007baa:	ea43 0102 	orr.w	r1, r3, r2
 8007bae:	9b06      	ldr	r3, [sp, #24]
 8007bb0:	4319      	orrs	r1, r3
 8007bb2:	d110      	bne.n	8007bd6 <_dtoa_r+0xa7e>
 8007bb4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007bb8:	d029      	beq.n	8007c0e <_dtoa_r+0xab6>
 8007bba:	9b05      	ldr	r3, [sp, #20]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	dd02      	ble.n	8007bc6 <_dtoa_r+0xa6e>
 8007bc0:	9b02      	ldr	r3, [sp, #8]
 8007bc2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007bc6:	9b01      	ldr	r3, [sp, #4]
 8007bc8:	f883 9000 	strb.w	r9, [r3]
 8007bcc:	e774      	b.n	8007ab8 <_dtoa_r+0x960>
 8007bce:	4638      	mov	r0, r7
 8007bd0:	e7ba      	b.n	8007b48 <_dtoa_r+0x9f0>
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	e7e1      	b.n	8007b9a <_dtoa_r+0xa42>
 8007bd6:	9b05      	ldr	r3, [sp, #20]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	db04      	blt.n	8007be6 <_dtoa_r+0xa8e>
 8007bdc:	9907      	ldr	r1, [sp, #28]
 8007bde:	430b      	orrs	r3, r1
 8007be0:	9906      	ldr	r1, [sp, #24]
 8007be2:	430b      	orrs	r3, r1
 8007be4:	d120      	bne.n	8007c28 <_dtoa_r+0xad0>
 8007be6:	2a00      	cmp	r2, #0
 8007be8:	dded      	ble.n	8007bc6 <_dtoa_r+0xa6e>
 8007bea:	4651      	mov	r1, sl
 8007bec:	2201      	movs	r2, #1
 8007bee:	4620      	mov	r0, r4
 8007bf0:	f000 fbfe 	bl	80083f0 <__lshift>
 8007bf4:	4631      	mov	r1, r6
 8007bf6:	4682      	mov	sl, r0
 8007bf8:	f000 fc66 	bl	80084c8 <__mcmp>
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	dc03      	bgt.n	8007c08 <_dtoa_r+0xab0>
 8007c00:	d1e1      	bne.n	8007bc6 <_dtoa_r+0xa6e>
 8007c02:	f019 0f01 	tst.w	r9, #1
 8007c06:	d0de      	beq.n	8007bc6 <_dtoa_r+0xa6e>
 8007c08:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007c0c:	d1d8      	bne.n	8007bc0 <_dtoa_r+0xa68>
 8007c0e:	9a01      	ldr	r2, [sp, #4]
 8007c10:	2339      	movs	r3, #57	; 0x39
 8007c12:	7013      	strb	r3, [r2, #0]
 8007c14:	462b      	mov	r3, r5
 8007c16:	461d      	mov	r5, r3
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007c1e:	2a39      	cmp	r2, #57	; 0x39
 8007c20:	d06c      	beq.n	8007cfc <_dtoa_r+0xba4>
 8007c22:	3201      	adds	r2, #1
 8007c24:	701a      	strb	r2, [r3, #0]
 8007c26:	e747      	b.n	8007ab8 <_dtoa_r+0x960>
 8007c28:	2a00      	cmp	r2, #0
 8007c2a:	dd07      	ble.n	8007c3c <_dtoa_r+0xae4>
 8007c2c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007c30:	d0ed      	beq.n	8007c0e <_dtoa_r+0xab6>
 8007c32:	9a01      	ldr	r2, [sp, #4]
 8007c34:	f109 0301 	add.w	r3, r9, #1
 8007c38:	7013      	strb	r3, [r2, #0]
 8007c3a:	e73d      	b.n	8007ab8 <_dtoa_r+0x960>
 8007c3c:	9b04      	ldr	r3, [sp, #16]
 8007c3e:	9a08      	ldr	r2, [sp, #32]
 8007c40:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d043      	beq.n	8007cd0 <_dtoa_r+0xb78>
 8007c48:	4651      	mov	r1, sl
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	220a      	movs	r2, #10
 8007c4e:	4620      	mov	r0, r4
 8007c50:	f000 f9d6 	bl	8008000 <__multadd>
 8007c54:	45b8      	cmp	r8, r7
 8007c56:	4682      	mov	sl, r0
 8007c58:	f04f 0300 	mov.w	r3, #0
 8007c5c:	f04f 020a 	mov.w	r2, #10
 8007c60:	4641      	mov	r1, r8
 8007c62:	4620      	mov	r0, r4
 8007c64:	d107      	bne.n	8007c76 <_dtoa_r+0xb1e>
 8007c66:	f000 f9cb 	bl	8008000 <__multadd>
 8007c6a:	4680      	mov	r8, r0
 8007c6c:	4607      	mov	r7, r0
 8007c6e:	9b04      	ldr	r3, [sp, #16]
 8007c70:	3301      	adds	r3, #1
 8007c72:	9304      	str	r3, [sp, #16]
 8007c74:	e775      	b.n	8007b62 <_dtoa_r+0xa0a>
 8007c76:	f000 f9c3 	bl	8008000 <__multadd>
 8007c7a:	4639      	mov	r1, r7
 8007c7c:	4680      	mov	r8, r0
 8007c7e:	2300      	movs	r3, #0
 8007c80:	220a      	movs	r2, #10
 8007c82:	4620      	mov	r0, r4
 8007c84:	f000 f9bc 	bl	8008000 <__multadd>
 8007c88:	4607      	mov	r7, r0
 8007c8a:	e7f0      	b.n	8007c6e <_dtoa_r+0xb16>
 8007c8c:	9b04      	ldr	r3, [sp, #16]
 8007c8e:	9301      	str	r3, [sp, #4]
 8007c90:	9d00      	ldr	r5, [sp, #0]
 8007c92:	4631      	mov	r1, r6
 8007c94:	4650      	mov	r0, sl
 8007c96:	f7ff f9d5 	bl	8007044 <quorem>
 8007c9a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007c9e:	9b00      	ldr	r3, [sp, #0]
 8007ca0:	f805 9b01 	strb.w	r9, [r5], #1
 8007ca4:	1aea      	subs	r2, r5, r3
 8007ca6:	9b01      	ldr	r3, [sp, #4]
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	dd07      	ble.n	8007cbc <_dtoa_r+0xb64>
 8007cac:	4651      	mov	r1, sl
 8007cae:	2300      	movs	r3, #0
 8007cb0:	220a      	movs	r2, #10
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	f000 f9a4 	bl	8008000 <__multadd>
 8007cb8:	4682      	mov	sl, r0
 8007cba:	e7ea      	b.n	8007c92 <_dtoa_r+0xb3a>
 8007cbc:	9b01      	ldr	r3, [sp, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	bfc8      	it	gt
 8007cc2:	461d      	movgt	r5, r3
 8007cc4:	9b00      	ldr	r3, [sp, #0]
 8007cc6:	bfd8      	it	le
 8007cc8:	2501      	movle	r5, #1
 8007cca:	441d      	add	r5, r3
 8007ccc:	f04f 0800 	mov.w	r8, #0
 8007cd0:	4651      	mov	r1, sl
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	f000 fb8b 	bl	80083f0 <__lshift>
 8007cda:	4631      	mov	r1, r6
 8007cdc:	4682      	mov	sl, r0
 8007cde:	f000 fbf3 	bl	80084c8 <__mcmp>
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	dc96      	bgt.n	8007c14 <_dtoa_r+0xabc>
 8007ce6:	d102      	bne.n	8007cee <_dtoa_r+0xb96>
 8007ce8:	f019 0f01 	tst.w	r9, #1
 8007cec:	d192      	bne.n	8007c14 <_dtoa_r+0xabc>
 8007cee:	462b      	mov	r3, r5
 8007cf0:	461d      	mov	r5, r3
 8007cf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cf6:	2a30      	cmp	r2, #48	; 0x30
 8007cf8:	d0fa      	beq.n	8007cf0 <_dtoa_r+0xb98>
 8007cfa:	e6dd      	b.n	8007ab8 <_dtoa_r+0x960>
 8007cfc:	9a00      	ldr	r2, [sp, #0]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d189      	bne.n	8007c16 <_dtoa_r+0xabe>
 8007d02:	f10b 0b01 	add.w	fp, fp, #1
 8007d06:	2331      	movs	r3, #49	; 0x31
 8007d08:	e796      	b.n	8007c38 <_dtoa_r+0xae0>
 8007d0a:	4b0a      	ldr	r3, [pc, #40]	; (8007d34 <_dtoa_r+0xbdc>)
 8007d0c:	f7ff ba99 	b.w	8007242 <_dtoa_r+0xea>
 8007d10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	f47f aa6d 	bne.w	80071f2 <_dtoa_r+0x9a>
 8007d18:	4b07      	ldr	r3, [pc, #28]	; (8007d38 <_dtoa_r+0xbe0>)
 8007d1a:	f7ff ba92 	b.w	8007242 <_dtoa_r+0xea>
 8007d1e:	9b01      	ldr	r3, [sp, #4]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	dcb5      	bgt.n	8007c90 <_dtoa_r+0xb38>
 8007d24:	9b07      	ldr	r3, [sp, #28]
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	f73f aeb1 	bgt.w	8007a8e <_dtoa_r+0x936>
 8007d2c:	e7b0      	b.n	8007c90 <_dtoa_r+0xb38>
 8007d2e:	bf00      	nop
 8007d30:	0800b0dd 	.word	0x0800b0dd
 8007d34:	0800b038 	.word	0x0800b038
 8007d38:	0800b061 	.word	0x0800b061

08007d3c <_free_r>:
 8007d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d3e:	2900      	cmp	r1, #0
 8007d40:	d044      	beq.n	8007dcc <_free_r+0x90>
 8007d42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d46:	9001      	str	r0, [sp, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f1a1 0404 	sub.w	r4, r1, #4
 8007d4e:	bfb8      	it	lt
 8007d50:	18e4      	addlt	r4, r4, r3
 8007d52:	f000 f8e7 	bl	8007f24 <__malloc_lock>
 8007d56:	4a1e      	ldr	r2, [pc, #120]	; (8007dd0 <_free_r+0x94>)
 8007d58:	9801      	ldr	r0, [sp, #4]
 8007d5a:	6813      	ldr	r3, [r2, #0]
 8007d5c:	b933      	cbnz	r3, 8007d6c <_free_r+0x30>
 8007d5e:	6063      	str	r3, [r4, #4]
 8007d60:	6014      	str	r4, [r2, #0]
 8007d62:	b003      	add	sp, #12
 8007d64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d68:	f000 b8e2 	b.w	8007f30 <__malloc_unlock>
 8007d6c:	42a3      	cmp	r3, r4
 8007d6e:	d908      	bls.n	8007d82 <_free_r+0x46>
 8007d70:	6825      	ldr	r5, [r4, #0]
 8007d72:	1961      	adds	r1, r4, r5
 8007d74:	428b      	cmp	r3, r1
 8007d76:	bf01      	itttt	eq
 8007d78:	6819      	ldreq	r1, [r3, #0]
 8007d7a:	685b      	ldreq	r3, [r3, #4]
 8007d7c:	1949      	addeq	r1, r1, r5
 8007d7e:	6021      	streq	r1, [r4, #0]
 8007d80:	e7ed      	b.n	8007d5e <_free_r+0x22>
 8007d82:	461a      	mov	r2, r3
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	b10b      	cbz	r3, 8007d8c <_free_r+0x50>
 8007d88:	42a3      	cmp	r3, r4
 8007d8a:	d9fa      	bls.n	8007d82 <_free_r+0x46>
 8007d8c:	6811      	ldr	r1, [r2, #0]
 8007d8e:	1855      	adds	r5, r2, r1
 8007d90:	42a5      	cmp	r5, r4
 8007d92:	d10b      	bne.n	8007dac <_free_r+0x70>
 8007d94:	6824      	ldr	r4, [r4, #0]
 8007d96:	4421      	add	r1, r4
 8007d98:	1854      	adds	r4, r2, r1
 8007d9a:	42a3      	cmp	r3, r4
 8007d9c:	6011      	str	r1, [r2, #0]
 8007d9e:	d1e0      	bne.n	8007d62 <_free_r+0x26>
 8007da0:	681c      	ldr	r4, [r3, #0]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	6053      	str	r3, [r2, #4]
 8007da6:	440c      	add	r4, r1
 8007da8:	6014      	str	r4, [r2, #0]
 8007daa:	e7da      	b.n	8007d62 <_free_r+0x26>
 8007dac:	d902      	bls.n	8007db4 <_free_r+0x78>
 8007dae:	230c      	movs	r3, #12
 8007db0:	6003      	str	r3, [r0, #0]
 8007db2:	e7d6      	b.n	8007d62 <_free_r+0x26>
 8007db4:	6825      	ldr	r5, [r4, #0]
 8007db6:	1961      	adds	r1, r4, r5
 8007db8:	428b      	cmp	r3, r1
 8007dba:	bf04      	itt	eq
 8007dbc:	6819      	ldreq	r1, [r3, #0]
 8007dbe:	685b      	ldreq	r3, [r3, #4]
 8007dc0:	6063      	str	r3, [r4, #4]
 8007dc2:	bf04      	itt	eq
 8007dc4:	1949      	addeq	r1, r1, r5
 8007dc6:	6021      	streq	r1, [r4, #0]
 8007dc8:	6054      	str	r4, [r2, #4]
 8007dca:	e7ca      	b.n	8007d62 <_free_r+0x26>
 8007dcc:	b003      	add	sp, #12
 8007dce:	bd30      	pop	{r4, r5, pc}
 8007dd0:	20000924 	.word	0x20000924

08007dd4 <malloc>:
 8007dd4:	4b02      	ldr	r3, [pc, #8]	; (8007de0 <malloc+0xc>)
 8007dd6:	4601      	mov	r1, r0
 8007dd8:	6818      	ldr	r0, [r3, #0]
 8007dda:	f000 b823 	b.w	8007e24 <_malloc_r>
 8007dde:	bf00      	nop
 8007de0:	2000008c 	.word	0x2000008c

08007de4 <sbrk_aligned>:
 8007de4:	b570      	push	{r4, r5, r6, lr}
 8007de6:	4e0e      	ldr	r6, [pc, #56]	; (8007e20 <sbrk_aligned+0x3c>)
 8007de8:	460c      	mov	r4, r1
 8007dea:	6831      	ldr	r1, [r6, #0]
 8007dec:	4605      	mov	r5, r0
 8007dee:	b911      	cbnz	r1, 8007df6 <sbrk_aligned+0x12>
 8007df0:	f001 fff4 	bl	8009ddc <_sbrk_r>
 8007df4:	6030      	str	r0, [r6, #0]
 8007df6:	4621      	mov	r1, r4
 8007df8:	4628      	mov	r0, r5
 8007dfa:	f001 ffef 	bl	8009ddc <_sbrk_r>
 8007dfe:	1c43      	adds	r3, r0, #1
 8007e00:	d00a      	beq.n	8007e18 <sbrk_aligned+0x34>
 8007e02:	1cc4      	adds	r4, r0, #3
 8007e04:	f024 0403 	bic.w	r4, r4, #3
 8007e08:	42a0      	cmp	r0, r4
 8007e0a:	d007      	beq.n	8007e1c <sbrk_aligned+0x38>
 8007e0c:	1a21      	subs	r1, r4, r0
 8007e0e:	4628      	mov	r0, r5
 8007e10:	f001 ffe4 	bl	8009ddc <_sbrk_r>
 8007e14:	3001      	adds	r0, #1
 8007e16:	d101      	bne.n	8007e1c <sbrk_aligned+0x38>
 8007e18:	f04f 34ff 	mov.w	r4, #4294967295
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	bd70      	pop	{r4, r5, r6, pc}
 8007e20:	20000928 	.word	0x20000928

08007e24 <_malloc_r>:
 8007e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e28:	1ccd      	adds	r5, r1, #3
 8007e2a:	f025 0503 	bic.w	r5, r5, #3
 8007e2e:	3508      	adds	r5, #8
 8007e30:	2d0c      	cmp	r5, #12
 8007e32:	bf38      	it	cc
 8007e34:	250c      	movcc	r5, #12
 8007e36:	2d00      	cmp	r5, #0
 8007e38:	4607      	mov	r7, r0
 8007e3a:	db01      	blt.n	8007e40 <_malloc_r+0x1c>
 8007e3c:	42a9      	cmp	r1, r5
 8007e3e:	d905      	bls.n	8007e4c <_malloc_r+0x28>
 8007e40:	230c      	movs	r3, #12
 8007e42:	603b      	str	r3, [r7, #0]
 8007e44:	2600      	movs	r6, #0
 8007e46:	4630      	mov	r0, r6
 8007e48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007f20 <_malloc_r+0xfc>
 8007e50:	f000 f868 	bl	8007f24 <__malloc_lock>
 8007e54:	f8d8 3000 	ldr.w	r3, [r8]
 8007e58:	461c      	mov	r4, r3
 8007e5a:	bb5c      	cbnz	r4, 8007eb4 <_malloc_r+0x90>
 8007e5c:	4629      	mov	r1, r5
 8007e5e:	4638      	mov	r0, r7
 8007e60:	f7ff ffc0 	bl	8007de4 <sbrk_aligned>
 8007e64:	1c43      	adds	r3, r0, #1
 8007e66:	4604      	mov	r4, r0
 8007e68:	d155      	bne.n	8007f16 <_malloc_r+0xf2>
 8007e6a:	f8d8 4000 	ldr.w	r4, [r8]
 8007e6e:	4626      	mov	r6, r4
 8007e70:	2e00      	cmp	r6, #0
 8007e72:	d145      	bne.n	8007f00 <_malloc_r+0xdc>
 8007e74:	2c00      	cmp	r4, #0
 8007e76:	d048      	beq.n	8007f0a <_malloc_r+0xe6>
 8007e78:	6823      	ldr	r3, [r4, #0]
 8007e7a:	4631      	mov	r1, r6
 8007e7c:	4638      	mov	r0, r7
 8007e7e:	eb04 0903 	add.w	r9, r4, r3
 8007e82:	f001 ffab 	bl	8009ddc <_sbrk_r>
 8007e86:	4581      	cmp	r9, r0
 8007e88:	d13f      	bne.n	8007f0a <_malloc_r+0xe6>
 8007e8a:	6821      	ldr	r1, [r4, #0]
 8007e8c:	1a6d      	subs	r5, r5, r1
 8007e8e:	4629      	mov	r1, r5
 8007e90:	4638      	mov	r0, r7
 8007e92:	f7ff ffa7 	bl	8007de4 <sbrk_aligned>
 8007e96:	3001      	adds	r0, #1
 8007e98:	d037      	beq.n	8007f0a <_malloc_r+0xe6>
 8007e9a:	6823      	ldr	r3, [r4, #0]
 8007e9c:	442b      	add	r3, r5
 8007e9e:	6023      	str	r3, [r4, #0]
 8007ea0:	f8d8 3000 	ldr.w	r3, [r8]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d038      	beq.n	8007f1a <_malloc_r+0xf6>
 8007ea8:	685a      	ldr	r2, [r3, #4]
 8007eaa:	42a2      	cmp	r2, r4
 8007eac:	d12b      	bne.n	8007f06 <_malloc_r+0xe2>
 8007eae:	2200      	movs	r2, #0
 8007eb0:	605a      	str	r2, [r3, #4]
 8007eb2:	e00f      	b.n	8007ed4 <_malloc_r+0xb0>
 8007eb4:	6822      	ldr	r2, [r4, #0]
 8007eb6:	1b52      	subs	r2, r2, r5
 8007eb8:	d41f      	bmi.n	8007efa <_malloc_r+0xd6>
 8007eba:	2a0b      	cmp	r2, #11
 8007ebc:	d917      	bls.n	8007eee <_malloc_r+0xca>
 8007ebe:	1961      	adds	r1, r4, r5
 8007ec0:	42a3      	cmp	r3, r4
 8007ec2:	6025      	str	r5, [r4, #0]
 8007ec4:	bf18      	it	ne
 8007ec6:	6059      	strne	r1, [r3, #4]
 8007ec8:	6863      	ldr	r3, [r4, #4]
 8007eca:	bf08      	it	eq
 8007ecc:	f8c8 1000 	streq.w	r1, [r8]
 8007ed0:	5162      	str	r2, [r4, r5]
 8007ed2:	604b      	str	r3, [r1, #4]
 8007ed4:	4638      	mov	r0, r7
 8007ed6:	f104 060b 	add.w	r6, r4, #11
 8007eda:	f000 f829 	bl	8007f30 <__malloc_unlock>
 8007ede:	f026 0607 	bic.w	r6, r6, #7
 8007ee2:	1d23      	adds	r3, r4, #4
 8007ee4:	1af2      	subs	r2, r6, r3
 8007ee6:	d0ae      	beq.n	8007e46 <_malloc_r+0x22>
 8007ee8:	1b9b      	subs	r3, r3, r6
 8007eea:	50a3      	str	r3, [r4, r2]
 8007eec:	e7ab      	b.n	8007e46 <_malloc_r+0x22>
 8007eee:	42a3      	cmp	r3, r4
 8007ef0:	6862      	ldr	r2, [r4, #4]
 8007ef2:	d1dd      	bne.n	8007eb0 <_malloc_r+0x8c>
 8007ef4:	f8c8 2000 	str.w	r2, [r8]
 8007ef8:	e7ec      	b.n	8007ed4 <_malloc_r+0xb0>
 8007efa:	4623      	mov	r3, r4
 8007efc:	6864      	ldr	r4, [r4, #4]
 8007efe:	e7ac      	b.n	8007e5a <_malloc_r+0x36>
 8007f00:	4634      	mov	r4, r6
 8007f02:	6876      	ldr	r6, [r6, #4]
 8007f04:	e7b4      	b.n	8007e70 <_malloc_r+0x4c>
 8007f06:	4613      	mov	r3, r2
 8007f08:	e7cc      	b.n	8007ea4 <_malloc_r+0x80>
 8007f0a:	230c      	movs	r3, #12
 8007f0c:	603b      	str	r3, [r7, #0]
 8007f0e:	4638      	mov	r0, r7
 8007f10:	f000 f80e 	bl	8007f30 <__malloc_unlock>
 8007f14:	e797      	b.n	8007e46 <_malloc_r+0x22>
 8007f16:	6025      	str	r5, [r4, #0]
 8007f18:	e7dc      	b.n	8007ed4 <_malloc_r+0xb0>
 8007f1a:	605b      	str	r3, [r3, #4]
 8007f1c:	deff      	udf	#255	; 0xff
 8007f1e:	bf00      	nop
 8007f20:	20000924 	.word	0x20000924

08007f24 <__malloc_lock>:
 8007f24:	4801      	ldr	r0, [pc, #4]	; (8007f2c <__malloc_lock+0x8>)
 8007f26:	f7ff b885 	b.w	8007034 <__retarget_lock_acquire_recursive>
 8007f2a:	bf00      	nop
 8007f2c:	20000920 	.word	0x20000920

08007f30 <__malloc_unlock>:
 8007f30:	4801      	ldr	r0, [pc, #4]	; (8007f38 <__malloc_unlock+0x8>)
 8007f32:	f7ff b880 	b.w	8007036 <__retarget_lock_release_recursive>
 8007f36:	bf00      	nop
 8007f38:	20000920 	.word	0x20000920

08007f3c <_Balloc>:
 8007f3c:	b570      	push	{r4, r5, r6, lr}
 8007f3e:	69c6      	ldr	r6, [r0, #28]
 8007f40:	4604      	mov	r4, r0
 8007f42:	460d      	mov	r5, r1
 8007f44:	b976      	cbnz	r6, 8007f64 <_Balloc+0x28>
 8007f46:	2010      	movs	r0, #16
 8007f48:	f7ff ff44 	bl	8007dd4 <malloc>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	61e0      	str	r0, [r4, #28]
 8007f50:	b920      	cbnz	r0, 8007f5c <_Balloc+0x20>
 8007f52:	4b18      	ldr	r3, [pc, #96]	; (8007fb4 <_Balloc+0x78>)
 8007f54:	4818      	ldr	r0, [pc, #96]	; (8007fb8 <_Balloc+0x7c>)
 8007f56:	216b      	movs	r1, #107	; 0x6b
 8007f58:	f001 ff66 	bl	8009e28 <__assert_func>
 8007f5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f60:	6006      	str	r6, [r0, #0]
 8007f62:	60c6      	str	r6, [r0, #12]
 8007f64:	69e6      	ldr	r6, [r4, #28]
 8007f66:	68f3      	ldr	r3, [r6, #12]
 8007f68:	b183      	cbz	r3, 8007f8c <_Balloc+0x50>
 8007f6a:	69e3      	ldr	r3, [r4, #28]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f72:	b9b8      	cbnz	r0, 8007fa4 <_Balloc+0x68>
 8007f74:	2101      	movs	r1, #1
 8007f76:	fa01 f605 	lsl.w	r6, r1, r5
 8007f7a:	1d72      	adds	r2, r6, #5
 8007f7c:	0092      	lsls	r2, r2, #2
 8007f7e:	4620      	mov	r0, r4
 8007f80:	f001 ff70 	bl	8009e64 <_calloc_r>
 8007f84:	b160      	cbz	r0, 8007fa0 <_Balloc+0x64>
 8007f86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f8a:	e00e      	b.n	8007faa <_Balloc+0x6e>
 8007f8c:	2221      	movs	r2, #33	; 0x21
 8007f8e:	2104      	movs	r1, #4
 8007f90:	4620      	mov	r0, r4
 8007f92:	f001 ff67 	bl	8009e64 <_calloc_r>
 8007f96:	69e3      	ldr	r3, [r4, #28]
 8007f98:	60f0      	str	r0, [r6, #12]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1e4      	bne.n	8007f6a <_Balloc+0x2e>
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	bd70      	pop	{r4, r5, r6, pc}
 8007fa4:	6802      	ldr	r2, [r0, #0]
 8007fa6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007faa:	2300      	movs	r3, #0
 8007fac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007fb0:	e7f7      	b.n	8007fa2 <_Balloc+0x66>
 8007fb2:	bf00      	nop
 8007fb4:	0800b06e 	.word	0x0800b06e
 8007fb8:	0800b0ee 	.word	0x0800b0ee

08007fbc <_Bfree>:
 8007fbc:	b570      	push	{r4, r5, r6, lr}
 8007fbe:	69c6      	ldr	r6, [r0, #28]
 8007fc0:	4605      	mov	r5, r0
 8007fc2:	460c      	mov	r4, r1
 8007fc4:	b976      	cbnz	r6, 8007fe4 <_Bfree+0x28>
 8007fc6:	2010      	movs	r0, #16
 8007fc8:	f7ff ff04 	bl	8007dd4 <malloc>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	61e8      	str	r0, [r5, #28]
 8007fd0:	b920      	cbnz	r0, 8007fdc <_Bfree+0x20>
 8007fd2:	4b09      	ldr	r3, [pc, #36]	; (8007ff8 <_Bfree+0x3c>)
 8007fd4:	4809      	ldr	r0, [pc, #36]	; (8007ffc <_Bfree+0x40>)
 8007fd6:	218f      	movs	r1, #143	; 0x8f
 8007fd8:	f001 ff26 	bl	8009e28 <__assert_func>
 8007fdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fe0:	6006      	str	r6, [r0, #0]
 8007fe2:	60c6      	str	r6, [r0, #12]
 8007fe4:	b13c      	cbz	r4, 8007ff6 <_Bfree+0x3a>
 8007fe6:	69eb      	ldr	r3, [r5, #28]
 8007fe8:	6862      	ldr	r2, [r4, #4]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ff0:	6021      	str	r1, [r4, #0]
 8007ff2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ff6:	bd70      	pop	{r4, r5, r6, pc}
 8007ff8:	0800b06e 	.word	0x0800b06e
 8007ffc:	0800b0ee 	.word	0x0800b0ee

08008000 <__multadd>:
 8008000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008004:	690d      	ldr	r5, [r1, #16]
 8008006:	4607      	mov	r7, r0
 8008008:	460c      	mov	r4, r1
 800800a:	461e      	mov	r6, r3
 800800c:	f101 0c14 	add.w	ip, r1, #20
 8008010:	2000      	movs	r0, #0
 8008012:	f8dc 3000 	ldr.w	r3, [ip]
 8008016:	b299      	uxth	r1, r3
 8008018:	fb02 6101 	mla	r1, r2, r1, r6
 800801c:	0c1e      	lsrs	r6, r3, #16
 800801e:	0c0b      	lsrs	r3, r1, #16
 8008020:	fb02 3306 	mla	r3, r2, r6, r3
 8008024:	b289      	uxth	r1, r1
 8008026:	3001      	adds	r0, #1
 8008028:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800802c:	4285      	cmp	r5, r0
 800802e:	f84c 1b04 	str.w	r1, [ip], #4
 8008032:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008036:	dcec      	bgt.n	8008012 <__multadd+0x12>
 8008038:	b30e      	cbz	r6, 800807e <__multadd+0x7e>
 800803a:	68a3      	ldr	r3, [r4, #8]
 800803c:	42ab      	cmp	r3, r5
 800803e:	dc19      	bgt.n	8008074 <__multadd+0x74>
 8008040:	6861      	ldr	r1, [r4, #4]
 8008042:	4638      	mov	r0, r7
 8008044:	3101      	adds	r1, #1
 8008046:	f7ff ff79 	bl	8007f3c <_Balloc>
 800804a:	4680      	mov	r8, r0
 800804c:	b928      	cbnz	r0, 800805a <__multadd+0x5a>
 800804e:	4602      	mov	r2, r0
 8008050:	4b0c      	ldr	r3, [pc, #48]	; (8008084 <__multadd+0x84>)
 8008052:	480d      	ldr	r0, [pc, #52]	; (8008088 <__multadd+0x88>)
 8008054:	21ba      	movs	r1, #186	; 0xba
 8008056:	f001 fee7 	bl	8009e28 <__assert_func>
 800805a:	6922      	ldr	r2, [r4, #16]
 800805c:	3202      	adds	r2, #2
 800805e:	f104 010c 	add.w	r1, r4, #12
 8008062:	0092      	lsls	r2, r2, #2
 8008064:	300c      	adds	r0, #12
 8008066:	f001 fec9 	bl	8009dfc <memcpy>
 800806a:	4621      	mov	r1, r4
 800806c:	4638      	mov	r0, r7
 800806e:	f7ff ffa5 	bl	8007fbc <_Bfree>
 8008072:	4644      	mov	r4, r8
 8008074:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008078:	3501      	adds	r5, #1
 800807a:	615e      	str	r6, [r3, #20]
 800807c:	6125      	str	r5, [r4, #16]
 800807e:	4620      	mov	r0, r4
 8008080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008084:	0800b0dd 	.word	0x0800b0dd
 8008088:	0800b0ee 	.word	0x0800b0ee

0800808c <__s2b>:
 800808c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008090:	460c      	mov	r4, r1
 8008092:	4615      	mov	r5, r2
 8008094:	461f      	mov	r7, r3
 8008096:	2209      	movs	r2, #9
 8008098:	3308      	adds	r3, #8
 800809a:	4606      	mov	r6, r0
 800809c:	fb93 f3f2 	sdiv	r3, r3, r2
 80080a0:	2100      	movs	r1, #0
 80080a2:	2201      	movs	r2, #1
 80080a4:	429a      	cmp	r2, r3
 80080a6:	db09      	blt.n	80080bc <__s2b+0x30>
 80080a8:	4630      	mov	r0, r6
 80080aa:	f7ff ff47 	bl	8007f3c <_Balloc>
 80080ae:	b940      	cbnz	r0, 80080c2 <__s2b+0x36>
 80080b0:	4602      	mov	r2, r0
 80080b2:	4b19      	ldr	r3, [pc, #100]	; (8008118 <__s2b+0x8c>)
 80080b4:	4819      	ldr	r0, [pc, #100]	; (800811c <__s2b+0x90>)
 80080b6:	21d3      	movs	r1, #211	; 0xd3
 80080b8:	f001 feb6 	bl	8009e28 <__assert_func>
 80080bc:	0052      	lsls	r2, r2, #1
 80080be:	3101      	adds	r1, #1
 80080c0:	e7f0      	b.n	80080a4 <__s2b+0x18>
 80080c2:	9b08      	ldr	r3, [sp, #32]
 80080c4:	6143      	str	r3, [r0, #20]
 80080c6:	2d09      	cmp	r5, #9
 80080c8:	f04f 0301 	mov.w	r3, #1
 80080cc:	6103      	str	r3, [r0, #16]
 80080ce:	dd16      	ble.n	80080fe <__s2b+0x72>
 80080d0:	f104 0909 	add.w	r9, r4, #9
 80080d4:	46c8      	mov	r8, r9
 80080d6:	442c      	add	r4, r5
 80080d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80080dc:	4601      	mov	r1, r0
 80080de:	3b30      	subs	r3, #48	; 0x30
 80080e0:	220a      	movs	r2, #10
 80080e2:	4630      	mov	r0, r6
 80080e4:	f7ff ff8c 	bl	8008000 <__multadd>
 80080e8:	45a0      	cmp	r8, r4
 80080ea:	d1f5      	bne.n	80080d8 <__s2b+0x4c>
 80080ec:	f1a5 0408 	sub.w	r4, r5, #8
 80080f0:	444c      	add	r4, r9
 80080f2:	1b2d      	subs	r5, r5, r4
 80080f4:	1963      	adds	r3, r4, r5
 80080f6:	42bb      	cmp	r3, r7
 80080f8:	db04      	blt.n	8008104 <__s2b+0x78>
 80080fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080fe:	340a      	adds	r4, #10
 8008100:	2509      	movs	r5, #9
 8008102:	e7f6      	b.n	80080f2 <__s2b+0x66>
 8008104:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008108:	4601      	mov	r1, r0
 800810a:	3b30      	subs	r3, #48	; 0x30
 800810c:	220a      	movs	r2, #10
 800810e:	4630      	mov	r0, r6
 8008110:	f7ff ff76 	bl	8008000 <__multadd>
 8008114:	e7ee      	b.n	80080f4 <__s2b+0x68>
 8008116:	bf00      	nop
 8008118:	0800b0dd 	.word	0x0800b0dd
 800811c:	0800b0ee 	.word	0x0800b0ee

08008120 <__hi0bits>:
 8008120:	0c03      	lsrs	r3, r0, #16
 8008122:	041b      	lsls	r3, r3, #16
 8008124:	b9d3      	cbnz	r3, 800815c <__hi0bits+0x3c>
 8008126:	0400      	lsls	r0, r0, #16
 8008128:	2310      	movs	r3, #16
 800812a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800812e:	bf04      	itt	eq
 8008130:	0200      	lsleq	r0, r0, #8
 8008132:	3308      	addeq	r3, #8
 8008134:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008138:	bf04      	itt	eq
 800813a:	0100      	lsleq	r0, r0, #4
 800813c:	3304      	addeq	r3, #4
 800813e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008142:	bf04      	itt	eq
 8008144:	0080      	lsleq	r0, r0, #2
 8008146:	3302      	addeq	r3, #2
 8008148:	2800      	cmp	r0, #0
 800814a:	db05      	blt.n	8008158 <__hi0bits+0x38>
 800814c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008150:	f103 0301 	add.w	r3, r3, #1
 8008154:	bf08      	it	eq
 8008156:	2320      	moveq	r3, #32
 8008158:	4618      	mov	r0, r3
 800815a:	4770      	bx	lr
 800815c:	2300      	movs	r3, #0
 800815e:	e7e4      	b.n	800812a <__hi0bits+0xa>

08008160 <__lo0bits>:
 8008160:	6803      	ldr	r3, [r0, #0]
 8008162:	f013 0207 	ands.w	r2, r3, #7
 8008166:	d00c      	beq.n	8008182 <__lo0bits+0x22>
 8008168:	07d9      	lsls	r1, r3, #31
 800816a:	d422      	bmi.n	80081b2 <__lo0bits+0x52>
 800816c:	079a      	lsls	r2, r3, #30
 800816e:	bf49      	itett	mi
 8008170:	085b      	lsrmi	r3, r3, #1
 8008172:	089b      	lsrpl	r3, r3, #2
 8008174:	6003      	strmi	r3, [r0, #0]
 8008176:	2201      	movmi	r2, #1
 8008178:	bf5c      	itt	pl
 800817a:	6003      	strpl	r3, [r0, #0]
 800817c:	2202      	movpl	r2, #2
 800817e:	4610      	mov	r0, r2
 8008180:	4770      	bx	lr
 8008182:	b299      	uxth	r1, r3
 8008184:	b909      	cbnz	r1, 800818a <__lo0bits+0x2a>
 8008186:	0c1b      	lsrs	r3, r3, #16
 8008188:	2210      	movs	r2, #16
 800818a:	b2d9      	uxtb	r1, r3
 800818c:	b909      	cbnz	r1, 8008192 <__lo0bits+0x32>
 800818e:	3208      	adds	r2, #8
 8008190:	0a1b      	lsrs	r3, r3, #8
 8008192:	0719      	lsls	r1, r3, #28
 8008194:	bf04      	itt	eq
 8008196:	091b      	lsreq	r3, r3, #4
 8008198:	3204      	addeq	r2, #4
 800819a:	0799      	lsls	r1, r3, #30
 800819c:	bf04      	itt	eq
 800819e:	089b      	lsreq	r3, r3, #2
 80081a0:	3202      	addeq	r2, #2
 80081a2:	07d9      	lsls	r1, r3, #31
 80081a4:	d403      	bmi.n	80081ae <__lo0bits+0x4e>
 80081a6:	085b      	lsrs	r3, r3, #1
 80081a8:	f102 0201 	add.w	r2, r2, #1
 80081ac:	d003      	beq.n	80081b6 <__lo0bits+0x56>
 80081ae:	6003      	str	r3, [r0, #0]
 80081b0:	e7e5      	b.n	800817e <__lo0bits+0x1e>
 80081b2:	2200      	movs	r2, #0
 80081b4:	e7e3      	b.n	800817e <__lo0bits+0x1e>
 80081b6:	2220      	movs	r2, #32
 80081b8:	e7e1      	b.n	800817e <__lo0bits+0x1e>
	...

080081bc <__i2b>:
 80081bc:	b510      	push	{r4, lr}
 80081be:	460c      	mov	r4, r1
 80081c0:	2101      	movs	r1, #1
 80081c2:	f7ff febb 	bl	8007f3c <_Balloc>
 80081c6:	4602      	mov	r2, r0
 80081c8:	b928      	cbnz	r0, 80081d6 <__i2b+0x1a>
 80081ca:	4b05      	ldr	r3, [pc, #20]	; (80081e0 <__i2b+0x24>)
 80081cc:	4805      	ldr	r0, [pc, #20]	; (80081e4 <__i2b+0x28>)
 80081ce:	f240 1145 	movw	r1, #325	; 0x145
 80081d2:	f001 fe29 	bl	8009e28 <__assert_func>
 80081d6:	2301      	movs	r3, #1
 80081d8:	6144      	str	r4, [r0, #20]
 80081da:	6103      	str	r3, [r0, #16]
 80081dc:	bd10      	pop	{r4, pc}
 80081de:	bf00      	nop
 80081e0:	0800b0dd 	.word	0x0800b0dd
 80081e4:	0800b0ee 	.word	0x0800b0ee

080081e8 <__multiply>:
 80081e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ec:	4691      	mov	r9, r2
 80081ee:	690a      	ldr	r2, [r1, #16]
 80081f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	bfb8      	it	lt
 80081f8:	460b      	movlt	r3, r1
 80081fa:	460c      	mov	r4, r1
 80081fc:	bfbc      	itt	lt
 80081fe:	464c      	movlt	r4, r9
 8008200:	4699      	movlt	r9, r3
 8008202:	6927      	ldr	r7, [r4, #16]
 8008204:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008208:	68a3      	ldr	r3, [r4, #8]
 800820a:	6861      	ldr	r1, [r4, #4]
 800820c:	eb07 060a 	add.w	r6, r7, sl
 8008210:	42b3      	cmp	r3, r6
 8008212:	b085      	sub	sp, #20
 8008214:	bfb8      	it	lt
 8008216:	3101      	addlt	r1, #1
 8008218:	f7ff fe90 	bl	8007f3c <_Balloc>
 800821c:	b930      	cbnz	r0, 800822c <__multiply+0x44>
 800821e:	4602      	mov	r2, r0
 8008220:	4b44      	ldr	r3, [pc, #272]	; (8008334 <__multiply+0x14c>)
 8008222:	4845      	ldr	r0, [pc, #276]	; (8008338 <__multiply+0x150>)
 8008224:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008228:	f001 fdfe 	bl	8009e28 <__assert_func>
 800822c:	f100 0514 	add.w	r5, r0, #20
 8008230:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008234:	462b      	mov	r3, r5
 8008236:	2200      	movs	r2, #0
 8008238:	4543      	cmp	r3, r8
 800823a:	d321      	bcc.n	8008280 <__multiply+0x98>
 800823c:	f104 0314 	add.w	r3, r4, #20
 8008240:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008244:	f109 0314 	add.w	r3, r9, #20
 8008248:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800824c:	9202      	str	r2, [sp, #8]
 800824e:	1b3a      	subs	r2, r7, r4
 8008250:	3a15      	subs	r2, #21
 8008252:	f022 0203 	bic.w	r2, r2, #3
 8008256:	3204      	adds	r2, #4
 8008258:	f104 0115 	add.w	r1, r4, #21
 800825c:	428f      	cmp	r7, r1
 800825e:	bf38      	it	cc
 8008260:	2204      	movcc	r2, #4
 8008262:	9201      	str	r2, [sp, #4]
 8008264:	9a02      	ldr	r2, [sp, #8]
 8008266:	9303      	str	r3, [sp, #12]
 8008268:	429a      	cmp	r2, r3
 800826a:	d80c      	bhi.n	8008286 <__multiply+0x9e>
 800826c:	2e00      	cmp	r6, #0
 800826e:	dd03      	ble.n	8008278 <__multiply+0x90>
 8008270:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008274:	2b00      	cmp	r3, #0
 8008276:	d05b      	beq.n	8008330 <__multiply+0x148>
 8008278:	6106      	str	r6, [r0, #16]
 800827a:	b005      	add	sp, #20
 800827c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008280:	f843 2b04 	str.w	r2, [r3], #4
 8008284:	e7d8      	b.n	8008238 <__multiply+0x50>
 8008286:	f8b3 a000 	ldrh.w	sl, [r3]
 800828a:	f1ba 0f00 	cmp.w	sl, #0
 800828e:	d024      	beq.n	80082da <__multiply+0xf2>
 8008290:	f104 0e14 	add.w	lr, r4, #20
 8008294:	46a9      	mov	r9, r5
 8008296:	f04f 0c00 	mov.w	ip, #0
 800829a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800829e:	f8d9 1000 	ldr.w	r1, [r9]
 80082a2:	fa1f fb82 	uxth.w	fp, r2
 80082a6:	b289      	uxth	r1, r1
 80082a8:	fb0a 110b 	mla	r1, sl, fp, r1
 80082ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80082b0:	f8d9 2000 	ldr.w	r2, [r9]
 80082b4:	4461      	add	r1, ip
 80082b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80082ba:	fb0a c20b 	mla	r2, sl, fp, ip
 80082be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80082c2:	b289      	uxth	r1, r1
 80082c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80082c8:	4577      	cmp	r7, lr
 80082ca:	f849 1b04 	str.w	r1, [r9], #4
 80082ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80082d2:	d8e2      	bhi.n	800829a <__multiply+0xb2>
 80082d4:	9a01      	ldr	r2, [sp, #4]
 80082d6:	f845 c002 	str.w	ip, [r5, r2]
 80082da:	9a03      	ldr	r2, [sp, #12]
 80082dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80082e0:	3304      	adds	r3, #4
 80082e2:	f1b9 0f00 	cmp.w	r9, #0
 80082e6:	d021      	beq.n	800832c <__multiply+0x144>
 80082e8:	6829      	ldr	r1, [r5, #0]
 80082ea:	f104 0c14 	add.w	ip, r4, #20
 80082ee:	46ae      	mov	lr, r5
 80082f0:	f04f 0a00 	mov.w	sl, #0
 80082f4:	f8bc b000 	ldrh.w	fp, [ip]
 80082f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80082fc:	fb09 220b 	mla	r2, r9, fp, r2
 8008300:	4452      	add	r2, sl
 8008302:	b289      	uxth	r1, r1
 8008304:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008308:	f84e 1b04 	str.w	r1, [lr], #4
 800830c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008310:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008314:	f8be 1000 	ldrh.w	r1, [lr]
 8008318:	fb09 110a 	mla	r1, r9, sl, r1
 800831c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008320:	4567      	cmp	r7, ip
 8008322:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008326:	d8e5      	bhi.n	80082f4 <__multiply+0x10c>
 8008328:	9a01      	ldr	r2, [sp, #4]
 800832a:	50a9      	str	r1, [r5, r2]
 800832c:	3504      	adds	r5, #4
 800832e:	e799      	b.n	8008264 <__multiply+0x7c>
 8008330:	3e01      	subs	r6, #1
 8008332:	e79b      	b.n	800826c <__multiply+0x84>
 8008334:	0800b0dd 	.word	0x0800b0dd
 8008338:	0800b0ee 	.word	0x0800b0ee

0800833c <__pow5mult>:
 800833c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008340:	4615      	mov	r5, r2
 8008342:	f012 0203 	ands.w	r2, r2, #3
 8008346:	4606      	mov	r6, r0
 8008348:	460f      	mov	r7, r1
 800834a:	d007      	beq.n	800835c <__pow5mult+0x20>
 800834c:	4c25      	ldr	r4, [pc, #148]	; (80083e4 <__pow5mult+0xa8>)
 800834e:	3a01      	subs	r2, #1
 8008350:	2300      	movs	r3, #0
 8008352:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008356:	f7ff fe53 	bl	8008000 <__multadd>
 800835a:	4607      	mov	r7, r0
 800835c:	10ad      	asrs	r5, r5, #2
 800835e:	d03d      	beq.n	80083dc <__pow5mult+0xa0>
 8008360:	69f4      	ldr	r4, [r6, #28]
 8008362:	b97c      	cbnz	r4, 8008384 <__pow5mult+0x48>
 8008364:	2010      	movs	r0, #16
 8008366:	f7ff fd35 	bl	8007dd4 <malloc>
 800836a:	4602      	mov	r2, r0
 800836c:	61f0      	str	r0, [r6, #28]
 800836e:	b928      	cbnz	r0, 800837c <__pow5mult+0x40>
 8008370:	4b1d      	ldr	r3, [pc, #116]	; (80083e8 <__pow5mult+0xac>)
 8008372:	481e      	ldr	r0, [pc, #120]	; (80083ec <__pow5mult+0xb0>)
 8008374:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008378:	f001 fd56 	bl	8009e28 <__assert_func>
 800837c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008380:	6004      	str	r4, [r0, #0]
 8008382:	60c4      	str	r4, [r0, #12]
 8008384:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008388:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800838c:	b94c      	cbnz	r4, 80083a2 <__pow5mult+0x66>
 800838e:	f240 2171 	movw	r1, #625	; 0x271
 8008392:	4630      	mov	r0, r6
 8008394:	f7ff ff12 	bl	80081bc <__i2b>
 8008398:	2300      	movs	r3, #0
 800839a:	f8c8 0008 	str.w	r0, [r8, #8]
 800839e:	4604      	mov	r4, r0
 80083a0:	6003      	str	r3, [r0, #0]
 80083a2:	f04f 0900 	mov.w	r9, #0
 80083a6:	07eb      	lsls	r3, r5, #31
 80083a8:	d50a      	bpl.n	80083c0 <__pow5mult+0x84>
 80083aa:	4639      	mov	r1, r7
 80083ac:	4622      	mov	r2, r4
 80083ae:	4630      	mov	r0, r6
 80083b0:	f7ff ff1a 	bl	80081e8 <__multiply>
 80083b4:	4639      	mov	r1, r7
 80083b6:	4680      	mov	r8, r0
 80083b8:	4630      	mov	r0, r6
 80083ba:	f7ff fdff 	bl	8007fbc <_Bfree>
 80083be:	4647      	mov	r7, r8
 80083c0:	106d      	asrs	r5, r5, #1
 80083c2:	d00b      	beq.n	80083dc <__pow5mult+0xa0>
 80083c4:	6820      	ldr	r0, [r4, #0]
 80083c6:	b938      	cbnz	r0, 80083d8 <__pow5mult+0x9c>
 80083c8:	4622      	mov	r2, r4
 80083ca:	4621      	mov	r1, r4
 80083cc:	4630      	mov	r0, r6
 80083ce:	f7ff ff0b 	bl	80081e8 <__multiply>
 80083d2:	6020      	str	r0, [r4, #0]
 80083d4:	f8c0 9000 	str.w	r9, [r0]
 80083d8:	4604      	mov	r4, r0
 80083da:	e7e4      	b.n	80083a6 <__pow5mult+0x6a>
 80083dc:	4638      	mov	r0, r7
 80083de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083e2:	bf00      	nop
 80083e4:	0800b238 	.word	0x0800b238
 80083e8:	0800b06e 	.word	0x0800b06e
 80083ec:	0800b0ee 	.word	0x0800b0ee

080083f0 <__lshift>:
 80083f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f4:	460c      	mov	r4, r1
 80083f6:	6849      	ldr	r1, [r1, #4]
 80083f8:	6923      	ldr	r3, [r4, #16]
 80083fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083fe:	68a3      	ldr	r3, [r4, #8]
 8008400:	4607      	mov	r7, r0
 8008402:	4691      	mov	r9, r2
 8008404:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008408:	f108 0601 	add.w	r6, r8, #1
 800840c:	42b3      	cmp	r3, r6
 800840e:	db0b      	blt.n	8008428 <__lshift+0x38>
 8008410:	4638      	mov	r0, r7
 8008412:	f7ff fd93 	bl	8007f3c <_Balloc>
 8008416:	4605      	mov	r5, r0
 8008418:	b948      	cbnz	r0, 800842e <__lshift+0x3e>
 800841a:	4602      	mov	r2, r0
 800841c:	4b28      	ldr	r3, [pc, #160]	; (80084c0 <__lshift+0xd0>)
 800841e:	4829      	ldr	r0, [pc, #164]	; (80084c4 <__lshift+0xd4>)
 8008420:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008424:	f001 fd00 	bl	8009e28 <__assert_func>
 8008428:	3101      	adds	r1, #1
 800842a:	005b      	lsls	r3, r3, #1
 800842c:	e7ee      	b.n	800840c <__lshift+0x1c>
 800842e:	2300      	movs	r3, #0
 8008430:	f100 0114 	add.w	r1, r0, #20
 8008434:	f100 0210 	add.w	r2, r0, #16
 8008438:	4618      	mov	r0, r3
 800843a:	4553      	cmp	r3, sl
 800843c:	db33      	blt.n	80084a6 <__lshift+0xb6>
 800843e:	6920      	ldr	r0, [r4, #16]
 8008440:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008444:	f104 0314 	add.w	r3, r4, #20
 8008448:	f019 091f 	ands.w	r9, r9, #31
 800844c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008450:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008454:	d02b      	beq.n	80084ae <__lshift+0xbe>
 8008456:	f1c9 0e20 	rsb	lr, r9, #32
 800845a:	468a      	mov	sl, r1
 800845c:	2200      	movs	r2, #0
 800845e:	6818      	ldr	r0, [r3, #0]
 8008460:	fa00 f009 	lsl.w	r0, r0, r9
 8008464:	4310      	orrs	r0, r2
 8008466:	f84a 0b04 	str.w	r0, [sl], #4
 800846a:	f853 2b04 	ldr.w	r2, [r3], #4
 800846e:	459c      	cmp	ip, r3
 8008470:	fa22 f20e 	lsr.w	r2, r2, lr
 8008474:	d8f3      	bhi.n	800845e <__lshift+0x6e>
 8008476:	ebac 0304 	sub.w	r3, ip, r4
 800847a:	3b15      	subs	r3, #21
 800847c:	f023 0303 	bic.w	r3, r3, #3
 8008480:	3304      	adds	r3, #4
 8008482:	f104 0015 	add.w	r0, r4, #21
 8008486:	4584      	cmp	ip, r0
 8008488:	bf38      	it	cc
 800848a:	2304      	movcc	r3, #4
 800848c:	50ca      	str	r2, [r1, r3]
 800848e:	b10a      	cbz	r2, 8008494 <__lshift+0xa4>
 8008490:	f108 0602 	add.w	r6, r8, #2
 8008494:	3e01      	subs	r6, #1
 8008496:	4638      	mov	r0, r7
 8008498:	612e      	str	r6, [r5, #16]
 800849a:	4621      	mov	r1, r4
 800849c:	f7ff fd8e 	bl	8007fbc <_Bfree>
 80084a0:	4628      	mov	r0, r5
 80084a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80084aa:	3301      	adds	r3, #1
 80084ac:	e7c5      	b.n	800843a <__lshift+0x4a>
 80084ae:	3904      	subs	r1, #4
 80084b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80084b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80084b8:	459c      	cmp	ip, r3
 80084ba:	d8f9      	bhi.n	80084b0 <__lshift+0xc0>
 80084bc:	e7ea      	b.n	8008494 <__lshift+0xa4>
 80084be:	bf00      	nop
 80084c0:	0800b0dd 	.word	0x0800b0dd
 80084c4:	0800b0ee 	.word	0x0800b0ee

080084c8 <__mcmp>:
 80084c8:	b530      	push	{r4, r5, lr}
 80084ca:	6902      	ldr	r2, [r0, #16]
 80084cc:	690c      	ldr	r4, [r1, #16]
 80084ce:	1b12      	subs	r2, r2, r4
 80084d0:	d10e      	bne.n	80084f0 <__mcmp+0x28>
 80084d2:	f100 0314 	add.w	r3, r0, #20
 80084d6:	3114      	adds	r1, #20
 80084d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80084dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80084e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80084e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80084e8:	42a5      	cmp	r5, r4
 80084ea:	d003      	beq.n	80084f4 <__mcmp+0x2c>
 80084ec:	d305      	bcc.n	80084fa <__mcmp+0x32>
 80084ee:	2201      	movs	r2, #1
 80084f0:	4610      	mov	r0, r2
 80084f2:	bd30      	pop	{r4, r5, pc}
 80084f4:	4283      	cmp	r3, r0
 80084f6:	d3f3      	bcc.n	80084e0 <__mcmp+0x18>
 80084f8:	e7fa      	b.n	80084f0 <__mcmp+0x28>
 80084fa:	f04f 32ff 	mov.w	r2, #4294967295
 80084fe:	e7f7      	b.n	80084f0 <__mcmp+0x28>

08008500 <__mdiff>:
 8008500:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008504:	460c      	mov	r4, r1
 8008506:	4606      	mov	r6, r0
 8008508:	4611      	mov	r1, r2
 800850a:	4620      	mov	r0, r4
 800850c:	4690      	mov	r8, r2
 800850e:	f7ff ffdb 	bl	80084c8 <__mcmp>
 8008512:	1e05      	subs	r5, r0, #0
 8008514:	d110      	bne.n	8008538 <__mdiff+0x38>
 8008516:	4629      	mov	r1, r5
 8008518:	4630      	mov	r0, r6
 800851a:	f7ff fd0f 	bl	8007f3c <_Balloc>
 800851e:	b930      	cbnz	r0, 800852e <__mdiff+0x2e>
 8008520:	4b3a      	ldr	r3, [pc, #232]	; (800860c <__mdiff+0x10c>)
 8008522:	4602      	mov	r2, r0
 8008524:	f240 2137 	movw	r1, #567	; 0x237
 8008528:	4839      	ldr	r0, [pc, #228]	; (8008610 <__mdiff+0x110>)
 800852a:	f001 fc7d 	bl	8009e28 <__assert_func>
 800852e:	2301      	movs	r3, #1
 8008530:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008534:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008538:	bfa4      	itt	ge
 800853a:	4643      	movge	r3, r8
 800853c:	46a0      	movge	r8, r4
 800853e:	4630      	mov	r0, r6
 8008540:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008544:	bfa6      	itte	ge
 8008546:	461c      	movge	r4, r3
 8008548:	2500      	movge	r5, #0
 800854a:	2501      	movlt	r5, #1
 800854c:	f7ff fcf6 	bl	8007f3c <_Balloc>
 8008550:	b920      	cbnz	r0, 800855c <__mdiff+0x5c>
 8008552:	4b2e      	ldr	r3, [pc, #184]	; (800860c <__mdiff+0x10c>)
 8008554:	4602      	mov	r2, r0
 8008556:	f240 2145 	movw	r1, #581	; 0x245
 800855a:	e7e5      	b.n	8008528 <__mdiff+0x28>
 800855c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008560:	6926      	ldr	r6, [r4, #16]
 8008562:	60c5      	str	r5, [r0, #12]
 8008564:	f104 0914 	add.w	r9, r4, #20
 8008568:	f108 0514 	add.w	r5, r8, #20
 800856c:	f100 0e14 	add.w	lr, r0, #20
 8008570:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008574:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008578:	f108 0210 	add.w	r2, r8, #16
 800857c:	46f2      	mov	sl, lr
 800857e:	2100      	movs	r1, #0
 8008580:	f859 3b04 	ldr.w	r3, [r9], #4
 8008584:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008588:	fa11 f88b 	uxtah	r8, r1, fp
 800858c:	b299      	uxth	r1, r3
 800858e:	0c1b      	lsrs	r3, r3, #16
 8008590:	eba8 0801 	sub.w	r8, r8, r1
 8008594:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008598:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800859c:	fa1f f888 	uxth.w	r8, r8
 80085a0:	1419      	asrs	r1, r3, #16
 80085a2:	454e      	cmp	r6, r9
 80085a4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80085a8:	f84a 3b04 	str.w	r3, [sl], #4
 80085ac:	d8e8      	bhi.n	8008580 <__mdiff+0x80>
 80085ae:	1b33      	subs	r3, r6, r4
 80085b0:	3b15      	subs	r3, #21
 80085b2:	f023 0303 	bic.w	r3, r3, #3
 80085b6:	3304      	adds	r3, #4
 80085b8:	3415      	adds	r4, #21
 80085ba:	42a6      	cmp	r6, r4
 80085bc:	bf38      	it	cc
 80085be:	2304      	movcc	r3, #4
 80085c0:	441d      	add	r5, r3
 80085c2:	4473      	add	r3, lr
 80085c4:	469e      	mov	lr, r3
 80085c6:	462e      	mov	r6, r5
 80085c8:	4566      	cmp	r6, ip
 80085ca:	d30e      	bcc.n	80085ea <__mdiff+0xea>
 80085cc:	f10c 0203 	add.w	r2, ip, #3
 80085d0:	1b52      	subs	r2, r2, r5
 80085d2:	f022 0203 	bic.w	r2, r2, #3
 80085d6:	3d03      	subs	r5, #3
 80085d8:	45ac      	cmp	ip, r5
 80085da:	bf38      	it	cc
 80085dc:	2200      	movcc	r2, #0
 80085de:	4413      	add	r3, r2
 80085e0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80085e4:	b17a      	cbz	r2, 8008606 <__mdiff+0x106>
 80085e6:	6107      	str	r7, [r0, #16]
 80085e8:	e7a4      	b.n	8008534 <__mdiff+0x34>
 80085ea:	f856 8b04 	ldr.w	r8, [r6], #4
 80085ee:	fa11 f288 	uxtah	r2, r1, r8
 80085f2:	1414      	asrs	r4, r2, #16
 80085f4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80085f8:	b292      	uxth	r2, r2
 80085fa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80085fe:	f84e 2b04 	str.w	r2, [lr], #4
 8008602:	1421      	asrs	r1, r4, #16
 8008604:	e7e0      	b.n	80085c8 <__mdiff+0xc8>
 8008606:	3f01      	subs	r7, #1
 8008608:	e7ea      	b.n	80085e0 <__mdiff+0xe0>
 800860a:	bf00      	nop
 800860c:	0800b0dd 	.word	0x0800b0dd
 8008610:	0800b0ee 	.word	0x0800b0ee

08008614 <__ulp>:
 8008614:	b082      	sub	sp, #8
 8008616:	ed8d 0b00 	vstr	d0, [sp]
 800861a:	9a01      	ldr	r2, [sp, #4]
 800861c:	4b0f      	ldr	r3, [pc, #60]	; (800865c <__ulp+0x48>)
 800861e:	4013      	ands	r3, r2
 8008620:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008624:	2b00      	cmp	r3, #0
 8008626:	dc08      	bgt.n	800863a <__ulp+0x26>
 8008628:	425b      	negs	r3, r3
 800862a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800862e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008632:	da04      	bge.n	800863e <__ulp+0x2a>
 8008634:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008638:	4113      	asrs	r3, r2
 800863a:	2200      	movs	r2, #0
 800863c:	e008      	b.n	8008650 <__ulp+0x3c>
 800863e:	f1a2 0314 	sub.w	r3, r2, #20
 8008642:	2b1e      	cmp	r3, #30
 8008644:	bfda      	itte	le
 8008646:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800864a:	40da      	lsrle	r2, r3
 800864c:	2201      	movgt	r2, #1
 800864e:	2300      	movs	r3, #0
 8008650:	4619      	mov	r1, r3
 8008652:	4610      	mov	r0, r2
 8008654:	ec41 0b10 	vmov	d0, r0, r1
 8008658:	b002      	add	sp, #8
 800865a:	4770      	bx	lr
 800865c:	7ff00000 	.word	0x7ff00000

08008660 <__b2d>:
 8008660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008664:	6906      	ldr	r6, [r0, #16]
 8008666:	f100 0814 	add.w	r8, r0, #20
 800866a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800866e:	1f37      	subs	r7, r6, #4
 8008670:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008674:	4610      	mov	r0, r2
 8008676:	f7ff fd53 	bl	8008120 <__hi0bits>
 800867a:	f1c0 0320 	rsb	r3, r0, #32
 800867e:	280a      	cmp	r0, #10
 8008680:	600b      	str	r3, [r1, #0]
 8008682:	491b      	ldr	r1, [pc, #108]	; (80086f0 <__b2d+0x90>)
 8008684:	dc15      	bgt.n	80086b2 <__b2d+0x52>
 8008686:	f1c0 0c0b 	rsb	ip, r0, #11
 800868a:	fa22 f30c 	lsr.w	r3, r2, ip
 800868e:	45b8      	cmp	r8, r7
 8008690:	ea43 0501 	orr.w	r5, r3, r1
 8008694:	bf34      	ite	cc
 8008696:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800869a:	2300      	movcs	r3, #0
 800869c:	3015      	adds	r0, #21
 800869e:	fa02 f000 	lsl.w	r0, r2, r0
 80086a2:	fa23 f30c 	lsr.w	r3, r3, ip
 80086a6:	4303      	orrs	r3, r0
 80086a8:	461c      	mov	r4, r3
 80086aa:	ec45 4b10 	vmov	d0, r4, r5
 80086ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086b2:	45b8      	cmp	r8, r7
 80086b4:	bf3a      	itte	cc
 80086b6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80086ba:	f1a6 0708 	subcc.w	r7, r6, #8
 80086be:	2300      	movcs	r3, #0
 80086c0:	380b      	subs	r0, #11
 80086c2:	d012      	beq.n	80086ea <__b2d+0x8a>
 80086c4:	f1c0 0120 	rsb	r1, r0, #32
 80086c8:	fa23 f401 	lsr.w	r4, r3, r1
 80086cc:	4082      	lsls	r2, r0
 80086ce:	4322      	orrs	r2, r4
 80086d0:	4547      	cmp	r7, r8
 80086d2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80086d6:	bf8c      	ite	hi
 80086d8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80086dc:	2200      	movls	r2, #0
 80086de:	4083      	lsls	r3, r0
 80086e0:	40ca      	lsrs	r2, r1
 80086e2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80086e6:	4313      	orrs	r3, r2
 80086e8:	e7de      	b.n	80086a8 <__b2d+0x48>
 80086ea:	ea42 0501 	orr.w	r5, r2, r1
 80086ee:	e7db      	b.n	80086a8 <__b2d+0x48>
 80086f0:	3ff00000 	.word	0x3ff00000

080086f4 <__d2b>:
 80086f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086f8:	460f      	mov	r7, r1
 80086fa:	2101      	movs	r1, #1
 80086fc:	ec59 8b10 	vmov	r8, r9, d0
 8008700:	4616      	mov	r6, r2
 8008702:	f7ff fc1b 	bl	8007f3c <_Balloc>
 8008706:	4604      	mov	r4, r0
 8008708:	b930      	cbnz	r0, 8008718 <__d2b+0x24>
 800870a:	4602      	mov	r2, r0
 800870c:	4b24      	ldr	r3, [pc, #144]	; (80087a0 <__d2b+0xac>)
 800870e:	4825      	ldr	r0, [pc, #148]	; (80087a4 <__d2b+0xb0>)
 8008710:	f240 310f 	movw	r1, #783	; 0x30f
 8008714:	f001 fb88 	bl	8009e28 <__assert_func>
 8008718:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800871c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008720:	bb2d      	cbnz	r5, 800876e <__d2b+0x7a>
 8008722:	9301      	str	r3, [sp, #4]
 8008724:	f1b8 0300 	subs.w	r3, r8, #0
 8008728:	d026      	beq.n	8008778 <__d2b+0x84>
 800872a:	4668      	mov	r0, sp
 800872c:	9300      	str	r3, [sp, #0]
 800872e:	f7ff fd17 	bl	8008160 <__lo0bits>
 8008732:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008736:	b1e8      	cbz	r0, 8008774 <__d2b+0x80>
 8008738:	f1c0 0320 	rsb	r3, r0, #32
 800873c:	fa02 f303 	lsl.w	r3, r2, r3
 8008740:	430b      	orrs	r3, r1
 8008742:	40c2      	lsrs	r2, r0
 8008744:	6163      	str	r3, [r4, #20]
 8008746:	9201      	str	r2, [sp, #4]
 8008748:	9b01      	ldr	r3, [sp, #4]
 800874a:	61a3      	str	r3, [r4, #24]
 800874c:	2b00      	cmp	r3, #0
 800874e:	bf14      	ite	ne
 8008750:	2202      	movne	r2, #2
 8008752:	2201      	moveq	r2, #1
 8008754:	6122      	str	r2, [r4, #16]
 8008756:	b1bd      	cbz	r5, 8008788 <__d2b+0x94>
 8008758:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800875c:	4405      	add	r5, r0
 800875e:	603d      	str	r5, [r7, #0]
 8008760:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008764:	6030      	str	r0, [r6, #0]
 8008766:	4620      	mov	r0, r4
 8008768:	b003      	add	sp, #12
 800876a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800876e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008772:	e7d6      	b.n	8008722 <__d2b+0x2e>
 8008774:	6161      	str	r1, [r4, #20]
 8008776:	e7e7      	b.n	8008748 <__d2b+0x54>
 8008778:	a801      	add	r0, sp, #4
 800877a:	f7ff fcf1 	bl	8008160 <__lo0bits>
 800877e:	9b01      	ldr	r3, [sp, #4]
 8008780:	6163      	str	r3, [r4, #20]
 8008782:	3020      	adds	r0, #32
 8008784:	2201      	movs	r2, #1
 8008786:	e7e5      	b.n	8008754 <__d2b+0x60>
 8008788:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800878c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008790:	6038      	str	r0, [r7, #0]
 8008792:	6918      	ldr	r0, [r3, #16]
 8008794:	f7ff fcc4 	bl	8008120 <__hi0bits>
 8008798:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800879c:	e7e2      	b.n	8008764 <__d2b+0x70>
 800879e:	bf00      	nop
 80087a0:	0800b0dd 	.word	0x0800b0dd
 80087a4:	0800b0ee 	.word	0x0800b0ee

080087a8 <__ratio>:
 80087a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ac:	4688      	mov	r8, r1
 80087ae:	4669      	mov	r1, sp
 80087b0:	4681      	mov	r9, r0
 80087b2:	f7ff ff55 	bl	8008660 <__b2d>
 80087b6:	a901      	add	r1, sp, #4
 80087b8:	4640      	mov	r0, r8
 80087ba:	ec55 4b10 	vmov	r4, r5, d0
 80087be:	f7ff ff4f 	bl	8008660 <__b2d>
 80087c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80087c6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80087ca:	eba3 0c02 	sub.w	ip, r3, r2
 80087ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 80087d2:	1a9b      	subs	r3, r3, r2
 80087d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80087d8:	ec51 0b10 	vmov	r0, r1, d0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	bfd6      	itet	le
 80087e0:	460a      	movle	r2, r1
 80087e2:	462a      	movgt	r2, r5
 80087e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80087e8:	468b      	mov	fp, r1
 80087ea:	462f      	mov	r7, r5
 80087ec:	bfd4      	ite	le
 80087ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80087f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80087f6:	4620      	mov	r0, r4
 80087f8:	ee10 2a10 	vmov	r2, s0
 80087fc:	465b      	mov	r3, fp
 80087fe:	4639      	mov	r1, r7
 8008800:	f7f8 f82c 	bl	800085c <__aeabi_ddiv>
 8008804:	ec41 0b10 	vmov	d0, r0, r1
 8008808:	b003      	add	sp, #12
 800880a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800880e <__copybits>:
 800880e:	3901      	subs	r1, #1
 8008810:	b570      	push	{r4, r5, r6, lr}
 8008812:	1149      	asrs	r1, r1, #5
 8008814:	6914      	ldr	r4, [r2, #16]
 8008816:	3101      	adds	r1, #1
 8008818:	f102 0314 	add.w	r3, r2, #20
 800881c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008820:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008824:	1f05      	subs	r5, r0, #4
 8008826:	42a3      	cmp	r3, r4
 8008828:	d30c      	bcc.n	8008844 <__copybits+0x36>
 800882a:	1aa3      	subs	r3, r4, r2
 800882c:	3b11      	subs	r3, #17
 800882e:	f023 0303 	bic.w	r3, r3, #3
 8008832:	3211      	adds	r2, #17
 8008834:	42a2      	cmp	r2, r4
 8008836:	bf88      	it	hi
 8008838:	2300      	movhi	r3, #0
 800883a:	4418      	add	r0, r3
 800883c:	2300      	movs	r3, #0
 800883e:	4288      	cmp	r0, r1
 8008840:	d305      	bcc.n	800884e <__copybits+0x40>
 8008842:	bd70      	pop	{r4, r5, r6, pc}
 8008844:	f853 6b04 	ldr.w	r6, [r3], #4
 8008848:	f845 6f04 	str.w	r6, [r5, #4]!
 800884c:	e7eb      	b.n	8008826 <__copybits+0x18>
 800884e:	f840 3b04 	str.w	r3, [r0], #4
 8008852:	e7f4      	b.n	800883e <__copybits+0x30>

08008854 <__any_on>:
 8008854:	f100 0214 	add.w	r2, r0, #20
 8008858:	6900      	ldr	r0, [r0, #16]
 800885a:	114b      	asrs	r3, r1, #5
 800885c:	4298      	cmp	r0, r3
 800885e:	b510      	push	{r4, lr}
 8008860:	db11      	blt.n	8008886 <__any_on+0x32>
 8008862:	dd0a      	ble.n	800887a <__any_on+0x26>
 8008864:	f011 011f 	ands.w	r1, r1, #31
 8008868:	d007      	beq.n	800887a <__any_on+0x26>
 800886a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800886e:	fa24 f001 	lsr.w	r0, r4, r1
 8008872:	fa00 f101 	lsl.w	r1, r0, r1
 8008876:	428c      	cmp	r4, r1
 8008878:	d10b      	bne.n	8008892 <__any_on+0x3e>
 800887a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800887e:	4293      	cmp	r3, r2
 8008880:	d803      	bhi.n	800888a <__any_on+0x36>
 8008882:	2000      	movs	r0, #0
 8008884:	bd10      	pop	{r4, pc}
 8008886:	4603      	mov	r3, r0
 8008888:	e7f7      	b.n	800887a <__any_on+0x26>
 800888a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800888e:	2900      	cmp	r1, #0
 8008890:	d0f5      	beq.n	800887e <__any_on+0x2a>
 8008892:	2001      	movs	r0, #1
 8008894:	e7f6      	b.n	8008884 <__any_on+0x30>

08008896 <sulp>:
 8008896:	b570      	push	{r4, r5, r6, lr}
 8008898:	4604      	mov	r4, r0
 800889a:	460d      	mov	r5, r1
 800889c:	ec45 4b10 	vmov	d0, r4, r5
 80088a0:	4616      	mov	r6, r2
 80088a2:	f7ff feb7 	bl	8008614 <__ulp>
 80088a6:	ec51 0b10 	vmov	r0, r1, d0
 80088aa:	b17e      	cbz	r6, 80088cc <sulp+0x36>
 80088ac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80088b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	dd09      	ble.n	80088cc <sulp+0x36>
 80088b8:	051b      	lsls	r3, r3, #20
 80088ba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80088be:	2400      	movs	r4, #0
 80088c0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80088c4:	4622      	mov	r2, r4
 80088c6:	462b      	mov	r3, r5
 80088c8:	f7f7 fe9e 	bl	8000608 <__aeabi_dmul>
 80088cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080088d0 <_strtod_l>:
 80088d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d4:	ed2d 8b02 	vpush	{d8}
 80088d8:	b09b      	sub	sp, #108	; 0x6c
 80088da:	4604      	mov	r4, r0
 80088dc:	9213      	str	r2, [sp, #76]	; 0x4c
 80088de:	2200      	movs	r2, #0
 80088e0:	9216      	str	r2, [sp, #88]	; 0x58
 80088e2:	460d      	mov	r5, r1
 80088e4:	f04f 0800 	mov.w	r8, #0
 80088e8:	f04f 0900 	mov.w	r9, #0
 80088ec:	460a      	mov	r2, r1
 80088ee:	9215      	str	r2, [sp, #84]	; 0x54
 80088f0:	7811      	ldrb	r1, [r2, #0]
 80088f2:	292b      	cmp	r1, #43	; 0x2b
 80088f4:	d04c      	beq.n	8008990 <_strtod_l+0xc0>
 80088f6:	d83a      	bhi.n	800896e <_strtod_l+0x9e>
 80088f8:	290d      	cmp	r1, #13
 80088fa:	d834      	bhi.n	8008966 <_strtod_l+0x96>
 80088fc:	2908      	cmp	r1, #8
 80088fe:	d834      	bhi.n	800896a <_strtod_l+0x9a>
 8008900:	2900      	cmp	r1, #0
 8008902:	d03d      	beq.n	8008980 <_strtod_l+0xb0>
 8008904:	2200      	movs	r2, #0
 8008906:	920a      	str	r2, [sp, #40]	; 0x28
 8008908:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800890a:	7832      	ldrb	r2, [r6, #0]
 800890c:	2a30      	cmp	r2, #48	; 0x30
 800890e:	f040 80b4 	bne.w	8008a7a <_strtod_l+0x1aa>
 8008912:	7872      	ldrb	r2, [r6, #1]
 8008914:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008918:	2a58      	cmp	r2, #88	; 0x58
 800891a:	d170      	bne.n	80089fe <_strtod_l+0x12e>
 800891c:	9302      	str	r3, [sp, #8]
 800891e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008920:	9301      	str	r3, [sp, #4]
 8008922:	ab16      	add	r3, sp, #88	; 0x58
 8008924:	9300      	str	r3, [sp, #0]
 8008926:	4a8e      	ldr	r2, [pc, #568]	; (8008b60 <_strtod_l+0x290>)
 8008928:	ab17      	add	r3, sp, #92	; 0x5c
 800892a:	a915      	add	r1, sp, #84	; 0x54
 800892c:	4620      	mov	r0, r4
 800892e:	f001 fb17 	bl	8009f60 <__gethex>
 8008932:	f010 070f 	ands.w	r7, r0, #15
 8008936:	4605      	mov	r5, r0
 8008938:	d005      	beq.n	8008946 <_strtod_l+0x76>
 800893a:	2f06      	cmp	r7, #6
 800893c:	d12a      	bne.n	8008994 <_strtod_l+0xc4>
 800893e:	3601      	adds	r6, #1
 8008940:	2300      	movs	r3, #0
 8008942:	9615      	str	r6, [sp, #84]	; 0x54
 8008944:	930a      	str	r3, [sp, #40]	; 0x28
 8008946:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008948:	2b00      	cmp	r3, #0
 800894a:	f040 857f 	bne.w	800944c <_strtod_l+0xb7c>
 800894e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008950:	b1db      	cbz	r3, 800898a <_strtod_l+0xba>
 8008952:	4642      	mov	r2, r8
 8008954:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008958:	ec43 2b10 	vmov	d0, r2, r3
 800895c:	b01b      	add	sp, #108	; 0x6c
 800895e:	ecbd 8b02 	vpop	{d8}
 8008962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008966:	2920      	cmp	r1, #32
 8008968:	d1cc      	bne.n	8008904 <_strtod_l+0x34>
 800896a:	3201      	adds	r2, #1
 800896c:	e7bf      	b.n	80088ee <_strtod_l+0x1e>
 800896e:	292d      	cmp	r1, #45	; 0x2d
 8008970:	d1c8      	bne.n	8008904 <_strtod_l+0x34>
 8008972:	2101      	movs	r1, #1
 8008974:	910a      	str	r1, [sp, #40]	; 0x28
 8008976:	1c51      	adds	r1, r2, #1
 8008978:	9115      	str	r1, [sp, #84]	; 0x54
 800897a:	7852      	ldrb	r2, [r2, #1]
 800897c:	2a00      	cmp	r2, #0
 800897e:	d1c3      	bne.n	8008908 <_strtod_l+0x38>
 8008980:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008982:	9515      	str	r5, [sp, #84]	; 0x54
 8008984:	2b00      	cmp	r3, #0
 8008986:	f040 855f 	bne.w	8009448 <_strtod_l+0xb78>
 800898a:	4642      	mov	r2, r8
 800898c:	464b      	mov	r3, r9
 800898e:	e7e3      	b.n	8008958 <_strtod_l+0x88>
 8008990:	2100      	movs	r1, #0
 8008992:	e7ef      	b.n	8008974 <_strtod_l+0xa4>
 8008994:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008996:	b13a      	cbz	r2, 80089a8 <_strtod_l+0xd8>
 8008998:	2135      	movs	r1, #53	; 0x35
 800899a:	a818      	add	r0, sp, #96	; 0x60
 800899c:	f7ff ff37 	bl	800880e <__copybits>
 80089a0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80089a2:	4620      	mov	r0, r4
 80089a4:	f7ff fb0a 	bl	8007fbc <_Bfree>
 80089a8:	3f01      	subs	r7, #1
 80089aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80089ac:	2f04      	cmp	r7, #4
 80089ae:	d806      	bhi.n	80089be <_strtod_l+0xee>
 80089b0:	e8df f007 	tbb	[pc, r7]
 80089b4:	201d0314 	.word	0x201d0314
 80089b8:	14          	.byte	0x14
 80089b9:	00          	.byte	0x00
 80089ba:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80089be:	05e9      	lsls	r1, r5, #23
 80089c0:	bf48      	it	mi
 80089c2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80089c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80089ca:	0d1b      	lsrs	r3, r3, #20
 80089cc:	051b      	lsls	r3, r3, #20
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1b9      	bne.n	8008946 <_strtod_l+0x76>
 80089d2:	f7fe fb05 	bl	8006fe0 <__errno>
 80089d6:	2322      	movs	r3, #34	; 0x22
 80089d8:	6003      	str	r3, [r0, #0]
 80089da:	e7b4      	b.n	8008946 <_strtod_l+0x76>
 80089dc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80089e0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80089e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80089e8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80089ec:	e7e7      	b.n	80089be <_strtod_l+0xee>
 80089ee:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008b68 <_strtod_l+0x298>
 80089f2:	e7e4      	b.n	80089be <_strtod_l+0xee>
 80089f4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80089f8:	f04f 38ff 	mov.w	r8, #4294967295
 80089fc:	e7df      	b.n	80089be <_strtod_l+0xee>
 80089fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a00:	1c5a      	adds	r2, r3, #1
 8008a02:	9215      	str	r2, [sp, #84]	; 0x54
 8008a04:	785b      	ldrb	r3, [r3, #1]
 8008a06:	2b30      	cmp	r3, #48	; 0x30
 8008a08:	d0f9      	beq.n	80089fe <_strtod_l+0x12e>
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d09b      	beq.n	8008946 <_strtod_l+0x76>
 8008a0e:	2301      	movs	r3, #1
 8008a10:	f04f 0a00 	mov.w	sl, #0
 8008a14:	9304      	str	r3, [sp, #16]
 8008a16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a18:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a1a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008a1e:	46d3      	mov	fp, sl
 8008a20:	220a      	movs	r2, #10
 8008a22:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008a24:	7806      	ldrb	r6, [r0, #0]
 8008a26:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008a2a:	b2d9      	uxtb	r1, r3
 8008a2c:	2909      	cmp	r1, #9
 8008a2e:	d926      	bls.n	8008a7e <_strtod_l+0x1ae>
 8008a30:	494c      	ldr	r1, [pc, #304]	; (8008b64 <_strtod_l+0x294>)
 8008a32:	2201      	movs	r2, #1
 8008a34:	f001 f9c0 	bl	8009db8 <strncmp>
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	d030      	beq.n	8008a9e <_strtod_l+0x1ce>
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	4632      	mov	r2, r6
 8008a40:	9005      	str	r0, [sp, #20]
 8008a42:	465e      	mov	r6, fp
 8008a44:	4603      	mov	r3, r0
 8008a46:	2a65      	cmp	r2, #101	; 0x65
 8008a48:	d001      	beq.n	8008a4e <_strtod_l+0x17e>
 8008a4a:	2a45      	cmp	r2, #69	; 0x45
 8008a4c:	d113      	bne.n	8008a76 <_strtod_l+0x1a6>
 8008a4e:	b91e      	cbnz	r6, 8008a58 <_strtod_l+0x188>
 8008a50:	9a04      	ldr	r2, [sp, #16]
 8008a52:	4302      	orrs	r2, r0
 8008a54:	d094      	beq.n	8008980 <_strtod_l+0xb0>
 8008a56:	2600      	movs	r6, #0
 8008a58:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008a5a:	1c6a      	adds	r2, r5, #1
 8008a5c:	9215      	str	r2, [sp, #84]	; 0x54
 8008a5e:	786a      	ldrb	r2, [r5, #1]
 8008a60:	2a2b      	cmp	r2, #43	; 0x2b
 8008a62:	d074      	beq.n	8008b4e <_strtod_l+0x27e>
 8008a64:	2a2d      	cmp	r2, #45	; 0x2d
 8008a66:	d078      	beq.n	8008b5a <_strtod_l+0x28a>
 8008a68:	f04f 0c00 	mov.w	ip, #0
 8008a6c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008a70:	2909      	cmp	r1, #9
 8008a72:	d97f      	bls.n	8008b74 <_strtod_l+0x2a4>
 8008a74:	9515      	str	r5, [sp, #84]	; 0x54
 8008a76:	2700      	movs	r7, #0
 8008a78:	e09e      	b.n	8008bb8 <_strtod_l+0x2e8>
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	e7c8      	b.n	8008a10 <_strtod_l+0x140>
 8008a7e:	f1bb 0f08 	cmp.w	fp, #8
 8008a82:	bfd8      	it	le
 8008a84:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008a86:	f100 0001 	add.w	r0, r0, #1
 8008a8a:	bfda      	itte	le
 8008a8c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008a90:	9309      	strle	r3, [sp, #36]	; 0x24
 8008a92:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008a96:	f10b 0b01 	add.w	fp, fp, #1
 8008a9a:	9015      	str	r0, [sp, #84]	; 0x54
 8008a9c:	e7c1      	b.n	8008a22 <_strtod_l+0x152>
 8008a9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008aa0:	1c5a      	adds	r2, r3, #1
 8008aa2:	9215      	str	r2, [sp, #84]	; 0x54
 8008aa4:	785a      	ldrb	r2, [r3, #1]
 8008aa6:	f1bb 0f00 	cmp.w	fp, #0
 8008aaa:	d037      	beq.n	8008b1c <_strtod_l+0x24c>
 8008aac:	9005      	str	r0, [sp, #20]
 8008aae:	465e      	mov	r6, fp
 8008ab0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008ab4:	2b09      	cmp	r3, #9
 8008ab6:	d912      	bls.n	8008ade <_strtod_l+0x20e>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e7c4      	b.n	8008a46 <_strtod_l+0x176>
 8008abc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008abe:	1c5a      	adds	r2, r3, #1
 8008ac0:	9215      	str	r2, [sp, #84]	; 0x54
 8008ac2:	785a      	ldrb	r2, [r3, #1]
 8008ac4:	3001      	adds	r0, #1
 8008ac6:	2a30      	cmp	r2, #48	; 0x30
 8008ac8:	d0f8      	beq.n	8008abc <_strtod_l+0x1ec>
 8008aca:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008ace:	2b08      	cmp	r3, #8
 8008ad0:	f200 84c1 	bhi.w	8009456 <_strtod_l+0xb86>
 8008ad4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ad6:	9005      	str	r0, [sp, #20]
 8008ad8:	2000      	movs	r0, #0
 8008ada:	930b      	str	r3, [sp, #44]	; 0x2c
 8008adc:	4606      	mov	r6, r0
 8008ade:	3a30      	subs	r2, #48	; 0x30
 8008ae0:	f100 0301 	add.w	r3, r0, #1
 8008ae4:	d014      	beq.n	8008b10 <_strtod_l+0x240>
 8008ae6:	9905      	ldr	r1, [sp, #20]
 8008ae8:	4419      	add	r1, r3
 8008aea:	9105      	str	r1, [sp, #20]
 8008aec:	4633      	mov	r3, r6
 8008aee:	eb00 0c06 	add.w	ip, r0, r6
 8008af2:	210a      	movs	r1, #10
 8008af4:	4563      	cmp	r3, ip
 8008af6:	d113      	bne.n	8008b20 <_strtod_l+0x250>
 8008af8:	1833      	adds	r3, r6, r0
 8008afa:	2b08      	cmp	r3, #8
 8008afc:	f106 0601 	add.w	r6, r6, #1
 8008b00:	4406      	add	r6, r0
 8008b02:	dc1a      	bgt.n	8008b3a <_strtod_l+0x26a>
 8008b04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b06:	230a      	movs	r3, #10
 8008b08:	fb03 2301 	mla	r3, r3, r1, r2
 8008b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b0e:	2300      	movs	r3, #0
 8008b10:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b12:	1c51      	adds	r1, r2, #1
 8008b14:	9115      	str	r1, [sp, #84]	; 0x54
 8008b16:	7852      	ldrb	r2, [r2, #1]
 8008b18:	4618      	mov	r0, r3
 8008b1a:	e7c9      	b.n	8008ab0 <_strtod_l+0x1e0>
 8008b1c:	4658      	mov	r0, fp
 8008b1e:	e7d2      	b.n	8008ac6 <_strtod_l+0x1f6>
 8008b20:	2b08      	cmp	r3, #8
 8008b22:	f103 0301 	add.w	r3, r3, #1
 8008b26:	dc03      	bgt.n	8008b30 <_strtod_l+0x260>
 8008b28:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008b2a:	434f      	muls	r7, r1
 8008b2c:	9709      	str	r7, [sp, #36]	; 0x24
 8008b2e:	e7e1      	b.n	8008af4 <_strtod_l+0x224>
 8008b30:	2b10      	cmp	r3, #16
 8008b32:	bfd8      	it	le
 8008b34:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008b38:	e7dc      	b.n	8008af4 <_strtod_l+0x224>
 8008b3a:	2e10      	cmp	r6, #16
 8008b3c:	bfdc      	itt	le
 8008b3e:	230a      	movle	r3, #10
 8008b40:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008b44:	e7e3      	b.n	8008b0e <_strtod_l+0x23e>
 8008b46:	2300      	movs	r3, #0
 8008b48:	9305      	str	r3, [sp, #20]
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e780      	b.n	8008a50 <_strtod_l+0x180>
 8008b4e:	f04f 0c00 	mov.w	ip, #0
 8008b52:	1caa      	adds	r2, r5, #2
 8008b54:	9215      	str	r2, [sp, #84]	; 0x54
 8008b56:	78aa      	ldrb	r2, [r5, #2]
 8008b58:	e788      	b.n	8008a6c <_strtod_l+0x19c>
 8008b5a:	f04f 0c01 	mov.w	ip, #1
 8008b5e:	e7f8      	b.n	8008b52 <_strtod_l+0x282>
 8008b60:	0800b248 	.word	0x0800b248
 8008b64:	0800b244 	.word	0x0800b244
 8008b68:	7ff00000 	.word	0x7ff00000
 8008b6c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b6e:	1c51      	adds	r1, r2, #1
 8008b70:	9115      	str	r1, [sp, #84]	; 0x54
 8008b72:	7852      	ldrb	r2, [r2, #1]
 8008b74:	2a30      	cmp	r2, #48	; 0x30
 8008b76:	d0f9      	beq.n	8008b6c <_strtod_l+0x29c>
 8008b78:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008b7c:	2908      	cmp	r1, #8
 8008b7e:	f63f af7a 	bhi.w	8008a76 <_strtod_l+0x1a6>
 8008b82:	3a30      	subs	r2, #48	; 0x30
 8008b84:	9208      	str	r2, [sp, #32]
 8008b86:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b88:	920c      	str	r2, [sp, #48]	; 0x30
 8008b8a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b8c:	1c57      	adds	r7, r2, #1
 8008b8e:	9715      	str	r7, [sp, #84]	; 0x54
 8008b90:	7852      	ldrb	r2, [r2, #1]
 8008b92:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008b96:	f1be 0f09 	cmp.w	lr, #9
 8008b9a:	d938      	bls.n	8008c0e <_strtod_l+0x33e>
 8008b9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008b9e:	1a7f      	subs	r7, r7, r1
 8008ba0:	2f08      	cmp	r7, #8
 8008ba2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008ba6:	dc03      	bgt.n	8008bb0 <_strtod_l+0x2e0>
 8008ba8:	9908      	ldr	r1, [sp, #32]
 8008baa:	428f      	cmp	r7, r1
 8008bac:	bfa8      	it	ge
 8008bae:	460f      	movge	r7, r1
 8008bb0:	f1bc 0f00 	cmp.w	ip, #0
 8008bb4:	d000      	beq.n	8008bb8 <_strtod_l+0x2e8>
 8008bb6:	427f      	negs	r7, r7
 8008bb8:	2e00      	cmp	r6, #0
 8008bba:	d14f      	bne.n	8008c5c <_strtod_l+0x38c>
 8008bbc:	9904      	ldr	r1, [sp, #16]
 8008bbe:	4301      	orrs	r1, r0
 8008bc0:	f47f aec1 	bne.w	8008946 <_strtod_l+0x76>
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f47f aedb 	bne.w	8008980 <_strtod_l+0xb0>
 8008bca:	2a69      	cmp	r2, #105	; 0x69
 8008bcc:	d029      	beq.n	8008c22 <_strtod_l+0x352>
 8008bce:	dc26      	bgt.n	8008c1e <_strtod_l+0x34e>
 8008bd0:	2a49      	cmp	r2, #73	; 0x49
 8008bd2:	d026      	beq.n	8008c22 <_strtod_l+0x352>
 8008bd4:	2a4e      	cmp	r2, #78	; 0x4e
 8008bd6:	f47f aed3 	bne.w	8008980 <_strtod_l+0xb0>
 8008bda:	499b      	ldr	r1, [pc, #620]	; (8008e48 <_strtod_l+0x578>)
 8008bdc:	a815      	add	r0, sp, #84	; 0x54
 8008bde:	f001 fbff 	bl	800a3e0 <__match>
 8008be2:	2800      	cmp	r0, #0
 8008be4:	f43f aecc 	beq.w	8008980 <_strtod_l+0xb0>
 8008be8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	2b28      	cmp	r3, #40	; 0x28
 8008bee:	d12f      	bne.n	8008c50 <_strtod_l+0x380>
 8008bf0:	4996      	ldr	r1, [pc, #600]	; (8008e4c <_strtod_l+0x57c>)
 8008bf2:	aa18      	add	r2, sp, #96	; 0x60
 8008bf4:	a815      	add	r0, sp, #84	; 0x54
 8008bf6:	f001 fc07 	bl	800a408 <__hexnan>
 8008bfa:	2805      	cmp	r0, #5
 8008bfc:	d128      	bne.n	8008c50 <_strtod_l+0x380>
 8008bfe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c00:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008c04:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008c08:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008c0c:	e69b      	b.n	8008946 <_strtod_l+0x76>
 8008c0e:	9f08      	ldr	r7, [sp, #32]
 8008c10:	210a      	movs	r1, #10
 8008c12:	fb01 2107 	mla	r1, r1, r7, r2
 8008c16:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008c1a:	9208      	str	r2, [sp, #32]
 8008c1c:	e7b5      	b.n	8008b8a <_strtod_l+0x2ba>
 8008c1e:	2a6e      	cmp	r2, #110	; 0x6e
 8008c20:	e7d9      	b.n	8008bd6 <_strtod_l+0x306>
 8008c22:	498b      	ldr	r1, [pc, #556]	; (8008e50 <_strtod_l+0x580>)
 8008c24:	a815      	add	r0, sp, #84	; 0x54
 8008c26:	f001 fbdb 	bl	800a3e0 <__match>
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	f43f aea8 	beq.w	8008980 <_strtod_l+0xb0>
 8008c30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c32:	4988      	ldr	r1, [pc, #544]	; (8008e54 <_strtod_l+0x584>)
 8008c34:	3b01      	subs	r3, #1
 8008c36:	a815      	add	r0, sp, #84	; 0x54
 8008c38:	9315      	str	r3, [sp, #84]	; 0x54
 8008c3a:	f001 fbd1 	bl	800a3e0 <__match>
 8008c3e:	b910      	cbnz	r0, 8008c46 <_strtod_l+0x376>
 8008c40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c42:	3301      	adds	r3, #1
 8008c44:	9315      	str	r3, [sp, #84]	; 0x54
 8008c46:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8008e64 <_strtod_l+0x594>
 8008c4a:	f04f 0800 	mov.w	r8, #0
 8008c4e:	e67a      	b.n	8008946 <_strtod_l+0x76>
 8008c50:	4881      	ldr	r0, [pc, #516]	; (8008e58 <_strtod_l+0x588>)
 8008c52:	f001 f8e1 	bl	8009e18 <nan>
 8008c56:	ec59 8b10 	vmov	r8, r9, d0
 8008c5a:	e674      	b.n	8008946 <_strtod_l+0x76>
 8008c5c:	9b05      	ldr	r3, [sp, #20]
 8008c5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c60:	1afb      	subs	r3, r7, r3
 8008c62:	f1bb 0f00 	cmp.w	fp, #0
 8008c66:	bf08      	it	eq
 8008c68:	46b3      	moveq	fp, r6
 8008c6a:	2e10      	cmp	r6, #16
 8008c6c:	9308      	str	r3, [sp, #32]
 8008c6e:	4635      	mov	r5, r6
 8008c70:	bfa8      	it	ge
 8008c72:	2510      	movge	r5, #16
 8008c74:	f7f7 fc4e 	bl	8000514 <__aeabi_ui2d>
 8008c78:	2e09      	cmp	r6, #9
 8008c7a:	4680      	mov	r8, r0
 8008c7c:	4689      	mov	r9, r1
 8008c7e:	dd13      	ble.n	8008ca8 <_strtod_l+0x3d8>
 8008c80:	4b76      	ldr	r3, [pc, #472]	; (8008e5c <_strtod_l+0x58c>)
 8008c82:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008c86:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008c8a:	f7f7 fcbd 	bl	8000608 <__aeabi_dmul>
 8008c8e:	4680      	mov	r8, r0
 8008c90:	4650      	mov	r0, sl
 8008c92:	4689      	mov	r9, r1
 8008c94:	f7f7 fc3e 	bl	8000514 <__aeabi_ui2d>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	4640      	mov	r0, r8
 8008c9e:	4649      	mov	r1, r9
 8008ca0:	f7f7 fafc 	bl	800029c <__adddf3>
 8008ca4:	4680      	mov	r8, r0
 8008ca6:	4689      	mov	r9, r1
 8008ca8:	2e0f      	cmp	r6, #15
 8008caa:	dc38      	bgt.n	8008d1e <_strtod_l+0x44e>
 8008cac:	9b08      	ldr	r3, [sp, #32]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f43f ae49 	beq.w	8008946 <_strtod_l+0x76>
 8008cb4:	dd24      	ble.n	8008d00 <_strtod_l+0x430>
 8008cb6:	2b16      	cmp	r3, #22
 8008cb8:	dc0b      	bgt.n	8008cd2 <_strtod_l+0x402>
 8008cba:	4968      	ldr	r1, [pc, #416]	; (8008e5c <_strtod_l+0x58c>)
 8008cbc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008cc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cc4:	4642      	mov	r2, r8
 8008cc6:	464b      	mov	r3, r9
 8008cc8:	f7f7 fc9e 	bl	8000608 <__aeabi_dmul>
 8008ccc:	4680      	mov	r8, r0
 8008cce:	4689      	mov	r9, r1
 8008cd0:	e639      	b.n	8008946 <_strtod_l+0x76>
 8008cd2:	9a08      	ldr	r2, [sp, #32]
 8008cd4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	db20      	blt.n	8008d1e <_strtod_l+0x44e>
 8008cdc:	4c5f      	ldr	r4, [pc, #380]	; (8008e5c <_strtod_l+0x58c>)
 8008cde:	f1c6 060f 	rsb	r6, r6, #15
 8008ce2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008ce6:	4642      	mov	r2, r8
 8008ce8:	464b      	mov	r3, r9
 8008cea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cee:	f7f7 fc8b 	bl	8000608 <__aeabi_dmul>
 8008cf2:	9b08      	ldr	r3, [sp, #32]
 8008cf4:	1b9e      	subs	r6, r3, r6
 8008cf6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008cfa:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008cfe:	e7e3      	b.n	8008cc8 <_strtod_l+0x3f8>
 8008d00:	9b08      	ldr	r3, [sp, #32]
 8008d02:	3316      	adds	r3, #22
 8008d04:	db0b      	blt.n	8008d1e <_strtod_l+0x44e>
 8008d06:	9b05      	ldr	r3, [sp, #20]
 8008d08:	1bdf      	subs	r7, r3, r7
 8008d0a:	4b54      	ldr	r3, [pc, #336]	; (8008e5c <_strtod_l+0x58c>)
 8008d0c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d14:	4640      	mov	r0, r8
 8008d16:	4649      	mov	r1, r9
 8008d18:	f7f7 fda0 	bl	800085c <__aeabi_ddiv>
 8008d1c:	e7d6      	b.n	8008ccc <_strtod_l+0x3fc>
 8008d1e:	9b08      	ldr	r3, [sp, #32]
 8008d20:	1b75      	subs	r5, r6, r5
 8008d22:	441d      	add	r5, r3
 8008d24:	2d00      	cmp	r5, #0
 8008d26:	dd70      	ble.n	8008e0a <_strtod_l+0x53a>
 8008d28:	f015 030f 	ands.w	r3, r5, #15
 8008d2c:	d00a      	beq.n	8008d44 <_strtod_l+0x474>
 8008d2e:	494b      	ldr	r1, [pc, #300]	; (8008e5c <_strtod_l+0x58c>)
 8008d30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d34:	4642      	mov	r2, r8
 8008d36:	464b      	mov	r3, r9
 8008d38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d3c:	f7f7 fc64 	bl	8000608 <__aeabi_dmul>
 8008d40:	4680      	mov	r8, r0
 8008d42:	4689      	mov	r9, r1
 8008d44:	f035 050f 	bics.w	r5, r5, #15
 8008d48:	d04d      	beq.n	8008de6 <_strtod_l+0x516>
 8008d4a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008d4e:	dd22      	ble.n	8008d96 <_strtod_l+0x4c6>
 8008d50:	2500      	movs	r5, #0
 8008d52:	46ab      	mov	fp, r5
 8008d54:	9509      	str	r5, [sp, #36]	; 0x24
 8008d56:	9505      	str	r5, [sp, #20]
 8008d58:	2322      	movs	r3, #34	; 0x22
 8008d5a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008e64 <_strtod_l+0x594>
 8008d5e:	6023      	str	r3, [r4, #0]
 8008d60:	f04f 0800 	mov.w	r8, #0
 8008d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	f43f aded 	beq.w	8008946 <_strtod_l+0x76>
 8008d6c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f7ff f924 	bl	8007fbc <_Bfree>
 8008d74:	9905      	ldr	r1, [sp, #20]
 8008d76:	4620      	mov	r0, r4
 8008d78:	f7ff f920 	bl	8007fbc <_Bfree>
 8008d7c:	4659      	mov	r1, fp
 8008d7e:	4620      	mov	r0, r4
 8008d80:	f7ff f91c 	bl	8007fbc <_Bfree>
 8008d84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d86:	4620      	mov	r0, r4
 8008d88:	f7ff f918 	bl	8007fbc <_Bfree>
 8008d8c:	4629      	mov	r1, r5
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f7ff f914 	bl	8007fbc <_Bfree>
 8008d94:	e5d7      	b.n	8008946 <_strtod_l+0x76>
 8008d96:	4b32      	ldr	r3, [pc, #200]	; (8008e60 <_strtod_l+0x590>)
 8008d98:	9304      	str	r3, [sp, #16]
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	112d      	asrs	r5, r5, #4
 8008d9e:	4640      	mov	r0, r8
 8008da0:	4649      	mov	r1, r9
 8008da2:	469a      	mov	sl, r3
 8008da4:	2d01      	cmp	r5, #1
 8008da6:	dc21      	bgt.n	8008dec <_strtod_l+0x51c>
 8008da8:	b10b      	cbz	r3, 8008dae <_strtod_l+0x4de>
 8008daa:	4680      	mov	r8, r0
 8008dac:	4689      	mov	r9, r1
 8008dae:	492c      	ldr	r1, [pc, #176]	; (8008e60 <_strtod_l+0x590>)
 8008db0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008db4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008db8:	4642      	mov	r2, r8
 8008dba:	464b      	mov	r3, r9
 8008dbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dc0:	f7f7 fc22 	bl	8000608 <__aeabi_dmul>
 8008dc4:	4b27      	ldr	r3, [pc, #156]	; (8008e64 <_strtod_l+0x594>)
 8008dc6:	460a      	mov	r2, r1
 8008dc8:	400b      	ands	r3, r1
 8008dca:	4927      	ldr	r1, [pc, #156]	; (8008e68 <_strtod_l+0x598>)
 8008dcc:	428b      	cmp	r3, r1
 8008dce:	4680      	mov	r8, r0
 8008dd0:	d8be      	bhi.n	8008d50 <_strtod_l+0x480>
 8008dd2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008dd6:	428b      	cmp	r3, r1
 8008dd8:	bf86      	itte	hi
 8008dda:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008e6c <_strtod_l+0x59c>
 8008dde:	f04f 38ff 	movhi.w	r8, #4294967295
 8008de2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008de6:	2300      	movs	r3, #0
 8008de8:	9304      	str	r3, [sp, #16]
 8008dea:	e07b      	b.n	8008ee4 <_strtod_l+0x614>
 8008dec:	07ea      	lsls	r2, r5, #31
 8008dee:	d505      	bpl.n	8008dfc <_strtod_l+0x52c>
 8008df0:	9b04      	ldr	r3, [sp, #16]
 8008df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df6:	f7f7 fc07 	bl	8000608 <__aeabi_dmul>
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	9a04      	ldr	r2, [sp, #16]
 8008dfe:	3208      	adds	r2, #8
 8008e00:	f10a 0a01 	add.w	sl, sl, #1
 8008e04:	106d      	asrs	r5, r5, #1
 8008e06:	9204      	str	r2, [sp, #16]
 8008e08:	e7cc      	b.n	8008da4 <_strtod_l+0x4d4>
 8008e0a:	d0ec      	beq.n	8008de6 <_strtod_l+0x516>
 8008e0c:	426d      	negs	r5, r5
 8008e0e:	f015 020f 	ands.w	r2, r5, #15
 8008e12:	d00a      	beq.n	8008e2a <_strtod_l+0x55a>
 8008e14:	4b11      	ldr	r3, [pc, #68]	; (8008e5c <_strtod_l+0x58c>)
 8008e16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e1a:	4640      	mov	r0, r8
 8008e1c:	4649      	mov	r1, r9
 8008e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e22:	f7f7 fd1b 	bl	800085c <__aeabi_ddiv>
 8008e26:	4680      	mov	r8, r0
 8008e28:	4689      	mov	r9, r1
 8008e2a:	112d      	asrs	r5, r5, #4
 8008e2c:	d0db      	beq.n	8008de6 <_strtod_l+0x516>
 8008e2e:	2d1f      	cmp	r5, #31
 8008e30:	dd1e      	ble.n	8008e70 <_strtod_l+0x5a0>
 8008e32:	2500      	movs	r5, #0
 8008e34:	46ab      	mov	fp, r5
 8008e36:	9509      	str	r5, [sp, #36]	; 0x24
 8008e38:	9505      	str	r5, [sp, #20]
 8008e3a:	2322      	movs	r3, #34	; 0x22
 8008e3c:	f04f 0800 	mov.w	r8, #0
 8008e40:	f04f 0900 	mov.w	r9, #0
 8008e44:	6023      	str	r3, [r4, #0]
 8008e46:	e78d      	b.n	8008d64 <_strtod_l+0x494>
 8008e48:	0800b035 	.word	0x0800b035
 8008e4c:	0800b25c 	.word	0x0800b25c
 8008e50:	0800b02d 	.word	0x0800b02d
 8008e54:	0800b064 	.word	0x0800b064
 8008e58:	0800b3ed 	.word	0x0800b3ed
 8008e5c:	0800b170 	.word	0x0800b170
 8008e60:	0800b148 	.word	0x0800b148
 8008e64:	7ff00000 	.word	0x7ff00000
 8008e68:	7ca00000 	.word	0x7ca00000
 8008e6c:	7fefffff 	.word	0x7fefffff
 8008e70:	f015 0310 	ands.w	r3, r5, #16
 8008e74:	bf18      	it	ne
 8008e76:	236a      	movne	r3, #106	; 0x6a
 8008e78:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800921c <_strtod_l+0x94c>
 8008e7c:	9304      	str	r3, [sp, #16]
 8008e7e:	4640      	mov	r0, r8
 8008e80:	4649      	mov	r1, r9
 8008e82:	2300      	movs	r3, #0
 8008e84:	07ea      	lsls	r2, r5, #31
 8008e86:	d504      	bpl.n	8008e92 <_strtod_l+0x5c2>
 8008e88:	e9da 2300 	ldrd	r2, r3, [sl]
 8008e8c:	f7f7 fbbc 	bl	8000608 <__aeabi_dmul>
 8008e90:	2301      	movs	r3, #1
 8008e92:	106d      	asrs	r5, r5, #1
 8008e94:	f10a 0a08 	add.w	sl, sl, #8
 8008e98:	d1f4      	bne.n	8008e84 <_strtod_l+0x5b4>
 8008e9a:	b10b      	cbz	r3, 8008ea0 <_strtod_l+0x5d0>
 8008e9c:	4680      	mov	r8, r0
 8008e9e:	4689      	mov	r9, r1
 8008ea0:	9b04      	ldr	r3, [sp, #16]
 8008ea2:	b1bb      	cbz	r3, 8008ed4 <_strtod_l+0x604>
 8008ea4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008ea8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	4649      	mov	r1, r9
 8008eb0:	dd10      	ble.n	8008ed4 <_strtod_l+0x604>
 8008eb2:	2b1f      	cmp	r3, #31
 8008eb4:	f340 811e 	ble.w	80090f4 <_strtod_l+0x824>
 8008eb8:	2b34      	cmp	r3, #52	; 0x34
 8008eba:	bfde      	ittt	le
 8008ebc:	f04f 33ff 	movle.w	r3, #4294967295
 8008ec0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008ec4:	4093      	lslle	r3, r2
 8008ec6:	f04f 0800 	mov.w	r8, #0
 8008eca:	bfcc      	ite	gt
 8008ecc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008ed0:	ea03 0901 	andle.w	r9, r3, r1
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	4640      	mov	r0, r8
 8008eda:	4649      	mov	r1, r9
 8008edc:	f7f7 fdfc 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	d1a6      	bne.n	8008e32 <_strtod_l+0x562>
 8008ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ee6:	9300      	str	r3, [sp, #0]
 8008ee8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008eea:	4633      	mov	r3, r6
 8008eec:	465a      	mov	r2, fp
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f7ff f8cc 	bl	800808c <__s2b>
 8008ef4:	9009      	str	r0, [sp, #36]	; 0x24
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	f43f af2a 	beq.w	8008d50 <_strtod_l+0x480>
 8008efc:	9a08      	ldr	r2, [sp, #32]
 8008efe:	9b05      	ldr	r3, [sp, #20]
 8008f00:	2a00      	cmp	r2, #0
 8008f02:	eba3 0307 	sub.w	r3, r3, r7
 8008f06:	bfa8      	it	ge
 8008f08:	2300      	movge	r3, #0
 8008f0a:	930c      	str	r3, [sp, #48]	; 0x30
 8008f0c:	2500      	movs	r5, #0
 8008f0e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008f12:	9312      	str	r3, [sp, #72]	; 0x48
 8008f14:	46ab      	mov	fp, r5
 8008f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f18:	4620      	mov	r0, r4
 8008f1a:	6859      	ldr	r1, [r3, #4]
 8008f1c:	f7ff f80e 	bl	8007f3c <_Balloc>
 8008f20:	9005      	str	r0, [sp, #20]
 8008f22:	2800      	cmp	r0, #0
 8008f24:	f43f af18 	beq.w	8008d58 <_strtod_l+0x488>
 8008f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f2a:	691a      	ldr	r2, [r3, #16]
 8008f2c:	3202      	adds	r2, #2
 8008f2e:	f103 010c 	add.w	r1, r3, #12
 8008f32:	0092      	lsls	r2, r2, #2
 8008f34:	300c      	adds	r0, #12
 8008f36:	f000 ff61 	bl	8009dfc <memcpy>
 8008f3a:	ec49 8b10 	vmov	d0, r8, r9
 8008f3e:	aa18      	add	r2, sp, #96	; 0x60
 8008f40:	a917      	add	r1, sp, #92	; 0x5c
 8008f42:	4620      	mov	r0, r4
 8008f44:	f7ff fbd6 	bl	80086f4 <__d2b>
 8008f48:	ec49 8b18 	vmov	d8, r8, r9
 8008f4c:	9016      	str	r0, [sp, #88]	; 0x58
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	f43f af02 	beq.w	8008d58 <_strtod_l+0x488>
 8008f54:	2101      	movs	r1, #1
 8008f56:	4620      	mov	r0, r4
 8008f58:	f7ff f930 	bl	80081bc <__i2b>
 8008f5c:	4683      	mov	fp, r0
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	f43f aefa 	beq.w	8008d58 <_strtod_l+0x488>
 8008f64:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008f66:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008f68:	2e00      	cmp	r6, #0
 8008f6a:	bfab      	itete	ge
 8008f6c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008f6e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008f70:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008f72:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8008f76:	bfac      	ite	ge
 8008f78:	eb06 0a03 	addge.w	sl, r6, r3
 8008f7c:	1b9f      	sublt	r7, r3, r6
 8008f7e:	9b04      	ldr	r3, [sp, #16]
 8008f80:	1af6      	subs	r6, r6, r3
 8008f82:	4416      	add	r6, r2
 8008f84:	4ba0      	ldr	r3, [pc, #640]	; (8009208 <_strtod_l+0x938>)
 8008f86:	3e01      	subs	r6, #1
 8008f88:	429e      	cmp	r6, r3
 8008f8a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008f8e:	f280 80c4 	bge.w	800911a <_strtod_l+0x84a>
 8008f92:	1b9b      	subs	r3, r3, r6
 8008f94:	2b1f      	cmp	r3, #31
 8008f96:	eba2 0203 	sub.w	r2, r2, r3
 8008f9a:	f04f 0101 	mov.w	r1, #1
 8008f9e:	f300 80b0 	bgt.w	8009102 <_strtod_l+0x832>
 8008fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8008fa6:	930e      	str	r3, [sp, #56]	; 0x38
 8008fa8:	2300      	movs	r3, #0
 8008faa:	930d      	str	r3, [sp, #52]	; 0x34
 8008fac:	eb0a 0602 	add.w	r6, sl, r2
 8008fb0:	9b04      	ldr	r3, [sp, #16]
 8008fb2:	45b2      	cmp	sl, r6
 8008fb4:	4417      	add	r7, r2
 8008fb6:	441f      	add	r7, r3
 8008fb8:	4653      	mov	r3, sl
 8008fba:	bfa8      	it	ge
 8008fbc:	4633      	movge	r3, r6
 8008fbe:	42bb      	cmp	r3, r7
 8008fc0:	bfa8      	it	ge
 8008fc2:	463b      	movge	r3, r7
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	bfc2      	ittt	gt
 8008fc8:	1af6      	subgt	r6, r6, r3
 8008fca:	1aff      	subgt	r7, r7, r3
 8008fcc:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008fd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	dd17      	ble.n	8009006 <_strtod_l+0x736>
 8008fd6:	4659      	mov	r1, fp
 8008fd8:	461a      	mov	r2, r3
 8008fda:	4620      	mov	r0, r4
 8008fdc:	f7ff f9ae 	bl	800833c <__pow5mult>
 8008fe0:	4683      	mov	fp, r0
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	f43f aeb8 	beq.w	8008d58 <_strtod_l+0x488>
 8008fe8:	4601      	mov	r1, r0
 8008fea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008fec:	4620      	mov	r0, r4
 8008fee:	f7ff f8fb 	bl	80081e8 <__multiply>
 8008ff2:	900b      	str	r0, [sp, #44]	; 0x2c
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	f43f aeaf 	beq.w	8008d58 <_strtod_l+0x488>
 8008ffa:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	f7fe ffdd 	bl	8007fbc <_Bfree>
 8009002:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009004:	9316      	str	r3, [sp, #88]	; 0x58
 8009006:	2e00      	cmp	r6, #0
 8009008:	f300 808c 	bgt.w	8009124 <_strtod_l+0x854>
 800900c:	9b08      	ldr	r3, [sp, #32]
 800900e:	2b00      	cmp	r3, #0
 8009010:	dd08      	ble.n	8009024 <_strtod_l+0x754>
 8009012:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009014:	9905      	ldr	r1, [sp, #20]
 8009016:	4620      	mov	r0, r4
 8009018:	f7ff f990 	bl	800833c <__pow5mult>
 800901c:	9005      	str	r0, [sp, #20]
 800901e:	2800      	cmp	r0, #0
 8009020:	f43f ae9a 	beq.w	8008d58 <_strtod_l+0x488>
 8009024:	2f00      	cmp	r7, #0
 8009026:	dd08      	ble.n	800903a <_strtod_l+0x76a>
 8009028:	9905      	ldr	r1, [sp, #20]
 800902a:	463a      	mov	r2, r7
 800902c:	4620      	mov	r0, r4
 800902e:	f7ff f9df 	bl	80083f0 <__lshift>
 8009032:	9005      	str	r0, [sp, #20]
 8009034:	2800      	cmp	r0, #0
 8009036:	f43f ae8f 	beq.w	8008d58 <_strtod_l+0x488>
 800903a:	f1ba 0f00 	cmp.w	sl, #0
 800903e:	dd08      	ble.n	8009052 <_strtod_l+0x782>
 8009040:	4659      	mov	r1, fp
 8009042:	4652      	mov	r2, sl
 8009044:	4620      	mov	r0, r4
 8009046:	f7ff f9d3 	bl	80083f0 <__lshift>
 800904a:	4683      	mov	fp, r0
 800904c:	2800      	cmp	r0, #0
 800904e:	f43f ae83 	beq.w	8008d58 <_strtod_l+0x488>
 8009052:	9a05      	ldr	r2, [sp, #20]
 8009054:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009056:	4620      	mov	r0, r4
 8009058:	f7ff fa52 	bl	8008500 <__mdiff>
 800905c:	4605      	mov	r5, r0
 800905e:	2800      	cmp	r0, #0
 8009060:	f43f ae7a 	beq.w	8008d58 <_strtod_l+0x488>
 8009064:	68c3      	ldr	r3, [r0, #12]
 8009066:	930b      	str	r3, [sp, #44]	; 0x2c
 8009068:	2300      	movs	r3, #0
 800906a:	60c3      	str	r3, [r0, #12]
 800906c:	4659      	mov	r1, fp
 800906e:	f7ff fa2b 	bl	80084c8 <__mcmp>
 8009072:	2800      	cmp	r0, #0
 8009074:	da60      	bge.n	8009138 <_strtod_l+0x868>
 8009076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009078:	ea53 0308 	orrs.w	r3, r3, r8
 800907c:	f040 8084 	bne.w	8009188 <_strtod_l+0x8b8>
 8009080:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009084:	2b00      	cmp	r3, #0
 8009086:	d17f      	bne.n	8009188 <_strtod_l+0x8b8>
 8009088:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800908c:	0d1b      	lsrs	r3, r3, #20
 800908e:	051b      	lsls	r3, r3, #20
 8009090:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009094:	d978      	bls.n	8009188 <_strtod_l+0x8b8>
 8009096:	696b      	ldr	r3, [r5, #20]
 8009098:	b913      	cbnz	r3, 80090a0 <_strtod_l+0x7d0>
 800909a:	692b      	ldr	r3, [r5, #16]
 800909c:	2b01      	cmp	r3, #1
 800909e:	dd73      	ble.n	8009188 <_strtod_l+0x8b8>
 80090a0:	4629      	mov	r1, r5
 80090a2:	2201      	movs	r2, #1
 80090a4:	4620      	mov	r0, r4
 80090a6:	f7ff f9a3 	bl	80083f0 <__lshift>
 80090aa:	4659      	mov	r1, fp
 80090ac:	4605      	mov	r5, r0
 80090ae:	f7ff fa0b 	bl	80084c8 <__mcmp>
 80090b2:	2800      	cmp	r0, #0
 80090b4:	dd68      	ble.n	8009188 <_strtod_l+0x8b8>
 80090b6:	9904      	ldr	r1, [sp, #16]
 80090b8:	4a54      	ldr	r2, [pc, #336]	; (800920c <_strtod_l+0x93c>)
 80090ba:	464b      	mov	r3, r9
 80090bc:	2900      	cmp	r1, #0
 80090be:	f000 8084 	beq.w	80091ca <_strtod_l+0x8fa>
 80090c2:	ea02 0109 	and.w	r1, r2, r9
 80090c6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80090ca:	dc7e      	bgt.n	80091ca <_strtod_l+0x8fa>
 80090cc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80090d0:	f77f aeb3 	ble.w	8008e3a <_strtod_l+0x56a>
 80090d4:	4b4e      	ldr	r3, [pc, #312]	; (8009210 <_strtod_l+0x940>)
 80090d6:	4640      	mov	r0, r8
 80090d8:	4649      	mov	r1, r9
 80090da:	2200      	movs	r2, #0
 80090dc:	f7f7 fa94 	bl	8000608 <__aeabi_dmul>
 80090e0:	4b4a      	ldr	r3, [pc, #296]	; (800920c <_strtod_l+0x93c>)
 80090e2:	400b      	ands	r3, r1
 80090e4:	4680      	mov	r8, r0
 80090e6:	4689      	mov	r9, r1
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	f47f ae3f 	bne.w	8008d6c <_strtod_l+0x49c>
 80090ee:	2322      	movs	r3, #34	; 0x22
 80090f0:	6023      	str	r3, [r4, #0]
 80090f2:	e63b      	b.n	8008d6c <_strtod_l+0x49c>
 80090f4:	f04f 32ff 	mov.w	r2, #4294967295
 80090f8:	fa02 f303 	lsl.w	r3, r2, r3
 80090fc:	ea03 0808 	and.w	r8, r3, r8
 8009100:	e6e8      	b.n	8008ed4 <_strtod_l+0x604>
 8009102:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009106:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800910a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800910e:	36e2      	adds	r6, #226	; 0xe2
 8009110:	fa01 f306 	lsl.w	r3, r1, r6
 8009114:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009118:	e748      	b.n	8008fac <_strtod_l+0x6dc>
 800911a:	2100      	movs	r1, #0
 800911c:	2301      	movs	r3, #1
 800911e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8009122:	e743      	b.n	8008fac <_strtod_l+0x6dc>
 8009124:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009126:	4632      	mov	r2, r6
 8009128:	4620      	mov	r0, r4
 800912a:	f7ff f961 	bl	80083f0 <__lshift>
 800912e:	9016      	str	r0, [sp, #88]	; 0x58
 8009130:	2800      	cmp	r0, #0
 8009132:	f47f af6b 	bne.w	800900c <_strtod_l+0x73c>
 8009136:	e60f      	b.n	8008d58 <_strtod_l+0x488>
 8009138:	46ca      	mov	sl, r9
 800913a:	d171      	bne.n	8009220 <_strtod_l+0x950>
 800913c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800913e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009142:	b352      	cbz	r2, 800919a <_strtod_l+0x8ca>
 8009144:	4a33      	ldr	r2, [pc, #204]	; (8009214 <_strtod_l+0x944>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d12a      	bne.n	80091a0 <_strtod_l+0x8d0>
 800914a:	9b04      	ldr	r3, [sp, #16]
 800914c:	4641      	mov	r1, r8
 800914e:	b1fb      	cbz	r3, 8009190 <_strtod_l+0x8c0>
 8009150:	4b2e      	ldr	r3, [pc, #184]	; (800920c <_strtod_l+0x93c>)
 8009152:	ea09 0303 	and.w	r3, r9, r3
 8009156:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800915a:	f04f 32ff 	mov.w	r2, #4294967295
 800915e:	d81a      	bhi.n	8009196 <_strtod_l+0x8c6>
 8009160:	0d1b      	lsrs	r3, r3, #20
 8009162:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009166:	fa02 f303 	lsl.w	r3, r2, r3
 800916a:	4299      	cmp	r1, r3
 800916c:	d118      	bne.n	80091a0 <_strtod_l+0x8d0>
 800916e:	4b2a      	ldr	r3, [pc, #168]	; (8009218 <_strtod_l+0x948>)
 8009170:	459a      	cmp	sl, r3
 8009172:	d102      	bne.n	800917a <_strtod_l+0x8aa>
 8009174:	3101      	adds	r1, #1
 8009176:	f43f adef 	beq.w	8008d58 <_strtod_l+0x488>
 800917a:	4b24      	ldr	r3, [pc, #144]	; (800920c <_strtod_l+0x93c>)
 800917c:	ea0a 0303 	and.w	r3, sl, r3
 8009180:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009184:	f04f 0800 	mov.w	r8, #0
 8009188:	9b04      	ldr	r3, [sp, #16]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1a2      	bne.n	80090d4 <_strtod_l+0x804>
 800918e:	e5ed      	b.n	8008d6c <_strtod_l+0x49c>
 8009190:	f04f 33ff 	mov.w	r3, #4294967295
 8009194:	e7e9      	b.n	800916a <_strtod_l+0x89a>
 8009196:	4613      	mov	r3, r2
 8009198:	e7e7      	b.n	800916a <_strtod_l+0x89a>
 800919a:	ea53 0308 	orrs.w	r3, r3, r8
 800919e:	d08a      	beq.n	80090b6 <_strtod_l+0x7e6>
 80091a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091a2:	b1e3      	cbz	r3, 80091de <_strtod_l+0x90e>
 80091a4:	ea13 0f0a 	tst.w	r3, sl
 80091a8:	d0ee      	beq.n	8009188 <_strtod_l+0x8b8>
 80091aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091ac:	9a04      	ldr	r2, [sp, #16]
 80091ae:	4640      	mov	r0, r8
 80091b0:	4649      	mov	r1, r9
 80091b2:	b1c3      	cbz	r3, 80091e6 <_strtod_l+0x916>
 80091b4:	f7ff fb6f 	bl	8008896 <sulp>
 80091b8:	4602      	mov	r2, r0
 80091ba:	460b      	mov	r3, r1
 80091bc:	ec51 0b18 	vmov	r0, r1, d8
 80091c0:	f7f7 f86c 	bl	800029c <__adddf3>
 80091c4:	4680      	mov	r8, r0
 80091c6:	4689      	mov	r9, r1
 80091c8:	e7de      	b.n	8009188 <_strtod_l+0x8b8>
 80091ca:	4013      	ands	r3, r2
 80091cc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80091d0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80091d4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80091d8:	f04f 38ff 	mov.w	r8, #4294967295
 80091dc:	e7d4      	b.n	8009188 <_strtod_l+0x8b8>
 80091de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091e0:	ea13 0f08 	tst.w	r3, r8
 80091e4:	e7e0      	b.n	80091a8 <_strtod_l+0x8d8>
 80091e6:	f7ff fb56 	bl	8008896 <sulp>
 80091ea:	4602      	mov	r2, r0
 80091ec:	460b      	mov	r3, r1
 80091ee:	ec51 0b18 	vmov	r0, r1, d8
 80091f2:	f7f7 f851 	bl	8000298 <__aeabi_dsub>
 80091f6:	2200      	movs	r2, #0
 80091f8:	2300      	movs	r3, #0
 80091fa:	4680      	mov	r8, r0
 80091fc:	4689      	mov	r9, r1
 80091fe:	f7f7 fc6b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009202:	2800      	cmp	r0, #0
 8009204:	d0c0      	beq.n	8009188 <_strtod_l+0x8b8>
 8009206:	e618      	b.n	8008e3a <_strtod_l+0x56a>
 8009208:	fffffc02 	.word	0xfffffc02
 800920c:	7ff00000 	.word	0x7ff00000
 8009210:	39500000 	.word	0x39500000
 8009214:	000fffff 	.word	0x000fffff
 8009218:	7fefffff 	.word	0x7fefffff
 800921c:	0800b270 	.word	0x0800b270
 8009220:	4659      	mov	r1, fp
 8009222:	4628      	mov	r0, r5
 8009224:	f7ff fac0 	bl	80087a8 <__ratio>
 8009228:	ec57 6b10 	vmov	r6, r7, d0
 800922c:	ee10 0a10 	vmov	r0, s0
 8009230:	2200      	movs	r2, #0
 8009232:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009236:	4639      	mov	r1, r7
 8009238:	f7f7 fc62 	bl	8000b00 <__aeabi_dcmple>
 800923c:	2800      	cmp	r0, #0
 800923e:	d071      	beq.n	8009324 <_strtod_l+0xa54>
 8009240:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009242:	2b00      	cmp	r3, #0
 8009244:	d17c      	bne.n	8009340 <_strtod_l+0xa70>
 8009246:	f1b8 0f00 	cmp.w	r8, #0
 800924a:	d15a      	bne.n	8009302 <_strtod_l+0xa32>
 800924c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009250:	2b00      	cmp	r3, #0
 8009252:	d15d      	bne.n	8009310 <_strtod_l+0xa40>
 8009254:	4b90      	ldr	r3, [pc, #576]	; (8009498 <_strtod_l+0xbc8>)
 8009256:	2200      	movs	r2, #0
 8009258:	4630      	mov	r0, r6
 800925a:	4639      	mov	r1, r7
 800925c:	f7f7 fc46 	bl	8000aec <__aeabi_dcmplt>
 8009260:	2800      	cmp	r0, #0
 8009262:	d15c      	bne.n	800931e <_strtod_l+0xa4e>
 8009264:	4630      	mov	r0, r6
 8009266:	4639      	mov	r1, r7
 8009268:	4b8c      	ldr	r3, [pc, #560]	; (800949c <_strtod_l+0xbcc>)
 800926a:	2200      	movs	r2, #0
 800926c:	f7f7 f9cc 	bl	8000608 <__aeabi_dmul>
 8009270:	4606      	mov	r6, r0
 8009272:	460f      	mov	r7, r1
 8009274:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009278:	9606      	str	r6, [sp, #24]
 800927a:	9307      	str	r3, [sp, #28]
 800927c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009280:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009284:	4b86      	ldr	r3, [pc, #536]	; (80094a0 <_strtod_l+0xbd0>)
 8009286:	ea0a 0303 	and.w	r3, sl, r3
 800928a:	930d      	str	r3, [sp, #52]	; 0x34
 800928c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800928e:	4b85      	ldr	r3, [pc, #532]	; (80094a4 <_strtod_l+0xbd4>)
 8009290:	429a      	cmp	r2, r3
 8009292:	f040 8090 	bne.w	80093b6 <_strtod_l+0xae6>
 8009296:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800929a:	ec49 8b10 	vmov	d0, r8, r9
 800929e:	f7ff f9b9 	bl	8008614 <__ulp>
 80092a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092a6:	ec51 0b10 	vmov	r0, r1, d0
 80092aa:	f7f7 f9ad 	bl	8000608 <__aeabi_dmul>
 80092ae:	4642      	mov	r2, r8
 80092b0:	464b      	mov	r3, r9
 80092b2:	f7f6 fff3 	bl	800029c <__adddf3>
 80092b6:	460b      	mov	r3, r1
 80092b8:	4979      	ldr	r1, [pc, #484]	; (80094a0 <_strtod_l+0xbd0>)
 80092ba:	4a7b      	ldr	r2, [pc, #492]	; (80094a8 <_strtod_l+0xbd8>)
 80092bc:	4019      	ands	r1, r3
 80092be:	4291      	cmp	r1, r2
 80092c0:	4680      	mov	r8, r0
 80092c2:	d944      	bls.n	800934e <_strtod_l+0xa7e>
 80092c4:	ee18 2a90 	vmov	r2, s17
 80092c8:	4b78      	ldr	r3, [pc, #480]	; (80094ac <_strtod_l+0xbdc>)
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d104      	bne.n	80092d8 <_strtod_l+0xa08>
 80092ce:	ee18 3a10 	vmov	r3, s16
 80092d2:	3301      	adds	r3, #1
 80092d4:	f43f ad40 	beq.w	8008d58 <_strtod_l+0x488>
 80092d8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80094ac <_strtod_l+0xbdc>
 80092dc:	f04f 38ff 	mov.w	r8, #4294967295
 80092e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80092e2:	4620      	mov	r0, r4
 80092e4:	f7fe fe6a 	bl	8007fbc <_Bfree>
 80092e8:	9905      	ldr	r1, [sp, #20]
 80092ea:	4620      	mov	r0, r4
 80092ec:	f7fe fe66 	bl	8007fbc <_Bfree>
 80092f0:	4659      	mov	r1, fp
 80092f2:	4620      	mov	r0, r4
 80092f4:	f7fe fe62 	bl	8007fbc <_Bfree>
 80092f8:	4629      	mov	r1, r5
 80092fa:	4620      	mov	r0, r4
 80092fc:	f7fe fe5e 	bl	8007fbc <_Bfree>
 8009300:	e609      	b.n	8008f16 <_strtod_l+0x646>
 8009302:	f1b8 0f01 	cmp.w	r8, #1
 8009306:	d103      	bne.n	8009310 <_strtod_l+0xa40>
 8009308:	f1b9 0f00 	cmp.w	r9, #0
 800930c:	f43f ad95 	beq.w	8008e3a <_strtod_l+0x56a>
 8009310:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009468 <_strtod_l+0xb98>
 8009314:	4f60      	ldr	r7, [pc, #384]	; (8009498 <_strtod_l+0xbc8>)
 8009316:	ed8d 7b06 	vstr	d7, [sp, #24]
 800931a:	2600      	movs	r6, #0
 800931c:	e7ae      	b.n	800927c <_strtod_l+0x9ac>
 800931e:	4f5f      	ldr	r7, [pc, #380]	; (800949c <_strtod_l+0xbcc>)
 8009320:	2600      	movs	r6, #0
 8009322:	e7a7      	b.n	8009274 <_strtod_l+0x9a4>
 8009324:	4b5d      	ldr	r3, [pc, #372]	; (800949c <_strtod_l+0xbcc>)
 8009326:	4630      	mov	r0, r6
 8009328:	4639      	mov	r1, r7
 800932a:	2200      	movs	r2, #0
 800932c:	f7f7 f96c 	bl	8000608 <__aeabi_dmul>
 8009330:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009332:	4606      	mov	r6, r0
 8009334:	460f      	mov	r7, r1
 8009336:	2b00      	cmp	r3, #0
 8009338:	d09c      	beq.n	8009274 <_strtod_l+0x9a4>
 800933a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800933e:	e79d      	b.n	800927c <_strtod_l+0x9ac>
 8009340:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009470 <_strtod_l+0xba0>
 8009344:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009348:	ec57 6b17 	vmov	r6, r7, d7
 800934c:	e796      	b.n	800927c <_strtod_l+0x9ac>
 800934e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009352:	9b04      	ldr	r3, [sp, #16]
 8009354:	46ca      	mov	sl, r9
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1c2      	bne.n	80092e0 <_strtod_l+0xa10>
 800935a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800935e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009360:	0d1b      	lsrs	r3, r3, #20
 8009362:	051b      	lsls	r3, r3, #20
 8009364:	429a      	cmp	r2, r3
 8009366:	d1bb      	bne.n	80092e0 <_strtod_l+0xa10>
 8009368:	4630      	mov	r0, r6
 800936a:	4639      	mov	r1, r7
 800936c:	f7f7 fcac 	bl	8000cc8 <__aeabi_d2lz>
 8009370:	f7f7 f91c 	bl	80005ac <__aeabi_l2d>
 8009374:	4602      	mov	r2, r0
 8009376:	460b      	mov	r3, r1
 8009378:	4630      	mov	r0, r6
 800937a:	4639      	mov	r1, r7
 800937c:	f7f6 ff8c 	bl	8000298 <__aeabi_dsub>
 8009380:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009382:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009386:	ea43 0308 	orr.w	r3, r3, r8
 800938a:	4313      	orrs	r3, r2
 800938c:	4606      	mov	r6, r0
 800938e:	460f      	mov	r7, r1
 8009390:	d054      	beq.n	800943c <_strtod_l+0xb6c>
 8009392:	a339      	add	r3, pc, #228	; (adr r3, 8009478 <_strtod_l+0xba8>)
 8009394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009398:	f7f7 fba8 	bl	8000aec <__aeabi_dcmplt>
 800939c:	2800      	cmp	r0, #0
 800939e:	f47f ace5 	bne.w	8008d6c <_strtod_l+0x49c>
 80093a2:	a337      	add	r3, pc, #220	; (adr r3, 8009480 <_strtod_l+0xbb0>)
 80093a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a8:	4630      	mov	r0, r6
 80093aa:	4639      	mov	r1, r7
 80093ac:	f7f7 fbbc 	bl	8000b28 <__aeabi_dcmpgt>
 80093b0:	2800      	cmp	r0, #0
 80093b2:	d095      	beq.n	80092e0 <_strtod_l+0xa10>
 80093b4:	e4da      	b.n	8008d6c <_strtod_l+0x49c>
 80093b6:	9b04      	ldr	r3, [sp, #16]
 80093b8:	b333      	cbz	r3, 8009408 <_strtod_l+0xb38>
 80093ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80093c0:	d822      	bhi.n	8009408 <_strtod_l+0xb38>
 80093c2:	a331      	add	r3, pc, #196	; (adr r3, 8009488 <_strtod_l+0xbb8>)
 80093c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c8:	4630      	mov	r0, r6
 80093ca:	4639      	mov	r1, r7
 80093cc:	f7f7 fb98 	bl	8000b00 <__aeabi_dcmple>
 80093d0:	b1a0      	cbz	r0, 80093fc <_strtod_l+0xb2c>
 80093d2:	4639      	mov	r1, r7
 80093d4:	4630      	mov	r0, r6
 80093d6:	f7f7 fbef 	bl	8000bb8 <__aeabi_d2uiz>
 80093da:	2801      	cmp	r0, #1
 80093dc:	bf38      	it	cc
 80093de:	2001      	movcc	r0, #1
 80093e0:	f7f7 f898 	bl	8000514 <__aeabi_ui2d>
 80093e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093e6:	4606      	mov	r6, r0
 80093e8:	460f      	mov	r7, r1
 80093ea:	bb23      	cbnz	r3, 8009436 <_strtod_l+0xb66>
 80093ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093f0:	9010      	str	r0, [sp, #64]	; 0x40
 80093f2:	9311      	str	r3, [sp, #68]	; 0x44
 80093f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80093f8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80093fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009400:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009404:	1a9b      	subs	r3, r3, r2
 8009406:	930f      	str	r3, [sp, #60]	; 0x3c
 8009408:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800940c:	eeb0 0a48 	vmov.f32	s0, s16
 8009410:	eef0 0a68 	vmov.f32	s1, s17
 8009414:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009418:	f7ff f8fc 	bl	8008614 <__ulp>
 800941c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009420:	ec53 2b10 	vmov	r2, r3, d0
 8009424:	f7f7 f8f0 	bl	8000608 <__aeabi_dmul>
 8009428:	ec53 2b18 	vmov	r2, r3, d8
 800942c:	f7f6 ff36 	bl	800029c <__adddf3>
 8009430:	4680      	mov	r8, r0
 8009432:	4689      	mov	r9, r1
 8009434:	e78d      	b.n	8009352 <_strtod_l+0xa82>
 8009436:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800943a:	e7db      	b.n	80093f4 <_strtod_l+0xb24>
 800943c:	a314      	add	r3, pc, #80	; (adr r3, 8009490 <_strtod_l+0xbc0>)
 800943e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009442:	f7f7 fb53 	bl	8000aec <__aeabi_dcmplt>
 8009446:	e7b3      	b.n	80093b0 <_strtod_l+0xae0>
 8009448:	2300      	movs	r3, #0
 800944a:	930a      	str	r3, [sp, #40]	; 0x28
 800944c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800944e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009450:	6013      	str	r3, [r2, #0]
 8009452:	f7ff ba7c 	b.w	800894e <_strtod_l+0x7e>
 8009456:	2a65      	cmp	r2, #101	; 0x65
 8009458:	f43f ab75 	beq.w	8008b46 <_strtod_l+0x276>
 800945c:	2a45      	cmp	r2, #69	; 0x45
 800945e:	f43f ab72 	beq.w	8008b46 <_strtod_l+0x276>
 8009462:	2301      	movs	r3, #1
 8009464:	f7ff bbaa 	b.w	8008bbc <_strtod_l+0x2ec>
 8009468:	00000000 	.word	0x00000000
 800946c:	bff00000 	.word	0xbff00000
 8009470:	00000000 	.word	0x00000000
 8009474:	3ff00000 	.word	0x3ff00000
 8009478:	94a03595 	.word	0x94a03595
 800947c:	3fdfffff 	.word	0x3fdfffff
 8009480:	35afe535 	.word	0x35afe535
 8009484:	3fe00000 	.word	0x3fe00000
 8009488:	ffc00000 	.word	0xffc00000
 800948c:	41dfffff 	.word	0x41dfffff
 8009490:	94a03595 	.word	0x94a03595
 8009494:	3fcfffff 	.word	0x3fcfffff
 8009498:	3ff00000 	.word	0x3ff00000
 800949c:	3fe00000 	.word	0x3fe00000
 80094a0:	7ff00000 	.word	0x7ff00000
 80094a4:	7fe00000 	.word	0x7fe00000
 80094a8:	7c9fffff 	.word	0x7c9fffff
 80094ac:	7fefffff 	.word	0x7fefffff

080094b0 <_strtod_r>:
 80094b0:	4b01      	ldr	r3, [pc, #4]	; (80094b8 <_strtod_r+0x8>)
 80094b2:	f7ff ba0d 	b.w	80088d0 <_strtod_l>
 80094b6:	bf00      	nop
 80094b8:	20000090 	.word	0x20000090

080094bc <_strtol_l.constprop.0>:
 80094bc:	2b01      	cmp	r3, #1
 80094be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094c2:	d001      	beq.n	80094c8 <_strtol_l.constprop.0+0xc>
 80094c4:	2b24      	cmp	r3, #36	; 0x24
 80094c6:	d906      	bls.n	80094d6 <_strtol_l.constprop.0+0x1a>
 80094c8:	f7fd fd8a 	bl	8006fe0 <__errno>
 80094cc:	2316      	movs	r3, #22
 80094ce:	6003      	str	r3, [r0, #0]
 80094d0:	2000      	movs	r0, #0
 80094d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094d6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80095bc <_strtol_l.constprop.0+0x100>
 80094da:	460d      	mov	r5, r1
 80094dc:	462e      	mov	r6, r5
 80094de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094e2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80094e6:	f017 0708 	ands.w	r7, r7, #8
 80094ea:	d1f7      	bne.n	80094dc <_strtol_l.constprop.0+0x20>
 80094ec:	2c2d      	cmp	r4, #45	; 0x2d
 80094ee:	d132      	bne.n	8009556 <_strtol_l.constprop.0+0x9a>
 80094f0:	782c      	ldrb	r4, [r5, #0]
 80094f2:	2701      	movs	r7, #1
 80094f4:	1cb5      	adds	r5, r6, #2
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d05b      	beq.n	80095b2 <_strtol_l.constprop.0+0xf6>
 80094fa:	2b10      	cmp	r3, #16
 80094fc:	d109      	bne.n	8009512 <_strtol_l.constprop.0+0x56>
 80094fe:	2c30      	cmp	r4, #48	; 0x30
 8009500:	d107      	bne.n	8009512 <_strtol_l.constprop.0+0x56>
 8009502:	782c      	ldrb	r4, [r5, #0]
 8009504:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009508:	2c58      	cmp	r4, #88	; 0x58
 800950a:	d14d      	bne.n	80095a8 <_strtol_l.constprop.0+0xec>
 800950c:	786c      	ldrb	r4, [r5, #1]
 800950e:	2310      	movs	r3, #16
 8009510:	3502      	adds	r5, #2
 8009512:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009516:	f108 38ff 	add.w	r8, r8, #4294967295
 800951a:	f04f 0e00 	mov.w	lr, #0
 800951e:	fbb8 f9f3 	udiv	r9, r8, r3
 8009522:	4676      	mov	r6, lr
 8009524:	fb03 8a19 	mls	sl, r3, r9, r8
 8009528:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800952c:	f1bc 0f09 	cmp.w	ip, #9
 8009530:	d816      	bhi.n	8009560 <_strtol_l.constprop.0+0xa4>
 8009532:	4664      	mov	r4, ip
 8009534:	42a3      	cmp	r3, r4
 8009536:	dd24      	ble.n	8009582 <_strtol_l.constprop.0+0xc6>
 8009538:	f1be 3fff 	cmp.w	lr, #4294967295
 800953c:	d008      	beq.n	8009550 <_strtol_l.constprop.0+0x94>
 800953e:	45b1      	cmp	r9, r6
 8009540:	d31c      	bcc.n	800957c <_strtol_l.constprop.0+0xc0>
 8009542:	d101      	bne.n	8009548 <_strtol_l.constprop.0+0x8c>
 8009544:	45a2      	cmp	sl, r4
 8009546:	db19      	blt.n	800957c <_strtol_l.constprop.0+0xc0>
 8009548:	fb06 4603 	mla	r6, r6, r3, r4
 800954c:	f04f 0e01 	mov.w	lr, #1
 8009550:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009554:	e7e8      	b.n	8009528 <_strtol_l.constprop.0+0x6c>
 8009556:	2c2b      	cmp	r4, #43	; 0x2b
 8009558:	bf04      	itt	eq
 800955a:	782c      	ldrbeq	r4, [r5, #0]
 800955c:	1cb5      	addeq	r5, r6, #2
 800955e:	e7ca      	b.n	80094f6 <_strtol_l.constprop.0+0x3a>
 8009560:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009564:	f1bc 0f19 	cmp.w	ip, #25
 8009568:	d801      	bhi.n	800956e <_strtol_l.constprop.0+0xb2>
 800956a:	3c37      	subs	r4, #55	; 0x37
 800956c:	e7e2      	b.n	8009534 <_strtol_l.constprop.0+0x78>
 800956e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009572:	f1bc 0f19 	cmp.w	ip, #25
 8009576:	d804      	bhi.n	8009582 <_strtol_l.constprop.0+0xc6>
 8009578:	3c57      	subs	r4, #87	; 0x57
 800957a:	e7db      	b.n	8009534 <_strtol_l.constprop.0+0x78>
 800957c:	f04f 3eff 	mov.w	lr, #4294967295
 8009580:	e7e6      	b.n	8009550 <_strtol_l.constprop.0+0x94>
 8009582:	f1be 3fff 	cmp.w	lr, #4294967295
 8009586:	d105      	bne.n	8009594 <_strtol_l.constprop.0+0xd8>
 8009588:	2322      	movs	r3, #34	; 0x22
 800958a:	6003      	str	r3, [r0, #0]
 800958c:	4646      	mov	r6, r8
 800958e:	b942      	cbnz	r2, 80095a2 <_strtol_l.constprop.0+0xe6>
 8009590:	4630      	mov	r0, r6
 8009592:	e79e      	b.n	80094d2 <_strtol_l.constprop.0+0x16>
 8009594:	b107      	cbz	r7, 8009598 <_strtol_l.constprop.0+0xdc>
 8009596:	4276      	negs	r6, r6
 8009598:	2a00      	cmp	r2, #0
 800959a:	d0f9      	beq.n	8009590 <_strtol_l.constprop.0+0xd4>
 800959c:	f1be 0f00 	cmp.w	lr, #0
 80095a0:	d000      	beq.n	80095a4 <_strtol_l.constprop.0+0xe8>
 80095a2:	1e69      	subs	r1, r5, #1
 80095a4:	6011      	str	r1, [r2, #0]
 80095a6:	e7f3      	b.n	8009590 <_strtol_l.constprop.0+0xd4>
 80095a8:	2430      	movs	r4, #48	; 0x30
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d1b1      	bne.n	8009512 <_strtol_l.constprop.0+0x56>
 80095ae:	2308      	movs	r3, #8
 80095b0:	e7af      	b.n	8009512 <_strtol_l.constprop.0+0x56>
 80095b2:	2c30      	cmp	r4, #48	; 0x30
 80095b4:	d0a5      	beq.n	8009502 <_strtol_l.constprop.0+0x46>
 80095b6:	230a      	movs	r3, #10
 80095b8:	e7ab      	b.n	8009512 <_strtol_l.constprop.0+0x56>
 80095ba:	bf00      	nop
 80095bc:	0800b299 	.word	0x0800b299

080095c0 <_strtol_r>:
 80095c0:	f7ff bf7c 	b.w	80094bc <_strtol_l.constprop.0>

080095c4 <__ssputs_r>:
 80095c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095c8:	688e      	ldr	r6, [r1, #8]
 80095ca:	461f      	mov	r7, r3
 80095cc:	42be      	cmp	r6, r7
 80095ce:	680b      	ldr	r3, [r1, #0]
 80095d0:	4682      	mov	sl, r0
 80095d2:	460c      	mov	r4, r1
 80095d4:	4690      	mov	r8, r2
 80095d6:	d82c      	bhi.n	8009632 <__ssputs_r+0x6e>
 80095d8:	898a      	ldrh	r2, [r1, #12]
 80095da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80095de:	d026      	beq.n	800962e <__ssputs_r+0x6a>
 80095e0:	6965      	ldr	r5, [r4, #20]
 80095e2:	6909      	ldr	r1, [r1, #16]
 80095e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095e8:	eba3 0901 	sub.w	r9, r3, r1
 80095ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095f0:	1c7b      	adds	r3, r7, #1
 80095f2:	444b      	add	r3, r9
 80095f4:	106d      	asrs	r5, r5, #1
 80095f6:	429d      	cmp	r5, r3
 80095f8:	bf38      	it	cc
 80095fa:	461d      	movcc	r5, r3
 80095fc:	0553      	lsls	r3, r2, #21
 80095fe:	d527      	bpl.n	8009650 <__ssputs_r+0x8c>
 8009600:	4629      	mov	r1, r5
 8009602:	f7fe fc0f 	bl	8007e24 <_malloc_r>
 8009606:	4606      	mov	r6, r0
 8009608:	b360      	cbz	r0, 8009664 <__ssputs_r+0xa0>
 800960a:	6921      	ldr	r1, [r4, #16]
 800960c:	464a      	mov	r2, r9
 800960e:	f000 fbf5 	bl	8009dfc <memcpy>
 8009612:	89a3      	ldrh	r3, [r4, #12]
 8009614:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800961c:	81a3      	strh	r3, [r4, #12]
 800961e:	6126      	str	r6, [r4, #16]
 8009620:	6165      	str	r5, [r4, #20]
 8009622:	444e      	add	r6, r9
 8009624:	eba5 0509 	sub.w	r5, r5, r9
 8009628:	6026      	str	r6, [r4, #0]
 800962a:	60a5      	str	r5, [r4, #8]
 800962c:	463e      	mov	r6, r7
 800962e:	42be      	cmp	r6, r7
 8009630:	d900      	bls.n	8009634 <__ssputs_r+0x70>
 8009632:	463e      	mov	r6, r7
 8009634:	6820      	ldr	r0, [r4, #0]
 8009636:	4632      	mov	r2, r6
 8009638:	4641      	mov	r1, r8
 800963a:	f000 fba3 	bl	8009d84 <memmove>
 800963e:	68a3      	ldr	r3, [r4, #8]
 8009640:	1b9b      	subs	r3, r3, r6
 8009642:	60a3      	str	r3, [r4, #8]
 8009644:	6823      	ldr	r3, [r4, #0]
 8009646:	4433      	add	r3, r6
 8009648:	6023      	str	r3, [r4, #0]
 800964a:	2000      	movs	r0, #0
 800964c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009650:	462a      	mov	r2, r5
 8009652:	f000 ff86 	bl	800a562 <_realloc_r>
 8009656:	4606      	mov	r6, r0
 8009658:	2800      	cmp	r0, #0
 800965a:	d1e0      	bne.n	800961e <__ssputs_r+0x5a>
 800965c:	6921      	ldr	r1, [r4, #16]
 800965e:	4650      	mov	r0, sl
 8009660:	f7fe fb6c 	bl	8007d3c <_free_r>
 8009664:	230c      	movs	r3, #12
 8009666:	f8ca 3000 	str.w	r3, [sl]
 800966a:	89a3      	ldrh	r3, [r4, #12]
 800966c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009670:	81a3      	strh	r3, [r4, #12]
 8009672:	f04f 30ff 	mov.w	r0, #4294967295
 8009676:	e7e9      	b.n	800964c <__ssputs_r+0x88>

08009678 <_svfiprintf_r>:
 8009678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800967c:	4698      	mov	r8, r3
 800967e:	898b      	ldrh	r3, [r1, #12]
 8009680:	061b      	lsls	r3, r3, #24
 8009682:	b09d      	sub	sp, #116	; 0x74
 8009684:	4607      	mov	r7, r0
 8009686:	460d      	mov	r5, r1
 8009688:	4614      	mov	r4, r2
 800968a:	d50e      	bpl.n	80096aa <_svfiprintf_r+0x32>
 800968c:	690b      	ldr	r3, [r1, #16]
 800968e:	b963      	cbnz	r3, 80096aa <_svfiprintf_r+0x32>
 8009690:	2140      	movs	r1, #64	; 0x40
 8009692:	f7fe fbc7 	bl	8007e24 <_malloc_r>
 8009696:	6028      	str	r0, [r5, #0]
 8009698:	6128      	str	r0, [r5, #16]
 800969a:	b920      	cbnz	r0, 80096a6 <_svfiprintf_r+0x2e>
 800969c:	230c      	movs	r3, #12
 800969e:	603b      	str	r3, [r7, #0]
 80096a0:	f04f 30ff 	mov.w	r0, #4294967295
 80096a4:	e0d0      	b.n	8009848 <_svfiprintf_r+0x1d0>
 80096a6:	2340      	movs	r3, #64	; 0x40
 80096a8:	616b      	str	r3, [r5, #20]
 80096aa:	2300      	movs	r3, #0
 80096ac:	9309      	str	r3, [sp, #36]	; 0x24
 80096ae:	2320      	movs	r3, #32
 80096b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80096b8:	2330      	movs	r3, #48	; 0x30
 80096ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009860 <_svfiprintf_r+0x1e8>
 80096be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096c2:	f04f 0901 	mov.w	r9, #1
 80096c6:	4623      	mov	r3, r4
 80096c8:	469a      	mov	sl, r3
 80096ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096ce:	b10a      	cbz	r2, 80096d4 <_svfiprintf_r+0x5c>
 80096d0:	2a25      	cmp	r2, #37	; 0x25
 80096d2:	d1f9      	bne.n	80096c8 <_svfiprintf_r+0x50>
 80096d4:	ebba 0b04 	subs.w	fp, sl, r4
 80096d8:	d00b      	beq.n	80096f2 <_svfiprintf_r+0x7a>
 80096da:	465b      	mov	r3, fp
 80096dc:	4622      	mov	r2, r4
 80096de:	4629      	mov	r1, r5
 80096e0:	4638      	mov	r0, r7
 80096e2:	f7ff ff6f 	bl	80095c4 <__ssputs_r>
 80096e6:	3001      	adds	r0, #1
 80096e8:	f000 80a9 	beq.w	800983e <_svfiprintf_r+0x1c6>
 80096ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096ee:	445a      	add	r2, fp
 80096f0:	9209      	str	r2, [sp, #36]	; 0x24
 80096f2:	f89a 3000 	ldrb.w	r3, [sl]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	f000 80a1 	beq.w	800983e <_svfiprintf_r+0x1c6>
 80096fc:	2300      	movs	r3, #0
 80096fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009702:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009706:	f10a 0a01 	add.w	sl, sl, #1
 800970a:	9304      	str	r3, [sp, #16]
 800970c:	9307      	str	r3, [sp, #28]
 800970e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009712:	931a      	str	r3, [sp, #104]	; 0x68
 8009714:	4654      	mov	r4, sl
 8009716:	2205      	movs	r2, #5
 8009718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800971c:	4850      	ldr	r0, [pc, #320]	; (8009860 <_svfiprintf_r+0x1e8>)
 800971e:	f7f6 fd5f 	bl	80001e0 <memchr>
 8009722:	9a04      	ldr	r2, [sp, #16]
 8009724:	b9d8      	cbnz	r0, 800975e <_svfiprintf_r+0xe6>
 8009726:	06d0      	lsls	r0, r2, #27
 8009728:	bf44      	itt	mi
 800972a:	2320      	movmi	r3, #32
 800972c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009730:	0711      	lsls	r1, r2, #28
 8009732:	bf44      	itt	mi
 8009734:	232b      	movmi	r3, #43	; 0x2b
 8009736:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800973a:	f89a 3000 	ldrb.w	r3, [sl]
 800973e:	2b2a      	cmp	r3, #42	; 0x2a
 8009740:	d015      	beq.n	800976e <_svfiprintf_r+0xf6>
 8009742:	9a07      	ldr	r2, [sp, #28]
 8009744:	4654      	mov	r4, sl
 8009746:	2000      	movs	r0, #0
 8009748:	f04f 0c0a 	mov.w	ip, #10
 800974c:	4621      	mov	r1, r4
 800974e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009752:	3b30      	subs	r3, #48	; 0x30
 8009754:	2b09      	cmp	r3, #9
 8009756:	d94d      	bls.n	80097f4 <_svfiprintf_r+0x17c>
 8009758:	b1b0      	cbz	r0, 8009788 <_svfiprintf_r+0x110>
 800975a:	9207      	str	r2, [sp, #28]
 800975c:	e014      	b.n	8009788 <_svfiprintf_r+0x110>
 800975e:	eba0 0308 	sub.w	r3, r0, r8
 8009762:	fa09 f303 	lsl.w	r3, r9, r3
 8009766:	4313      	orrs	r3, r2
 8009768:	9304      	str	r3, [sp, #16]
 800976a:	46a2      	mov	sl, r4
 800976c:	e7d2      	b.n	8009714 <_svfiprintf_r+0x9c>
 800976e:	9b03      	ldr	r3, [sp, #12]
 8009770:	1d19      	adds	r1, r3, #4
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	9103      	str	r1, [sp, #12]
 8009776:	2b00      	cmp	r3, #0
 8009778:	bfbb      	ittet	lt
 800977a:	425b      	neglt	r3, r3
 800977c:	f042 0202 	orrlt.w	r2, r2, #2
 8009780:	9307      	strge	r3, [sp, #28]
 8009782:	9307      	strlt	r3, [sp, #28]
 8009784:	bfb8      	it	lt
 8009786:	9204      	strlt	r2, [sp, #16]
 8009788:	7823      	ldrb	r3, [r4, #0]
 800978a:	2b2e      	cmp	r3, #46	; 0x2e
 800978c:	d10c      	bne.n	80097a8 <_svfiprintf_r+0x130>
 800978e:	7863      	ldrb	r3, [r4, #1]
 8009790:	2b2a      	cmp	r3, #42	; 0x2a
 8009792:	d134      	bne.n	80097fe <_svfiprintf_r+0x186>
 8009794:	9b03      	ldr	r3, [sp, #12]
 8009796:	1d1a      	adds	r2, r3, #4
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	9203      	str	r2, [sp, #12]
 800979c:	2b00      	cmp	r3, #0
 800979e:	bfb8      	it	lt
 80097a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80097a4:	3402      	adds	r4, #2
 80097a6:	9305      	str	r3, [sp, #20]
 80097a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009870 <_svfiprintf_r+0x1f8>
 80097ac:	7821      	ldrb	r1, [r4, #0]
 80097ae:	2203      	movs	r2, #3
 80097b0:	4650      	mov	r0, sl
 80097b2:	f7f6 fd15 	bl	80001e0 <memchr>
 80097b6:	b138      	cbz	r0, 80097c8 <_svfiprintf_r+0x150>
 80097b8:	9b04      	ldr	r3, [sp, #16]
 80097ba:	eba0 000a 	sub.w	r0, r0, sl
 80097be:	2240      	movs	r2, #64	; 0x40
 80097c0:	4082      	lsls	r2, r0
 80097c2:	4313      	orrs	r3, r2
 80097c4:	3401      	adds	r4, #1
 80097c6:	9304      	str	r3, [sp, #16]
 80097c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097cc:	4825      	ldr	r0, [pc, #148]	; (8009864 <_svfiprintf_r+0x1ec>)
 80097ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097d2:	2206      	movs	r2, #6
 80097d4:	f7f6 fd04 	bl	80001e0 <memchr>
 80097d8:	2800      	cmp	r0, #0
 80097da:	d038      	beq.n	800984e <_svfiprintf_r+0x1d6>
 80097dc:	4b22      	ldr	r3, [pc, #136]	; (8009868 <_svfiprintf_r+0x1f0>)
 80097de:	bb1b      	cbnz	r3, 8009828 <_svfiprintf_r+0x1b0>
 80097e0:	9b03      	ldr	r3, [sp, #12]
 80097e2:	3307      	adds	r3, #7
 80097e4:	f023 0307 	bic.w	r3, r3, #7
 80097e8:	3308      	adds	r3, #8
 80097ea:	9303      	str	r3, [sp, #12]
 80097ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097ee:	4433      	add	r3, r6
 80097f0:	9309      	str	r3, [sp, #36]	; 0x24
 80097f2:	e768      	b.n	80096c6 <_svfiprintf_r+0x4e>
 80097f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80097f8:	460c      	mov	r4, r1
 80097fa:	2001      	movs	r0, #1
 80097fc:	e7a6      	b.n	800974c <_svfiprintf_r+0xd4>
 80097fe:	2300      	movs	r3, #0
 8009800:	3401      	adds	r4, #1
 8009802:	9305      	str	r3, [sp, #20]
 8009804:	4619      	mov	r1, r3
 8009806:	f04f 0c0a 	mov.w	ip, #10
 800980a:	4620      	mov	r0, r4
 800980c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009810:	3a30      	subs	r2, #48	; 0x30
 8009812:	2a09      	cmp	r2, #9
 8009814:	d903      	bls.n	800981e <_svfiprintf_r+0x1a6>
 8009816:	2b00      	cmp	r3, #0
 8009818:	d0c6      	beq.n	80097a8 <_svfiprintf_r+0x130>
 800981a:	9105      	str	r1, [sp, #20]
 800981c:	e7c4      	b.n	80097a8 <_svfiprintf_r+0x130>
 800981e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009822:	4604      	mov	r4, r0
 8009824:	2301      	movs	r3, #1
 8009826:	e7f0      	b.n	800980a <_svfiprintf_r+0x192>
 8009828:	ab03      	add	r3, sp, #12
 800982a:	9300      	str	r3, [sp, #0]
 800982c:	462a      	mov	r2, r5
 800982e:	4b0f      	ldr	r3, [pc, #60]	; (800986c <_svfiprintf_r+0x1f4>)
 8009830:	a904      	add	r1, sp, #16
 8009832:	4638      	mov	r0, r7
 8009834:	f7fc fc86 	bl	8006144 <_printf_float>
 8009838:	1c42      	adds	r2, r0, #1
 800983a:	4606      	mov	r6, r0
 800983c:	d1d6      	bne.n	80097ec <_svfiprintf_r+0x174>
 800983e:	89ab      	ldrh	r3, [r5, #12]
 8009840:	065b      	lsls	r3, r3, #25
 8009842:	f53f af2d 	bmi.w	80096a0 <_svfiprintf_r+0x28>
 8009846:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009848:	b01d      	add	sp, #116	; 0x74
 800984a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800984e:	ab03      	add	r3, sp, #12
 8009850:	9300      	str	r3, [sp, #0]
 8009852:	462a      	mov	r2, r5
 8009854:	4b05      	ldr	r3, [pc, #20]	; (800986c <_svfiprintf_r+0x1f4>)
 8009856:	a904      	add	r1, sp, #16
 8009858:	4638      	mov	r0, r7
 800985a:	f7fc ff17 	bl	800668c <_printf_i>
 800985e:	e7eb      	b.n	8009838 <_svfiprintf_r+0x1c0>
 8009860:	0800b399 	.word	0x0800b399
 8009864:	0800b3a3 	.word	0x0800b3a3
 8009868:	08006145 	.word	0x08006145
 800986c:	080095c5 	.word	0x080095c5
 8009870:	0800b39f 	.word	0x0800b39f

08009874 <__sfputc_r>:
 8009874:	6893      	ldr	r3, [r2, #8]
 8009876:	3b01      	subs	r3, #1
 8009878:	2b00      	cmp	r3, #0
 800987a:	b410      	push	{r4}
 800987c:	6093      	str	r3, [r2, #8]
 800987e:	da08      	bge.n	8009892 <__sfputc_r+0x1e>
 8009880:	6994      	ldr	r4, [r2, #24]
 8009882:	42a3      	cmp	r3, r4
 8009884:	db01      	blt.n	800988a <__sfputc_r+0x16>
 8009886:	290a      	cmp	r1, #10
 8009888:	d103      	bne.n	8009892 <__sfputc_r+0x1e>
 800988a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800988e:	f000 b9e3 	b.w	8009c58 <__swbuf_r>
 8009892:	6813      	ldr	r3, [r2, #0]
 8009894:	1c58      	adds	r0, r3, #1
 8009896:	6010      	str	r0, [r2, #0]
 8009898:	7019      	strb	r1, [r3, #0]
 800989a:	4608      	mov	r0, r1
 800989c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098a0:	4770      	bx	lr

080098a2 <__sfputs_r>:
 80098a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098a4:	4606      	mov	r6, r0
 80098a6:	460f      	mov	r7, r1
 80098a8:	4614      	mov	r4, r2
 80098aa:	18d5      	adds	r5, r2, r3
 80098ac:	42ac      	cmp	r4, r5
 80098ae:	d101      	bne.n	80098b4 <__sfputs_r+0x12>
 80098b0:	2000      	movs	r0, #0
 80098b2:	e007      	b.n	80098c4 <__sfputs_r+0x22>
 80098b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098b8:	463a      	mov	r2, r7
 80098ba:	4630      	mov	r0, r6
 80098bc:	f7ff ffda 	bl	8009874 <__sfputc_r>
 80098c0:	1c43      	adds	r3, r0, #1
 80098c2:	d1f3      	bne.n	80098ac <__sfputs_r+0xa>
 80098c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080098c8 <_vfiprintf_r>:
 80098c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098cc:	460d      	mov	r5, r1
 80098ce:	b09d      	sub	sp, #116	; 0x74
 80098d0:	4614      	mov	r4, r2
 80098d2:	4698      	mov	r8, r3
 80098d4:	4606      	mov	r6, r0
 80098d6:	b118      	cbz	r0, 80098e0 <_vfiprintf_r+0x18>
 80098d8:	6a03      	ldr	r3, [r0, #32]
 80098da:	b90b      	cbnz	r3, 80098e0 <_vfiprintf_r+0x18>
 80098dc:	f7fd fa82 	bl	8006de4 <__sinit>
 80098e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098e2:	07d9      	lsls	r1, r3, #31
 80098e4:	d405      	bmi.n	80098f2 <_vfiprintf_r+0x2a>
 80098e6:	89ab      	ldrh	r3, [r5, #12]
 80098e8:	059a      	lsls	r2, r3, #22
 80098ea:	d402      	bmi.n	80098f2 <_vfiprintf_r+0x2a>
 80098ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098ee:	f7fd fba1 	bl	8007034 <__retarget_lock_acquire_recursive>
 80098f2:	89ab      	ldrh	r3, [r5, #12]
 80098f4:	071b      	lsls	r3, r3, #28
 80098f6:	d501      	bpl.n	80098fc <_vfiprintf_r+0x34>
 80098f8:	692b      	ldr	r3, [r5, #16]
 80098fa:	b99b      	cbnz	r3, 8009924 <_vfiprintf_r+0x5c>
 80098fc:	4629      	mov	r1, r5
 80098fe:	4630      	mov	r0, r6
 8009900:	f000 f9e8 	bl	8009cd4 <__swsetup_r>
 8009904:	b170      	cbz	r0, 8009924 <_vfiprintf_r+0x5c>
 8009906:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009908:	07dc      	lsls	r4, r3, #31
 800990a:	d504      	bpl.n	8009916 <_vfiprintf_r+0x4e>
 800990c:	f04f 30ff 	mov.w	r0, #4294967295
 8009910:	b01d      	add	sp, #116	; 0x74
 8009912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009916:	89ab      	ldrh	r3, [r5, #12]
 8009918:	0598      	lsls	r0, r3, #22
 800991a:	d4f7      	bmi.n	800990c <_vfiprintf_r+0x44>
 800991c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800991e:	f7fd fb8a 	bl	8007036 <__retarget_lock_release_recursive>
 8009922:	e7f3      	b.n	800990c <_vfiprintf_r+0x44>
 8009924:	2300      	movs	r3, #0
 8009926:	9309      	str	r3, [sp, #36]	; 0x24
 8009928:	2320      	movs	r3, #32
 800992a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800992e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009932:	2330      	movs	r3, #48	; 0x30
 8009934:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009ae8 <_vfiprintf_r+0x220>
 8009938:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800993c:	f04f 0901 	mov.w	r9, #1
 8009940:	4623      	mov	r3, r4
 8009942:	469a      	mov	sl, r3
 8009944:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009948:	b10a      	cbz	r2, 800994e <_vfiprintf_r+0x86>
 800994a:	2a25      	cmp	r2, #37	; 0x25
 800994c:	d1f9      	bne.n	8009942 <_vfiprintf_r+0x7a>
 800994e:	ebba 0b04 	subs.w	fp, sl, r4
 8009952:	d00b      	beq.n	800996c <_vfiprintf_r+0xa4>
 8009954:	465b      	mov	r3, fp
 8009956:	4622      	mov	r2, r4
 8009958:	4629      	mov	r1, r5
 800995a:	4630      	mov	r0, r6
 800995c:	f7ff ffa1 	bl	80098a2 <__sfputs_r>
 8009960:	3001      	adds	r0, #1
 8009962:	f000 80a9 	beq.w	8009ab8 <_vfiprintf_r+0x1f0>
 8009966:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009968:	445a      	add	r2, fp
 800996a:	9209      	str	r2, [sp, #36]	; 0x24
 800996c:	f89a 3000 	ldrb.w	r3, [sl]
 8009970:	2b00      	cmp	r3, #0
 8009972:	f000 80a1 	beq.w	8009ab8 <_vfiprintf_r+0x1f0>
 8009976:	2300      	movs	r3, #0
 8009978:	f04f 32ff 	mov.w	r2, #4294967295
 800997c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009980:	f10a 0a01 	add.w	sl, sl, #1
 8009984:	9304      	str	r3, [sp, #16]
 8009986:	9307      	str	r3, [sp, #28]
 8009988:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800998c:	931a      	str	r3, [sp, #104]	; 0x68
 800998e:	4654      	mov	r4, sl
 8009990:	2205      	movs	r2, #5
 8009992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009996:	4854      	ldr	r0, [pc, #336]	; (8009ae8 <_vfiprintf_r+0x220>)
 8009998:	f7f6 fc22 	bl	80001e0 <memchr>
 800999c:	9a04      	ldr	r2, [sp, #16]
 800999e:	b9d8      	cbnz	r0, 80099d8 <_vfiprintf_r+0x110>
 80099a0:	06d1      	lsls	r1, r2, #27
 80099a2:	bf44      	itt	mi
 80099a4:	2320      	movmi	r3, #32
 80099a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099aa:	0713      	lsls	r3, r2, #28
 80099ac:	bf44      	itt	mi
 80099ae:	232b      	movmi	r3, #43	; 0x2b
 80099b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099b4:	f89a 3000 	ldrb.w	r3, [sl]
 80099b8:	2b2a      	cmp	r3, #42	; 0x2a
 80099ba:	d015      	beq.n	80099e8 <_vfiprintf_r+0x120>
 80099bc:	9a07      	ldr	r2, [sp, #28]
 80099be:	4654      	mov	r4, sl
 80099c0:	2000      	movs	r0, #0
 80099c2:	f04f 0c0a 	mov.w	ip, #10
 80099c6:	4621      	mov	r1, r4
 80099c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099cc:	3b30      	subs	r3, #48	; 0x30
 80099ce:	2b09      	cmp	r3, #9
 80099d0:	d94d      	bls.n	8009a6e <_vfiprintf_r+0x1a6>
 80099d2:	b1b0      	cbz	r0, 8009a02 <_vfiprintf_r+0x13a>
 80099d4:	9207      	str	r2, [sp, #28]
 80099d6:	e014      	b.n	8009a02 <_vfiprintf_r+0x13a>
 80099d8:	eba0 0308 	sub.w	r3, r0, r8
 80099dc:	fa09 f303 	lsl.w	r3, r9, r3
 80099e0:	4313      	orrs	r3, r2
 80099e2:	9304      	str	r3, [sp, #16]
 80099e4:	46a2      	mov	sl, r4
 80099e6:	e7d2      	b.n	800998e <_vfiprintf_r+0xc6>
 80099e8:	9b03      	ldr	r3, [sp, #12]
 80099ea:	1d19      	adds	r1, r3, #4
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	9103      	str	r1, [sp, #12]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	bfbb      	ittet	lt
 80099f4:	425b      	neglt	r3, r3
 80099f6:	f042 0202 	orrlt.w	r2, r2, #2
 80099fa:	9307      	strge	r3, [sp, #28]
 80099fc:	9307      	strlt	r3, [sp, #28]
 80099fe:	bfb8      	it	lt
 8009a00:	9204      	strlt	r2, [sp, #16]
 8009a02:	7823      	ldrb	r3, [r4, #0]
 8009a04:	2b2e      	cmp	r3, #46	; 0x2e
 8009a06:	d10c      	bne.n	8009a22 <_vfiprintf_r+0x15a>
 8009a08:	7863      	ldrb	r3, [r4, #1]
 8009a0a:	2b2a      	cmp	r3, #42	; 0x2a
 8009a0c:	d134      	bne.n	8009a78 <_vfiprintf_r+0x1b0>
 8009a0e:	9b03      	ldr	r3, [sp, #12]
 8009a10:	1d1a      	adds	r2, r3, #4
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	9203      	str	r2, [sp, #12]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	bfb8      	it	lt
 8009a1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a1e:	3402      	adds	r4, #2
 8009a20:	9305      	str	r3, [sp, #20]
 8009a22:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009af8 <_vfiprintf_r+0x230>
 8009a26:	7821      	ldrb	r1, [r4, #0]
 8009a28:	2203      	movs	r2, #3
 8009a2a:	4650      	mov	r0, sl
 8009a2c:	f7f6 fbd8 	bl	80001e0 <memchr>
 8009a30:	b138      	cbz	r0, 8009a42 <_vfiprintf_r+0x17a>
 8009a32:	9b04      	ldr	r3, [sp, #16]
 8009a34:	eba0 000a 	sub.w	r0, r0, sl
 8009a38:	2240      	movs	r2, #64	; 0x40
 8009a3a:	4082      	lsls	r2, r0
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	3401      	adds	r4, #1
 8009a40:	9304      	str	r3, [sp, #16]
 8009a42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a46:	4829      	ldr	r0, [pc, #164]	; (8009aec <_vfiprintf_r+0x224>)
 8009a48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a4c:	2206      	movs	r2, #6
 8009a4e:	f7f6 fbc7 	bl	80001e0 <memchr>
 8009a52:	2800      	cmp	r0, #0
 8009a54:	d03f      	beq.n	8009ad6 <_vfiprintf_r+0x20e>
 8009a56:	4b26      	ldr	r3, [pc, #152]	; (8009af0 <_vfiprintf_r+0x228>)
 8009a58:	bb1b      	cbnz	r3, 8009aa2 <_vfiprintf_r+0x1da>
 8009a5a:	9b03      	ldr	r3, [sp, #12]
 8009a5c:	3307      	adds	r3, #7
 8009a5e:	f023 0307 	bic.w	r3, r3, #7
 8009a62:	3308      	adds	r3, #8
 8009a64:	9303      	str	r3, [sp, #12]
 8009a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a68:	443b      	add	r3, r7
 8009a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8009a6c:	e768      	b.n	8009940 <_vfiprintf_r+0x78>
 8009a6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a72:	460c      	mov	r4, r1
 8009a74:	2001      	movs	r0, #1
 8009a76:	e7a6      	b.n	80099c6 <_vfiprintf_r+0xfe>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	3401      	adds	r4, #1
 8009a7c:	9305      	str	r3, [sp, #20]
 8009a7e:	4619      	mov	r1, r3
 8009a80:	f04f 0c0a 	mov.w	ip, #10
 8009a84:	4620      	mov	r0, r4
 8009a86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a8a:	3a30      	subs	r2, #48	; 0x30
 8009a8c:	2a09      	cmp	r2, #9
 8009a8e:	d903      	bls.n	8009a98 <_vfiprintf_r+0x1d0>
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d0c6      	beq.n	8009a22 <_vfiprintf_r+0x15a>
 8009a94:	9105      	str	r1, [sp, #20]
 8009a96:	e7c4      	b.n	8009a22 <_vfiprintf_r+0x15a>
 8009a98:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a9c:	4604      	mov	r4, r0
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e7f0      	b.n	8009a84 <_vfiprintf_r+0x1bc>
 8009aa2:	ab03      	add	r3, sp, #12
 8009aa4:	9300      	str	r3, [sp, #0]
 8009aa6:	462a      	mov	r2, r5
 8009aa8:	4b12      	ldr	r3, [pc, #72]	; (8009af4 <_vfiprintf_r+0x22c>)
 8009aaa:	a904      	add	r1, sp, #16
 8009aac:	4630      	mov	r0, r6
 8009aae:	f7fc fb49 	bl	8006144 <_printf_float>
 8009ab2:	4607      	mov	r7, r0
 8009ab4:	1c78      	adds	r0, r7, #1
 8009ab6:	d1d6      	bne.n	8009a66 <_vfiprintf_r+0x19e>
 8009ab8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009aba:	07d9      	lsls	r1, r3, #31
 8009abc:	d405      	bmi.n	8009aca <_vfiprintf_r+0x202>
 8009abe:	89ab      	ldrh	r3, [r5, #12]
 8009ac0:	059a      	lsls	r2, r3, #22
 8009ac2:	d402      	bmi.n	8009aca <_vfiprintf_r+0x202>
 8009ac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ac6:	f7fd fab6 	bl	8007036 <__retarget_lock_release_recursive>
 8009aca:	89ab      	ldrh	r3, [r5, #12]
 8009acc:	065b      	lsls	r3, r3, #25
 8009ace:	f53f af1d 	bmi.w	800990c <_vfiprintf_r+0x44>
 8009ad2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ad4:	e71c      	b.n	8009910 <_vfiprintf_r+0x48>
 8009ad6:	ab03      	add	r3, sp, #12
 8009ad8:	9300      	str	r3, [sp, #0]
 8009ada:	462a      	mov	r2, r5
 8009adc:	4b05      	ldr	r3, [pc, #20]	; (8009af4 <_vfiprintf_r+0x22c>)
 8009ade:	a904      	add	r1, sp, #16
 8009ae0:	4630      	mov	r0, r6
 8009ae2:	f7fc fdd3 	bl	800668c <_printf_i>
 8009ae6:	e7e4      	b.n	8009ab2 <_vfiprintf_r+0x1ea>
 8009ae8:	0800b399 	.word	0x0800b399
 8009aec:	0800b3a3 	.word	0x0800b3a3
 8009af0:	08006145 	.word	0x08006145
 8009af4:	080098a3 	.word	0x080098a3
 8009af8:	0800b39f 	.word	0x0800b39f

08009afc <__sflush_r>:
 8009afc:	898a      	ldrh	r2, [r1, #12]
 8009afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b02:	4605      	mov	r5, r0
 8009b04:	0710      	lsls	r0, r2, #28
 8009b06:	460c      	mov	r4, r1
 8009b08:	d458      	bmi.n	8009bbc <__sflush_r+0xc0>
 8009b0a:	684b      	ldr	r3, [r1, #4]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	dc05      	bgt.n	8009b1c <__sflush_r+0x20>
 8009b10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	dc02      	bgt.n	8009b1c <__sflush_r+0x20>
 8009b16:	2000      	movs	r0, #0
 8009b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b1e:	2e00      	cmp	r6, #0
 8009b20:	d0f9      	beq.n	8009b16 <__sflush_r+0x1a>
 8009b22:	2300      	movs	r3, #0
 8009b24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b28:	682f      	ldr	r7, [r5, #0]
 8009b2a:	6a21      	ldr	r1, [r4, #32]
 8009b2c:	602b      	str	r3, [r5, #0]
 8009b2e:	d032      	beq.n	8009b96 <__sflush_r+0x9a>
 8009b30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b32:	89a3      	ldrh	r3, [r4, #12]
 8009b34:	075a      	lsls	r2, r3, #29
 8009b36:	d505      	bpl.n	8009b44 <__sflush_r+0x48>
 8009b38:	6863      	ldr	r3, [r4, #4]
 8009b3a:	1ac0      	subs	r0, r0, r3
 8009b3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b3e:	b10b      	cbz	r3, 8009b44 <__sflush_r+0x48>
 8009b40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b42:	1ac0      	subs	r0, r0, r3
 8009b44:	2300      	movs	r3, #0
 8009b46:	4602      	mov	r2, r0
 8009b48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b4a:	6a21      	ldr	r1, [r4, #32]
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	47b0      	blx	r6
 8009b50:	1c43      	adds	r3, r0, #1
 8009b52:	89a3      	ldrh	r3, [r4, #12]
 8009b54:	d106      	bne.n	8009b64 <__sflush_r+0x68>
 8009b56:	6829      	ldr	r1, [r5, #0]
 8009b58:	291d      	cmp	r1, #29
 8009b5a:	d82b      	bhi.n	8009bb4 <__sflush_r+0xb8>
 8009b5c:	4a29      	ldr	r2, [pc, #164]	; (8009c04 <__sflush_r+0x108>)
 8009b5e:	410a      	asrs	r2, r1
 8009b60:	07d6      	lsls	r6, r2, #31
 8009b62:	d427      	bmi.n	8009bb4 <__sflush_r+0xb8>
 8009b64:	2200      	movs	r2, #0
 8009b66:	6062      	str	r2, [r4, #4]
 8009b68:	04d9      	lsls	r1, r3, #19
 8009b6a:	6922      	ldr	r2, [r4, #16]
 8009b6c:	6022      	str	r2, [r4, #0]
 8009b6e:	d504      	bpl.n	8009b7a <__sflush_r+0x7e>
 8009b70:	1c42      	adds	r2, r0, #1
 8009b72:	d101      	bne.n	8009b78 <__sflush_r+0x7c>
 8009b74:	682b      	ldr	r3, [r5, #0]
 8009b76:	b903      	cbnz	r3, 8009b7a <__sflush_r+0x7e>
 8009b78:	6560      	str	r0, [r4, #84]	; 0x54
 8009b7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b7c:	602f      	str	r7, [r5, #0]
 8009b7e:	2900      	cmp	r1, #0
 8009b80:	d0c9      	beq.n	8009b16 <__sflush_r+0x1a>
 8009b82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b86:	4299      	cmp	r1, r3
 8009b88:	d002      	beq.n	8009b90 <__sflush_r+0x94>
 8009b8a:	4628      	mov	r0, r5
 8009b8c:	f7fe f8d6 	bl	8007d3c <_free_r>
 8009b90:	2000      	movs	r0, #0
 8009b92:	6360      	str	r0, [r4, #52]	; 0x34
 8009b94:	e7c0      	b.n	8009b18 <__sflush_r+0x1c>
 8009b96:	2301      	movs	r3, #1
 8009b98:	4628      	mov	r0, r5
 8009b9a:	47b0      	blx	r6
 8009b9c:	1c41      	adds	r1, r0, #1
 8009b9e:	d1c8      	bne.n	8009b32 <__sflush_r+0x36>
 8009ba0:	682b      	ldr	r3, [r5, #0]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d0c5      	beq.n	8009b32 <__sflush_r+0x36>
 8009ba6:	2b1d      	cmp	r3, #29
 8009ba8:	d001      	beq.n	8009bae <__sflush_r+0xb2>
 8009baa:	2b16      	cmp	r3, #22
 8009bac:	d101      	bne.n	8009bb2 <__sflush_r+0xb6>
 8009bae:	602f      	str	r7, [r5, #0]
 8009bb0:	e7b1      	b.n	8009b16 <__sflush_r+0x1a>
 8009bb2:	89a3      	ldrh	r3, [r4, #12]
 8009bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bb8:	81a3      	strh	r3, [r4, #12]
 8009bba:	e7ad      	b.n	8009b18 <__sflush_r+0x1c>
 8009bbc:	690f      	ldr	r7, [r1, #16]
 8009bbe:	2f00      	cmp	r7, #0
 8009bc0:	d0a9      	beq.n	8009b16 <__sflush_r+0x1a>
 8009bc2:	0793      	lsls	r3, r2, #30
 8009bc4:	680e      	ldr	r6, [r1, #0]
 8009bc6:	bf08      	it	eq
 8009bc8:	694b      	ldreq	r3, [r1, #20]
 8009bca:	600f      	str	r7, [r1, #0]
 8009bcc:	bf18      	it	ne
 8009bce:	2300      	movne	r3, #0
 8009bd0:	eba6 0807 	sub.w	r8, r6, r7
 8009bd4:	608b      	str	r3, [r1, #8]
 8009bd6:	f1b8 0f00 	cmp.w	r8, #0
 8009bda:	dd9c      	ble.n	8009b16 <__sflush_r+0x1a>
 8009bdc:	6a21      	ldr	r1, [r4, #32]
 8009bde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009be0:	4643      	mov	r3, r8
 8009be2:	463a      	mov	r2, r7
 8009be4:	4628      	mov	r0, r5
 8009be6:	47b0      	blx	r6
 8009be8:	2800      	cmp	r0, #0
 8009bea:	dc06      	bgt.n	8009bfa <__sflush_r+0xfe>
 8009bec:	89a3      	ldrh	r3, [r4, #12]
 8009bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bf2:	81a3      	strh	r3, [r4, #12]
 8009bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf8:	e78e      	b.n	8009b18 <__sflush_r+0x1c>
 8009bfa:	4407      	add	r7, r0
 8009bfc:	eba8 0800 	sub.w	r8, r8, r0
 8009c00:	e7e9      	b.n	8009bd6 <__sflush_r+0xda>
 8009c02:	bf00      	nop
 8009c04:	dfbffffe 	.word	0xdfbffffe

08009c08 <_fflush_r>:
 8009c08:	b538      	push	{r3, r4, r5, lr}
 8009c0a:	690b      	ldr	r3, [r1, #16]
 8009c0c:	4605      	mov	r5, r0
 8009c0e:	460c      	mov	r4, r1
 8009c10:	b913      	cbnz	r3, 8009c18 <_fflush_r+0x10>
 8009c12:	2500      	movs	r5, #0
 8009c14:	4628      	mov	r0, r5
 8009c16:	bd38      	pop	{r3, r4, r5, pc}
 8009c18:	b118      	cbz	r0, 8009c22 <_fflush_r+0x1a>
 8009c1a:	6a03      	ldr	r3, [r0, #32]
 8009c1c:	b90b      	cbnz	r3, 8009c22 <_fflush_r+0x1a>
 8009c1e:	f7fd f8e1 	bl	8006de4 <__sinit>
 8009c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d0f3      	beq.n	8009c12 <_fflush_r+0xa>
 8009c2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c2c:	07d0      	lsls	r0, r2, #31
 8009c2e:	d404      	bmi.n	8009c3a <_fflush_r+0x32>
 8009c30:	0599      	lsls	r1, r3, #22
 8009c32:	d402      	bmi.n	8009c3a <_fflush_r+0x32>
 8009c34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c36:	f7fd f9fd 	bl	8007034 <__retarget_lock_acquire_recursive>
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	4621      	mov	r1, r4
 8009c3e:	f7ff ff5d 	bl	8009afc <__sflush_r>
 8009c42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c44:	07da      	lsls	r2, r3, #31
 8009c46:	4605      	mov	r5, r0
 8009c48:	d4e4      	bmi.n	8009c14 <_fflush_r+0xc>
 8009c4a:	89a3      	ldrh	r3, [r4, #12]
 8009c4c:	059b      	lsls	r3, r3, #22
 8009c4e:	d4e1      	bmi.n	8009c14 <_fflush_r+0xc>
 8009c50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c52:	f7fd f9f0 	bl	8007036 <__retarget_lock_release_recursive>
 8009c56:	e7dd      	b.n	8009c14 <_fflush_r+0xc>

08009c58 <__swbuf_r>:
 8009c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c5a:	460e      	mov	r6, r1
 8009c5c:	4614      	mov	r4, r2
 8009c5e:	4605      	mov	r5, r0
 8009c60:	b118      	cbz	r0, 8009c6a <__swbuf_r+0x12>
 8009c62:	6a03      	ldr	r3, [r0, #32]
 8009c64:	b90b      	cbnz	r3, 8009c6a <__swbuf_r+0x12>
 8009c66:	f7fd f8bd 	bl	8006de4 <__sinit>
 8009c6a:	69a3      	ldr	r3, [r4, #24]
 8009c6c:	60a3      	str	r3, [r4, #8]
 8009c6e:	89a3      	ldrh	r3, [r4, #12]
 8009c70:	071a      	lsls	r2, r3, #28
 8009c72:	d525      	bpl.n	8009cc0 <__swbuf_r+0x68>
 8009c74:	6923      	ldr	r3, [r4, #16]
 8009c76:	b31b      	cbz	r3, 8009cc0 <__swbuf_r+0x68>
 8009c78:	6823      	ldr	r3, [r4, #0]
 8009c7a:	6922      	ldr	r2, [r4, #16]
 8009c7c:	1a98      	subs	r0, r3, r2
 8009c7e:	6963      	ldr	r3, [r4, #20]
 8009c80:	b2f6      	uxtb	r6, r6
 8009c82:	4283      	cmp	r3, r0
 8009c84:	4637      	mov	r7, r6
 8009c86:	dc04      	bgt.n	8009c92 <__swbuf_r+0x3a>
 8009c88:	4621      	mov	r1, r4
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	f7ff ffbc 	bl	8009c08 <_fflush_r>
 8009c90:	b9e0      	cbnz	r0, 8009ccc <__swbuf_r+0x74>
 8009c92:	68a3      	ldr	r3, [r4, #8]
 8009c94:	3b01      	subs	r3, #1
 8009c96:	60a3      	str	r3, [r4, #8]
 8009c98:	6823      	ldr	r3, [r4, #0]
 8009c9a:	1c5a      	adds	r2, r3, #1
 8009c9c:	6022      	str	r2, [r4, #0]
 8009c9e:	701e      	strb	r6, [r3, #0]
 8009ca0:	6962      	ldr	r2, [r4, #20]
 8009ca2:	1c43      	adds	r3, r0, #1
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d004      	beq.n	8009cb2 <__swbuf_r+0x5a>
 8009ca8:	89a3      	ldrh	r3, [r4, #12]
 8009caa:	07db      	lsls	r3, r3, #31
 8009cac:	d506      	bpl.n	8009cbc <__swbuf_r+0x64>
 8009cae:	2e0a      	cmp	r6, #10
 8009cb0:	d104      	bne.n	8009cbc <__swbuf_r+0x64>
 8009cb2:	4621      	mov	r1, r4
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	f7ff ffa7 	bl	8009c08 <_fflush_r>
 8009cba:	b938      	cbnz	r0, 8009ccc <__swbuf_r+0x74>
 8009cbc:	4638      	mov	r0, r7
 8009cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cc0:	4621      	mov	r1, r4
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	f000 f806 	bl	8009cd4 <__swsetup_r>
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	d0d5      	beq.n	8009c78 <__swbuf_r+0x20>
 8009ccc:	f04f 37ff 	mov.w	r7, #4294967295
 8009cd0:	e7f4      	b.n	8009cbc <__swbuf_r+0x64>
	...

08009cd4 <__swsetup_r>:
 8009cd4:	b538      	push	{r3, r4, r5, lr}
 8009cd6:	4b2a      	ldr	r3, [pc, #168]	; (8009d80 <__swsetup_r+0xac>)
 8009cd8:	4605      	mov	r5, r0
 8009cda:	6818      	ldr	r0, [r3, #0]
 8009cdc:	460c      	mov	r4, r1
 8009cde:	b118      	cbz	r0, 8009ce8 <__swsetup_r+0x14>
 8009ce0:	6a03      	ldr	r3, [r0, #32]
 8009ce2:	b90b      	cbnz	r3, 8009ce8 <__swsetup_r+0x14>
 8009ce4:	f7fd f87e 	bl	8006de4 <__sinit>
 8009ce8:	89a3      	ldrh	r3, [r4, #12]
 8009cea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cee:	0718      	lsls	r0, r3, #28
 8009cf0:	d422      	bmi.n	8009d38 <__swsetup_r+0x64>
 8009cf2:	06d9      	lsls	r1, r3, #27
 8009cf4:	d407      	bmi.n	8009d06 <__swsetup_r+0x32>
 8009cf6:	2309      	movs	r3, #9
 8009cf8:	602b      	str	r3, [r5, #0]
 8009cfa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009cfe:	81a3      	strh	r3, [r4, #12]
 8009d00:	f04f 30ff 	mov.w	r0, #4294967295
 8009d04:	e034      	b.n	8009d70 <__swsetup_r+0x9c>
 8009d06:	0758      	lsls	r0, r3, #29
 8009d08:	d512      	bpl.n	8009d30 <__swsetup_r+0x5c>
 8009d0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d0c:	b141      	cbz	r1, 8009d20 <__swsetup_r+0x4c>
 8009d0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d12:	4299      	cmp	r1, r3
 8009d14:	d002      	beq.n	8009d1c <__swsetup_r+0x48>
 8009d16:	4628      	mov	r0, r5
 8009d18:	f7fe f810 	bl	8007d3c <_free_r>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	6363      	str	r3, [r4, #52]	; 0x34
 8009d20:	89a3      	ldrh	r3, [r4, #12]
 8009d22:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d26:	81a3      	strh	r3, [r4, #12]
 8009d28:	2300      	movs	r3, #0
 8009d2a:	6063      	str	r3, [r4, #4]
 8009d2c:	6923      	ldr	r3, [r4, #16]
 8009d2e:	6023      	str	r3, [r4, #0]
 8009d30:	89a3      	ldrh	r3, [r4, #12]
 8009d32:	f043 0308 	orr.w	r3, r3, #8
 8009d36:	81a3      	strh	r3, [r4, #12]
 8009d38:	6923      	ldr	r3, [r4, #16]
 8009d3a:	b94b      	cbnz	r3, 8009d50 <__swsetup_r+0x7c>
 8009d3c:	89a3      	ldrh	r3, [r4, #12]
 8009d3e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d46:	d003      	beq.n	8009d50 <__swsetup_r+0x7c>
 8009d48:	4621      	mov	r1, r4
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	f000 fc7e 	bl	800a64c <__smakebuf_r>
 8009d50:	89a0      	ldrh	r0, [r4, #12]
 8009d52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d56:	f010 0301 	ands.w	r3, r0, #1
 8009d5a:	d00a      	beq.n	8009d72 <__swsetup_r+0x9e>
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	60a3      	str	r3, [r4, #8]
 8009d60:	6963      	ldr	r3, [r4, #20]
 8009d62:	425b      	negs	r3, r3
 8009d64:	61a3      	str	r3, [r4, #24]
 8009d66:	6923      	ldr	r3, [r4, #16]
 8009d68:	b943      	cbnz	r3, 8009d7c <__swsetup_r+0xa8>
 8009d6a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d6e:	d1c4      	bne.n	8009cfa <__swsetup_r+0x26>
 8009d70:	bd38      	pop	{r3, r4, r5, pc}
 8009d72:	0781      	lsls	r1, r0, #30
 8009d74:	bf58      	it	pl
 8009d76:	6963      	ldrpl	r3, [r4, #20]
 8009d78:	60a3      	str	r3, [r4, #8]
 8009d7a:	e7f4      	b.n	8009d66 <__swsetup_r+0x92>
 8009d7c:	2000      	movs	r0, #0
 8009d7e:	e7f7      	b.n	8009d70 <__swsetup_r+0x9c>
 8009d80:	2000008c 	.word	0x2000008c

08009d84 <memmove>:
 8009d84:	4288      	cmp	r0, r1
 8009d86:	b510      	push	{r4, lr}
 8009d88:	eb01 0402 	add.w	r4, r1, r2
 8009d8c:	d902      	bls.n	8009d94 <memmove+0x10>
 8009d8e:	4284      	cmp	r4, r0
 8009d90:	4623      	mov	r3, r4
 8009d92:	d807      	bhi.n	8009da4 <memmove+0x20>
 8009d94:	1e43      	subs	r3, r0, #1
 8009d96:	42a1      	cmp	r1, r4
 8009d98:	d008      	beq.n	8009dac <memmove+0x28>
 8009d9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009da2:	e7f8      	b.n	8009d96 <memmove+0x12>
 8009da4:	4402      	add	r2, r0
 8009da6:	4601      	mov	r1, r0
 8009da8:	428a      	cmp	r2, r1
 8009daa:	d100      	bne.n	8009dae <memmove+0x2a>
 8009dac:	bd10      	pop	{r4, pc}
 8009dae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009db2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009db6:	e7f7      	b.n	8009da8 <memmove+0x24>

08009db8 <strncmp>:
 8009db8:	b510      	push	{r4, lr}
 8009dba:	b16a      	cbz	r2, 8009dd8 <strncmp+0x20>
 8009dbc:	3901      	subs	r1, #1
 8009dbe:	1884      	adds	r4, r0, r2
 8009dc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dc4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d103      	bne.n	8009dd4 <strncmp+0x1c>
 8009dcc:	42a0      	cmp	r0, r4
 8009dce:	d001      	beq.n	8009dd4 <strncmp+0x1c>
 8009dd0:	2a00      	cmp	r2, #0
 8009dd2:	d1f5      	bne.n	8009dc0 <strncmp+0x8>
 8009dd4:	1ad0      	subs	r0, r2, r3
 8009dd6:	bd10      	pop	{r4, pc}
 8009dd8:	4610      	mov	r0, r2
 8009dda:	e7fc      	b.n	8009dd6 <strncmp+0x1e>

08009ddc <_sbrk_r>:
 8009ddc:	b538      	push	{r3, r4, r5, lr}
 8009dde:	4d06      	ldr	r5, [pc, #24]	; (8009df8 <_sbrk_r+0x1c>)
 8009de0:	2300      	movs	r3, #0
 8009de2:	4604      	mov	r4, r0
 8009de4:	4608      	mov	r0, r1
 8009de6:	602b      	str	r3, [r5, #0]
 8009de8:	f7f8 ff62 	bl	8002cb0 <_sbrk>
 8009dec:	1c43      	adds	r3, r0, #1
 8009dee:	d102      	bne.n	8009df6 <_sbrk_r+0x1a>
 8009df0:	682b      	ldr	r3, [r5, #0]
 8009df2:	b103      	cbz	r3, 8009df6 <_sbrk_r+0x1a>
 8009df4:	6023      	str	r3, [r4, #0]
 8009df6:	bd38      	pop	{r3, r4, r5, pc}
 8009df8:	2000091c 	.word	0x2000091c

08009dfc <memcpy>:
 8009dfc:	440a      	add	r2, r1
 8009dfe:	4291      	cmp	r1, r2
 8009e00:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e04:	d100      	bne.n	8009e08 <memcpy+0xc>
 8009e06:	4770      	bx	lr
 8009e08:	b510      	push	{r4, lr}
 8009e0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e12:	4291      	cmp	r1, r2
 8009e14:	d1f9      	bne.n	8009e0a <memcpy+0xe>
 8009e16:	bd10      	pop	{r4, pc}

08009e18 <nan>:
 8009e18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009e20 <nan+0x8>
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	00000000 	.word	0x00000000
 8009e24:	7ff80000 	.word	0x7ff80000

08009e28 <__assert_func>:
 8009e28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e2a:	4614      	mov	r4, r2
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	4b09      	ldr	r3, [pc, #36]	; (8009e54 <__assert_func+0x2c>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4605      	mov	r5, r0
 8009e34:	68d8      	ldr	r0, [r3, #12]
 8009e36:	b14c      	cbz	r4, 8009e4c <__assert_func+0x24>
 8009e38:	4b07      	ldr	r3, [pc, #28]	; (8009e58 <__assert_func+0x30>)
 8009e3a:	9100      	str	r1, [sp, #0]
 8009e3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e40:	4906      	ldr	r1, [pc, #24]	; (8009e5c <__assert_func+0x34>)
 8009e42:	462b      	mov	r3, r5
 8009e44:	f000 fbca 	bl	800a5dc <fiprintf>
 8009e48:	f000 fc5e 	bl	800a708 <abort>
 8009e4c:	4b04      	ldr	r3, [pc, #16]	; (8009e60 <__assert_func+0x38>)
 8009e4e:	461c      	mov	r4, r3
 8009e50:	e7f3      	b.n	8009e3a <__assert_func+0x12>
 8009e52:	bf00      	nop
 8009e54:	2000008c 	.word	0x2000008c
 8009e58:	0800b3b2 	.word	0x0800b3b2
 8009e5c:	0800b3bf 	.word	0x0800b3bf
 8009e60:	0800b3ed 	.word	0x0800b3ed

08009e64 <_calloc_r>:
 8009e64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e66:	fba1 2402 	umull	r2, r4, r1, r2
 8009e6a:	b94c      	cbnz	r4, 8009e80 <_calloc_r+0x1c>
 8009e6c:	4611      	mov	r1, r2
 8009e6e:	9201      	str	r2, [sp, #4]
 8009e70:	f7fd ffd8 	bl	8007e24 <_malloc_r>
 8009e74:	9a01      	ldr	r2, [sp, #4]
 8009e76:	4605      	mov	r5, r0
 8009e78:	b930      	cbnz	r0, 8009e88 <_calloc_r+0x24>
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	b003      	add	sp, #12
 8009e7e:	bd30      	pop	{r4, r5, pc}
 8009e80:	220c      	movs	r2, #12
 8009e82:	6002      	str	r2, [r0, #0]
 8009e84:	2500      	movs	r5, #0
 8009e86:	e7f8      	b.n	8009e7a <_calloc_r+0x16>
 8009e88:	4621      	mov	r1, r4
 8009e8a:	f7fd f856 	bl	8006f3a <memset>
 8009e8e:	e7f4      	b.n	8009e7a <_calloc_r+0x16>

08009e90 <rshift>:
 8009e90:	6903      	ldr	r3, [r0, #16]
 8009e92:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009e96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e9a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009e9e:	f100 0414 	add.w	r4, r0, #20
 8009ea2:	dd45      	ble.n	8009f30 <rshift+0xa0>
 8009ea4:	f011 011f 	ands.w	r1, r1, #31
 8009ea8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009eac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009eb0:	d10c      	bne.n	8009ecc <rshift+0x3c>
 8009eb2:	f100 0710 	add.w	r7, r0, #16
 8009eb6:	4629      	mov	r1, r5
 8009eb8:	42b1      	cmp	r1, r6
 8009eba:	d334      	bcc.n	8009f26 <rshift+0x96>
 8009ebc:	1a9b      	subs	r3, r3, r2
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	1eea      	subs	r2, r5, #3
 8009ec2:	4296      	cmp	r6, r2
 8009ec4:	bf38      	it	cc
 8009ec6:	2300      	movcc	r3, #0
 8009ec8:	4423      	add	r3, r4
 8009eca:	e015      	b.n	8009ef8 <rshift+0x68>
 8009ecc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009ed0:	f1c1 0820 	rsb	r8, r1, #32
 8009ed4:	40cf      	lsrs	r7, r1
 8009ed6:	f105 0e04 	add.w	lr, r5, #4
 8009eda:	46a1      	mov	r9, r4
 8009edc:	4576      	cmp	r6, lr
 8009ede:	46f4      	mov	ip, lr
 8009ee0:	d815      	bhi.n	8009f0e <rshift+0x7e>
 8009ee2:	1a9a      	subs	r2, r3, r2
 8009ee4:	0092      	lsls	r2, r2, #2
 8009ee6:	3a04      	subs	r2, #4
 8009ee8:	3501      	adds	r5, #1
 8009eea:	42ae      	cmp	r6, r5
 8009eec:	bf38      	it	cc
 8009eee:	2200      	movcc	r2, #0
 8009ef0:	18a3      	adds	r3, r4, r2
 8009ef2:	50a7      	str	r7, [r4, r2]
 8009ef4:	b107      	cbz	r7, 8009ef8 <rshift+0x68>
 8009ef6:	3304      	adds	r3, #4
 8009ef8:	1b1a      	subs	r2, r3, r4
 8009efa:	42a3      	cmp	r3, r4
 8009efc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009f00:	bf08      	it	eq
 8009f02:	2300      	moveq	r3, #0
 8009f04:	6102      	str	r2, [r0, #16]
 8009f06:	bf08      	it	eq
 8009f08:	6143      	streq	r3, [r0, #20]
 8009f0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f0e:	f8dc c000 	ldr.w	ip, [ip]
 8009f12:	fa0c fc08 	lsl.w	ip, ip, r8
 8009f16:	ea4c 0707 	orr.w	r7, ip, r7
 8009f1a:	f849 7b04 	str.w	r7, [r9], #4
 8009f1e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009f22:	40cf      	lsrs	r7, r1
 8009f24:	e7da      	b.n	8009edc <rshift+0x4c>
 8009f26:	f851 cb04 	ldr.w	ip, [r1], #4
 8009f2a:	f847 cf04 	str.w	ip, [r7, #4]!
 8009f2e:	e7c3      	b.n	8009eb8 <rshift+0x28>
 8009f30:	4623      	mov	r3, r4
 8009f32:	e7e1      	b.n	8009ef8 <rshift+0x68>

08009f34 <__hexdig_fun>:
 8009f34:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009f38:	2b09      	cmp	r3, #9
 8009f3a:	d802      	bhi.n	8009f42 <__hexdig_fun+0xe>
 8009f3c:	3820      	subs	r0, #32
 8009f3e:	b2c0      	uxtb	r0, r0
 8009f40:	4770      	bx	lr
 8009f42:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009f46:	2b05      	cmp	r3, #5
 8009f48:	d801      	bhi.n	8009f4e <__hexdig_fun+0x1a>
 8009f4a:	3847      	subs	r0, #71	; 0x47
 8009f4c:	e7f7      	b.n	8009f3e <__hexdig_fun+0xa>
 8009f4e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009f52:	2b05      	cmp	r3, #5
 8009f54:	d801      	bhi.n	8009f5a <__hexdig_fun+0x26>
 8009f56:	3827      	subs	r0, #39	; 0x27
 8009f58:	e7f1      	b.n	8009f3e <__hexdig_fun+0xa>
 8009f5a:	2000      	movs	r0, #0
 8009f5c:	4770      	bx	lr
	...

08009f60 <__gethex>:
 8009f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f64:	4617      	mov	r7, r2
 8009f66:	680a      	ldr	r2, [r1, #0]
 8009f68:	b085      	sub	sp, #20
 8009f6a:	f102 0b02 	add.w	fp, r2, #2
 8009f6e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009f72:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009f76:	4681      	mov	r9, r0
 8009f78:	468a      	mov	sl, r1
 8009f7a:	9302      	str	r3, [sp, #8]
 8009f7c:	32fe      	adds	r2, #254	; 0xfe
 8009f7e:	eb02 030b 	add.w	r3, r2, fp
 8009f82:	46d8      	mov	r8, fp
 8009f84:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009f88:	9301      	str	r3, [sp, #4]
 8009f8a:	2830      	cmp	r0, #48	; 0x30
 8009f8c:	d0f7      	beq.n	8009f7e <__gethex+0x1e>
 8009f8e:	f7ff ffd1 	bl	8009f34 <__hexdig_fun>
 8009f92:	4604      	mov	r4, r0
 8009f94:	2800      	cmp	r0, #0
 8009f96:	d138      	bne.n	800a00a <__gethex+0xaa>
 8009f98:	49a7      	ldr	r1, [pc, #668]	; (800a238 <__gethex+0x2d8>)
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	4640      	mov	r0, r8
 8009f9e:	f7ff ff0b 	bl	8009db8 <strncmp>
 8009fa2:	4606      	mov	r6, r0
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	d169      	bne.n	800a07c <__gethex+0x11c>
 8009fa8:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009fac:	465d      	mov	r5, fp
 8009fae:	f7ff ffc1 	bl	8009f34 <__hexdig_fun>
 8009fb2:	2800      	cmp	r0, #0
 8009fb4:	d064      	beq.n	800a080 <__gethex+0x120>
 8009fb6:	465a      	mov	r2, fp
 8009fb8:	7810      	ldrb	r0, [r2, #0]
 8009fba:	2830      	cmp	r0, #48	; 0x30
 8009fbc:	4690      	mov	r8, r2
 8009fbe:	f102 0201 	add.w	r2, r2, #1
 8009fc2:	d0f9      	beq.n	8009fb8 <__gethex+0x58>
 8009fc4:	f7ff ffb6 	bl	8009f34 <__hexdig_fun>
 8009fc8:	2301      	movs	r3, #1
 8009fca:	fab0 f480 	clz	r4, r0
 8009fce:	0964      	lsrs	r4, r4, #5
 8009fd0:	465e      	mov	r6, fp
 8009fd2:	9301      	str	r3, [sp, #4]
 8009fd4:	4642      	mov	r2, r8
 8009fd6:	4615      	mov	r5, r2
 8009fd8:	3201      	adds	r2, #1
 8009fda:	7828      	ldrb	r0, [r5, #0]
 8009fdc:	f7ff ffaa 	bl	8009f34 <__hexdig_fun>
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	d1f8      	bne.n	8009fd6 <__gethex+0x76>
 8009fe4:	4994      	ldr	r1, [pc, #592]	; (800a238 <__gethex+0x2d8>)
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	4628      	mov	r0, r5
 8009fea:	f7ff fee5 	bl	8009db8 <strncmp>
 8009fee:	b978      	cbnz	r0, 800a010 <__gethex+0xb0>
 8009ff0:	b946      	cbnz	r6, 800a004 <__gethex+0xa4>
 8009ff2:	1c6e      	adds	r6, r5, #1
 8009ff4:	4632      	mov	r2, r6
 8009ff6:	4615      	mov	r5, r2
 8009ff8:	3201      	adds	r2, #1
 8009ffa:	7828      	ldrb	r0, [r5, #0]
 8009ffc:	f7ff ff9a 	bl	8009f34 <__hexdig_fun>
 800a000:	2800      	cmp	r0, #0
 800a002:	d1f8      	bne.n	8009ff6 <__gethex+0x96>
 800a004:	1b73      	subs	r3, r6, r5
 800a006:	009e      	lsls	r6, r3, #2
 800a008:	e004      	b.n	800a014 <__gethex+0xb4>
 800a00a:	2400      	movs	r4, #0
 800a00c:	4626      	mov	r6, r4
 800a00e:	e7e1      	b.n	8009fd4 <__gethex+0x74>
 800a010:	2e00      	cmp	r6, #0
 800a012:	d1f7      	bne.n	800a004 <__gethex+0xa4>
 800a014:	782b      	ldrb	r3, [r5, #0]
 800a016:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a01a:	2b50      	cmp	r3, #80	; 0x50
 800a01c:	d13d      	bne.n	800a09a <__gethex+0x13a>
 800a01e:	786b      	ldrb	r3, [r5, #1]
 800a020:	2b2b      	cmp	r3, #43	; 0x2b
 800a022:	d02f      	beq.n	800a084 <__gethex+0x124>
 800a024:	2b2d      	cmp	r3, #45	; 0x2d
 800a026:	d031      	beq.n	800a08c <__gethex+0x12c>
 800a028:	1c69      	adds	r1, r5, #1
 800a02a:	f04f 0b00 	mov.w	fp, #0
 800a02e:	7808      	ldrb	r0, [r1, #0]
 800a030:	f7ff ff80 	bl	8009f34 <__hexdig_fun>
 800a034:	1e42      	subs	r2, r0, #1
 800a036:	b2d2      	uxtb	r2, r2
 800a038:	2a18      	cmp	r2, #24
 800a03a:	d82e      	bhi.n	800a09a <__gethex+0x13a>
 800a03c:	f1a0 0210 	sub.w	r2, r0, #16
 800a040:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a044:	f7ff ff76 	bl	8009f34 <__hexdig_fun>
 800a048:	f100 3cff 	add.w	ip, r0, #4294967295
 800a04c:	fa5f fc8c 	uxtb.w	ip, ip
 800a050:	f1bc 0f18 	cmp.w	ip, #24
 800a054:	d91d      	bls.n	800a092 <__gethex+0x132>
 800a056:	f1bb 0f00 	cmp.w	fp, #0
 800a05a:	d000      	beq.n	800a05e <__gethex+0xfe>
 800a05c:	4252      	negs	r2, r2
 800a05e:	4416      	add	r6, r2
 800a060:	f8ca 1000 	str.w	r1, [sl]
 800a064:	b1dc      	cbz	r4, 800a09e <__gethex+0x13e>
 800a066:	9b01      	ldr	r3, [sp, #4]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	bf14      	ite	ne
 800a06c:	f04f 0800 	movne.w	r8, #0
 800a070:	f04f 0806 	moveq.w	r8, #6
 800a074:	4640      	mov	r0, r8
 800a076:	b005      	add	sp, #20
 800a078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a07c:	4645      	mov	r5, r8
 800a07e:	4626      	mov	r6, r4
 800a080:	2401      	movs	r4, #1
 800a082:	e7c7      	b.n	800a014 <__gethex+0xb4>
 800a084:	f04f 0b00 	mov.w	fp, #0
 800a088:	1ca9      	adds	r1, r5, #2
 800a08a:	e7d0      	b.n	800a02e <__gethex+0xce>
 800a08c:	f04f 0b01 	mov.w	fp, #1
 800a090:	e7fa      	b.n	800a088 <__gethex+0x128>
 800a092:	230a      	movs	r3, #10
 800a094:	fb03 0002 	mla	r0, r3, r2, r0
 800a098:	e7d0      	b.n	800a03c <__gethex+0xdc>
 800a09a:	4629      	mov	r1, r5
 800a09c:	e7e0      	b.n	800a060 <__gethex+0x100>
 800a09e:	eba5 0308 	sub.w	r3, r5, r8
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	4621      	mov	r1, r4
 800a0a6:	2b07      	cmp	r3, #7
 800a0a8:	dc0a      	bgt.n	800a0c0 <__gethex+0x160>
 800a0aa:	4648      	mov	r0, r9
 800a0ac:	f7fd ff46 	bl	8007f3c <_Balloc>
 800a0b0:	4604      	mov	r4, r0
 800a0b2:	b940      	cbnz	r0, 800a0c6 <__gethex+0x166>
 800a0b4:	4b61      	ldr	r3, [pc, #388]	; (800a23c <__gethex+0x2dc>)
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	21e4      	movs	r1, #228	; 0xe4
 800a0ba:	4861      	ldr	r0, [pc, #388]	; (800a240 <__gethex+0x2e0>)
 800a0bc:	f7ff feb4 	bl	8009e28 <__assert_func>
 800a0c0:	3101      	adds	r1, #1
 800a0c2:	105b      	asrs	r3, r3, #1
 800a0c4:	e7ef      	b.n	800a0a6 <__gethex+0x146>
 800a0c6:	f100 0a14 	add.w	sl, r0, #20
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	495a      	ldr	r1, [pc, #360]	; (800a238 <__gethex+0x2d8>)
 800a0ce:	f8cd a004 	str.w	sl, [sp, #4]
 800a0d2:	469b      	mov	fp, r3
 800a0d4:	45a8      	cmp	r8, r5
 800a0d6:	d342      	bcc.n	800a15e <__gethex+0x1fe>
 800a0d8:	9801      	ldr	r0, [sp, #4]
 800a0da:	f840 bb04 	str.w	fp, [r0], #4
 800a0de:	eba0 000a 	sub.w	r0, r0, sl
 800a0e2:	1080      	asrs	r0, r0, #2
 800a0e4:	6120      	str	r0, [r4, #16]
 800a0e6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800a0ea:	4658      	mov	r0, fp
 800a0ec:	f7fe f818 	bl	8008120 <__hi0bits>
 800a0f0:	683d      	ldr	r5, [r7, #0]
 800a0f2:	eba8 0000 	sub.w	r0, r8, r0
 800a0f6:	42a8      	cmp	r0, r5
 800a0f8:	dd59      	ble.n	800a1ae <__gethex+0x24e>
 800a0fa:	eba0 0805 	sub.w	r8, r0, r5
 800a0fe:	4641      	mov	r1, r8
 800a100:	4620      	mov	r0, r4
 800a102:	f7fe fba7 	bl	8008854 <__any_on>
 800a106:	4683      	mov	fp, r0
 800a108:	b1b8      	cbz	r0, 800a13a <__gethex+0x1da>
 800a10a:	f108 33ff 	add.w	r3, r8, #4294967295
 800a10e:	1159      	asrs	r1, r3, #5
 800a110:	f003 021f 	and.w	r2, r3, #31
 800a114:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a118:	f04f 0b01 	mov.w	fp, #1
 800a11c:	fa0b f202 	lsl.w	r2, fp, r2
 800a120:	420a      	tst	r2, r1
 800a122:	d00a      	beq.n	800a13a <__gethex+0x1da>
 800a124:	455b      	cmp	r3, fp
 800a126:	dd06      	ble.n	800a136 <__gethex+0x1d6>
 800a128:	f1a8 0102 	sub.w	r1, r8, #2
 800a12c:	4620      	mov	r0, r4
 800a12e:	f7fe fb91 	bl	8008854 <__any_on>
 800a132:	2800      	cmp	r0, #0
 800a134:	d138      	bne.n	800a1a8 <__gethex+0x248>
 800a136:	f04f 0b02 	mov.w	fp, #2
 800a13a:	4641      	mov	r1, r8
 800a13c:	4620      	mov	r0, r4
 800a13e:	f7ff fea7 	bl	8009e90 <rshift>
 800a142:	4446      	add	r6, r8
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	42b3      	cmp	r3, r6
 800a148:	da41      	bge.n	800a1ce <__gethex+0x26e>
 800a14a:	4621      	mov	r1, r4
 800a14c:	4648      	mov	r0, r9
 800a14e:	f7fd ff35 	bl	8007fbc <_Bfree>
 800a152:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a154:	2300      	movs	r3, #0
 800a156:	6013      	str	r3, [r2, #0]
 800a158:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a15c:	e78a      	b.n	800a074 <__gethex+0x114>
 800a15e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a162:	2a2e      	cmp	r2, #46	; 0x2e
 800a164:	d014      	beq.n	800a190 <__gethex+0x230>
 800a166:	2b20      	cmp	r3, #32
 800a168:	d106      	bne.n	800a178 <__gethex+0x218>
 800a16a:	9b01      	ldr	r3, [sp, #4]
 800a16c:	f843 bb04 	str.w	fp, [r3], #4
 800a170:	f04f 0b00 	mov.w	fp, #0
 800a174:	9301      	str	r3, [sp, #4]
 800a176:	465b      	mov	r3, fp
 800a178:	7828      	ldrb	r0, [r5, #0]
 800a17a:	9303      	str	r3, [sp, #12]
 800a17c:	f7ff feda 	bl	8009f34 <__hexdig_fun>
 800a180:	9b03      	ldr	r3, [sp, #12]
 800a182:	f000 000f 	and.w	r0, r0, #15
 800a186:	4098      	lsls	r0, r3
 800a188:	ea4b 0b00 	orr.w	fp, fp, r0
 800a18c:	3304      	adds	r3, #4
 800a18e:	e7a1      	b.n	800a0d4 <__gethex+0x174>
 800a190:	45a8      	cmp	r8, r5
 800a192:	d8e8      	bhi.n	800a166 <__gethex+0x206>
 800a194:	2201      	movs	r2, #1
 800a196:	4628      	mov	r0, r5
 800a198:	9303      	str	r3, [sp, #12]
 800a19a:	f7ff fe0d 	bl	8009db8 <strncmp>
 800a19e:	4926      	ldr	r1, [pc, #152]	; (800a238 <__gethex+0x2d8>)
 800a1a0:	9b03      	ldr	r3, [sp, #12]
 800a1a2:	2800      	cmp	r0, #0
 800a1a4:	d1df      	bne.n	800a166 <__gethex+0x206>
 800a1a6:	e795      	b.n	800a0d4 <__gethex+0x174>
 800a1a8:	f04f 0b03 	mov.w	fp, #3
 800a1ac:	e7c5      	b.n	800a13a <__gethex+0x1da>
 800a1ae:	da0b      	bge.n	800a1c8 <__gethex+0x268>
 800a1b0:	eba5 0800 	sub.w	r8, r5, r0
 800a1b4:	4621      	mov	r1, r4
 800a1b6:	4642      	mov	r2, r8
 800a1b8:	4648      	mov	r0, r9
 800a1ba:	f7fe f919 	bl	80083f0 <__lshift>
 800a1be:	eba6 0608 	sub.w	r6, r6, r8
 800a1c2:	4604      	mov	r4, r0
 800a1c4:	f100 0a14 	add.w	sl, r0, #20
 800a1c8:	f04f 0b00 	mov.w	fp, #0
 800a1cc:	e7ba      	b.n	800a144 <__gethex+0x1e4>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	42b3      	cmp	r3, r6
 800a1d2:	dd73      	ble.n	800a2bc <__gethex+0x35c>
 800a1d4:	1b9e      	subs	r6, r3, r6
 800a1d6:	42b5      	cmp	r5, r6
 800a1d8:	dc34      	bgt.n	800a244 <__gethex+0x2e4>
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2b02      	cmp	r3, #2
 800a1de:	d023      	beq.n	800a228 <__gethex+0x2c8>
 800a1e0:	2b03      	cmp	r3, #3
 800a1e2:	d025      	beq.n	800a230 <__gethex+0x2d0>
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d115      	bne.n	800a214 <__gethex+0x2b4>
 800a1e8:	42b5      	cmp	r5, r6
 800a1ea:	d113      	bne.n	800a214 <__gethex+0x2b4>
 800a1ec:	2d01      	cmp	r5, #1
 800a1ee:	d10b      	bne.n	800a208 <__gethex+0x2a8>
 800a1f0:	9a02      	ldr	r2, [sp, #8]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6013      	str	r3, [r2, #0]
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	6123      	str	r3, [r4, #16]
 800a1fa:	f8ca 3000 	str.w	r3, [sl]
 800a1fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a200:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a204:	601c      	str	r4, [r3, #0]
 800a206:	e735      	b.n	800a074 <__gethex+0x114>
 800a208:	1e69      	subs	r1, r5, #1
 800a20a:	4620      	mov	r0, r4
 800a20c:	f7fe fb22 	bl	8008854 <__any_on>
 800a210:	2800      	cmp	r0, #0
 800a212:	d1ed      	bne.n	800a1f0 <__gethex+0x290>
 800a214:	4621      	mov	r1, r4
 800a216:	4648      	mov	r0, r9
 800a218:	f7fd fed0 	bl	8007fbc <_Bfree>
 800a21c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a21e:	2300      	movs	r3, #0
 800a220:	6013      	str	r3, [r2, #0]
 800a222:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a226:	e725      	b.n	800a074 <__gethex+0x114>
 800a228:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1f2      	bne.n	800a214 <__gethex+0x2b4>
 800a22e:	e7df      	b.n	800a1f0 <__gethex+0x290>
 800a230:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a232:	2b00      	cmp	r3, #0
 800a234:	d1dc      	bne.n	800a1f0 <__gethex+0x290>
 800a236:	e7ed      	b.n	800a214 <__gethex+0x2b4>
 800a238:	0800b244 	.word	0x0800b244
 800a23c:	0800b0dd 	.word	0x0800b0dd
 800a240:	0800b3ee 	.word	0x0800b3ee
 800a244:	f106 38ff 	add.w	r8, r6, #4294967295
 800a248:	f1bb 0f00 	cmp.w	fp, #0
 800a24c:	d133      	bne.n	800a2b6 <__gethex+0x356>
 800a24e:	f1b8 0f00 	cmp.w	r8, #0
 800a252:	d004      	beq.n	800a25e <__gethex+0x2fe>
 800a254:	4641      	mov	r1, r8
 800a256:	4620      	mov	r0, r4
 800a258:	f7fe fafc 	bl	8008854 <__any_on>
 800a25c:	4683      	mov	fp, r0
 800a25e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a262:	2301      	movs	r3, #1
 800a264:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a268:	f008 081f 	and.w	r8, r8, #31
 800a26c:	fa03 f308 	lsl.w	r3, r3, r8
 800a270:	4213      	tst	r3, r2
 800a272:	4631      	mov	r1, r6
 800a274:	4620      	mov	r0, r4
 800a276:	bf18      	it	ne
 800a278:	f04b 0b02 	orrne.w	fp, fp, #2
 800a27c:	1bad      	subs	r5, r5, r6
 800a27e:	f7ff fe07 	bl	8009e90 <rshift>
 800a282:	687e      	ldr	r6, [r7, #4]
 800a284:	f04f 0802 	mov.w	r8, #2
 800a288:	f1bb 0f00 	cmp.w	fp, #0
 800a28c:	d04a      	beq.n	800a324 <__gethex+0x3c4>
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2b02      	cmp	r3, #2
 800a292:	d016      	beq.n	800a2c2 <__gethex+0x362>
 800a294:	2b03      	cmp	r3, #3
 800a296:	d018      	beq.n	800a2ca <__gethex+0x36a>
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d109      	bne.n	800a2b0 <__gethex+0x350>
 800a29c:	f01b 0f02 	tst.w	fp, #2
 800a2a0:	d006      	beq.n	800a2b0 <__gethex+0x350>
 800a2a2:	f8da 3000 	ldr.w	r3, [sl]
 800a2a6:	ea4b 0b03 	orr.w	fp, fp, r3
 800a2aa:	f01b 0f01 	tst.w	fp, #1
 800a2ae:	d10f      	bne.n	800a2d0 <__gethex+0x370>
 800a2b0:	f048 0810 	orr.w	r8, r8, #16
 800a2b4:	e036      	b.n	800a324 <__gethex+0x3c4>
 800a2b6:	f04f 0b01 	mov.w	fp, #1
 800a2ba:	e7d0      	b.n	800a25e <__gethex+0x2fe>
 800a2bc:	f04f 0801 	mov.w	r8, #1
 800a2c0:	e7e2      	b.n	800a288 <__gethex+0x328>
 800a2c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2c4:	f1c3 0301 	rsb	r3, r3, #1
 800a2c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d0ef      	beq.n	800a2b0 <__gethex+0x350>
 800a2d0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a2d4:	f104 0214 	add.w	r2, r4, #20
 800a2d8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a2dc:	9301      	str	r3, [sp, #4]
 800a2de:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	4694      	mov	ip, r2
 800a2e6:	f852 1b04 	ldr.w	r1, [r2], #4
 800a2ea:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a2ee:	d01e      	beq.n	800a32e <__gethex+0x3ce>
 800a2f0:	3101      	adds	r1, #1
 800a2f2:	f8cc 1000 	str.w	r1, [ip]
 800a2f6:	f1b8 0f02 	cmp.w	r8, #2
 800a2fa:	f104 0214 	add.w	r2, r4, #20
 800a2fe:	d13d      	bne.n	800a37c <__gethex+0x41c>
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	3b01      	subs	r3, #1
 800a304:	42ab      	cmp	r3, r5
 800a306:	d10b      	bne.n	800a320 <__gethex+0x3c0>
 800a308:	1169      	asrs	r1, r5, #5
 800a30a:	2301      	movs	r3, #1
 800a30c:	f005 051f 	and.w	r5, r5, #31
 800a310:	fa03 f505 	lsl.w	r5, r3, r5
 800a314:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a318:	421d      	tst	r5, r3
 800a31a:	bf18      	it	ne
 800a31c:	f04f 0801 	movne.w	r8, #1
 800a320:	f048 0820 	orr.w	r8, r8, #32
 800a324:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a326:	601c      	str	r4, [r3, #0]
 800a328:	9b02      	ldr	r3, [sp, #8]
 800a32a:	601e      	str	r6, [r3, #0]
 800a32c:	e6a2      	b.n	800a074 <__gethex+0x114>
 800a32e:	4290      	cmp	r0, r2
 800a330:	f842 3c04 	str.w	r3, [r2, #-4]
 800a334:	d8d6      	bhi.n	800a2e4 <__gethex+0x384>
 800a336:	68a2      	ldr	r2, [r4, #8]
 800a338:	4593      	cmp	fp, r2
 800a33a:	db17      	blt.n	800a36c <__gethex+0x40c>
 800a33c:	6861      	ldr	r1, [r4, #4]
 800a33e:	4648      	mov	r0, r9
 800a340:	3101      	adds	r1, #1
 800a342:	f7fd fdfb 	bl	8007f3c <_Balloc>
 800a346:	4682      	mov	sl, r0
 800a348:	b918      	cbnz	r0, 800a352 <__gethex+0x3f2>
 800a34a:	4b1b      	ldr	r3, [pc, #108]	; (800a3b8 <__gethex+0x458>)
 800a34c:	4602      	mov	r2, r0
 800a34e:	2184      	movs	r1, #132	; 0x84
 800a350:	e6b3      	b.n	800a0ba <__gethex+0x15a>
 800a352:	6922      	ldr	r2, [r4, #16]
 800a354:	3202      	adds	r2, #2
 800a356:	f104 010c 	add.w	r1, r4, #12
 800a35a:	0092      	lsls	r2, r2, #2
 800a35c:	300c      	adds	r0, #12
 800a35e:	f7ff fd4d 	bl	8009dfc <memcpy>
 800a362:	4621      	mov	r1, r4
 800a364:	4648      	mov	r0, r9
 800a366:	f7fd fe29 	bl	8007fbc <_Bfree>
 800a36a:	4654      	mov	r4, sl
 800a36c:	6922      	ldr	r2, [r4, #16]
 800a36e:	1c51      	adds	r1, r2, #1
 800a370:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a374:	6121      	str	r1, [r4, #16]
 800a376:	2101      	movs	r1, #1
 800a378:	6151      	str	r1, [r2, #20]
 800a37a:	e7bc      	b.n	800a2f6 <__gethex+0x396>
 800a37c:	6921      	ldr	r1, [r4, #16]
 800a37e:	4559      	cmp	r1, fp
 800a380:	dd0b      	ble.n	800a39a <__gethex+0x43a>
 800a382:	2101      	movs	r1, #1
 800a384:	4620      	mov	r0, r4
 800a386:	f7ff fd83 	bl	8009e90 <rshift>
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	3601      	adds	r6, #1
 800a38e:	42b3      	cmp	r3, r6
 800a390:	f6ff aedb 	blt.w	800a14a <__gethex+0x1ea>
 800a394:	f04f 0801 	mov.w	r8, #1
 800a398:	e7c2      	b.n	800a320 <__gethex+0x3c0>
 800a39a:	f015 051f 	ands.w	r5, r5, #31
 800a39e:	d0f9      	beq.n	800a394 <__gethex+0x434>
 800a3a0:	9b01      	ldr	r3, [sp, #4]
 800a3a2:	441a      	add	r2, r3
 800a3a4:	f1c5 0520 	rsb	r5, r5, #32
 800a3a8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a3ac:	f7fd feb8 	bl	8008120 <__hi0bits>
 800a3b0:	42a8      	cmp	r0, r5
 800a3b2:	dbe6      	blt.n	800a382 <__gethex+0x422>
 800a3b4:	e7ee      	b.n	800a394 <__gethex+0x434>
 800a3b6:	bf00      	nop
 800a3b8:	0800b0dd 	.word	0x0800b0dd

0800a3bc <L_shift>:
 800a3bc:	f1c2 0208 	rsb	r2, r2, #8
 800a3c0:	0092      	lsls	r2, r2, #2
 800a3c2:	b570      	push	{r4, r5, r6, lr}
 800a3c4:	f1c2 0620 	rsb	r6, r2, #32
 800a3c8:	6843      	ldr	r3, [r0, #4]
 800a3ca:	6804      	ldr	r4, [r0, #0]
 800a3cc:	fa03 f506 	lsl.w	r5, r3, r6
 800a3d0:	432c      	orrs	r4, r5
 800a3d2:	40d3      	lsrs	r3, r2
 800a3d4:	6004      	str	r4, [r0, #0]
 800a3d6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a3da:	4288      	cmp	r0, r1
 800a3dc:	d3f4      	bcc.n	800a3c8 <L_shift+0xc>
 800a3de:	bd70      	pop	{r4, r5, r6, pc}

0800a3e0 <__match>:
 800a3e0:	b530      	push	{r4, r5, lr}
 800a3e2:	6803      	ldr	r3, [r0, #0]
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3ea:	b914      	cbnz	r4, 800a3f2 <__match+0x12>
 800a3ec:	6003      	str	r3, [r0, #0]
 800a3ee:	2001      	movs	r0, #1
 800a3f0:	bd30      	pop	{r4, r5, pc}
 800a3f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a3fa:	2d19      	cmp	r5, #25
 800a3fc:	bf98      	it	ls
 800a3fe:	3220      	addls	r2, #32
 800a400:	42a2      	cmp	r2, r4
 800a402:	d0f0      	beq.n	800a3e6 <__match+0x6>
 800a404:	2000      	movs	r0, #0
 800a406:	e7f3      	b.n	800a3f0 <__match+0x10>

0800a408 <__hexnan>:
 800a408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a40c:	680b      	ldr	r3, [r1, #0]
 800a40e:	6801      	ldr	r1, [r0, #0]
 800a410:	115e      	asrs	r6, r3, #5
 800a412:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a416:	f013 031f 	ands.w	r3, r3, #31
 800a41a:	b087      	sub	sp, #28
 800a41c:	bf18      	it	ne
 800a41e:	3604      	addne	r6, #4
 800a420:	2500      	movs	r5, #0
 800a422:	1f37      	subs	r7, r6, #4
 800a424:	4682      	mov	sl, r0
 800a426:	4690      	mov	r8, r2
 800a428:	9301      	str	r3, [sp, #4]
 800a42a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a42e:	46b9      	mov	r9, r7
 800a430:	463c      	mov	r4, r7
 800a432:	9502      	str	r5, [sp, #8]
 800a434:	46ab      	mov	fp, r5
 800a436:	784a      	ldrb	r2, [r1, #1]
 800a438:	1c4b      	adds	r3, r1, #1
 800a43a:	9303      	str	r3, [sp, #12]
 800a43c:	b342      	cbz	r2, 800a490 <__hexnan+0x88>
 800a43e:	4610      	mov	r0, r2
 800a440:	9105      	str	r1, [sp, #20]
 800a442:	9204      	str	r2, [sp, #16]
 800a444:	f7ff fd76 	bl	8009f34 <__hexdig_fun>
 800a448:	2800      	cmp	r0, #0
 800a44a:	d14f      	bne.n	800a4ec <__hexnan+0xe4>
 800a44c:	9a04      	ldr	r2, [sp, #16]
 800a44e:	9905      	ldr	r1, [sp, #20]
 800a450:	2a20      	cmp	r2, #32
 800a452:	d818      	bhi.n	800a486 <__hexnan+0x7e>
 800a454:	9b02      	ldr	r3, [sp, #8]
 800a456:	459b      	cmp	fp, r3
 800a458:	dd13      	ble.n	800a482 <__hexnan+0x7a>
 800a45a:	454c      	cmp	r4, r9
 800a45c:	d206      	bcs.n	800a46c <__hexnan+0x64>
 800a45e:	2d07      	cmp	r5, #7
 800a460:	dc04      	bgt.n	800a46c <__hexnan+0x64>
 800a462:	462a      	mov	r2, r5
 800a464:	4649      	mov	r1, r9
 800a466:	4620      	mov	r0, r4
 800a468:	f7ff ffa8 	bl	800a3bc <L_shift>
 800a46c:	4544      	cmp	r4, r8
 800a46e:	d950      	bls.n	800a512 <__hexnan+0x10a>
 800a470:	2300      	movs	r3, #0
 800a472:	f1a4 0904 	sub.w	r9, r4, #4
 800a476:	f844 3c04 	str.w	r3, [r4, #-4]
 800a47a:	f8cd b008 	str.w	fp, [sp, #8]
 800a47e:	464c      	mov	r4, r9
 800a480:	461d      	mov	r5, r3
 800a482:	9903      	ldr	r1, [sp, #12]
 800a484:	e7d7      	b.n	800a436 <__hexnan+0x2e>
 800a486:	2a29      	cmp	r2, #41	; 0x29
 800a488:	d155      	bne.n	800a536 <__hexnan+0x12e>
 800a48a:	3102      	adds	r1, #2
 800a48c:	f8ca 1000 	str.w	r1, [sl]
 800a490:	f1bb 0f00 	cmp.w	fp, #0
 800a494:	d04f      	beq.n	800a536 <__hexnan+0x12e>
 800a496:	454c      	cmp	r4, r9
 800a498:	d206      	bcs.n	800a4a8 <__hexnan+0xa0>
 800a49a:	2d07      	cmp	r5, #7
 800a49c:	dc04      	bgt.n	800a4a8 <__hexnan+0xa0>
 800a49e:	462a      	mov	r2, r5
 800a4a0:	4649      	mov	r1, r9
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	f7ff ff8a 	bl	800a3bc <L_shift>
 800a4a8:	4544      	cmp	r4, r8
 800a4aa:	d934      	bls.n	800a516 <__hexnan+0x10e>
 800a4ac:	f1a8 0204 	sub.w	r2, r8, #4
 800a4b0:	4623      	mov	r3, r4
 800a4b2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a4b6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a4ba:	429f      	cmp	r7, r3
 800a4bc:	d2f9      	bcs.n	800a4b2 <__hexnan+0xaa>
 800a4be:	1b3b      	subs	r3, r7, r4
 800a4c0:	f023 0303 	bic.w	r3, r3, #3
 800a4c4:	3304      	adds	r3, #4
 800a4c6:	3e03      	subs	r6, #3
 800a4c8:	3401      	adds	r4, #1
 800a4ca:	42a6      	cmp	r6, r4
 800a4cc:	bf38      	it	cc
 800a4ce:	2304      	movcc	r3, #4
 800a4d0:	4443      	add	r3, r8
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f843 2b04 	str.w	r2, [r3], #4
 800a4d8:	429f      	cmp	r7, r3
 800a4da:	d2fb      	bcs.n	800a4d4 <__hexnan+0xcc>
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	b91b      	cbnz	r3, 800a4e8 <__hexnan+0xe0>
 800a4e0:	4547      	cmp	r7, r8
 800a4e2:	d126      	bne.n	800a532 <__hexnan+0x12a>
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	603b      	str	r3, [r7, #0]
 800a4e8:	2005      	movs	r0, #5
 800a4ea:	e025      	b.n	800a538 <__hexnan+0x130>
 800a4ec:	3501      	adds	r5, #1
 800a4ee:	2d08      	cmp	r5, #8
 800a4f0:	f10b 0b01 	add.w	fp, fp, #1
 800a4f4:	dd06      	ble.n	800a504 <__hexnan+0xfc>
 800a4f6:	4544      	cmp	r4, r8
 800a4f8:	d9c3      	bls.n	800a482 <__hexnan+0x7a>
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	f844 3c04 	str.w	r3, [r4, #-4]
 800a500:	2501      	movs	r5, #1
 800a502:	3c04      	subs	r4, #4
 800a504:	6822      	ldr	r2, [r4, #0]
 800a506:	f000 000f 	and.w	r0, r0, #15
 800a50a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a50e:	6020      	str	r0, [r4, #0]
 800a510:	e7b7      	b.n	800a482 <__hexnan+0x7a>
 800a512:	2508      	movs	r5, #8
 800a514:	e7b5      	b.n	800a482 <__hexnan+0x7a>
 800a516:	9b01      	ldr	r3, [sp, #4]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d0df      	beq.n	800a4dc <__hexnan+0xd4>
 800a51c:	f1c3 0320 	rsb	r3, r3, #32
 800a520:	f04f 32ff 	mov.w	r2, #4294967295
 800a524:	40da      	lsrs	r2, r3
 800a526:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a52a:	4013      	ands	r3, r2
 800a52c:	f846 3c04 	str.w	r3, [r6, #-4]
 800a530:	e7d4      	b.n	800a4dc <__hexnan+0xd4>
 800a532:	3f04      	subs	r7, #4
 800a534:	e7d2      	b.n	800a4dc <__hexnan+0xd4>
 800a536:	2004      	movs	r0, #4
 800a538:	b007      	add	sp, #28
 800a53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a53e <__ascii_mbtowc>:
 800a53e:	b082      	sub	sp, #8
 800a540:	b901      	cbnz	r1, 800a544 <__ascii_mbtowc+0x6>
 800a542:	a901      	add	r1, sp, #4
 800a544:	b142      	cbz	r2, 800a558 <__ascii_mbtowc+0x1a>
 800a546:	b14b      	cbz	r3, 800a55c <__ascii_mbtowc+0x1e>
 800a548:	7813      	ldrb	r3, [r2, #0]
 800a54a:	600b      	str	r3, [r1, #0]
 800a54c:	7812      	ldrb	r2, [r2, #0]
 800a54e:	1e10      	subs	r0, r2, #0
 800a550:	bf18      	it	ne
 800a552:	2001      	movne	r0, #1
 800a554:	b002      	add	sp, #8
 800a556:	4770      	bx	lr
 800a558:	4610      	mov	r0, r2
 800a55a:	e7fb      	b.n	800a554 <__ascii_mbtowc+0x16>
 800a55c:	f06f 0001 	mvn.w	r0, #1
 800a560:	e7f8      	b.n	800a554 <__ascii_mbtowc+0x16>

0800a562 <_realloc_r>:
 800a562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a566:	4680      	mov	r8, r0
 800a568:	4614      	mov	r4, r2
 800a56a:	460e      	mov	r6, r1
 800a56c:	b921      	cbnz	r1, 800a578 <_realloc_r+0x16>
 800a56e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a572:	4611      	mov	r1, r2
 800a574:	f7fd bc56 	b.w	8007e24 <_malloc_r>
 800a578:	b92a      	cbnz	r2, 800a586 <_realloc_r+0x24>
 800a57a:	f7fd fbdf 	bl	8007d3c <_free_r>
 800a57e:	4625      	mov	r5, r4
 800a580:	4628      	mov	r0, r5
 800a582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a586:	f000 f8c6 	bl	800a716 <_malloc_usable_size_r>
 800a58a:	4284      	cmp	r4, r0
 800a58c:	4607      	mov	r7, r0
 800a58e:	d802      	bhi.n	800a596 <_realloc_r+0x34>
 800a590:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a594:	d812      	bhi.n	800a5bc <_realloc_r+0x5a>
 800a596:	4621      	mov	r1, r4
 800a598:	4640      	mov	r0, r8
 800a59a:	f7fd fc43 	bl	8007e24 <_malloc_r>
 800a59e:	4605      	mov	r5, r0
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	d0ed      	beq.n	800a580 <_realloc_r+0x1e>
 800a5a4:	42bc      	cmp	r4, r7
 800a5a6:	4622      	mov	r2, r4
 800a5a8:	4631      	mov	r1, r6
 800a5aa:	bf28      	it	cs
 800a5ac:	463a      	movcs	r2, r7
 800a5ae:	f7ff fc25 	bl	8009dfc <memcpy>
 800a5b2:	4631      	mov	r1, r6
 800a5b4:	4640      	mov	r0, r8
 800a5b6:	f7fd fbc1 	bl	8007d3c <_free_r>
 800a5ba:	e7e1      	b.n	800a580 <_realloc_r+0x1e>
 800a5bc:	4635      	mov	r5, r6
 800a5be:	e7df      	b.n	800a580 <_realloc_r+0x1e>

0800a5c0 <__ascii_wctomb>:
 800a5c0:	b149      	cbz	r1, 800a5d6 <__ascii_wctomb+0x16>
 800a5c2:	2aff      	cmp	r2, #255	; 0xff
 800a5c4:	bf85      	ittet	hi
 800a5c6:	238a      	movhi	r3, #138	; 0x8a
 800a5c8:	6003      	strhi	r3, [r0, #0]
 800a5ca:	700a      	strbls	r2, [r1, #0]
 800a5cc:	f04f 30ff 	movhi.w	r0, #4294967295
 800a5d0:	bf98      	it	ls
 800a5d2:	2001      	movls	r0, #1
 800a5d4:	4770      	bx	lr
 800a5d6:	4608      	mov	r0, r1
 800a5d8:	4770      	bx	lr
	...

0800a5dc <fiprintf>:
 800a5dc:	b40e      	push	{r1, r2, r3}
 800a5de:	b503      	push	{r0, r1, lr}
 800a5e0:	4601      	mov	r1, r0
 800a5e2:	ab03      	add	r3, sp, #12
 800a5e4:	4805      	ldr	r0, [pc, #20]	; (800a5fc <fiprintf+0x20>)
 800a5e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5ea:	6800      	ldr	r0, [r0, #0]
 800a5ec:	9301      	str	r3, [sp, #4]
 800a5ee:	f7ff f96b 	bl	80098c8 <_vfiprintf_r>
 800a5f2:	b002      	add	sp, #8
 800a5f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5f8:	b003      	add	sp, #12
 800a5fa:	4770      	bx	lr
 800a5fc:	2000008c 	.word	0x2000008c

0800a600 <__swhatbuf_r>:
 800a600:	b570      	push	{r4, r5, r6, lr}
 800a602:	460c      	mov	r4, r1
 800a604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a608:	2900      	cmp	r1, #0
 800a60a:	b096      	sub	sp, #88	; 0x58
 800a60c:	4615      	mov	r5, r2
 800a60e:	461e      	mov	r6, r3
 800a610:	da0d      	bge.n	800a62e <__swhatbuf_r+0x2e>
 800a612:	89a3      	ldrh	r3, [r4, #12]
 800a614:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a618:	f04f 0100 	mov.w	r1, #0
 800a61c:	bf0c      	ite	eq
 800a61e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a622:	2340      	movne	r3, #64	; 0x40
 800a624:	2000      	movs	r0, #0
 800a626:	6031      	str	r1, [r6, #0]
 800a628:	602b      	str	r3, [r5, #0]
 800a62a:	b016      	add	sp, #88	; 0x58
 800a62c:	bd70      	pop	{r4, r5, r6, pc}
 800a62e:	466a      	mov	r2, sp
 800a630:	f000 f848 	bl	800a6c4 <_fstat_r>
 800a634:	2800      	cmp	r0, #0
 800a636:	dbec      	blt.n	800a612 <__swhatbuf_r+0x12>
 800a638:	9901      	ldr	r1, [sp, #4]
 800a63a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a63e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a642:	4259      	negs	r1, r3
 800a644:	4159      	adcs	r1, r3
 800a646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a64a:	e7eb      	b.n	800a624 <__swhatbuf_r+0x24>

0800a64c <__smakebuf_r>:
 800a64c:	898b      	ldrh	r3, [r1, #12]
 800a64e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a650:	079d      	lsls	r5, r3, #30
 800a652:	4606      	mov	r6, r0
 800a654:	460c      	mov	r4, r1
 800a656:	d507      	bpl.n	800a668 <__smakebuf_r+0x1c>
 800a658:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a65c:	6023      	str	r3, [r4, #0]
 800a65e:	6123      	str	r3, [r4, #16]
 800a660:	2301      	movs	r3, #1
 800a662:	6163      	str	r3, [r4, #20]
 800a664:	b002      	add	sp, #8
 800a666:	bd70      	pop	{r4, r5, r6, pc}
 800a668:	ab01      	add	r3, sp, #4
 800a66a:	466a      	mov	r2, sp
 800a66c:	f7ff ffc8 	bl	800a600 <__swhatbuf_r>
 800a670:	9900      	ldr	r1, [sp, #0]
 800a672:	4605      	mov	r5, r0
 800a674:	4630      	mov	r0, r6
 800a676:	f7fd fbd5 	bl	8007e24 <_malloc_r>
 800a67a:	b948      	cbnz	r0, 800a690 <__smakebuf_r+0x44>
 800a67c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a680:	059a      	lsls	r2, r3, #22
 800a682:	d4ef      	bmi.n	800a664 <__smakebuf_r+0x18>
 800a684:	f023 0303 	bic.w	r3, r3, #3
 800a688:	f043 0302 	orr.w	r3, r3, #2
 800a68c:	81a3      	strh	r3, [r4, #12]
 800a68e:	e7e3      	b.n	800a658 <__smakebuf_r+0xc>
 800a690:	89a3      	ldrh	r3, [r4, #12]
 800a692:	6020      	str	r0, [r4, #0]
 800a694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a698:	81a3      	strh	r3, [r4, #12]
 800a69a:	9b00      	ldr	r3, [sp, #0]
 800a69c:	6163      	str	r3, [r4, #20]
 800a69e:	9b01      	ldr	r3, [sp, #4]
 800a6a0:	6120      	str	r0, [r4, #16]
 800a6a2:	b15b      	cbz	r3, 800a6bc <__smakebuf_r+0x70>
 800a6a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6a8:	4630      	mov	r0, r6
 800a6aa:	f000 f81d 	bl	800a6e8 <_isatty_r>
 800a6ae:	b128      	cbz	r0, 800a6bc <__smakebuf_r+0x70>
 800a6b0:	89a3      	ldrh	r3, [r4, #12]
 800a6b2:	f023 0303 	bic.w	r3, r3, #3
 800a6b6:	f043 0301 	orr.w	r3, r3, #1
 800a6ba:	81a3      	strh	r3, [r4, #12]
 800a6bc:	89a3      	ldrh	r3, [r4, #12]
 800a6be:	431d      	orrs	r5, r3
 800a6c0:	81a5      	strh	r5, [r4, #12]
 800a6c2:	e7cf      	b.n	800a664 <__smakebuf_r+0x18>

0800a6c4 <_fstat_r>:
 800a6c4:	b538      	push	{r3, r4, r5, lr}
 800a6c6:	4d07      	ldr	r5, [pc, #28]	; (800a6e4 <_fstat_r+0x20>)
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	4604      	mov	r4, r0
 800a6cc:	4608      	mov	r0, r1
 800a6ce:	4611      	mov	r1, r2
 800a6d0:	602b      	str	r3, [r5, #0]
 800a6d2:	f7f8 fac4 	bl	8002c5e <_fstat>
 800a6d6:	1c43      	adds	r3, r0, #1
 800a6d8:	d102      	bne.n	800a6e0 <_fstat_r+0x1c>
 800a6da:	682b      	ldr	r3, [r5, #0]
 800a6dc:	b103      	cbz	r3, 800a6e0 <_fstat_r+0x1c>
 800a6de:	6023      	str	r3, [r4, #0]
 800a6e0:	bd38      	pop	{r3, r4, r5, pc}
 800a6e2:	bf00      	nop
 800a6e4:	2000091c 	.word	0x2000091c

0800a6e8 <_isatty_r>:
 800a6e8:	b538      	push	{r3, r4, r5, lr}
 800a6ea:	4d06      	ldr	r5, [pc, #24]	; (800a704 <_isatty_r+0x1c>)
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	4608      	mov	r0, r1
 800a6f2:	602b      	str	r3, [r5, #0]
 800a6f4:	f7f8 fac3 	bl	8002c7e <_isatty>
 800a6f8:	1c43      	adds	r3, r0, #1
 800a6fa:	d102      	bne.n	800a702 <_isatty_r+0x1a>
 800a6fc:	682b      	ldr	r3, [r5, #0]
 800a6fe:	b103      	cbz	r3, 800a702 <_isatty_r+0x1a>
 800a700:	6023      	str	r3, [r4, #0]
 800a702:	bd38      	pop	{r3, r4, r5, pc}
 800a704:	2000091c 	.word	0x2000091c

0800a708 <abort>:
 800a708:	b508      	push	{r3, lr}
 800a70a:	2006      	movs	r0, #6
 800a70c:	f000 f834 	bl	800a778 <raise>
 800a710:	2001      	movs	r0, #1
 800a712:	f7f8 fa55 	bl	8002bc0 <_exit>

0800a716 <_malloc_usable_size_r>:
 800a716:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a71a:	1f18      	subs	r0, r3, #4
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	bfbc      	itt	lt
 800a720:	580b      	ldrlt	r3, [r1, r0]
 800a722:	18c0      	addlt	r0, r0, r3
 800a724:	4770      	bx	lr

0800a726 <_raise_r>:
 800a726:	291f      	cmp	r1, #31
 800a728:	b538      	push	{r3, r4, r5, lr}
 800a72a:	4604      	mov	r4, r0
 800a72c:	460d      	mov	r5, r1
 800a72e:	d904      	bls.n	800a73a <_raise_r+0x14>
 800a730:	2316      	movs	r3, #22
 800a732:	6003      	str	r3, [r0, #0]
 800a734:	f04f 30ff 	mov.w	r0, #4294967295
 800a738:	bd38      	pop	{r3, r4, r5, pc}
 800a73a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a73c:	b112      	cbz	r2, 800a744 <_raise_r+0x1e>
 800a73e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a742:	b94b      	cbnz	r3, 800a758 <_raise_r+0x32>
 800a744:	4620      	mov	r0, r4
 800a746:	f000 f831 	bl	800a7ac <_getpid_r>
 800a74a:	462a      	mov	r2, r5
 800a74c:	4601      	mov	r1, r0
 800a74e:	4620      	mov	r0, r4
 800a750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a754:	f000 b818 	b.w	800a788 <_kill_r>
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d00a      	beq.n	800a772 <_raise_r+0x4c>
 800a75c:	1c59      	adds	r1, r3, #1
 800a75e:	d103      	bne.n	800a768 <_raise_r+0x42>
 800a760:	2316      	movs	r3, #22
 800a762:	6003      	str	r3, [r0, #0]
 800a764:	2001      	movs	r0, #1
 800a766:	e7e7      	b.n	800a738 <_raise_r+0x12>
 800a768:	2400      	movs	r4, #0
 800a76a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a76e:	4628      	mov	r0, r5
 800a770:	4798      	blx	r3
 800a772:	2000      	movs	r0, #0
 800a774:	e7e0      	b.n	800a738 <_raise_r+0x12>
	...

0800a778 <raise>:
 800a778:	4b02      	ldr	r3, [pc, #8]	; (800a784 <raise+0xc>)
 800a77a:	4601      	mov	r1, r0
 800a77c:	6818      	ldr	r0, [r3, #0]
 800a77e:	f7ff bfd2 	b.w	800a726 <_raise_r>
 800a782:	bf00      	nop
 800a784:	2000008c 	.word	0x2000008c

0800a788 <_kill_r>:
 800a788:	b538      	push	{r3, r4, r5, lr}
 800a78a:	4d07      	ldr	r5, [pc, #28]	; (800a7a8 <_kill_r+0x20>)
 800a78c:	2300      	movs	r3, #0
 800a78e:	4604      	mov	r4, r0
 800a790:	4608      	mov	r0, r1
 800a792:	4611      	mov	r1, r2
 800a794:	602b      	str	r3, [r5, #0]
 800a796:	f7f8 fa03 	bl	8002ba0 <_kill>
 800a79a:	1c43      	adds	r3, r0, #1
 800a79c:	d102      	bne.n	800a7a4 <_kill_r+0x1c>
 800a79e:	682b      	ldr	r3, [r5, #0]
 800a7a0:	b103      	cbz	r3, 800a7a4 <_kill_r+0x1c>
 800a7a2:	6023      	str	r3, [r4, #0]
 800a7a4:	bd38      	pop	{r3, r4, r5, pc}
 800a7a6:	bf00      	nop
 800a7a8:	2000091c 	.word	0x2000091c

0800a7ac <_getpid_r>:
 800a7ac:	f7f8 b9f0 	b.w	8002b90 <_getpid>

0800a7b0 <_init>:
 800a7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b2:	bf00      	nop
 800a7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7b6:	bc08      	pop	{r3}
 800a7b8:	469e      	mov	lr, r3
 800a7ba:	4770      	bx	lr

0800a7bc <_fini>:
 800a7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7be:	bf00      	nop
 800a7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7c2:	bc08      	pop	{r3}
 800a7c4:	469e      	mov	lr, r3
 800a7c6:	4770      	bx	lr
