
DWM1000-twr-responder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afc8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a84  0800b168  0800b168  0001b168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbec  0800cbec  00020248  2**0
                  CONTENTS
  4 .ARM          00000008  0800cbec  0800cbec  0001cbec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cbf4  0800cbf4  00020248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cbf4  0800cbf4  0001cbf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cbf8  0800cbf8  0001cbf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  0800cbfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c4  20000248  0800ce44  00020248  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000080c  0800ce44  0002080c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f5f  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033f1  00000000  00000000  000341d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  000375c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  00038860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb3a  00000000  00000000  000399b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017bc5  00000000  00000000  000554ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093e6e  00000000  00000000  0006d0af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00100f1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006060  00000000  00000000  00100f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000248 	.word	0x20000248
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b150 	.word	0x0800b150

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000024c 	.word	0x2000024c
 80001dc:	0800b150 	.word	0x0800b150

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8001018:	4b9f      	ldr	r3, [pc, #636]	; (8001298 <dwt_initialise+0x290>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2200      	movs	r2, #0
 800101e:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 8001020:	4b9d      	ldr	r3, [pc, #628]	; (8001298 <dwt_initialise+0x290>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2200      	movs	r2, #0
 8001026:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 8001028:	4b9b      	ldr	r3, [pc, #620]	; (8001298 <dwt_initialise+0x290>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2200      	movs	r2, #0
 800102e:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 8001030:	4b99      	ldr	r3, [pc, #612]	; (8001298 <dwt_initialise+0x290>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2200      	movs	r2, #0
 8001036:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 8001038:	4b97      	ldr	r3, [pc, #604]	; (8001298 <dwt_initialise+0x290>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2200      	movs	r2, #0
 800103e:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 8001040:	4b95      	ldr	r3, [pc, #596]	; (8001298 <dwt_initialise+0x290>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2200      	movs	r2, #0
 8001046:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 8001048:	4b93      	ldr	r3, [pc, #588]	; (8001298 <dwt_initialise+0x290>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2200      	movs	r2, #0
 800104e:	635a      	str	r2, [r3, #52]	; 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 8001050:	f000 f926 	bl	80012a0 <dwt_readdevid>
 8001054:	4603      	mov	r3, r0
 8001056:	4a91      	ldr	r2, [pc, #580]	; (800129c <dwt_initialise+0x294>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d002      	beq.n	8001062 <dwt_initialise+0x5a>
    {
        return DWT_ERROR ;
 800105c:	f04f 33ff 	mov.w	r3, #4294967295
 8001060:	e115      	b.n	800128e <dwt_initialise+0x286>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d101      	bne.n	8001070 <dwt_initialise+0x68>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 800106c:	f000 fed8 	bl	8001e20 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d004      	beq.n	8001084 <dwt_initialise+0x7c>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8001080:	2b00      	cmp	r3, #0
 8001082:	d102      	bne.n	800108a <dwt_initialise+0x82>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8001084:	2000      	movs	r0, #0
 8001086:	f000 fcdf 	bl	8001a48 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 800108a:	2204      	movs	r2, #4
 800108c:	2100      	movs	r1, #0
 800108e:	2024      	movs	r0, #36	; 0x24
 8001090:	f000 fc08 	bl	80018a4 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d116      	bne.n	80010cc <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 800109e:	2004      	movs	r0, #4
 80010a0:	f000 fc56 	bl	8001950 <_dwt_otpread>
 80010a4:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d01f      	beq.n	80010ee <dwt_initialise+0xe6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 80010ae:	2202      	movs	r2, #2
 80010b0:	2112      	movs	r1, #18
 80010b2:	202d      	movs	r0, #45	; 0x2d
 80010b4:	f000 fbf6 	bl	80018a4 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 80010b8:	4b77      	ldr	r3, [pc, #476]	; (8001298 <dwt_initialise+0x290>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	8ada      	ldrh	r2, [r3, #22]
 80010be:	4b76      	ldr	r3, [pc, #472]	; (8001298 <dwt_initialise+0x290>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80010c6:	b292      	uxth	r2, r2
 80010c8:	82da      	strh	r2, [r3, #22]
 80010ca:	e010      	b.n	80010ee <dwt_initialise+0xe6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 80010cc:	2130      	movs	r1, #48	; 0x30
 80010ce:	2028      	movs	r0, #40	; 0x28
 80010d0:	f000 fb91 	bl	80017f6 <dwt_read32bitoffsetreg>
 80010d4:	4603      	mov	r3, r0
 80010d6:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 80010da:	d008      	beq.n	80010ee <dwt_initialise+0xe6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 80010dc:	4b6e      	ldr	r3, [pc, #440]	; (8001298 <dwt_initialise+0x290>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	8ada      	ldrh	r2, [r3, #22]
 80010e2:	4b6d      	ldr	r3, [pc, #436]	; (8001298 <dwt_initialise+0x290>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80010ea:	b292      	uxth	r2, r2
 80010ec:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d009      	beq.n	800110c <dwt_initialise+0x104>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d011      	beq.n	8001126 <dwt_initialise+0x11e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f003 0308 	and.w	r3, r3, #8
 8001108:	2b00      	cmp	r3, #0
 800110a:	d00c      	beq.n	8001126 <dwt_initialise+0x11e>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 800110c:	201e      	movs	r0, #30
 800110e:	f000 fc1f 	bl	8001950 <_dwt_otpread>
 8001112:	4603      	mov	r3, r0
 8001114:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 8001116:	8afb      	ldrh	r3, [r7, #22]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	b29a      	uxth	r2, r3
 800111c:	4b5e      	ldr	r3, [pc, #376]	; (8001298 <dwt_initialise+0x290>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	b2d2      	uxtb	r2, r2
 8001122:	72da      	strb	r2, [r3, #11]
 8001124:	e003      	b.n	800112e <dwt_initialise+0x126>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 8001126:	4b5c      	ldr	r3, [pc, #368]	; (8001298 <dwt_initialise+0x290>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2200      	movs	r2, #0
 800112c:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d10b      	bne.n	8001150 <dwt_initialise+0x148>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 8001138:	8afb      	ldrh	r3, [r7, #22]
 800113a:	f003 031f 	and.w	r3, r3, #31
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <dwt_initialise+0x13e>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 8001142:	2310      	movs	r3, #16
 8001144:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 8001146:	8afb      	ldrh	r3, [r7, #22]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f000 fe8e 	bl	8001e6c <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f003 0310 	and.w	r3, r3, #16
 8001156:	2b00      	cmp	r3, #0
 8001158:	d007      	beq.n	800116a <dwt_initialise+0x162>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 800115a:	4b4f      	ldr	r3, [pc, #316]	; (8001298 <dwt_initialise+0x290>)
 800115c:	681c      	ldr	r4, [r3, #0]
 800115e:	2006      	movs	r0, #6
 8001160:	f000 fbf6 	bl	8001950 <_dwt_otpread>
 8001164:	4603      	mov	r3, r0
 8001166:	6023      	str	r3, [r4, #0]
 8001168:	e003      	b.n	8001172 <dwt_initialise+0x16a>
    }
    else
    {
        pdw1000local->partID = 0;
 800116a:	4b4b      	ldr	r3, [pc, #300]	; (8001298 <dwt_initialise+0x290>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f003 0320 	and.w	r3, r3, #32
 8001178:	2b00      	cmp	r3, #0
 800117a:	d007      	beq.n	800118c <dwt_initialise+0x184>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 800117c:	4b46      	ldr	r3, [pc, #280]	; (8001298 <dwt_initialise+0x290>)
 800117e:	681c      	ldr	r4, [r3, #0]
 8001180:	2007      	movs	r0, #7
 8001182:	f000 fbe5 	bl	8001950 <_dwt_otpread>
 8001186:	4603      	mov	r3, r0
 8001188:	6063      	str	r3, [r4, #4]
 800118a:	e003      	b.n	8001194 <dwt_initialise+0x18c>
    }
    else
    {
        pdw1000local->lotID = 0;
 800118c:	4b42      	ldr	r3, [pc, #264]	; (8001298 <dwt_initialise+0x290>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2200      	movs	r2, #0
 8001192:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800119a:	2b00      	cmp	r3, #0
 800119c:	d008      	beq.n	80011b0 <dwt_initialise+0x1a8>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 800119e:	2008      	movs	r0, #8
 80011a0:	f000 fbd6 	bl	8001950 <_dwt_otpread>
 80011a4:	4602      	mov	r2, r0
 80011a6:	4b3c      	ldr	r3, [pc, #240]	; (8001298 <dwt_initialise+0x290>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	721a      	strb	r2, [r3, #8]
 80011ae:	e003      	b.n	80011b8 <dwt_initialise+0x1b0>
    }
    else
    {
        pdw1000local->vBatP = 0;
 80011b0:	4b39      	ldr	r3, [pc, #228]	; (8001298 <dwt_initialise+0x290>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2200      	movs	r2, #0
 80011b6:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d008      	beq.n	80011d4 <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 80011c2:	2009      	movs	r0, #9
 80011c4:	f000 fbc4 	bl	8001950 <_dwt_otpread>
 80011c8:	4602      	mov	r2, r0
 80011ca:	4b33      	ldr	r3, [pc, #204]	; (8001298 <dwt_initialise+0x290>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	725a      	strb	r2, [r3, #9]
 80011d2:	e003      	b.n	80011dc <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 80011d4:	4b30      	ldr	r3, [pc, #192]	; (8001298 <dwt_initialise+0x290>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2200      	movs	r2, #0
 80011da:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d121      	bne.n	800122a <dwt_initialise+0x222>
    {
        if(DWT_LOADUCODE & config)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d00b      	beq.n	8001208 <dwt_initialise+0x200>
        {
            _dwt_loaducodefromrom();
 80011f0:	f000 fbfb 	bl	80019ea <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 80011f4:	4b28      	ldr	r3, [pc, #160]	; (8001298 <dwt_initialise+0x290>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	8ada      	ldrh	r2, [r3, #22]
 80011fa:	4b27      	ldr	r3, [pc, #156]	; (8001298 <dwt_initialise+0x290>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001202:	b292      	uxth	r2, r2
 8001204:	82da      	strh	r2, [r3, #22]
 8001206:	e01e      	b.n	8001246 <dwt_initialise+0x23e>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 8001208:	2105      	movs	r1, #5
 800120a:	2036      	movs	r0, #54	; 0x36
 800120c:	f000 fb1a 	bl	8001844 <dwt_read16bitoffsetreg>
 8001210:	4603      	mov	r3, r0
 8001212:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 8001214:	89fb      	ldrh	r3, [r7, #14]
 8001216:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800121a:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 800121c:	89fb      	ldrh	r3, [r7, #14]
 800121e:	461a      	mov	r2, r3
 8001220:	2105      	movs	r1, #5
 8001222:	2036      	movs	r0, #54	; 0x36
 8001224:	f000 fb51 	bl	80018ca <dwt_write16bitoffsetreg>
 8001228:	e00d      	b.n	8001246 <dwt_initialise+0x23e>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	d108      	bne.n	8001246 <dwt_initialise+0x23e>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 8001234:	4b18      	ldr	r3, [pc, #96]	; (8001298 <dwt_initialise+0x290>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	8ada      	ldrh	r2, [r3, #22]
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <dwt_initialise+0x290>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001242:	b292      	uxth	r2, r2
 8001244:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8001246:	2001      	movs	r0, #1
 8001248:	f000 fbfe 	bl	8001a48 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 800124c:	2200      	movs	r2, #0
 800124e:	210a      	movs	r1, #10
 8001250:	202c      	movs	r0, #44	; 0x2c
 8001252:	f000 fb27 	bl	80018a4 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <dwt_initialise+0x290>)
 8001258:	681c      	ldr	r4, [r3, #0]
 800125a:	2100      	movs	r1, #0
 800125c:	2004      	movs	r0, #4
 800125e:	f000 faca 	bl	80017f6 <dwt_read32bitoffsetreg>
 8001262:	4603      	mov	r3, r0
 8001264:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <dwt_initialise+0x290>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	0c1b      	lsrs	r3, r3, #16
 800126e:	b2da      	uxtb	r2, r3
 8001270:	4b09      	ldr	r3, [pc, #36]	; (8001298 <dwt_initialise+0x290>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f002 0203 	and.w	r2, r2, #3
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <dwt_initialise+0x290>)
 800127e:	681c      	ldr	r4, [r3, #0]
 8001280:	2100      	movs	r1, #0
 8001282:	2008      	movs	r0, #8
 8001284:	f000 fab7 	bl	80017f6 <dwt_read32bitoffsetreg>
 8001288:	4603      	mov	r3, r0
 800128a:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 800128c:	2300      	movs	r3, #0

} // end dwt_initialise()
 800128e:	4618      	mov	r0, r3
 8001290:	371c      	adds	r7, #28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd90      	pop	{r4, r7, pc}
 8001296:	bf00      	nop
 8001298:	20000000 	.word	0x20000000
 800129c:	deca0130 	.word	0xdeca0130

080012a0 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 80012a4:	2100      	movs	r1, #0
 80012a6:	2000      	movs	r0, #0
 80012a8:	f000 faa5 	bl	80017f6 <dwt_read32bitoffsetreg>
 80012ac:	4603      	mov	r3, r0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	795b      	ldrb	r3, [r3, #5]
 80012ce:	461a      	mov	r2, r3
 80012d0:	4ba1      	ldr	r3, [pc, #644]	; (8001558 <dwt_configure+0x2a4>)
 80012d2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80012d6:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	785b      	ldrb	r3, [r3, #1]
 80012dc:	3b01      	subs	r3, #1
 80012de:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 80012e0:	7cfb      	ldrb	r3, [r7, #19]
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	d002      	beq.n	80012ec <dwt_configure+0x38>
 80012e6:	7cfb      	ldrb	r3, [r7, #19]
 80012e8:	2b07      	cmp	r3, #7
 80012ea:	d101      	bne.n	80012f0 <dwt_configure+0x3c>
 80012ec:	2301      	movs	r3, #1
 80012ee:	e000      	b.n	80012f2 <dwt_configure+0x3e>
 80012f0:	2300      	movs	r3, #0
 80012f2:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	79db      	ldrb	r3, [r3, #7]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d10b      	bne.n	8001314 <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 80012fc:	4b97      	ldr	r3, [pc, #604]	; (800155c <dwt_configure+0x2a8>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	691a      	ldr	r2, [r3, #16]
 8001302:	4b96      	ldr	r3, [pc, #600]	; (800155c <dwt_configure+0x2a8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800130a:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 800130c:	8abb      	ldrh	r3, [r7, #20]
 800130e:	08db      	lsrs	r3, r3, #3
 8001310:	82bb      	strh	r3, [r7, #20]
 8001312:	e007      	b.n	8001324 <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 8001314:	4b91      	ldr	r3, [pc, #580]	; (800155c <dwt_configure+0x2a8>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	691a      	ldr	r2, [r3, #16]
 800131a:	4b90      	ldr	r3, [pc, #576]	; (800155c <dwt_configure+0x2a8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8001322:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 8001324:	4b8d      	ldr	r3, [pc, #564]	; (800155c <dwt_configure+0x2a8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	7a12      	ldrb	r2, [r2, #8]
 800132c:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 800132e:	4b8b      	ldr	r3, [pc, #556]	; (800155c <dwt_configure+0x2a8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	691a      	ldr	r2, [r3, #16]
 8001334:	4b89      	ldr	r3, [pc, #548]	; (800155c <dwt_configure+0x2a8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800133c:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 800133e:	4b87      	ldr	r3, [pc, #540]	; (800155c <dwt_configure+0x2a8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6919      	ldr	r1, [r3, #16]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	7a1b      	ldrb	r3, [r3, #8]
 8001348:	041b      	lsls	r3, r3, #16
 800134a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800134e:	4b83      	ldr	r3, [pc, #524]	; (800155c <dwt_configure+0x2a8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 8001356:	4b81      	ldr	r3, [pc, #516]	; (800155c <dwt_configure+0x2a8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	461a      	mov	r2, r3
 800135e:	2100      	movs	r1, #0
 8001360:	2004      	movs	r0, #4
 8001362:	f000 face 	bl	8001902 <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 8001366:	8abb      	ldrh	r3, [r7, #20]
 8001368:	461a      	mov	r2, r3
 800136a:	f642 0104 	movw	r1, #10244	; 0x2804
 800136e:	202e      	movs	r0, #46	; 0x2e
 8001370:	f000 faab 	bl	80018ca <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 8001374:	7cbb      	ldrb	r3, [r7, #18]
 8001376:	4618      	mov	r0, r3
 8001378:	f000 fb17 	bl	80019aa <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 800137c:	7cfb      	ldrb	r3, [r7, #19]
 800137e:	4a78      	ldr	r2, [pc, #480]	; (8001560 <dwt_configure+0x2ac>)
 8001380:	5cd3      	ldrb	r3, [r2, r3]
 8001382:	461a      	mov	r2, r3
 8001384:	4b77      	ldr	r3, [pc, #476]	; (8001564 <dwt_configure+0x2b0>)
 8001386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800138a:	461a      	mov	r2, r3
 800138c:	2107      	movs	r1, #7
 800138e:	202b      	movs	r0, #43	; 0x2b
 8001390:	f000 fab7 	bl	8001902 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8001394:	7cfb      	ldrb	r3, [r7, #19]
 8001396:	4a72      	ldr	r2, [pc, #456]	; (8001560 <dwt_configure+0x2ac>)
 8001398:	5cd3      	ldrb	r3, [r2, r3]
 800139a:	461a      	mov	r2, r3
 800139c:	4b72      	ldr	r3, [pc, #456]	; (8001568 <dwt_configure+0x2b4>)
 800139e:	5c9b      	ldrb	r3, [r3, r2]
 80013a0:	461a      	mov	r2, r3
 80013a2:	210b      	movs	r1, #11
 80013a4:	202b      	movs	r0, #43	; 0x2b
 80013a6:	f000 fa7d 	bl	80018a4 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 80013aa:	7c7b      	ldrb	r3, [r7, #17]
 80013ac:	4a6f      	ldr	r2, [pc, #444]	; (800156c <dwt_configure+0x2b8>)
 80013ae:	5cd3      	ldrb	r3, [r2, r3]
 80013b0:	461a      	mov	r2, r3
 80013b2:	210b      	movs	r1, #11
 80013b4:	2028      	movs	r0, #40	; 0x28
 80013b6:	f000 fa75 	bl	80018a4 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 80013ba:	7cfb      	ldrb	r3, [r7, #19]
 80013bc:	4a68      	ldr	r2, [pc, #416]	; (8001560 <dwt_configure+0x2ac>)
 80013be:	5cd3      	ldrb	r3, [r2, r3]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b6b      	ldr	r3, [pc, #428]	; (8001570 <dwt_configure+0x2bc>)
 80013c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c8:	461a      	mov	r2, r3
 80013ca:	210c      	movs	r1, #12
 80013cc:	2028      	movs	r0, #40	; 0x28
 80013ce:	f000 fa98 	bl	8001902 <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	79db      	ldrb	r3, [r3, #7]
 80013d6:	4618      	mov	r0, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	799b      	ldrb	r3, [r3, #6]
 80013dc:	4619      	mov	r1, r3
 80013de:	4a65      	ldr	r2, [pc, #404]	; (8001574 <dwt_configure+0x2c0>)
 80013e0:	0043      	lsls	r3, r0, #1
 80013e2:	440b      	add	r3, r1
 80013e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013e8:	461a      	mov	r2, r3
 80013ea:	2102      	movs	r1, #2
 80013ec:	2027      	movs	r0, #39	; 0x27
 80013ee:	f000 fa6c 	bl	80018ca <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 80013f2:	7cbb      	ldrb	r3, [r7, #18]
 80013f4:	4a60      	ldr	r2, [pc, #384]	; (8001578 <dwt_configure+0x2c4>)
 80013f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013fa:	461a      	mov	r2, r3
 80013fc:	2104      	movs	r1, #4
 80013fe:	2027      	movs	r0, #39	; 0x27
 8001400:	f000 fa63 	bl	80018ca <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	79db      	ldrb	r3, [r3, #7]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d105      	bne.n	8001418 <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 800140c:	2264      	movs	r2, #100	; 0x64
 800140e:	2106      	movs	r1, #6
 8001410:	2027      	movs	r0, #39	; 0x27
 8001412:	f000 fa5a 	bl	80018ca <dwt_write16bitoffsetreg>
 8001416:	e018      	b.n	800144a <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	789b      	ldrb	r3, [r3, #2]
 800141c:	2b04      	cmp	r3, #4
 800141e:	d10a      	bne.n	8001436 <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 8001420:	2210      	movs	r2, #16
 8001422:	2106      	movs	r1, #6
 8001424:	2027      	movs	r0, #39	; 0x27
 8001426:	f000 fa50 	bl	80018ca <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 800142a:	2210      	movs	r2, #16
 800142c:	2126      	movs	r1, #38	; 0x26
 800142e:	2027      	movs	r0, #39	; 0x27
 8001430:	f000 fa38 	bl	80018a4 <dwt_write8bitoffsetreg>
 8001434:	e009      	b.n	800144a <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 8001436:	2220      	movs	r2, #32
 8001438:	2106      	movs	r1, #6
 800143a:	2027      	movs	r0, #39	; 0x27
 800143c:	f000 fa45 	bl	80018ca <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 8001440:	2228      	movs	r2, #40	; 0x28
 8001442:	2126      	movs	r1, #38	; 0x26
 8001444:	2027      	movs	r0, #39	; 0x27
 8001446:	f000 fa2d 	bl	80018a4 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 800144a:	7cbb      	ldrb	r3, [r7, #18]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	78d2      	ldrb	r2, [r2, #3]
 8001450:	4611      	mov	r1, r2
 8001452:	4a4a      	ldr	r2, [pc, #296]	; (800157c <dwt_configure+0x2c8>)
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	440b      	add	r3, r1
 8001458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145c:	461a      	mov	r2, r3
 800145e:	2108      	movs	r1, #8
 8001460:	2027      	movs	r0, #39	; 0x27
 8001462:	f000 fa4e 	bl	8001902 <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	895b      	ldrh	r3, [r3, #10]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d103      	bne.n	8001476 <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f241 0241 	movw	r2, #4161	; 0x1041
 8001474:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	895b      	ldrh	r3, [r3, #10]
 800147a:	461a      	mov	r2, r3
 800147c:	2120      	movs	r1, #32
 800147e:	2027      	movs	r0, #39	; 0x27
 8001480:	f000 fa23 	bl	80018ca <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 8001484:	4b3e      	ldr	r3, [pc, #248]	; (8001580 <dwt_configure+0x2cc>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	210c      	movs	r1, #12
 800148c:	2023      	movs	r0, #35	; 0x23
 800148e:	f000 fa38 	bl	8001902 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 8001492:	7cbb      	ldrb	r3, [r7, #18]
 8001494:	4a3a      	ldr	r2, [pc, #232]	; (8001580 <dwt_configure+0x2cc>)
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	889b      	ldrh	r3, [r3, #4]
 800149c:	461a      	mov	r2, r3
 800149e:	2104      	movs	r1, #4
 80014a0:	2023      	movs	r0, #35	; 0x23
 80014a2:	f000 fa12 	bl	80018ca <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	799b      	ldrb	r3, [r3, #6]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d00d      	beq.n	80014ca <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	79db      	ldrb	r3, [r3, #7]
 80014b2:	461a      	mov	r2, r3
 80014b4:	4b33      	ldr	r3, [pc, #204]	; (8001584 <dwt_configure+0x2d0>)
 80014b6:	5c9b      	ldrb	r3, [r3, r2]
 80014b8:	461a      	mov	r2, r3
 80014ba:	2100      	movs	r1, #0
 80014bc:	2021      	movs	r0, #33	; 0x21
 80014be:	f000 f9f1 	bl	80018a4 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 80014c2:	2303      	movs	r3, #3
 80014c4:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 80014c6:	2301      	movs	r3, #1
 80014c8:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80014ca:	7cfb      	ldrb	r3, [r7, #19]
 80014cc:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80014d0:	7cfb      	ldrb	r3, [r7, #19]
 80014d2:	011b      	lsls	r3, r3, #4
 80014d4:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80014d6:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	785b      	ldrb	r3, [r3, #1]
 80014dc:	049b      	lsls	r3, r3, #18
 80014de:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80014e2:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80014e4:	7dfb      	ldrb	r3, [r7, #23]
 80014e6:	051b      	lsls	r3, r3, #20
 80014e8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80014ec:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80014ee:	7dbb      	ldrb	r3, [r7, #22]
 80014f0:	045b      	lsls	r3, r3, #17
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80014f6:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	791b      	ldrb	r3, [r3, #4]
 80014fc:	059b      	lsls	r3, r3, #22
 80014fe:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8001502:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	795b      	ldrb	r3, [r3, #5]
 8001508:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800150a:	4313      	orrs	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	2100      	movs	r1, #0
 8001512:	201f      	movs	r0, #31
 8001514:	f000 f9f5 	bl	8001902 <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	789a      	ldrb	r2, [r3, #2]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	785b      	ldrb	r3, [r3, #1]
 8001520:	4313      	orrs	r3, r2
 8001522:	b2db      	uxtb	r3, r3
 8001524:	0419      	lsls	r1, r3, #16
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	79db      	ldrb	r3, [r3, #7]
 800152a:	035a      	lsls	r2, r3, #13
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <dwt_configure+0x2a8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <dwt_configure+0x2a8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	461a      	mov	r2, r3
 800153c:	2100      	movs	r1, #0
 800153e:	2008      	movs	r0, #8
 8001540:	f000 f9df 	bl	8001902 <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 8001544:	2242      	movs	r2, #66	; 0x42
 8001546:	2100      	movs	r1, #0
 8001548:	200d      	movs	r0, #13
 800154a:	f000 f9ab 	bl	80018a4 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	0800b234 	.word	0x0800b234
 800155c:	20000000 	.word	0x20000000
 8001560:	0800b1b4 	.word	0x0800b1b4
 8001564:	0800b1d4 	.word	0x0800b1d4
 8001568:	0800b1ec 	.word	0x0800b1ec
 800156c:	0800b1f4 	.word	0x0800b1f4
 8001570:	0800b1bc 	.word	0x0800b1bc
 8001574:	0800b204 	.word	0x0800b204
 8001578:	0800b210 	.word	0x0800b210
 800157c:	0800b214 	.word	0x0800b214
 8001580:	0800b1f8 	.word	0x0800b1f8
 8001584:	0800b200 	.word	0x0800b200

08001588 <dwt_setrxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxantennadelay(uint16 rxDelay)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	80fb      	strh	r3, [r7, #6]
    // Set the RX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	461a      	mov	r2, r3
 8001596:	f641 0104 	movw	r1, #6148	; 0x1804
 800159a:	202e      	movs	r0, #46	; 0x2e
 800159c:	f000 f995 	bl	80018ca <dwt_write16bitoffsetreg>
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <dwt_settxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_settxantennadelay(uint16 txDelay)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	80fb      	strh	r3, [r7, #6]
    // Set the TX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	461a      	mov	r2, r3
 80015b6:	2100      	movs	r1, #0
 80015b8:	2018      	movs	r0, #24
 80015ba:	f000 f986 	bl	80018ca <dwt_write16bitoffsetreg>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	4603      	mov	r3, r0
 80015ce:	6039      	str	r1, [r7, #0]
 80015d0:	80fb      	strh	r3, [r7, #6]
 80015d2:	4613      	mov	r3, r2
 80015d4:	80bb      	strh	r3, [r7, #4]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 80015d6:	88ba      	ldrh	r2, [r7, #4]
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	4413      	add	r3, r2
 80015dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015e0:	dc09      	bgt.n	80015f6 <dwt_writetxdata+0x30>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	3b02      	subs	r3, #2
 80015e6:	461a      	mov	r2, r3
 80015e8:	88b9      	ldrh	r1, [r7, #4]
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	2009      	movs	r0, #9
 80015ee:	f000 f857 	bl	80016a0 <dwt_writetodevice>
        return DWT_SUCCESS;
 80015f2:	2300      	movs	r3, #0
 80015f4:	e001      	b.n	80015fa <dwt_writetxdata+0x34>
    }
    else
    {
        return DWT_ERROR;
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295
    }
} // end dwt_writetxdata()
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	603a      	str	r2, [r7, #0]
 800160e:	80fb      	strh	r3, [r7, #6]
 8001610:	460b      	mov	r3, r1
 8001612:	80bb      	strh	r3, [r7, #4]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 8001614:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <dwt_writetxfctrl+0x3c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68da      	ldr	r2, [r3, #12]
 800161a:	88fb      	ldrh	r3, [r7, #6]
 800161c:	431a      	orrs	r2, r3
 800161e:	88bb      	ldrh	r3, [r7, #4]
 8001620:	059b      	lsls	r3, r3, #22
 8001622:	431a      	orrs	r2, r3
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	03db      	lsls	r3, r3, #15
 8001628:	4313      	orrs	r3, r2
 800162a:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	2100      	movs	r1, #0
 8001630:	2008      	movs	r0, #8
 8001632:	f000 f966 	bl	8001902 <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000000 	.word	0x20000000

08001644 <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	807b      	strh	r3, [r7, #2]
 8001650:	4613      	mov	r3, r2
 8001652:	803b      	strh	r3, [r7, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 8001654:	887a      	ldrh	r2, [r7, #2]
 8001656:	8839      	ldrh	r1, [r7, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2011      	movs	r0, #17
 800165c:	f000 f877 	bl	800174e <dwt_readfromdevice>
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <dwt_readtxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readtxtimestamp(uint8 * timestamp)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN, timestamp) ; // Read bytes directly into buffer
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2205      	movs	r2, #5
 8001674:	2100      	movs	r1, #0
 8001676:	2017      	movs	r0, #23
 8001678:	f000 f869 	bl	800174e <dwt_readfromdevice>
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <dwt_readrxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readrxtimestamp(uint8 * timestamp)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp) ; // Get the adjusted time of arrival
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2205      	movs	r2, #5
 8001690:	2100      	movs	r1, #0
 8001692:	2015      	movs	r0, #21
 8001694:	f000 f85b 	bl	800174e <dwt_readfromdevice>
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60ba      	str	r2, [r7, #8]
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	4603      	mov	r3, r0
 80016ac:	81fb      	strh	r3, [r7, #14]
 80016ae:	460b      	mov	r3, r1
 80016b0:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 80016b6:	89bb      	ldrh	r3, [r7, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10c      	bne.n	80016d6 <dwt_writetodevice+0x36>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 80016bc:	89fb      	ldrh	r3, [r7, #14]
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	1c59      	adds	r1, r3, #1
 80016c4:	6179      	str	r1, [r7, #20]
 80016c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	3318      	adds	r3, #24
 80016ce:	443b      	add	r3, r7
 80016d0:	f803 2c08 	strb.w	r2, [r3, #-8]
 80016d4:	e02f      	b.n	8001736 <dwt_writetodevice+0x96>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 80016d6:	89fb      	ldrh	r3, [r7, #14]
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	1c59      	adds	r1, r3, #1
 80016de:	6179      	str	r1, [r7, #20]
 80016e0:	f062 023f 	orn	r2, r2, #63	; 0x3f
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	3318      	adds	r3, #24
 80016e8:	443b      	add	r3, r7
 80016ea:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 80016ee:	89bb      	ldrh	r3, [r7, #12]
 80016f0:	2b7f      	cmp	r3, #127	; 0x7f
 80016f2:	d809      	bhi.n	8001708 <dwt_writetodevice+0x68>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	617a      	str	r2, [r7, #20]
 80016fa:	89ba      	ldrh	r2, [r7, #12]
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	3318      	adds	r3, #24
 8001700:	443b      	add	r3, r7
 8001702:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001706:	e016      	b.n	8001736 <dwt_writetodevice+0x96>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8001708:	89bb      	ldrh	r3, [r7, #12]
 800170a:	b2da      	uxtb	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	1c59      	adds	r1, r3, #1
 8001710:	6179      	str	r1, [r7, #20]
 8001712:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	3318      	adds	r3, #24
 800171a:	443b      	add	r3, r7
 800171c:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8001720:	89bb      	ldrh	r3, [r7, #12]
 8001722:	09db      	lsrs	r3, r3, #7
 8001724:	b299      	uxth	r1, r3
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	1c5a      	adds	r2, r3, #1
 800172a:	617a      	str	r2, [r7, #20]
 800172c:	b2ca      	uxtb	r2, r1
 800172e:	3318      	adds	r3, #24
 8001730:	443b      	add	r3, r7
 8001732:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	b298      	uxth	r0, r3
 800173a:	f107 0110 	add.w	r1, r7, #16
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68ba      	ldr	r2, [r7, #8]
 8001742:	f000 fbd5 	bl	8001ef0 <writetospi>
} // end dwt_writetodevice()
 8001746:	bf00      	nop
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b086      	sub	sp, #24
 8001752:	af00      	add	r7, sp, #0
 8001754:	60ba      	str	r2, [r7, #8]
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	4603      	mov	r3, r0
 800175a:	81fb      	strh	r3, [r7, #14]
 800175c:	460b      	mov	r3, r1
 800175e:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8001764:	89bb      	ldrh	r3, [r7, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d109      	bne.n	800177e <dwt_readfromdevice+0x30>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	1c5a      	adds	r2, r3, #1
 800176e:	617a      	str	r2, [r7, #20]
 8001770:	89fa      	ldrh	r2, [r7, #14]
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	3318      	adds	r3, #24
 8001776:	443b      	add	r3, r7
 8001778:	f803 2c08 	strb.w	r2, [r3, #-8]
 800177c:	e02f      	b.n	80017de <dwt_readfromdevice+0x90>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800177e:	89fb      	ldrh	r3, [r7, #14]
 8001780:	b2da      	uxtb	r2, r3
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	1c59      	adds	r1, r3, #1
 8001786:	6179      	str	r1, [r7, #20]
 8001788:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	3318      	adds	r3, #24
 8001790:	443b      	add	r3, r7
 8001792:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8001796:	89bb      	ldrh	r3, [r7, #12]
 8001798:	2b7f      	cmp	r3, #127	; 0x7f
 800179a:	d809      	bhi.n	80017b0 <dwt_readfromdevice+0x62>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	617a      	str	r2, [r7, #20]
 80017a2:	89ba      	ldrh	r2, [r7, #12]
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	3318      	adds	r3, #24
 80017a8:	443b      	add	r3, r7
 80017aa:	f803 2c08 	strb.w	r2, [r3, #-8]
 80017ae:	e016      	b.n	80017de <dwt_readfromdevice+0x90>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 80017b0:	89bb      	ldrh	r3, [r7, #12]
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	1c59      	adds	r1, r3, #1
 80017b8:	6179      	str	r1, [r7, #20]
 80017ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	3318      	adds	r3, #24
 80017c2:	443b      	add	r3, r7
 80017c4:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 80017c8:	89bb      	ldrh	r3, [r7, #12]
 80017ca:	09db      	lsrs	r3, r3, #7
 80017cc:	b299      	uxth	r1, r3
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	1c5a      	adds	r2, r3, #1
 80017d2:	617a      	str	r2, [r7, #20]
 80017d4:	b2ca      	uxtb	r2, r1
 80017d6:	3318      	adds	r3, #24
 80017d8:	443b      	add	r3, r7
 80017da:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	b298      	uxth	r0, r3
 80017e2:	f107 0110 	add.w	r1, r7, #16
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68ba      	ldr	r2, [r7, #8]
 80017ea:	f000 fbb5 	bl	8001f58 <readfromspi>
} // end dwt_readfromdevice()
 80017ee:	bf00      	nop
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b086      	sub	sp, #24
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
 80017fe:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	b298      	uxth	r0, r3
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	b299      	uxth	r1, r3
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	2204      	movs	r2, #4
 8001812:	f7ff ff9c 	bl	800174e <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8001816:	2303      	movs	r3, #3
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	e00b      	b.n	8001834 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	021b      	lsls	r3, r3, #8
 8001820:	f107 010c 	add.w	r1, r7, #12
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	440a      	add	r2, r1
 8001828:	7812      	ldrb	r2, [r2, #0]
 800182a:	4413      	add	r3, r2
 800182c:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	3b01      	subs	r3, #1
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	2b00      	cmp	r3, #0
 8001838:	daf0      	bge.n	800181c <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 800183a:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 800184e:	2300      	movs	r3, #0
 8001850:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	b298      	uxth	r0, r3
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	b299      	uxth	r1, r3
 800185a:	f107 030c 	add.w	r3, r7, #12
 800185e:	2202      	movs	r2, #2
 8001860:	f7ff ff75 	bl	800174e <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8001864:	7b7b      	ldrb	r3, [r7, #13]
 8001866:	b29b      	uxth	r3, r3
 8001868:	021b      	lsls	r3, r3, #8
 800186a:	b29a      	uxth	r2, r3
 800186c:	7b3b      	ldrb	r3, [r7, #12]
 800186e:	b29b      	uxth	r3, r3
 8001870:	4413      	add	r3, r2
 8001872:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8001874:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b084      	sub	sp, #16
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	b298      	uxth	r0, r3
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	b299      	uxth	r1, r3
 8001890:	f107 030f 	add.w	r3, r7, #15
 8001894:	2201      	movs	r2, #1
 8001896:	f7ff ff5a 	bl	800174e <dwt_readfromdevice>

    return regval ;
 800189a:	7bfb      	ldrb	r3, [r7, #15]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	4613      	mov	r3, r2
 80018b0:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	b298      	uxth	r0, r3
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	b299      	uxth	r1, r3
 80018ba:	1dfb      	adds	r3, r7, #7
 80018bc:	2201      	movs	r2, #1
 80018be:	f7ff feef 	bl	80016a0 <dwt_writetodevice>
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b086      	sub	sp, #24
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	4613      	mov	r3, r2
 80018d6:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 80018de:	88fb      	ldrh	r3, [r7, #6]
 80018e0:	0a1b      	lsrs	r3, r3, #8
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	b298      	uxth	r0, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	b299      	uxth	r1, r3
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	2202      	movs	r2, #2
 80018f6:	f7ff fed3 	bl	80016a0 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 80018fa:	bf00      	nop
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b086      	sub	sp, #24
 8001906:	af00      	add	r7, sp, #0
 8001908:	60f8      	str	r0, [r7, #12]
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	e00d      	b.n	8001930 <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	b2d9      	uxtb	r1, r3
 8001918:	f107 0210 	add.w	r2, r7, #16
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	4413      	add	r3, r2
 8001920:	460a      	mov	r2, r1
 8001922:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	0a1b      	lsrs	r3, r3, #8
 8001928:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	3301      	adds	r3, #1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	2b03      	cmp	r3, #3
 8001934:	ddee      	ble.n	8001914 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	b298      	uxth	r0, r3
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	b299      	uxth	r1, r3
 800193e:	f107 0310 	add.w	r3, r7, #16
 8001942:	2204      	movs	r2, #4
 8001944:	f7ff feac 	bl	80016a0 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8001948:	bf00      	nop
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	461a      	mov	r2, r3
 800195e:	2104      	movs	r1, #4
 8001960:	202d      	movs	r0, #45	; 0x2d
 8001962:	f7ff ffb2 	bl	80018ca <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8001966:	2203      	movs	r2, #3
 8001968:	2106      	movs	r1, #6
 800196a:	202d      	movs	r0, #45	; 0x2d
 800196c:	f7ff ff9a 	bl	80018a4 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8001970:	2200      	movs	r2, #0
 8001972:	2106      	movs	r1, #6
 8001974:	202d      	movs	r0, #45	; 0x2d
 8001976:	f7ff ff95 	bl	80018a4 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 800197a:	210a      	movs	r1, #10
 800197c:	202d      	movs	r0, #45	; 0x2d
 800197e:	f7ff ff3a 	bl	80017f6 <dwt_read32bitoffsetreg>
 8001982:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8001984:	68fb      	ldr	r3, [r7, #12]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8001992:	2200      	movs	r2, #0
 8001994:	2102      	movs	r1, #2
 8001996:	202c      	movs	r0, #44	; 0x2c
 8001998:	f7ff ff84 	bl	80018a4 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 800199c:	2202      	movs	r2, #2
 800199e:	2102      	movs	r1, #2
 80019a0:	202c      	movs	r0, #44	; 0x2c
 80019a2:	f7ff ff7f 	bl	80018a4 <dwt_write8bitoffsetreg>
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}

080019aa <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 80019b2:	226d      	movs	r2, #109	; 0x6d
 80019b4:	f640 0106 	movw	r1, #2054	; 0x806
 80019b8:	202e      	movs	r0, #46	; 0x2e
 80019ba:	f7ff ff73 	bl	80018a4 <dwt_write8bitoffsetreg>

    if(prfIndex)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d007      	beq.n	80019d4 <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 80019c4:	f240 6207 	movw	r2, #1543	; 0x607
 80019c8:	f641 0106 	movw	r1, #6150	; 0x1806
 80019cc:	202e      	movs	r0, #46	; 0x2e
 80019ce:	f7ff ff7c 	bl	80018ca <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 80019d2:	e006      	b.n	80019e2 <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 80019d4:	f241 6207 	movw	r2, #5639	; 0x1607
 80019d8:	f641 0106 	movw	r1, #6150	; 0x1806
 80019dc:	202e      	movs	r0, #46	; 0x2e
 80019de:	f7ff ff74 	bl	80018ca <dwt_write16bitoffsetreg>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 80019ee:	200e      	movs	r0, #14
 80019f0:	f000 f82a 	bl	8001a48 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 80019f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019f8:	2106      	movs	r1, #6
 80019fa:	202d      	movs	r0, #45	; 0x2d
 80019fc:	f7ff ff65 	bl	80018ca <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8001a00:	2001      	movs	r0, #1
 8001a02:	f000 fa69 	bl	8001ed8 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8001a06:	2001      	movs	r0, #1
 8001a08:	f000 f81e 	bl	8001a48 <_dwt_enableclocks>
}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <dwt_setrxaftertxdelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxaftertxdelay(uint32 rxDelayTime)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
    uint32 val = dwt_read32bitreg(ACK_RESP_T_ID) ; // Read ACK_RESP_T_ID register
 8001a18:	2100      	movs	r1, #0
 8001a1a:	201a      	movs	r0, #26
 8001a1c:	f7ff feeb 	bl	80017f6 <dwt_read32bitoffsetreg>
 8001a20:	60f8      	str	r0, [r7, #12]

    val &= ~(ACK_RESP_T_W4R_TIM_MASK) ; // Clear the timer (19:0)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	0d1b      	lsrs	r3, r3, #20
 8001a26:	051b      	lsls	r3, r3, #20
 8001a28:	60fb      	str	r3, [r7, #12]

    val |= (rxDelayTime & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(ACK_RESP_T_ID, val) ;
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	2100      	movs	r1, #0
 8001a3a:	201a      	movs	r0, #26
 8001a3c:	f7ff ff61 	bl	8001902 <dwt_write32bitoffsetreg>
}
 8001a40:	bf00      	nop
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8001a50:	f107 030c 	add.w	r3, r7, #12
 8001a54:	2202      	movs	r2, #2
 8001a56:	2100      	movs	r1, #0
 8001a58:	2036      	movs	r0, #54	; 0x36
 8001a5a:	f7ff fe78 	bl	800174e <dwt_readfromdevice>
    switch(clocks)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b0e      	cmp	r3, #14
 8001a62:	d876      	bhi.n	8001b52 <_dwt_enableclocks+0x10a>
 8001a64:	a201      	add	r2, pc, #4	; (adr r2, 8001a6c <_dwt_enableclocks+0x24>)
 8001a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a6a:	bf00      	nop
 8001a6c:	08001ab9 	.word	0x08001ab9
 8001a70:	08001aa9 	.word	0x08001aa9
 8001a74:	08001acf 	.word	0x08001acf
 8001a78:	08001b53 	.word	0x08001b53
 8001a7c:	08001b53 	.word	0x08001b53
 8001a80:	08001b53 	.word	0x08001b53
 8001a84:	08001b53 	.word	0x08001b53
 8001a88:	08001ae5 	.word	0x08001ae5
 8001a8c:	08001b05 	.word	0x08001b05
 8001a90:	08001b53 	.word	0x08001b53
 8001a94:	08001b53 	.word	0x08001b53
 8001a98:	08001b1b 	.word	0x08001b1b
 8001a9c:	08001b27 	.word	0x08001b27
 8001aa0:	08001b33 	.word	0x08001b33
 8001aa4:	08001b49 	.word	0x08001b49
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8001aac:	7b7b      	ldrb	r3, [r7, #13]
 8001aae:	f023 0301 	bic.w	r3, r3, #1
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001ab6:	e04d      	b.n	8001b54 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8001ab8:	7b3b      	ldrb	r3, [r7, #12]
 8001aba:	b25b      	sxtb	r3, r3
 8001abc:	f023 0303 	bic.w	r3, r3, #3
 8001ac0:	b25b      	sxtb	r3, r3
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	b25b      	sxtb	r3, r3
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	733b      	strb	r3, [r7, #12]
        }
        break;
 8001acc:	e042      	b.n	8001b54 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8001ace:	7b3b      	ldrb	r3, [r7, #12]
 8001ad0:	b25b      	sxtb	r3, r3
 8001ad2:	f023 0303 	bic.w	r3, r3, #3
 8001ad6:	b25b      	sxtb	r3, r3
 8001ad8:	f043 0302 	orr.w	r3, r3, #2
 8001adc:	b25b      	sxtb	r3, r3
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	733b      	strb	r3, [r7, #12]
        }
        break;
 8001ae2:	e037      	b.n	8001b54 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8001ae4:	7b3b      	ldrb	r3, [r7, #12]
 8001ae6:	b25b      	sxtb	r3, r3
 8001ae8:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8001aec:	b25b      	sxtb	r3, r3
 8001aee:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8001af2:	b25b      	sxtb	r3, r3
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8001af8:	7b7b      	ldrb	r3, [r7, #13]
 8001afa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001b02:	e027      	b.n	8001b54 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8001b04:	7b3b      	ldrb	r3, [r7, #12]
 8001b06:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8001b0e:	7b7b      	ldrb	r3, [r7, #13]
 8001b10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001b18:	e01c      	b.n	8001b54 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8001b1a:	7b7b      	ldrb	r3, [r7, #13]
 8001b1c:	f043 0302 	orr.w	r3, r3, #2
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001b24:	e016      	b.n	8001b54 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8001b26:	7b7b      	ldrb	r3, [r7, #13]
 8001b28:	f023 0302 	bic.w	r3, r3, #2
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001b30:	e010      	b.n	8001b54 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8001b32:	7b3b      	ldrb	r3, [r7, #12]
 8001b34:	b25b      	sxtb	r3, r3
 8001b36:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001b3a:	b25b      	sxtb	r3, r3
 8001b3c:	f043 0320 	orr.w	r3, r3, #32
 8001b40:	b25b      	sxtb	r3, r3
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	733b      	strb	r3, [r7, #12]
        }
        break;
 8001b46:	e005      	b.n	8001b54 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001b50:	e000      	b.n	8001b54 <_dwt_enableclocks+0x10c>
        default:
        break;
 8001b52:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8001b54:	f107 030c 	add.w	r3, r7, #12
 8001b58:	2201      	movs	r2, #1
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	2036      	movs	r0, #54	; 0x36
 8001b5e:	f7ff fd9f 	bl	80016a0 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8001b62:	f107 030c 	add.w	r3, r7, #12
 8001b66:	3301      	adds	r3, #1
 8001b68:	2201      	movs	r2, #1
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	2036      	movs	r0, #54	; 0x36
 8001b6e:	f7ff fd97 	bl	80016a0 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop

08001b7c <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8001b80:	2000      	movs	r0, #0
 8001b82:	f7ff ff61 	bl	8001a48 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8001b86:	2200      	movs	r2, #0
 8001b88:	2104      	movs	r1, #4
 8001b8a:	2036      	movs	r0, #54	; 0x36
 8001b8c:	f7ff fe9d 	bl	80018ca <dwt_write16bitoffsetreg>
}
 8001b90:	bf00      	nop
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <dwt_setdelayedtrxtime>:
 * output parameters none
 *
 * no return value
 */
void dwt_setdelayedtrxtime(uint32 starttime)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
    dwt_write32bitoffsetreg(DX_TIME_ID, 1, starttime); // Write at offset 1 as the lower 9 bits of this register are ignored
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	200a      	movs	r0, #10
 8001ba2:	f7ff feae 	bl	8001902 <dwt_write32bitoffsetreg>

} // end dwt_setdelayedtrxtime()
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
    int retval = DWT_SUCCESS ;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	72fb      	strb	r3, [r7, #11]
    uint16 checkTxOK = 0 ;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	813b      	strh	r3, [r7, #8]

    if(mode & DWT_RESPONSE_EXPECTED)
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <dwt_starttx+0x2c>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	72fb      	strb	r3, [r7, #11]
        pdw1000local->wait4resp = 1;
 8001bd4:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <dwt_starttx+0x98>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d020      	beq.n	8001c28 <dwt_starttx+0x78>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 8001be6:	7afb      	ldrb	r3, [r7, #11]
 8001be8:	f043 0306 	orr.w	r3, r3, #6
 8001bec:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8001bee:	7afb      	ldrb	r3, [r7, #11]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	200d      	movs	r0, #13
 8001bf6:	f7ff fe55 	bl	80018a4 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 8001bfa:	2103      	movs	r1, #3
 8001bfc:	200f      	movs	r0, #15
 8001bfe:	f7ff fe21 	bl	8001844 <dwt_read16bitoffsetreg>
 8001c02:	4603      	mov	r3, r0
 8001c04:	813b      	strh	r3, [r7, #8]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 8001c06:	893b      	ldrh	r3, [r7, #8]
 8001c08:	f403 6381 	and.w	r3, r3, #1032	; 0x408
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d102      	bne.n	8001c16 <dwt_starttx+0x66>
        {
            retval = DWT_SUCCESS ; // All okay
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	e012      	b.n	8001c3c <dwt_starttx+0x8c>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 8001c16:	2240      	movs	r2, #64	; 0x40
 8001c18:	2100      	movs	r1, #0
 8001c1a:	200d      	movs	r0, #13
 8001c1c:	f7ff fe42 	bl	80018a4 <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 8001c20:	f04f 33ff 	mov.w	r3, #4294967295
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	e009      	b.n	8001c3c <dwt_starttx+0x8c>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 8001c28:	7afb      	ldrb	r3, [r7, #11]
 8001c2a:	f043 0302 	orr.w	r3, r3, #2
 8001c2e:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8001c30:	7afb      	ldrb	r3, [r7, #11]
 8001c32:	461a      	mov	r2, r3
 8001c34:	2100      	movs	r1, #0
 8001c36:	200d      	movs	r0, #13
 8001c38:	f7ff fe34 	bl	80018a4 <dwt_write8bitoffsetreg>
    }

    return retval;
 8001c3c:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000000 	.word	0x20000000

08001c4c <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 8001c52:	2100      	movs	r1, #0
 8001c54:	200e      	movs	r0, #14
 8001c56:	f7ff fdce 	bl	80017f6 <dwt_read32bitoffsetreg>
 8001c5a:	6078      	str	r0, [r7, #4]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
 8001c5c:	f000 f91e 	bl	8001e9c <decamutexon>
 8001c60:	6038      	str	r0, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 8001c62:	2200      	movs	r2, #0
 8001c64:	2100      	movs	r1, #0
 8001c66:	200e      	movs	r0, #14
 8001c68:	f7ff fe4b 	bl	8001902 <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 8001c6c:	2240      	movs	r2, #64	; 0x40
 8001c6e:	2100      	movs	r1, #0
 8001c70:	200d      	movs	r0, #13
 8001c72:	f7ff fe17 	bl	80018a4 <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 8001c76:	4a0b      	ldr	r2, [pc, #44]	; (8001ca4 <dwt_forcetrxoff+0x58>)
 8001c78:	2100      	movs	r1, #0
 8001c7a:	200f      	movs	r0, #15
 8001c7c:	f7ff fe41 	bl	8001902 <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 8001c80:	f000 f814 	bl	8001cac <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	2100      	movs	r1, #0
 8001c88:	200e      	movs	r0, #14
 8001c8a:	f7ff fe3a 	bl	8001902 <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 8001c8e:	6838      	ldr	r0, [r7, #0]
 8001c90:	f000 f915 	bl	8001ebe <decamutexoff>
    pdw1000local->wait4resp = 0;
 8001c94:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <dwt_forcetrxoff+0x5c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	2427fff8 	.word	0x2427fff8
 8001ca8:	20000000 	.word	0x20000000

08001cac <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8001cb2:	2103      	movs	r1, #3
 8001cb4:	200f      	movs	r0, #15
 8001cb6:	f7ff fde2 	bl	800187e <dwt_read8bitoffsetreg>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8001cbe:	79fa      	ldrb	r2, [r7, #7]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8001cc4:	4053      	eors	r3, r2
 8001cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d004      	beq.n	8001cd8 <dwt_syncrxbufptrs+0x2c>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2103      	movs	r1, #3
 8001cd2:	200d      	movs	r0, #13
 8001cd4:	f7ff fde6 	bl	80018a4 <dwt_write8bitoffsetreg>
    }
}
 8001cd8:	bf00      	nop
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <dwt_rxenable+0x16>
    {
        dwt_syncrxbufptrs();
 8001cf2:	f7ff ffdb 	bl	8001cac <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 8001cf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cfa:	81fb      	strh	r3, [r7, #14]

    if (mode & DWT_START_RX_DELAYED)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <dwt_rxenable+0x2e>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 8001d06:	89fb      	ldrh	r3, [r7, #14]
 8001d08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d0c:	81fb      	strh	r3, [r7, #14]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8001d0e:	89fb      	ldrh	r3, [r7, #14]
 8001d10:	461a      	mov	r2, r3
 8001d12:	2100      	movs	r1, #0
 8001d14:	200d      	movs	r0, #13
 8001d16:	f7ff fdd8 	bl	80018ca <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d01a      	beq.n	8001d5a <dwt_rxenable+0x7a>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8001d24:	2103      	movs	r1, #3
 8001d26:	200f      	movs	r0, #15
 8001d28:	f7ff fda9 	bl	800187e <dwt_read8bitoffsetreg>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	737b      	strb	r3, [r7, #13]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 8001d30:	7b7b      	ldrb	r3, [r7, #13]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00f      	beq.n	8001d5a <dwt_rxenable+0x7a>
        {
            dwt_forcetrxoff(); // turn the delayed receive off
 8001d3a:	f7ff ff87 	bl	8001c4c <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d105      	bne.n	8001d54 <dwt_rxenable+0x74>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 8001d48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	200d      	movs	r0, #13
 8001d50:	f7ff fdbb 	bl	80018ca <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 8001d54:	f04f 33ff 	mov.w	r3, #4294967295
 8001d58:	e000      	b.n	8001d5c <dwt_rxenable+0x7c>
        }
    }

    return DWT_SUCCESS;
 8001d5a:	2300      	movs	r3, #0
} // end dwt_rxenable()
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	80fb      	strh	r3, [r7, #6]
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
 8001d6e:	2103      	movs	r1, #3
 8001d70:	2004      	movs	r0, #4
 8001d72:	f7ff fd84 	bl	800187e <dwt_read8bitoffsetreg>
 8001d76:	4603      	mov	r3, r0
 8001d78:	73fb      	strb	r3, [r7, #15]

    if(time > 0)
 8001d7a:	88fb      	ldrh	r3, [r7, #6]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d018      	beq.n	8001db2 <dwt_setrxtimeout+0x4e>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	461a      	mov	r2, r3
 8001d84:	2100      	movs	r1, #0
 8001d86:	200c      	movs	r0, #12
 8001d88:	f7ff fd9f 	bl	80018ca <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	f043 0310 	orr.w	r3, r3, #16
 8001d92:	73fb      	strb	r3, [r7, #15]
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 8001d94:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <dwt_setrxtimeout+0x7c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691a      	ldr	r2, [r3, #16]
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <dwt_setrxtimeout+0x7c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001da2:	611a      	str	r2, [r3, #16]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	461a      	mov	r2, r3
 8001da8:	2103      	movs	r1, #3
 8001daa:	2004      	movs	r0, #4
 8001dac:	f7ff fd7a 	bl	80018a4 <dwt_write8bitoffsetreg>
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
 8001db0:	e011      	b.n	8001dd6 <dwt_setrxtimeout+0x72>
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	f023 0310 	bic.w	r3, r3, #16
 8001db8:	73fb      	strb	r3, [r7, #15]
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <dwt_setrxtimeout+0x7c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	691a      	ldr	r2, [r3, #16]
 8001dc0:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <dwt_setrxtimeout+0x7c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001dc8:	611a      	str	r2, [r3, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	2103      	movs	r1, #3
 8001dd0:	2004      	movs	r0, #4
 8001dd2:	f7ff fd67 	bl	80018a4 <dwt_write8bitoffsetreg>
} // end dwt_setrxtimeout()
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000000 	.word	0x20000000

08001de4 <dwt_setpreambledetecttimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setpreambledetecttimeout(uint16 timeout)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	80fb      	strh	r3, [r7, #6]
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_PRETOC_OFFSET, timeout);
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	461a      	mov	r2, r3
 8001df2:	2124      	movs	r1, #36	; 0x24
 8001df4:	2027      	movs	r0, #39	; 0x27
 8001df6:	f7ff fd68 	bl	80018ca <dwt_write16bitoffsetreg>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	af00      	add	r7, sp, #0
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 8001e06:	22e0      	movs	r2, #224	; 0xe0
 8001e08:	2103      	movs	r1, #3
 8001e0a:	2036      	movs	r0, #54	; 0x36
 8001e0c:	f7ff fd4a 	bl	80018a4 <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8001e10:	22f0      	movs	r2, #240	; 0xf0
 8001e12:	2103      	movs	r1, #3
 8001e14:	2036      	movs	r0, #54	; 0x36
 8001e16:	f7ff fd45 	bl	80018a4 <dwt_write8bitoffsetreg>
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 8001e24:	f7ff feaa 	bl	8001b7c <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	202c      	movs	r0, #44	; 0x2c
 8001e2e:	f7ff fd4c 	bl	80018ca <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2106      	movs	r1, #6
 8001e36:	202c      	movs	r0, #44	; 0x2c
 8001e38:	f7ff fd34 	bl	80018a4 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8001e3c:	f7ff fda7 	bl	800198e <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8001e40:	2200      	movs	r2, #0
 8001e42:	2103      	movs	r1, #3
 8001e44:	2036      	movs	r0, #54	; 0x36
 8001e46:	f7ff fd2d 	bl	80018a4 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	f000 f844 	bl	8001ed8 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8001e50:	22f0      	movs	r2, #240	; 0xf0
 8001e52:	2103      	movs	r1, #3
 8001e54:	2036      	movs	r0, #54	; 0x36
 8001e56:	f7ff fd25 	bl	80018a4 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8001e5a:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <dwt_softreset+0x48>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	755a      	strb	r2, [r3, #21]
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000000 	.word	0x20000000

08001e6c <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	f003 031f 	and.w	r3, r3, #31
 8001e7e:	b25b      	sxtb	r3, r3
 8001e80:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e84:	b25b      	sxtb	r3, r3
 8001e86:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	210e      	movs	r1, #14
 8001e8e:	202b      	movs	r0, #43	; 0x2b
 8001e90:	f7ff fd08 	bl	80018a4 <dwt_write8bitoffsetreg>
}
 8001e94:	bf00      	nop
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 8001ea2:	f000 f9e3 	bl	800226c <port_GetEXT_IRQStatus>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	607b      	str	r3, [r7, #4]

	if(s) {
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 8001eb0:	f000 f9ce 	bl	8002250 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 8001eb4:	687b      	ldr	r3, [r7, #4]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 8001ecc:	f000 f9c7 	bl	800225e <port_EnableEXT_IRQ>
	}
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f8ef 	bl	80020c4 <Sleep>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 8001ef0:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8001ef4:	4683      	mov	fp, r0
 8001ef6:	468a      	mov	sl, r1
 8001ef8:	4690      	mov	r8, r2
 8001efa:	4699      	mov	r9, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001efc:	f7ff ffce 	bl	8001e9c <decamutexon>

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001f00:	4d13      	ldr	r5, [pc, #76]	; (8001f50 <writetospi+0x60>)
    stat = decamutexon() ;
 8001f02:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001f04:	4628      	mov	r0, r5
 8001f06:	f003 fb84 	bl	8005612 <HAL_SPI_GetState>
 8001f0a:	2801      	cmp	r0, #1
 8001f0c:	4604      	mov	r4, r0
 8001f0e:	d1f9      	bne.n	8001f04 <writetospi+0x14>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8001f10:	4810      	ldr	r0, [pc, #64]	; (8001f54 <writetospi+0x64>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	2140      	movs	r1, #64	; 0x40
 8001f16:	f001 ffb3 	bl	8003e80 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 8001f1a:	465a      	mov	r2, fp
 8001f1c:	4651      	mov	r1, sl
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f22:	480b      	ldr	r0, [pc, #44]	; (8001f50 <writetospi+0x60>)
 8001f24:	f003 fa39 	bl	800539a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 8001f28:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2c:	4649      	mov	r1, r9
 8001f2e:	fa1f f288 	uxth.w	r2, r8
 8001f32:	4807      	ldr	r0, [pc, #28]	; (8001f50 <writetospi+0x60>)
 8001f34:	f003 fa31 	bl	800539a <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8001f38:	4622      	mov	r2, r4
 8001f3a:	2140      	movs	r1, #64	; 0x40
 8001f3c:	4805      	ldr	r0, [pc, #20]	; (8001f54 <writetospi+0x64>)
 8001f3e:	f001 ff9f 	bl	8003e80 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8001f42:	4630      	mov	r0, r6
 8001f44:	f7ff ffbb 	bl	8001ebe <decamutexoff>

    return 0;
} // end writetospi()
 8001f48:	2000      	movs	r0, #0
 8001f4a:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000758 	.word	0x20000758
 8001f54:	40020400 	.word	0x40020400

08001f58 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 8001f58:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 8001f5c:	4681      	mov	r9, r0
 8001f5e:	460c      	mov	r4, r1
 8001f60:	4690      	mov	r8, r2
 8001f62:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001f64:	f7ff ff9a 	bl	8001e9c <decamutexon>

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001f68:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8001fe8 <readfromspi+0x90>
    stat = decamutexon() ;
 8001f6c:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001f6e:	4650      	mov	r0, sl
 8001f70:	f003 fb4f 	bl	8005612 <HAL_SPI_GetState>
 8001f74:	2801      	cmp	r0, #1
 8001f76:	d1fa      	bne.n	8001f6e <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8001f78:	481a      	ldr	r0, [pc, #104]	; (8001fe4 <readfromspi+0x8c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2140      	movs	r1, #64	; 0x40
 8001f7e:	f001 ff7f 	bl	8003e80 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 8001f82:	f1b9 0f00 	cmp.w	r9, #0
 8001f86:	d00c      	beq.n	8001fa2 <readfromspi+0x4a>
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8001f88:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8001fe8 <readfromspi+0x90>
 8001f8c:	44a1      	add	r9, r4
 8001f8e:	2201      	movs	r2, #1
 8001f90:	4621      	mov	r1, r4
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295
    for(i=0; i<headerLength; i++)
 8001f96:	4414      	add	r4, r2
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8001f98:	4650      	mov	r0, sl
 8001f9a:	f003 f9fe 	bl	800539a <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 8001f9e:	454c      	cmp	r4, r9
 8001fa0:	d1f5      	bne.n	8001f8e <readfromspi+0x36>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 8001fa2:	f1b8 0f00 	cmp.w	r8, #0
 8001fa6:	d012      	beq.n	8001fce <readfromspi+0x76>
 8001fa8:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8001fe8 <readfromspi+0x90>
 8001fac:	eb05 0008 	add.w	r0, r5, r8
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8001fb0:	2400      	movs	r4, #0
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 8001fb2:	f8dc 2000 	ldr.w	r2, [ip]
 8001fb6:	6891      	ldr	r1, [r2, #8]
 8001fb8:	0789      	lsls	r1, r1, #30
 8001fba:	d5fc      	bpl.n	8001fb6 <readfromspi+0x5e>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8001fbc:	60d4      	str	r4, [r2, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 8001fbe:	6891      	ldr	r1, [r2, #8]
 8001fc0:	07cb      	lsls	r3, r1, #31
 8001fc2:	d5fc      	bpl.n	8001fbe <readfromspi+0x66>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 8001fc4:	68d3      	ldr	r3, [r2, #12]
 8001fc6:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 8001fca:	4285      	cmp	r5, r0
 8001fcc:	d1f1      	bne.n	8001fb2 <readfromspi+0x5a>
    }

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8001fce:	2201      	movs	r2, #1
 8001fd0:	2140      	movs	r1, #64	; 0x40
 8001fd2:	4804      	ldr	r0, [pc, #16]	; (8001fe4 <readfromspi+0x8c>)
 8001fd4:	f001 ff54 	bl	8003e80 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8001fd8:	4630      	mov	r0, r6
 8001fda:	f7ff ff70 	bl	8001ebe <decamutexoff>

    return 0;
} // end readfromspi()
 8001fde:	2000      	movs	r0, #0
 8001fe0:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 8001fe4:	40020400 	.word	0x40020400
 8001fe8:	20000758 	.word	0x20000758

08001fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	db0b      	blt.n	8002016 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	f003 021f 	and.w	r2, r3, #31
 8002004:	4907      	ldr	r1, [pc, #28]	; (8002024 <__NVIC_EnableIRQ+0x38>)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	2001      	movs	r0, #1
 800200e:	fa00 f202 	lsl.w	r2, r0, r2
 8002012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000e100 	.word	0xe000e100

08002028 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	2b00      	cmp	r3, #0
 8002038:	db12      	blt.n	8002060 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	f003 021f 	and.w	r2, r3, #31
 8002040:	490a      	ldr	r1, [pc, #40]	; (800206c <__NVIC_DisableIRQ+0x44>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	095b      	lsrs	r3, r3, #5
 8002048:	2001      	movs	r0, #1
 800204a:	fa00 f202 	lsl.w	r2, r0, r2
 800204e:	3320      	adds	r3, #32
 8002050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002054:	f3bf 8f4f 	dsb	sy
}
 8002058:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800205a:	f3bf 8f6f 	isb	sy
}
 800205e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000e100 	.word	0xe000e100

08002070 <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
int usleep(useconds_t usec)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
 8002078:	2300      	movs	r3, #0
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	e012      	b.n	80020a4 <usleep+0x34>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
 800207e:	2300      	movs	r3, #0
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	e004      	b.n	800208e <usleep+0x1e>
        {
            __NOP();
 8002084:	bf00      	nop
            __NOP();
 8002086:	bf00      	nop
        for(j=0;j<2;j++)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	3301      	adds	r3, #1
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2b01      	cmp	r3, #1
 8002092:	bfd4      	ite	le
 8002094:	2301      	movle	r3, #1
 8002096:	2300      	movgt	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f2      	bne.n	8002084 <usleep+0x14>
    for(i=0;i<usec;i++)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	3301      	adds	r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	bf8c      	ite	hi
 80020ac:	2301      	movhi	r3, #1
 80020ae:	2300      	movls	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1e3      	bne.n	800207e <usleep+0xe>
        }
    }
    return 0;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f001 fb41 	bl	8003754 <HAL_Delay>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 80020e4:	4a0b      	ldr	r2, [pc, #44]	; (8002114 <EXTI_GetITEnStatus+0x38>)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	095b      	lsrs	r3, r3, #5
 80020ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f003 031f 	and.w	r3, r3, #31
 80020f4:	fa22 f303 	lsr.w	r3, r2, r3
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	bf14      	ite	ne
 8002100:	2301      	movne	r3, #1
 8002102:	2300      	moveq	r3, #0
 8002104:	b2db      	uxtb	r3, r3
}
 8002106:	4618      	mov	r0, r3
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e000e100 	.word	0xe000e100

08002118 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RST_Pin;
 800211e:	2301      	movs	r3, #1
 8002120:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002122:	2311      	movs	r3, #17
 8002124:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 800212a:	1d3b      	adds	r3, r7, #4
 800212c:	4619      	mov	r1, r3
 800212e:	480a      	ldr	r0, [pc, #40]	; (8002158 <reset_DW1000+0x40>)
 8002130:	f001 fd0a 	bl	8003b48 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 8002134:	2200      	movs	r2, #0
 8002136:	2101      	movs	r1, #1
 8002138:	4807      	ldr	r0, [pc, #28]	; (8002158 <reset_DW1000+0x40>)
 800213a:	f001 fea1 	bl	8003e80 <HAL_GPIO_WritePin>

    usleep(1);
 800213e:	2001      	movs	r0, #1
 8002140:	f7ff ff96 	bl	8002070 <usleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 8002144:	2000      	movs	r0, #0
 8002146:	f000 f809 	bl	800215c <setup_DW1000RSTnIRQ>



    Sleep(2);
 800214a:	2002      	movs	r0, #2
 800214c:	f7ff ffba 	bl	80020c4 <Sleep>
}
 8002150:	bf00      	nop
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40020000 	.word	0x40020000

0800215c <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b088      	sub	sp, #32
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d015      	beq.n	8002196 <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RST_Pin;
 800216a:	2301      	movs	r3, #1
 800216c:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800216e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002172:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8002178:	f107 030c 	add.w	r3, r7, #12
 800217c:	4619      	mov	r1, r3
 800217e:	4813      	ldr	r0, [pc, #76]	; (80021cc <setup_DW1000RSTnIRQ+0x70>)
 8002180:	f001 fce2 	bl	8003b48 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 8002184:	2006      	movs	r0, #6
 8002186:	f001 fc24 	bl	80039d2 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800218a:	2200      	movs	r2, #0
 800218c:	2105      	movs	r1, #5
 800218e:	2006      	movs	r0, #6
 8002190:	f001 fc03 	bl	800399a <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
    }
}
 8002194:	e015      	b.n	80021c2 <setup_DW1000RSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 8002196:	2006      	movs	r0, #6
 8002198:	f001 fc29 	bl	80039ee <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RST_Pin;
 800219c:	2301      	movs	r3, #1
 800219e:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80021a0:	2311      	movs	r3, #17
 80021a2:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021a8:	2302      	movs	r3, #2
 80021aa:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80021ac:	f107 030c 	add.w	r3, r7, #12
 80021b0:	4619      	mov	r1, r3
 80021b2:	4806      	ldr	r0, [pc, #24]	; (80021cc <setup_DW1000RSTnIRQ+0x70>)
 80021b4:	f001 fcc8 	bl	8003b48 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
 80021b8:	2201      	movs	r2, #1
 80021ba:	2101      	movs	r1, #1
 80021bc:	4803      	ldr	r0, [pc, #12]	; (80021cc <setup_DW1000RSTnIRQ+0x70>)
 80021be:	f001 fe5f 	bl	8003e80 <HAL_GPIO_WritePin>
}
 80021c2:	bf00      	nop
 80021c4:	3720      	adds	r7, #32
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40020000 	.word	0x40020000

080021d0 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80021d4:	4b03      	ldr	r3, [pc, #12]	; (80021e4 <port_set_dw1000_slowrate+0x14>)
 80021d6:	2220      	movs	r2, #32
 80021d8:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 80021da:	4802      	ldr	r0, [pc, #8]	; (80021e4 <port_set_dw1000_slowrate+0x14>)
 80021dc:	f003 f854 	bl	8005288 <HAL_SPI_Init>
}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20000758 	.word	0x20000758

080021e8 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80021ec:	4b03      	ldr	r3, [pc, #12]	; (80021fc <port_set_dw1000_fastrate+0x14>)
 80021ee:	2208      	movs	r2, #8
 80021f0:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 80021f2:	4802      	ldr	r0, [pc, #8]	; (80021fc <port_set_dw1000_fastrate+0x14>)
 80021f4:	f003 f848 	bl	8005288 <HAL_SPI_Init>
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000758 	.word	0x20000758

08002200 <HAL_GPIO_EXTI_Callback>:
/* @fn      HAL_GPIO_EXTI_Callback
 * @brief   IRQ HAL call-back for all EXTI configured lines
 *          i.e. DW_RESET_Pin and DW_IRQn_Pin
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == DW_RST_Pin)
 800220a:	88fb      	ldrh	r3, [r7, #6]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d103      	bne.n	8002218 <HAL_GPIO_EXTI_Callback+0x18>
    {
        signalResetDone = 1;
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_GPIO_EXTI_Callback+0x2c>)
 8002212:	2201      	movs	r2, #1
 8002214:	601a      	str	r2, [r3, #0]
        process_deca_irq();
    }
    else
    {
    }
}
 8002216:	e005      	b.n	8002224 <HAL_GPIO_EXTI_Callback+0x24>
    else if (GPIO_Pin == DW_IRQ_Pin)
 8002218:	88fb      	ldrh	r3, [r7, #6]
 800221a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800221e:	d101      	bne.n	8002224 <HAL_GPIO_EXTI_Callback+0x24>
        process_deca_irq();
 8002220:	f000 f806 	bl	8002230 <process_deca_irq>
}
 8002224:	bf00      	nop
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	2000029c 	.word	0x2000029c

08002230 <process_deca_irq>:
 * @brief   main call-back for processing of DW1000 IRQ
 *          it re-enters the IRQ routing and processes all events.
 *          After processing of all events, DW1000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
    while(port_CheckEXT_IRQ() != 0)
 8002234:	e002      	b.n	800223c <process_deca_irq+0xc>
    {

        port_deca_isr();
 8002236:	4b05      	ldr	r3, [pc, #20]	; (800224c <process_deca_irq+0x1c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4798      	blx	r3
    while(port_CheckEXT_IRQ() != 0)
 800223c:	f000 f81e 	bl	800227c <port_CheckEXT_IRQ>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f7      	bne.n	8002236 <process_deca_irq+0x6>

    } //while DW1000 IRQ line active
}
 8002246:	bf00      	nop
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}
 800224c:	200002a0 	.word	0x200002a0

08002250 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8002254:	2017      	movs	r0, #23
 8002256:	f7ff fee7 	bl	8002028 <__NVIC_DisableIRQ>
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}

0800225e <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 8002262:	2017      	movs	r0, #23
 8002264:	f7ff fec2 	bl	8001fec <__NVIC_EnableIRQ>
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}

0800226c <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 8002270:	2017      	movs	r0, #23
 8002272:	f7ff ff33 	bl	80020dc <EXTI_GetITEnStatus>
 8002276:	4603      	mov	r3, r0
}
 8002278:	4618      	mov	r0, r3
 800227a:	bd80      	pop	{r7, pc}

0800227c <port_CheckEXT_IRQ>:

/* @fn      port_CheckEXT_IRQ
 * @brief   wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(DW_IRQ_GPIO_Port, DW_IRQ_Pin);
 8002280:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002284:	4802      	ldr	r0, [pc, #8]	; (8002290 <port_CheckEXT_IRQ+0x14>)
 8002286:	f001 fde3 	bl	8003e50 <HAL_GPIO_ReadPin>
 800228a:	4603      	mov	r3, r0
}
 800228c:	4618      	mov	r0, r3
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40020000 	.word	0x40020000

08002294 <SSD1306_InvertDisplay>:
}



void SSD1306_InvertDisplay (int i)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d005      	beq.n	80022ae <SSD1306_InvertDisplay+0x1a>
 80022a2:	22a7      	movs	r2, #167	; 0xa7
 80022a4:	2100      	movs	r1, #0
 80022a6:	2078      	movs	r0, #120	; 0x78
 80022a8:	f000 fab4 	bl	8002814 <ssd1306_I2C_Write>

  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}
 80022ac:	e004      	b.n	80022b8 <SSD1306_InvertDisplay+0x24>
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
 80022ae:	22a6      	movs	r2, #166	; 0xa6
 80022b0:	2100      	movs	r1, #0
 80022b2:	2078      	movs	r0, #120	; 0x78
 80022b4:	f000 faae 	bl	8002814 <ssd1306_I2C_Write>
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80022c6:	f000 fa29 	bl	800271c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80022ca:	f644 6320 	movw	r3, #20000	; 0x4e20
 80022ce:	2201      	movs	r2, #1
 80022d0:	2178      	movs	r1, #120	; 0x78
 80022d2:	485b      	ldr	r0, [pc, #364]	; (8002440 <SSD1306_Init+0x180>)
 80022d4:	f002 f848 	bl	8004368 <HAL_I2C_IsDeviceReady>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	e0a9      	b.n	8002436 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80022e2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80022e6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80022e8:	e002      	b.n	80022f0 <SSD1306_Init+0x30>
		p--;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3b01      	subs	r3, #1
 80022ee:	607b      	str	r3, [r7, #4]
	while(p>0)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f9      	bne.n	80022ea <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80022f6:	22ae      	movs	r2, #174	; 0xae
 80022f8:	2100      	movs	r1, #0
 80022fa:	2078      	movs	r0, #120	; 0x78
 80022fc:	f000 fa8a 	bl	8002814 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002300:	2220      	movs	r2, #32
 8002302:	2100      	movs	r1, #0
 8002304:	2078      	movs	r0, #120	; 0x78
 8002306:	f000 fa85 	bl	8002814 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800230a:	2210      	movs	r2, #16
 800230c:	2100      	movs	r1, #0
 800230e:	2078      	movs	r0, #120	; 0x78
 8002310:	f000 fa80 	bl	8002814 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002314:	22b0      	movs	r2, #176	; 0xb0
 8002316:	2100      	movs	r1, #0
 8002318:	2078      	movs	r0, #120	; 0x78
 800231a:	f000 fa7b 	bl	8002814 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800231e:	22c8      	movs	r2, #200	; 0xc8
 8002320:	2100      	movs	r1, #0
 8002322:	2078      	movs	r0, #120	; 0x78
 8002324:	f000 fa76 	bl	8002814 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002328:	2200      	movs	r2, #0
 800232a:	2100      	movs	r1, #0
 800232c:	2078      	movs	r0, #120	; 0x78
 800232e:	f000 fa71 	bl	8002814 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002332:	2210      	movs	r2, #16
 8002334:	2100      	movs	r1, #0
 8002336:	2078      	movs	r0, #120	; 0x78
 8002338:	f000 fa6c 	bl	8002814 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800233c:	2240      	movs	r2, #64	; 0x40
 800233e:	2100      	movs	r1, #0
 8002340:	2078      	movs	r0, #120	; 0x78
 8002342:	f000 fa67 	bl	8002814 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002346:	2281      	movs	r2, #129	; 0x81
 8002348:	2100      	movs	r1, #0
 800234a:	2078      	movs	r0, #120	; 0x78
 800234c:	f000 fa62 	bl	8002814 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002350:	22ff      	movs	r2, #255	; 0xff
 8002352:	2100      	movs	r1, #0
 8002354:	2078      	movs	r0, #120	; 0x78
 8002356:	f000 fa5d 	bl	8002814 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800235a:	22a1      	movs	r2, #161	; 0xa1
 800235c:	2100      	movs	r1, #0
 800235e:	2078      	movs	r0, #120	; 0x78
 8002360:	f000 fa58 	bl	8002814 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002364:	22a6      	movs	r2, #166	; 0xa6
 8002366:	2100      	movs	r1, #0
 8002368:	2078      	movs	r0, #120	; 0x78
 800236a:	f000 fa53 	bl	8002814 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800236e:	22a8      	movs	r2, #168	; 0xa8
 8002370:	2100      	movs	r1, #0
 8002372:	2078      	movs	r0, #120	; 0x78
 8002374:	f000 fa4e 	bl	8002814 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002378:	223f      	movs	r2, #63	; 0x3f
 800237a:	2100      	movs	r1, #0
 800237c:	2078      	movs	r0, #120	; 0x78
 800237e:	f000 fa49 	bl	8002814 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002382:	22a4      	movs	r2, #164	; 0xa4
 8002384:	2100      	movs	r1, #0
 8002386:	2078      	movs	r0, #120	; 0x78
 8002388:	f000 fa44 	bl	8002814 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800238c:	22d3      	movs	r2, #211	; 0xd3
 800238e:	2100      	movs	r1, #0
 8002390:	2078      	movs	r0, #120	; 0x78
 8002392:	f000 fa3f 	bl	8002814 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002396:	2200      	movs	r2, #0
 8002398:	2100      	movs	r1, #0
 800239a:	2078      	movs	r0, #120	; 0x78
 800239c:	f000 fa3a 	bl	8002814 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80023a0:	22d5      	movs	r2, #213	; 0xd5
 80023a2:	2100      	movs	r1, #0
 80023a4:	2078      	movs	r0, #120	; 0x78
 80023a6:	f000 fa35 	bl	8002814 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80023aa:	22f0      	movs	r2, #240	; 0xf0
 80023ac:	2100      	movs	r1, #0
 80023ae:	2078      	movs	r0, #120	; 0x78
 80023b0:	f000 fa30 	bl	8002814 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80023b4:	22d9      	movs	r2, #217	; 0xd9
 80023b6:	2100      	movs	r1, #0
 80023b8:	2078      	movs	r0, #120	; 0x78
 80023ba:	f000 fa2b 	bl	8002814 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80023be:	2222      	movs	r2, #34	; 0x22
 80023c0:	2100      	movs	r1, #0
 80023c2:	2078      	movs	r0, #120	; 0x78
 80023c4:	f000 fa26 	bl	8002814 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80023c8:	22da      	movs	r2, #218	; 0xda
 80023ca:	2100      	movs	r1, #0
 80023cc:	2078      	movs	r0, #120	; 0x78
 80023ce:	f000 fa21 	bl	8002814 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80023d2:	2212      	movs	r2, #18
 80023d4:	2100      	movs	r1, #0
 80023d6:	2078      	movs	r0, #120	; 0x78
 80023d8:	f000 fa1c 	bl	8002814 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80023dc:	22db      	movs	r2, #219	; 0xdb
 80023de:	2100      	movs	r1, #0
 80023e0:	2078      	movs	r0, #120	; 0x78
 80023e2:	f000 fa17 	bl	8002814 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80023e6:	2220      	movs	r2, #32
 80023e8:	2100      	movs	r1, #0
 80023ea:	2078      	movs	r0, #120	; 0x78
 80023ec:	f000 fa12 	bl	8002814 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80023f0:	228d      	movs	r2, #141	; 0x8d
 80023f2:	2100      	movs	r1, #0
 80023f4:	2078      	movs	r0, #120	; 0x78
 80023f6:	f000 fa0d 	bl	8002814 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80023fa:	2214      	movs	r2, #20
 80023fc:	2100      	movs	r1, #0
 80023fe:	2078      	movs	r0, #120	; 0x78
 8002400:	f000 fa08 	bl	8002814 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002404:	22af      	movs	r2, #175	; 0xaf
 8002406:	2100      	movs	r1, #0
 8002408:	2078      	movs	r0, #120	; 0x78
 800240a:	f000 fa03 	bl	8002814 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800240e:	222e      	movs	r2, #46	; 0x2e
 8002410:	2100      	movs	r1, #0
 8002412:	2078      	movs	r0, #120	; 0x78
 8002414:	f000 f9fe 	bl	8002814 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002418:	2000      	movs	r0, #0
 800241a:	f000 f843 	bl	80024a4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800241e:	f000 f813 	bl	8002448 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002422:	4b08      	ldr	r3, [pc, #32]	; (8002444 <SSD1306_Init+0x184>)
 8002424:	2200      	movs	r2, #0
 8002426:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002428:	4b06      	ldr	r3, [pc, #24]	; (8002444 <SSD1306_Init+0x184>)
 800242a:	2200      	movs	r2, #0
 800242c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800242e:	4b05      	ldr	r3, [pc, #20]	; (8002444 <SSD1306_Init+0x184>)
 8002430:	2201      	movs	r2, #1
 8002432:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002434:	2301      	movs	r3, #1
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	200006ac 	.word	0x200006ac
 8002444:	200006a4 	.word	0x200006a4

08002448 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800244e:	2300      	movs	r3, #0
 8002450:	71fb      	strb	r3, [r7, #7]
 8002452:	e01d      	b.n	8002490 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	3b50      	subs	r3, #80	; 0x50
 8002458:	b2db      	uxtb	r3, r3
 800245a:	461a      	mov	r2, r3
 800245c:	2100      	movs	r1, #0
 800245e:	2078      	movs	r0, #120	; 0x78
 8002460:	f000 f9d8 	bl	8002814 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002464:	2200      	movs	r2, #0
 8002466:	2100      	movs	r1, #0
 8002468:	2078      	movs	r0, #120	; 0x78
 800246a:	f000 f9d3 	bl	8002814 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800246e:	2210      	movs	r2, #16
 8002470:	2100      	movs	r1, #0
 8002472:	2078      	movs	r0, #120	; 0x78
 8002474:	f000 f9ce 	bl	8002814 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	01db      	lsls	r3, r3, #7
 800247c:	4a08      	ldr	r2, [pc, #32]	; (80024a0 <SSD1306_UpdateScreen+0x58>)
 800247e:	441a      	add	r2, r3
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	2140      	movs	r1, #64	; 0x40
 8002484:	2078      	movs	r0, #120	; 0x78
 8002486:	f000 f95f 	bl	8002748 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	3301      	adds	r3, #1
 800248e:	71fb      	strb	r3, [r7, #7]
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	2b07      	cmp	r3, #7
 8002494:	d9de      	bls.n	8002454 <SSD1306_UpdateScreen+0xc>
	}
}
 8002496:	bf00      	nop
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	200002a4 	.word	0x200002a4

080024a4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <SSD1306_Fill+0x14>
 80024b4:	2300      	movs	r3, #0
 80024b6:	e000      	b.n	80024ba <SSD1306_Fill+0x16>
 80024b8:	23ff      	movs	r3, #255	; 0xff
 80024ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024be:	4619      	mov	r1, r3
 80024c0:	4803      	ldr	r0, [pc, #12]	; (80024d0 <SSD1306_Fill+0x2c>)
 80024c2:	f004 f9cd 	bl	8006860 <memset>
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	200002a4 	.word	0x200002a4

080024d4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	80fb      	strh	r3, [r7, #6]
 80024de:	460b      	mov	r3, r1
 80024e0:	80bb      	strh	r3, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	70fb      	strb	r3, [r7, #3]
	if (
 80024e6:	88fb      	ldrh	r3, [r7, #6]
 80024e8:	2b7f      	cmp	r3, #127	; 0x7f
 80024ea:	d848      	bhi.n	800257e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80024ec:	88bb      	ldrh	r3, [r7, #4]
 80024ee:	2b3f      	cmp	r3, #63	; 0x3f
 80024f0:	d845      	bhi.n	800257e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80024f2:	4b26      	ldr	r3, [pc, #152]	; (800258c <SSD1306_DrawPixel+0xb8>)
 80024f4:	791b      	ldrb	r3, [r3, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d006      	beq.n	8002508 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80024fa:	78fb      	ldrb	r3, [r7, #3]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	bf0c      	ite	eq
 8002500:	2301      	moveq	r3, #1
 8002502:	2300      	movne	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d11a      	bne.n	8002544 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800250e:	88fa      	ldrh	r2, [r7, #6]
 8002510:	88bb      	ldrh	r3, [r7, #4]
 8002512:	08db      	lsrs	r3, r3, #3
 8002514:	b298      	uxth	r0, r3
 8002516:	4603      	mov	r3, r0
 8002518:	01db      	lsls	r3, r3, #7
 800251a:	4413      	add	r3, r2
 800251c:	4a1c      	ldr	r2, [pc, #112]	; (8002590 <SSD1306_DrawPixel+0xbc>)
 800251e:	5cd3      	ldrb	r3, [r2, r3]
 8002520:	b25a      	sxtb	r2, r3
 8002522:	88bb      	ldrh	r3, [r7, #4]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	2101      	movs	r1, #1
 800252a:	fa01 f303 	lsl.w	r3, r1, r3
 800252e:	b25b      	sxtb	r3, r3
 8002530:	4313      	orrs	r3, r2
 8002532:	b259      	sxtb	r1, r3
 8002534:	88fa      	ldrh	r2, [r7, #6]
 8002536:	4603      	mov	r3, r0
 8002538:	01db      	lsls	r3, r3, #7
 800253a:	4413      	add	r3, r2
 800253c:	b2c9      	uxtb	r1, r1
 800253e:	4a14      	ldr	r2, [pc, #80]	; (8002590 <SSD1306_DrawPixel+0xbc>)
 8002540:	54d1      	strb	r1, [r2, r3]
 8002542:	e01d      	b.n	8002580 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002544:	88fa      	ldrh	r2, [r7, #6]
 8002546:	88bb      	ldrh	r3, [r7, #4]
 8002548:	08db      	lsrs	r3, r3, #3
 800254a:	b298      	uxth	r0, r3
 800254c:	4603      	mov	r3, r0
 800254e:	01db      	lsls	r3, r3, #7
 8002550:	4413      	add	r3, r2
 8002552:	4a0f      	ldr	r2, [pc, #60]	; (8002590 <SSD1306_DrawPixel+0xbc>)
 8002554:	5cd3      	ldrb	r3, [r2, r3]
 8002556:	b25a      	sxtb	r2, r3
 8002558:	88bb      	ldrh	r3, [r7, #4]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	2101      	movs	r1, #1
 8002560:	fa01 f303 	lsl.w	r3, r1, r3
 8002564:	b25b      	sxtb	r3, r3
 8002566:	43db      	mvns	r3, r3
 8002568:	b25b      	sxtb	r3, r3
 800256a:	4013      	ands	r3, r2
 800256c:	b259      	sxtb	r1, r3
 800256e:	88fa      	ldrh	r2, [r7, #6]
 8002570:	4603      	mov	r3, r0
 8002572:	01db      	lsls	r3, r3, #7
 8002574:	4413      	add	r3, r2
 8002576:	b2c9      	uxtb	r1, r1
 8002578:	4a05      	ldr	r2, [pc, #20]	; (8002590 <SSD1306_DrawPixel+0xbc>)
 800257a:	54d1      	strb	r1, [r2, r3]
 800257c:	e000      	b.n	8002580 <SSD1306_DrawPixel+0xac>
		return;
 800257e:	bf00      	nop
	}
}
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	200006a4 	.word	0x200006a4
 8002590:	200002a4 	.word	0x200002a4

08002594 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	460a      	mov	r2, r1
 800259e:	80fb      	strh	r3, [r7, #6]
 80025a0:	4613      	mov	r3, r2
 80025a2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80025a4:	4a05      	ldr	r2, [pc, #20]	; (80025bc <SSD1306_GotoXY+0x28>)
 80025a6:	88fb      	ldrh	r3, [r7, #6]
 80025a8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80025aa:	4a04      	ldr	r2, [pc, #16]	; (80025bc <SSD1306_GotoXY+0x28>)
 80025ac:	88bb      	ldrh	r3, [r7, #4]
 80025ae:	8053      	strh	r3, [r2, #2]
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	200006a4 	.word	0x200006a4

080025c0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	6039      	str	r1, [r7, #0]
 80025ca:	71fb      	strb	r3, [r7, #7]
 80025cc:	4613      	mov	r3, r2
 80025ce:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80025d0:	4b3a      	ldr	r3, [pc, #232]	; (80026bc <SSD1306_Putc+0xfc>)
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	4413      	add	r3, r2
	if (
 80025dc:	2b7f      	cmp	r3, #127	; 0x7f
 80025de:	dc07      	bgt.n	80025f0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80025e0:	4b36      	ldr	r3, [pc, #216]	; (80026bc <SSD1306_Putc+0xfc>)
 80025e2:	885b      	ldrh	r3, [r3, #2]
 80025e4:	461a      	mov	r2, r3
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	785b      	ldrb	r3, [r3, #1]
 80025ea:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80025ec:	2b3f      	cmp	r3, #63	; 0x3f
 80025ee:	dd01      	ble.n	80025f4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	e05e      	b.n	80026b2 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	e04b      	b.n	8002692 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	3b20      	subs	r3, #32
 8002602:	6839      	ldr	r1, [r7, #0]
 8002604:	7849      	ldrb	r1, [r1, #1]
 8002606:	fb01 f303 	mul.w	r3, r1, r3
 800260a:	4619      	mov	r1, r3
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	440b      	add	r3, r1
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4413      	add	r3, r2
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002618:	2300      	movs	r3, #0
 800261a:	613b      	str	r3, [r7, #16]
 800261c:	e030      	b.n	8002680 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d010      	beq.n	8002650 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800262e:	4b23      	ldr	r3, [pc, #140]	; (80026bc <SSD1306_Putc+0xfc>)
 8002630:	881a      	ldrh	r2, [r3, #0]
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	b29b      	uxth	r3, r3
 8002636:	4413      	add	r3, r2
 8002638:	b298      	uxth	r0, r3
 800263a:	4b20      	ldr	r3, [pc, #128]	; (80026bc <SSD1306_Putc+0xfc>)
 800263c:	885a      	ldrh	r2, [r3, #2]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	b29b      	uxth	r3, r3
 8002642:	4413      	add	r3, r2
 8002644:	b29b      	uxth	r3, r3
 8002646:	79ba      	ldrb	r2, [r7, #6]
 8002648:	4619      	mov	r1, r3
 800264a:	f7ff ff43 	bl	80024d4 <SSD1306_DrawPixel>
 800264e:	e014      	b.n	800267a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002650:	4b1a      	ldr	r3, [pc, #104]	; (80026bc <SSD1306_Putc+0xfc>)
 8002652:	881a      	ldrh	r2, [r3, #0]
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	b29b      	uxth	r3, r3
 8002658:	4413      	add	r3, r2
 800265a:	b298      	uxth	r0, r3
 800265c:	4b17      	ldr	r3, [pc, #92]	; (80026bc <SSD1306_Putc+0xfc>)
 800265e:	885a      	ldrh	r2, [r3, #2]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	b29b      	uxth	r3, r3
 8002664:	4413      	add	r3, r2
 8002666:	b299      	uxth	r1, r3
 8002668:	79bb      	ldrb	r3, [r7, #6]
 800266a:	2b00      	cmp	r3, #0
 800266c:	bf0c      	ite	eq
 800266e:	2301      	moveq	r3, #1
 8002670:	2300      	movne	r3, #0
 8002672:	b2db      	uxtb	r3, r3
 8002674:	461a      	mov	r2, r3
 8002676:	f7ff ff2d 	bl	80024d4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	3301      	adds	r3, #1
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	461a      	mov	r2, r3
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4293      	cmp	r3, r2
 800268a:	d3c8      	bcc.n	800261e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	3301      	adds	r3, #1
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	785b      	ldrb	r3, [r3, #1]
 8002696:	461a      	mov	r2, r3
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	4293      	cmp	r3, r2
 800269c:	d3ad      	bcc.n	80025fa <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800269e:	4b07      	ldr	r3, [pc, #28]	; (80026bc <SSD1306_Putc+0xfc>)
 80026a0:	881a      	ldrh	r2, [r3, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	4b03      	ldr	r3, [pc, #12]	; (80026bc <SSD1306_Putc+0xfc>)
 80026ae:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80026b0:	79fb      	ldrb	r3, [r7, #7]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	200006a4 	.word	0x200006a4

080026c0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	4613      	mov	r3, r2
 80026cc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80026ce:	e012      	b.n	80026f6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	79fa      	ldrb	r2, [r7, #7]
 80026d6:	68b9      	ldr	r1, [r7, #8]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff ff71 	bl	80025c0 <SSD1306_Putc>
 80026de:	4603      	mov	r3, r0
 80026e0:	461a      	mov	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d002      	beq.n	80026f0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	e008      	b.n	8002702 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	3301      	adds	r3, #1
 80026f4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1e8      	bne.n	80026d0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	781b      	ldrb	r3, [r3, #0]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800270e:	2000      	movs	r0, #0
 8002710:	f7ff fec8 	bl	80024a4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002714:	f7ff fe98 	bl	8002448 <SSD1306_UpdateScreen>
}
 8002718:	bf00      	nop
 800271a:	bd80      	pop	{r7, pc}

0800271c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002722:	4b08      	ldr	r3, [pc, #32]	; (8002744 <ssd1306_I2C_Init+0x28>)
 8002724:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002726:	e002      	b.n	800272e <ssd1306_I2C_Init+0x12>
		p--;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3b01      	subs	r3, #1
 800272c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1f9      	bne.n	8002728 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002734:	bf00      	nop
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	0003d090 	.word	0x0003d090

08002748 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002748:	b590      	push	{r4, r7, lr}
 800274a:	b0c7      	sub	sp, #284	; 0x11c
 800274c:	af02      	add	r7, sp, #8
 800274e:	4604      	mov	r4, r0
 8002750:	4608      	mov	r0, r1
 8002752:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002756:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800275a:	600a      	str	r2, [r1, #0]
 800275c:	4619      	mov	r1, r3
 800275e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002762:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002766:	4622      	mov	r2, r4
 8002768:	701a      	strb	r2, [r3, #0]
 800276a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800276e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002772:	4602      	mov	r2, r0
 8002774:	701a      	strb	r2, [r3, #0]
 8002776:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800277a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800277e:	460a      	mov	r2, r1
 8002780:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002782:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002786:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800278a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800278e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8002792:	7812      	ldrb	r2, [r2, #0]
 8002794:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002796:	2300      	movs	r3, #0
 8002798:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800279c:	e015      	b.n	80027ca <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800279e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80027a2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80027a6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80027aa:	6812      	ldr	r2, [r2, #0]
 80027ac:	441a      	add	r2, r3
 80027ae:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80027b2:	3301      	adds	r3, #1
 80027b4:	7811      	ldrb	r1, [r2, #0]
 80027b6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80027ba:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80027be:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80027c0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80027c4:	3301      	adds	r3, #1
 80027c6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80027ca:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80027d4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80027d8:	8812      	ldrh	r2, [r2, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d8df      	bhi.n	800279e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80027de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027e2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	b299      	uxth	r1, r3
 80027ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	3301      	adds	r3, #1
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	f107 020c 	add.w	r2, r7, #12
 80027fc:	200a      	movs	r0, #10
 80027fe:	9000      	str	r0, [sp, #0]
 8002800:	4803      	ldr	r0, [pc, #12]	; (8002810 <ssd1306_I2C_WriteMulti+0xc8>)
 8002802:	f001 fcb3 	bl	800416c <HAL_I2C_Master_Transmit>
}
 8002806:	bf00      	nop
 8002808:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800280c:	46bd      	mov	sp, r7
 800280e:	bd90      	pop	{r4, r7, pc}
 8002810:	200006ac 	.word	0x200006ac

08002814 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af02      	add	r7, sp, #8
 800281a:	4603      	mov	r3, r0
 800281c:	71fb      	strb	r3, [r7, #7]
 800281e:	460b      	mov	r3, r1
 8002820:	71bb      	strb	r3, [r7, #6]
 8002822:	4613      	mov	r3, r2
 8002824:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002826:	79bb      	ldrb	r3, [r7, #6]
 8002828:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800282a:	797b      	ldrb	r3, [r7, #5]
 800282c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	b299      	uxth	r1, r3
 8002832:	f107 020c 	add.w	r2, r7, #12
 8002836:	230a      	movs	r3, #10
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	2302      	movs	r3, #2
 800283c:	4803      	ldr	r0, [pc, #12]	; (800284c <ssd1306_I2C_Write+0x38>)
 800283e:	f001 fc95 	bl	800416c <HAL_I2C_Master_Transmit>
}
 8002842:	bf00      	nop
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	200006ac 	.word	0x200006ac

08002850 <ssd1306_write>:

void ssd1306_write(uint32_t buff, FontDef_t Font)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	1d3b      	adds	r3, r7, #4
 800285a:	e883 0006 	stmia.w	r3, {r1, r2}
//	SSD1306_Clear ();
//	SSD1306_Fill(SSD1306_COLOR_BLACK);
	SSD1306_Puts(buff, &Font, 1);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1d39      	adds	r1, r7, #4
 8002862:	2201      	movs	r2, #1
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff ff2b 	bl	80026c0 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800286a:	f7ff fded 	bl	8002448 <SSD1306_UpdateScreen>
}
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08a      	sub	sp, #40	; 0x28
 800287c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287e:	f107 0314 	add.w	r3, r7, #20
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	605a      	str	r2, [r3, #4]
 8002888:	609a      	str	r2, [r3, #8]
 800288a:	60da      	str	r2, [r3, #12]
 800288c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	4b3c      	ldr	r3, [pc, #240]	; (8002984 <MX_GPIO_Init+0x10c>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	4a3b      	ldr	r2, [pc, #236]	; (8002984 <MX_GPIO_Init+0x10c>)
 8002898:	f043 0304 	orr.w	r3, r3, #4
 800289c:	6313      	str	r3, [r2, #48]	; 0x30
 800289e:	4b39      	ldr	r3, [pc, #228]	; (8002984 <MX_GPIO_Init+0x10c>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	4b35      	ldr	r3, [pc, #212]	; (8002984 <MX_GPIO_Init+0x10c>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	4a34      	ldr	r2, [pc, #208]	; (8002984 <MX_GPIO_Init+0x10c>)
 80028b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028b8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ba:	4b32      	ldr	r3, [pc, #200]	; (8002984 <MX_GPIO_Init+0x10c>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	4b2e      	ldr	r3, [pc, #184]	; (8002984 <MX_GPIO_Init+0x10c>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	4a2d      	ldr	r2, [pc, #180]	; (8002984 <MX_GPIO_Init+0x10c>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	6313      	str	r3, [r2, #48]	; 0x30
 80028d6:	4b2b      	ldr	r3, [pc, #172]	; (8002984 <MX_GPIO_Init+0x10c>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	607b      	str	r3, [r7, #4]
 80028e6:	4b27      	ldr	r3, [pc, #156]	; (8002984 <MX_GPIO_Init+0x10c>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	4a26      	ldr	r2, [pc, #152]	; (8002984 <MX_GPIO_Init+0x10c>)
 80028ec:	f043 0302 	orr.w	r3, r3, #2
 80028f0:	6313      	str	r3, [r2, #48]	; 0x30
 80028f2:	4b24      	ldr	r3, [pc, #144]	; (8002984 <MX_GPIO_Init+0x10c>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	607b      	str	r3, [r7, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET);
 80028fe:	2201      	movs	r2, #1
 8002900:	2140      	movs	r1, #64	; 0x40
 8002902:	4821      	ldr	r0, [pc, #132]	; (8002988 <MX_GPIO_Init+0x110>)
 8002904:	f001 fabc 	bl	8003e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_RST_Pin;
 8002908:	2301      	movs	r3, #1
 800290a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800290c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8002916:	f107 0314 	add.w	r3, r7, #20
 800291a:	4619      	mov	r1, r3
 800291c:	481b      	ldr	r0, [pc, #108]	; (800298c <MX_GPIO_Init+0x114>)
 800291e:	f001 f913 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_IRQ_Pin;
 8002922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002928:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800292c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800292e:	2302      	movs	r3, #2
 8002930:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DW_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002932:	f107 0314 	add.w	r3, r7, #20
 8002936:	4619      	mov	r1, r3
 8002938:	4814      	ldr	r0, [pc, #80]	; (800298c <MX_GPIO_Init+0x114>)
 800293a:	f001 f905 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_CS_Pin;
 800293e:	2340      	movs	r3, #64	; 0x40
 8002940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002942:	2301      	movs	r3, #1
 8002944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800294a:	2302      	movs	r3, #2
 800294c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);
 800294e:	f107 0314 	add.w	r3, r7, #20
 8002952:	4619      	mov	r1, r3
 8002954:	480c      	ldr	r0, [pc, #48]	; (8002988 <MX_GPIO_Init+0x110>)
 8002956:	f001 f8f7 	bl	8003b48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 800295a:	2200      	movs	r2, #0
 800295c:	2103      	movs	r1, #3
 800295e:	2006      	movs	r0, #6
 8002960:	f001 f81b 	bl	800399a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002964:	2006      	movs	r0, #6
 8002966:	f001 f834 	bl	80039d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 800296a:	2200      	movs	r2, #0
 800296c:	2104      	movs	r1, #4
 800296e:	2028      	movs	r0, #40	; 0x28
 8002970:	f001 f813 	bl	800399a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002974:	2028      	movs	r0, #40	; 0x28
 8002976:	f001 f82c 	bl	80039d2 <HAL_NVIC_EnableIRQ>

}
 800297a:	bf00      	nop
 800297c:	3728      	adds	r7, #40	; 0x28
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40023800 	.word	0x40023800
 8002988:	40020400 	.word	0x40020400
 800298c:	40020000 	.word	0x40020000

08002990 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002994:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <MX_I2C1_Init+0x50>)
 8002996:	4a13      	ldr	r2, [pc, #76]	; (80029e4 <MX_I2C1_Init+0x54>)
 8002998:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <MX_I2C1_Init+0x50>)
 800299c:	4a12      	ldr	r2, [pc, #72]	; (80029e8 <MX_I2C1_Init+0x58>)
 800299e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029a0:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <MX_I2C1_Init+0x50>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80029a6:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <MX_I2C1_Init+0x50>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029ac:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <MX_I2C1_Init+0x50>)
 80029ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029b4:	4b0a      	ldr	r3, [pc, #40]	; (80029e0 <MX_I2C1_Init+0x50>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80029ba:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <MX_I2C1_Init+0x50>)
 80029bc:	2200      	movs	r2, #0
 80029be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029c0:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <MX_I2C1_Init+0x50>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029c6:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <MX_I2C1_Init+0x50>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029cc:	4804      	ldr	r0, [pc, #16]	; (80029e0 <MX_I2C1_Init+0x50>)
 80029ce:	f001 fa89 	bl	8003ee4 <HAL_I2C_Init>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80029d8:	f000 f8ce 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029dc:	bf00      	nop
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	200006ac 	.word	0x200006ac
 80029e4:	40005400 	.word	0x40005400
 80029e8:	00061a80 	.word	0x00061a80

080029ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08a      	sub	sp, #40	; 0x28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f4:	f107 0314 	add.w	r3, r7, #20
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]
 8002a02:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a19      	ldr	r2, [pc, #100]	; (8002a70 <HAL_I2C_MspInit+0x84>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d12c      	bne.n	8002a68 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	4b18      	ldr	r3, [pc, #96]	; (8002a74 <HAL_I2C_MspInit+0x88>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	4a17      	ldr	r2, [pc, #92]	; (8002a74 <HAL_I2C_MspInit+0x88>)
 8002a18:	f043 0302 	orr.w	r3, r3, #2
 8002a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1e:	4b15      	ldr	r3, [pc, #84]	; (8002a74 <HAL_I2C_MspInit+0x88>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	613b      	str	r3, [r7, #16]
 8002a28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a30:	2312      	movs	r3, #18
 8002a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a34:	2300      	movs	r3, #0
 8002a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a3c:	2304      	movs	r3, #4
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a40:	f107 0314 	add.w	r3, r7, #20
 8002a44:	4619      	mov	r1, r3
 8002a46:	480c      	ldr	r0, [pc, #48]	; (8002a78 <HAL_I2C_MspInit+0x8c>)
 8002a48:	f001 f87e 	bl	8003b48 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <HAL_I2C_MspInit+0x88>)
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	4a07      	ldr	r2, [pc, #28]	; (8002a74 <HAL_I2C_MspInit+0x88>)
 8002a56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a5c:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <HAL_I2C_MspInit+0x88>)
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002a68:	bf00      	nop
 8002a6a:	3728      	adds	r7, #40	; 0x28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40005400 	.word	0x40005400
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40020400 	.word	0x40020400

08002a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a80:	f000 fdf6 	bl	8003670 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a84:	f000 f810 	bl	8002aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a88:	f7ff fef6 	bl	8002878 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002a8c:	f000 fd4c 	bl	8003528 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002a90:	f7ff ff7e 	bl	8002990 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002a94:	f000 fb86 	bl	80031a4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  setup_DW1000RSTnIRQ(0);
 8002a98:	2000      	movs	r0, #0
 8002a9a:	f7ff fb5f 	bl	800215c <setup_DW1000RSTnIRQ>
  SSD1306_Init();
 8002a9e:	f7ff fc0f 	bl	80022c0 <SSD1306_Init>
  dw_main();
 8002aa2:	f000 f871 	bl	8002b88 <dw_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002aa6:	e7fe      	b.n	8002aa6 <main+0x2a>

08002aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b094      	sub	sp, #80	; 0x50
 8002aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002aae:	f107 0320 	add.w	r3, r7, #32
 8002ab2:	2230      	movs	r2, #48	; 0x30
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f003 fed2 	bl	8006860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002abc:	f107 030c 	add.w	r3, r7, #12
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
 8002aca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002acc:	2300      	movs	r3, #0
 8002ace:	60bb      	str	r3, [r7, #8]
 8002ad0:	4b27      	ldr	r3, [pc, #156]	; (8002b70 <SystemClock_Config+0xc8>)
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	4a26      	ldr	r2, [pc, #152]	; (8002b70 <SystemClock_Config+0xc8>)
 8002ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ada:	6413      	str	r3, [r2, #64]	; 0x40
 8002adc:	4b24      	ldr	r3, [pc, #144]	; (8002b70 <SystemClock_Config+0xc8>)
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae4:	60bb      	str	r3, [r7, #8]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ae8:	2300      	movs	r3, #0
 8002aea:	607b      	str	r3, [r7, #4]
 8002aec:	4b21      	ldr	r3, [pc, #132]	; (8002b74 <SystemClock_Config+0xcc>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a20      	ldr	r2, [pc, #128]	; (8002b74 <SystemClock_Config+0xcc>)
 8002af2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	4b1e      	ldr	r3, [pc, #120]	; (8002b74 <SystemClock_Config+0xcc>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b00:	607b      	str	r3, [r7, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b04:	2301      	movs	r3, #1
 8002b06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 8002b18:	230d      	movs	r3, #13
 8002b1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002b1c:	2348      	movs	r3, #72	; 0x48
 8002b1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b20:	2302      	movs	r3, #2
 8002b22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002b24:	2304      	movs	r3, #4
 8002b26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b28:	f107 0320 	add.w	r3, r7, #32
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f001 ff53 	bl	80049d8 <HAL_RCC_OscConfig>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002b38:	f000 f81e 	bl	8002b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b3c:	230f      	movs	r3, #15
 8002b3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b40:	2302      	movs	r3, #2
 8002b42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b52:	f107 030c 	add.w	r3, r7, #12
 8002b56:	2102      	movs	r1, #2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f002 f9b5 	bl	8004ec8 <HAL_RCC_ClockConfig>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002b64:	f000 f808 	bl	8002b78 <Error_Handler>
  }
}
 8002b68:	bf00      	nop
 8002b6a:	3750      	adds	r7, #80	; 0x50
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40007000 	.word	0x40007000

08002b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002b7c:	b672      	cpsid	i
}
 8002b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b80:	e7fe      	b.n	8002b80 <Error_Handler+0x8>
 8002b82:	0000      	movs	r0, r0
 8002b84:	0000      	movs	r0, r0
	...

08002b88 <dw_main>:
 * @param  none
 *
 * @return none
 */
int dw_main(void)
{
 8002b88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b8c:	b094      	sub	sp, #80	; 0x50
 8002b8e:	af00      	add	r7, sp, #0
    /* Display application name on LCD. */
	HAL_UART_Transmit(&huart2, app_name, sizeof(app_name), HAL_MAX_DELAY);
 8002b90:	f04f 33ff 	mov.w	r3, #4294967295
 8002b94:	2211      	movs	r2, #17
 8002b96:	4915      	ldr	r1, [pc, #84]	; (8002bec <dw_main+0x64>)
 8002b98:	4815      	ldr	r0, [pc, #84]	; (8002bf0 <dw_main+0x68>)
 8002b9a:	f002 fe60 	bl	800585e <HAL_UART_Transmit>
	ssd1306_write(app_name, Font_7x10);
 8002b9e:	4813      	ldr	r0, [pc, #76]	; (8002bec <dw_main+0x64>)
 8002ba0:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <dw_main+0x6c>)
 8002ba2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002ba6:	f7ff fe53 	bl	8002850 <ssd1306_write>
    /* Reset and initialise DW1000.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8002baa:	f7ff fab5 	bl	8002118 <reset_DW1000>
    port_set_dw1000_slowrate();
 8002bae:	f7ff fb0f 	bl	80021d0 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR)
 8002bb2:	2001      	movs	r0, #1
 8002bb4:	f7fe fa28 	bl	8001008 <dwt_initialise>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbe:	d11f      	bne.n	8002c00 <dw_main+0x78>
    {
//        lcd_display_str("INIT FAILED");
    	HAL_UART_Transmit(&huart2, "Init Failed!!!", 15, HAL_MAX_DELAY);
 8002bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc4:	220f      	movs	r2, #15
 8002bc6:	490c      	ldr	r1, [pc, #48]	; (8002bf8 <dw_main+0x70>)
 8002bc8:	4809      	ldr	r0, [pc, #36]	; (8002bf0 <dw_main+0x68>)
 8002bca:	f002 fe48 	bl	800585e <HAL_UART_Transmit>
    	SSD1306_GotoXY(0, 10); SSD1306_InvertDisplay(1);
 8002bce:	210a      	movs	r1, #10
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	f7ff fcdf 	bl	8002594 <SSD1306_GotoXY>
 8002bd6:	2001      	movs	r0, #1
 8002bd8:	f7ff fb5c 	bl	8002294 <SSD1306_InvertDisplay>
    	    	ssd1306_write("INIT FAILED!!!", Font_7x10);
 8002bdc:	4807      	ldr	r0, [pc, #28]	; (8002bfc <dw_main+0x74>)
 8002bde:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <dw_main+0x6c>)
 8002be0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002be4:	f7ff fe34 	bl	8002850 <ssd1306_write>
        while (1)
 8002be8:	e7fe      	b.n	8002be8 <dw_main+0x60>
 8002bea:	bf00      	nop
 8002bec:	20000014 	.word	0x20000014
 8002bf0:	200007b4 	.word	0x200007b4
 8002bf4:	20000004 	.word	0x20000004
 8002bf8:	0800b168 	.word	0x0800b168
 8002bfc:	0800b178 	.word	0x0800b178
        { };
    }
    port_set_dw1000_fastrate();
 8002c00:	f7ff faf2 	bl	80021e8 <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 7 below. */
    dwt_configure(&config);
 8002c04:	48c4      	ldr	r0, [pc, #784]	; (8002f18 <dw_main+0x390>)
 8002c06:	f7fe fb55 	bl	80012b4 <dwt_configure>

    /* Apply default antenna delay value. See NOTE 1 below. */
    dwt_setrxantennadelay(RX_ANT_DLY);
 8002c0a:	f244 0034 	movw	r0, #16436	; 0x4034
 8002c0e:	f7fe fcbb 	bl	8001588 <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 8002c12:	f244 0034 	movw	r0, #16436	; 0x4034
 8002c16:	f7fe fcc7 	bl	80015a8 <dwt_settxantennadelay>

    /* Set preamble timeout for expected frames. See NOTE 6 below. */
    dwt_setpreambledetecttimeout(PRE_TIMEOUT);
 8002c1a:	2008      	movs	r0, #8
 8002c1c:	f7ff f8e2 	bl	8001de4 <dwt_setpreambledetecttimeout>

    /* Loop forever responding to ranging requests. */
    while (1)
    {
    	SSD1306_Clear ();
 8002c20:	f7ff fd73 	bl	800270a <SSD1306_Clear>

        /* Clear reception timeout to start next ranging process. */
        dwt_setrxtimeout(0);
 8002c24:	2000      	movs	r0, #0
 8002c26:	f7ff f89d 	bl	8001d64 <dwt_setrxtimeout>

        /* Activate reception immediately. */
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	f7ff f858 	bl	8001ce0 <dwt_rxenable>

        /* Poll for reception of a frame or error/timeout. See NOTE 8 below. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8002c30:	bf00      	nop
 8002c32:	2100      	movs	r1, #0
 8002c34:	200f      	movs	r0, #15
 8002c36:	f7fe fdde 	bl	80017f6 <dwt_read32bitoffsetreg>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	4ab7      	ldr	r2, [pc, #732]	; (8002f1c <dw_main+0x394>)
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	4bb6      	ldr	r3, [pc, #728]	; (8002f1c <dw_main+0x394>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	4bb6      	ldr	r3, [pc, #728]	; (8002f20 <dw_main+0x398>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0f2      	beq.n	8002c32 <dw_main+0xaa>
        { };

        if (status_reg & SYS_STATUS_RXFCG)
 8002c4c:	4bb3      	ldr	r3, [pc, #716]	; (8002f1c <dw_main+0x394>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 81e8 	beq.w	800302a <dw_main+0x4a2>
        {
            uint32 frame_len;

            /* Clear good RX frame event in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 8002c5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c5e:	2100      	movs	r1, #0
 8002c60:	200f      	movs	r0, #15
 8002c62:	f7fe fe4e 	bl	8001902 <dwt_write32bitoffsetreg>

            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 8002c66:	2100      	movs	r1, #0
 8002c68:	2010      	movs	r0, #16
 8002c6a:	f7fe fdc4 	bl	80017f6 <dwt_read32bitoffsetreg>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c74:	64fb      	str	r3, [r7, #76]	; 0x4c
            if (frame_len <= RX_BUFFER_LEN)
 8002c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7c:	d806      	bhi.n	8002c8c <dw_main+0x104>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 8002c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	2200      	movs	r2, #0
 8002c84:	4619      	mov	r1, r3
 8002c86:	48a7      	ldr	r0, [pc, #668]	; (8002f24 <dw_main+0x39c>)
 8002c88:	f7fe fcdc 	bl	8001644 <dwt_readrxdata>
            }
            HAL_UART_Transmit(&huart2, rx_buffer, sizeof(rx_buffer), HAL_MAX_DELAY);
 8002c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c90:	2218      	movs	r2, #24
 8002c92:	49a4      	ldr	r1, [pc, #656]	; (8002f24 <dw_main+0x39c>)
 8002c94:	48a4      	ldr	r0, [pc, #656]	; (8002f28 <dw_main+0x3a0>)
 8002c96:	f002 fde2 	bl	800585e <HAL_UART_Transmit>
            SSD1306_GotoXY(0, 0);  ssd1306_write("Received :", Font_7x10);
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	f7ff fc79 	bl	8002594 <SSD1306_GotoXY>
 8002ca2:	48a2      	ldr	r0, [pc, #648]	; (8002f2c <dw_main+0x3a4>)
 8002ca4:	4ba2      	ldr	r3, [pc, #648]	; (8002f30 <dw_main+0x3a8>)
 8002ca6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002caa:	f7ff fdd1 	bl	8002850 <ssd1306_write>

            SSD1306_GotoXY(0, 20); ssd1306_write(rx_buffer, Font_7x10);
 8002cae:	2114      	movs	r1, #20
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	f7ff fc6f 	bl	8002594 <SSD1306_GotoXY>
 8002cb6:	489b      	ldr	r0, [pc, #620]	; (8002f24 <dw_main+0x39c>)
 8002cb8:	4b9d      	ldr	r3, [pc, #628]	; (8002f30 <dw_main+0x3a8>)
 8002cba:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002cbe:	f7ff fdc7 	bl	8002850 <ssd1306_write>
            /* Check that the frame is a poll sent by "DS TWR initiator" example.
             * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
            rx_buffer[ALL_MSG_SN_IDX] = 0;
 8002cc2:	4b98      	ldr	r3, [pc, #608]	; (8002f24 <dw_main+0x39c>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	709a      	strb	r2, [r3, #2]
            if (memcmp(rx_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0)
 8002cc8:	220a      	movs	r2, #10
 8002cca:	499a      	ldr	r1, [pc, #616]	; (8002f34 <dw_main+0x3ac>)
 8002ccc:	4895      	ldr	r0, [pc, #596]	; (8002f24 <dw_main+0x39c>)
 8002cce:	f003 fdb7 	bl	8006840 <memcmp>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1a3      	bne.n	8002c20 <dw_main+0x98>
            {
                uint32 resp_tx_time;
                int ret;

                /* Retrieve poll reception timestamp. */
                poll_rx_ts = get_rx_timestamp_u64();
 8002cd8:	f000 fa03 	bl	80030e2 <get_rx_timestamp_u64>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4995      	ldr	r1, [pc, #596]	; (8002f38 <dw_main+0x3b0>)
 8002ce2:	e9c1 2300 	strd	r2, r3, [r1]

                /* Set send time for response. See NOTE 9 below. */
                resp_tx_time = (poll_rx_ts + (POLL_RX_TO_RESP_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
 8002ce6:	4b94      	ldr	r3, [pc, #592]	; (8002f38 <dw_main+0x3b0>)
 8002ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cec:	4993      	ldr	r1, [pc, #588]	; (8002f3c <dw_main+0x3b4>)
 8002cee:	1854      	adds	r4, r2, r1
 8002cf0:	f143 0500 	adc.w	r5, r3, #0
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	0a22      	lsrs	r2, r4, #8
 8002cfe:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 8002d02:	0a2b      	lsrs	r3, r5, #8
 8002d04:	4613      	mov	r3, r2
 8002d06:	64bb      	str	r3, [r7, #72]	; 0x48
                dwt_setdelayedtrxtime(resp_tx_time);
 8002d08:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002d0a:	f7fe ff43 	bl	8001b94 <dwt_setdelayedtrxtime>

                /* Set expected delay and timeout for final message reception. See NOTE 4 and 5 below. */
                dwt_setrxaftertxdelay(RESP_TX_TO_FINAL_RX_DLY_UUS);
 8002d0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d12:	f7fe fe7d 	bl	8001a10 <dwt_setrxaftertxdelay>
                dwt_setrxtimeout(FINAL_RX_TIMEOUT_UUS);
 8002d16:	f640 40e4 	movw	r0, #3300	; 0xce4
 8002d1a:	f7ff f823 	bl	8001d64 <dwt_setrxtimeout>

                /* Write and send the response message. See NOTE 10 below.*/
                tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8002d1e:	4b88      	ldr	r3, [pc, #544]	; (8002f40 <dw_main+0x3b8>)
 8002d20:	781a      	ldrb	r2, [r3, #0]
 8002d22:	4b88      	ldr	r3, [pc, #544]	; (8002f44 <dw_main+0x3bc>)
 8002d24:	709a      	strb	r2, [r3, #2]
                dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0); /* Zero offset in TX buffer. */
 8002d26:	2200      	movs	r2, #0
 8002d28:	4986      	ldr	r1, [pc, #536]	; (8002f44 <dw_main+0x3bc>)
 8002d2a:	200f      	movs	r0, #15
 8002d2c:	f7fe fc4b 	bl	80015c6 <dwt_writetxdata>
                dwt_writetxfctrl(sizeof(tx_resp_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
 8002d30:	2201      	movs	r2, #1
 8002d32:	2100      	movs	r1, #0
 8002d34:	200f      	movs	r0, #15
 8002d36:	f7fe fc65 	bl	8001604 <dwt_writetxfctrl>
                ret = dwt_starttx(DWT_START_TX_DELAYED | DWT_RESPONSE_EXPECTED);
 8002d3a:	2003      	movs	r0, #3
 8002d3c:	f7fe ff38 	bl	8001bb0 <dwt_starttx>
 8002d40:	6478      	str	r0, [r7, #68]	; 0x44
                SSD1306_GotoXY(0, 0);  ssd1306_write("Transmitted :", Font_7x10);
 8002d42:	2100      	movs	r1, #0
 8002d44:	2000      	movs	r0, #0
 8002d46:	f7ff fc25 	bl	8002594 <SSD1306_GotoXY>
 8002d4a:	487f      	ldr	r0, [pc, #508]	; (8002f48 <dw_main+0x3c0>)
 8002d4c:	4b78      	ldr	r3, [pc, #480]	; (8002f30 <dw_main+0x3a8>)
 8002d4e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002d52:	f7ff fd7d 	bl	8002850 <ssd1306_write>
                SSD1306_GotoXY(0, 20); ssd1306_write(tx_resp_msg, Font_7x10);
 8002d56:	2114      	movs	r1, #20
 8002d58:	2000      	movs	r0, #0
 8002d5a:	f7ff fc1b 	bl	8002594 <SSD1306_GotoXY>
 8002d5e:	4879      	ldr	r0, [pc, #484]	; (8002f44 <dw_main+0x3bc>)
 8002d60:	4b73      	ldr	r3, [pc, #460]	; (8002f30 <dw_main+0x3a8>)
 8002d62:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002d66:	f7ff fd73 	bl	8002850 <ssd1306_write>
                HAL_UART_Transmit(&huart2, tx_resp_msg, sizeof(tx_resp_msg), HAL_MAX_DELAY);
 8002d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6e:	220f      	movs	r2, #15
 8002d70:	4974      	ldr	r1, [pc, #464]	; (8002f44 <dw_main+0x3bc>)
 8002d72:	486d      	ldr	r0, [pc, #436]	; (8002f28 <dw_main+0x3a0>)
 8002d74:	f002 fd73 	bl	800585e <HAL_UART_Transmit>
                /* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 11 below. */
                if (ret == DWT_ERROR)
 8002d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7e:	f000 815c 	beq.w	800303a <dw_main+0x4b2>
                {
                    continue;
                }

                /* Poll for reception of expected "final" frame or error/timeout. See NOTE 8 below. */
                while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8002d82:	bf00      	nop
 8002d84:	2100      	movs	r1, #0
 8002d86:	200f      	movs	r0, #15
 8002d88:	f7fe fd35 	bl	80017f6 <dwt_read32bitoffsetreg>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	4a63      	ldr	r2, [pc, #396]	; (8002f1c <dw_main+0x394>)
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	4b62      	ldr	r3, [pc, #392]	; (8002f1c <dw_main+0x394>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	4b62      	ldr	r3, [pc, #392]	; (8002f20 <dw_main+0x398>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f2      	beq.n	8002d84 <dw_main+0x1fc>
                { };

                /* Increment frame sequence number after transmission of the response message (modulo 256). */
                frame_seq_nb++;
 8002d9e:	4b68      	ldr	r3, [pc, #416]	; (8002f40 <dw_main+0x3b8>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	3301      	adds	r3, #1
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	4b66      	ldr	r3, [pc, #408]	; (8002f40 <dw_main+0x3b8>)
 8002da8:	701a      	strb	r2, [r3, #0]

                if (status_reg & SYS_STATUS_RXFCG)
 8002daa:	4b5c      	ldr	r3, [pc, #368]	; (8002f1c <dw_main+0x394>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 8131 	beq.w	800301a <dw_main+0x492>
                {
                    /* Clear good RX frame event and TX frame sent in the DW1000 status register. */
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG | SYS_STATUS_TXFRS);
 8002db8:	f44f 4281 	mov.w	r2, #16512	; 0x4080
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	200f      	movs	r0, #15
 8002dc0:	f7fe fd9f 	bl	8001902 <dwt_write32bitoffsetreg>

                    /* A frame has been received, read it into the local buffer. */
                    frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_MASK;
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	2010      	movs	r0, #16
 8002dc8:	f7fe fd15 	bl	80017f6 <dwt_read32bitoffsetreg>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
                    if (frame_len <= RX_BUF_LEN)
 8002dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dd6:	2b18      	cmp	r3, #24
 8002dd8:	d806      	bhi.n	8002de8 <dw_main+0x260>
                    {
                        dwt_readrxdata(rx_buffer, frame_len, 0);
 8002dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	2200      	movs	r2, #0
 8002de0:	4619      	mov	r1, r3
 8002de2:	4850      	ldr	r0, [pc, #320]	; (8002f24 <dw_main+0x39c>)
 8002de4:	f7fe fc2e 	bl	8001644 <dwt_readrxdata>
                    }
                    HAL_UART_Transmit(&huart2, rx_buffer, sizeof(rx_buffer), HAL_MAX_DELAY);
 8002de8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dec:	2218      	movs	r2, #24
 8002dee:	494d      	ldr	r1, [pc, #308]	; (8002f24 <dw_main+0x39c>)
 8002df0:	484d      	ldr	r0, [pc, #308]	; (8002f28 <dw_main+0x3a0>)
 8002df2:	f002 fd34 	bl	800585e <HAL_UART_Transmit>
                    SSD1306_GotoXY(0, 0);  ssd1306_write("Received :", Font_7x10);
 8002df6:	2100      	movs	r1, #0
 8002df8:	2000      	movs	r0, #0
 8002dfa:	f7ff fbcb 	bl	8002594 <SSD1306_GotoXY>
 8002dfe:	484b      	ldr	r0, [pc, #300]	; (8002f2c <dw_main+0x3a4>)
 8002e00:	4b4b      	ldr	r3, [pc, #300]	; (8002f30 <dw_main+0x3a8>)
 8002e02:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002e06:	f7ff fd23 	bl	8002850 <ssd1306_write>

                    SSD1306_GotoXY(0, 20); ssd1306_write(rx_buffer, Font_7x10);
 8002e0a:	2114      	movs	r1, #20
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	f7ff fbc1 	bl	8002594 <SSD1306_GotoXY>
 8002e12:	4844      	ldr	r0, [pc, #272]	; (8002f24 <dw_main+0x39c>)
 8002e14:	4b46      	ldr	r3, [pc, #280]	; (8002f30 <dw_main+0x3a8>)
 8002e16:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002e1a:	f7ff fd19 	bl	8002850 <ssd1306_write>
                    /* Check that the frame is a final message sent by "DS TWR initiator" example.
                     * As the sequence number field of the frame is not used in this example, it can be zeroed to ease the validation of the frame. */
                    rx_buffer[ALL_MSG_SN_IDX] = 0;
 8002e1e:	4b41      	ldr	r3, [pc, #260]	; (8002f24 <dw_main+0x39c>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	709a      	strb	r2, [r3, #2]
                    if (memcmp(rx_buffer, rx_final_msg, ALL_MSG_COMMON_LEN) == 0)
 8002e24:	220a      	movs	r2, #10
 8002e26:	4949      	ldr	r1, [pc, #292]	; (8002f4c <dw_main+0x3c4>)
 8002e28:	483e      	ldr	r0, [pc, #248]	; (8002f24 <dw_main+0x39c>)
 8002e2a:	f003 fd09 	bl	8006840 <memcmp>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f47f aef5 	bne.w	8002c20 <dw_main+0x98>
                        uint32 poll_rx_ts_32, resp_tx_ts_32, final_rx_ts_32;
                        double Ra, Rb, Da, Db;
                        int64 tof_dtu;

                        /* Retrieve response transmission and final reception timestamps. */
                        resp_tx_ts = get_tx_timestamp_u64();
 8002e36:	f000 f919 	bl	800306c <get_tx_timestamp_u64>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4944      	ldr	r1, [pc, #272]	; (8002f50 <dw_main+0x3c8>)
 8002e40:	e9c1 2300 	strd	r2, r3, [r1]
                        final_rx_ts = get_rx_timestamp_u64();
 8002e44:	f000 f94d 	bl	80030e2 <get_rx_timestamp_u64>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4941      	ldr	r1, [pc, #260]	; (8002f54 <dw_main+0x3cc>)
 8002e4e:	e9c1 2300 	strd	r2, r3, [r1]

                        /* Get timestamps embedded in the final message. */
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_POLL_TX_TS_IDX], &poll_tx_ts);
 8002e52:	f107 030c 	add.w	r3, r7, #12
 8002e56:	4619      	mov	r1, r3
 8002e58:	483f      	ldr	r0, [pc, #252]	; (8002f58 <dw_main+0x3d0>)
 8002e5a:	f000 f97d 	bl	8003158 <final_msg_get_ts>
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_RESP_RX_TS_IDX], &resp_rx_ts);
 8002e5e:	f107 0308 	add.w	r3, r7, #8
 8002e62:	4619      	mov	r1, r3
 8002e64:	483d      	ldr	r0, [pc, #244]	; (8002f5c <dw_main+0x3d4>)
 8002e66:	f000 f977 	bl	8003158 <final_msg_get_ts>
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_FINAL_TX_TS_IDX], &final_tx_ts);
 8002e6a:	1d3b      	adds	r3, r7, #4
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	483c      	ldr	r0, [pc, #240]	; (8002f60 <dw_main+0x3d8>)
 8002e70:	f000 f972 	bl	8003158 <final_msg_get_ts>

                        /* Compute time of flight. 32-bit subtractions give correct answers even if clock has wrapped. See NOTE 12 below. */
                        poll_rx_ts_32 = (uint32)poll_rx_ts;
 8002e74:	4b30      	ldr	r3, [pc, #192]	; (8002f38 <dw_main+0x3b0>)
 8002e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	643b      	str	r3, [r7, #64]	; 0x40
                        resp_tx_ts_32 = (uint32)resp_tx_ts;
 8002e7e:	4b34      	ldr	r3, [pc, #208]	; (8002f50 <dw_main+0x3c8>)
 8002e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e84:	4613      	mov	r3, r2
 8002e86:	63fb      	str	r3, [r7, #60]	; 0x3c
                        final_rx_ts_32 = (uint32)final_rx_ts;
 8002e88:	4b32      	ldr	r3, [pc, #200]	; (8002f54 <dw_main+0x3cc>)
 8002e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	63bb      	str	r3, [r7, #56]	; 0x38
                        Ra = (double)(resp_rx_ts - poll_tx_ts);
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fd fb3b 	bl	8000514 <__aeabi_ui2d>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                        Rb = (double)(final_rx_ts_32 - resp_tx_ts_32);
 8002ea6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fd fb31 	bl	8000514 <__aeabi_ui2d>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
                        Da = (double)(final_tx_ts - resp_rx_ts);
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fd fb27 	bl	8000514 <__aeabi_ui2d>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	e9c7 2308 	strd	r2, r3, [r7, #32]
                        Db = (double)(resp_tx_ts_32 - poll_rx_ts_32);
 8002ece:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fd fb1d 	bl	8000514 <__aeabi_ui2d>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	e9c7 2306 	strd	r2, r3, [r7, #24]
                        tof_dtu = (int64)((Ra * Rb - Da * Db) / (Ra + Rb + Da + Db));
 8002ee2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ee6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002eea:	f7fd fb8d 	bl	8000608 <__aeabi_dmul>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4690      	mov	r8, r2
 8002ef4:	4699      	mov	r9, r3
 8002ef6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002efa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002efe:	f7fd fb83 	bl	8000608 <__aeabi_dmul>
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4640      	mov	r0, r8
 8002f08:	4649      	mov	r1, r9
 8002f0a:	f7fd f9c5 	bl	8000298 <__aeabi_dsub>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4690      	mov	r8, r2
 8002f14:	4699      	mov	r9, r3
 8002f16:	e025      	b.n	8002f64 <dw_main+0x3dc>
 8002f18:	20000028 	.word	0x20000028
 8002f1c:	2000071c 	.word	0x2000071c
 8002f20:	2427d000 	.word	0x2427d000
 8002f24:	20000704 	.word	0x20000704
 8002f28:	200007b4 	.word	0x200007b4
 8002f2c:	0800b188 	.word	0x0800b188
 8002f30:	20000004 	.word	0x20000004
 8002f34:	20000034 	.word	0x20000034
 8002f38:	20000720 	.word	0x20000720
 8002f3c:	0abe0000 	.word	0x0abe0000
 8002f40:	20000700 	.word	0x20000700
 8002f44:	20000040 	.word	0x20000040
 8002f48:	0800b194 	.word	0x0800b194
 8002f4c:	20000050 	.word	0x20000050
 8002f50:	20000728 	.word	0x20000728
 8002f54:	20000730 	.word	0x20000730
 8002f58:	2000070e 	.word	0x2000070e
 8002f5c:	20000712 	.word	0x20000712
 8002f60:	20000716 	.word	0x20000716
 8002f64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f68:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002f6c:	f7fd f996 	bl	800029c <__adddf3>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4610      	mov	r0, r2
 8002f76:	4619      	mov	r1, r3
 8002f78:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f7c:	f7fd f98e 	bl	800029c <__adddf3>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	4610      	mov	r0, r2
 8002f86:	4619      	mov	r1, r3
 8002f88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f8c:	f7fd f986 	bl	800029c <__adddf3>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	4640      	mov	r0, r8
 8002f96:	4649      	mov	r1, r9
 8002f98:	f7fd fc60 	bl	800085c <__aeabi_ddiv>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	f7fd fe90 	bl	8000cc8 <__aeabi_d2lz>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	e9c7 2304 	strd	r2, r3, [r7, #16]

                        tof = tof_dtu * DWT_TIME_UNITS;
 8002fb0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002fb4:	f7fd fafa 	bl	80005ac <__aeabi_l2d>
 8002fb8:	a32a      	add	r3, pc, #168	; (adr r3, 8003064 <dw_main+0x4dc>)
 8002fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fbe:	f7fd fb23 	bl	8000608 <__aeabi_dmul>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	4920      	ldr	r1, [pc, #128]	; (8003048 <dw_main+0x4c0>)
 8002fc8:	e9c1 2300 	strd	r2, r3, [r1]
                        distance = tof * SPEED_OF_LIGHT;
 8002fcc:	4b1e      	ldr	r3, [pc, #120]	; (8003048 <dw_main+0x4c0>)
 8002fce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fd2:	a31b      	add	r3, pc, #108	; (adr r3, 8003040 <dw_main+0x4b8>)
 8002fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd8:	f7fd fb16 	bl	8000608 <__aeabi_dmul>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	491a      	ldr	r1, [pc, #104]	; (800304c <dw_main+0x4c4>)
 8002fe2:	e9c1 2300 	strd	r2, r3, [r1]

                        /* Display computed distance on LCD. */
                        sprintf(dist_str, "DIST: %3.2f m", distance);
 8002fe6:	4b19      	ldr	r3, [pc, #100]	; (800304c <dw_main+0x4c4>)
 8002fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fec:	4918      	ldr	r1, [pc, #96]	; (8003050 <dw_main+0x4c8>)
 8002fee:	4819      	ldr	r0, [pc, #100]	; (8003054 <dw_main+0x4cc>)
 8002ff0:	f004 fabe 	bl	8007570 <siprintf>
//                        lcd_display_str(dist_str);
                        HAL_UART_Transmit(&huart2, (uint8_t *)dist_str, sizeof(dist_str), HAL_MAX_DELAY);
 8002ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff8:	2210      	movs	r2, #16
 8002ffa:	4916      	ldr	r1, [pc, #88]	; (8003054 <dw_main+0x4cc>)
 8002ffc:	4816      	ldr	r0, [pc, #88]	; (8003058 <dw_main+0x4d0>)
 8002ffe:	f002 fc2e 	bl	800585e <HAL_UART_Transmit>
                        SSD1306_Clear (); SSD1306_InvertDisplay(1);
 8003002:	f7ff fb82 	bl	800270a <SSD1306_Clear>
 8003006:	2001      	movs	r0, #1
 8003008:	f7ff f944 	bl	8002294 <SSD1306_InvertDisplay>
                        ssd1306_write(dist_str, Font_11x18);
 800300c:	4811      	ldr	r0, [pc, #68]	; (8003054 <dw_main+0x4cc>)
 800300e:	4b13      	ldr	r3, [pc, #76]	; (800305c <dw_main+0x4d4>)
 8003010:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003014:	f7ff fc1c 	bl	8002850 <ssd1306_write>
 8003018:	e602      	b.n	8002c20 <dw_main+0x98>
                    }
                }
                else
                {
                    /* Clear RX error/timeout events in the DW1000 status register. */
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 800301a:	4a11      	ldr	r2, [pc, #68]	; (8003060 <dw_main+0x4d8>)
 800301c:	2100      	movs	r1, #0
 800301e:	200f      	movs	r0, #15
 8003020:	f7fe fc6f 	bl	8001902 <dwt_write32bitoffsetreg>

                    /* Reset RX to properly reinitialise LDE operation. */
                    dwt_rxreset();
 8003024:	f7fe feed 	bl	8001e02 <dwt_rxreset>
 8003028:	e5fa      	b.n	8002c20 <dw_main+0x98>
            }
        }
        else
        {
            /* Clear RX error/timeout events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 800302a:	4a0d      	ldr	r2, [pc, #52]	; (8003060 <dw_main+0x4d8>)
 800302c:	2100      	movs	r1, #0
 800302e:	200f      	movs	r0, #15
 8003030:	f7fe fc67 	bl	8001902 <dwt_write32bitoffsetreg>

            /* Reset RX to properly reinitialise LDE operation. */
            dwt_rxreset();
 8003034:	f7fe fee5 	bl	8001e02 <dwt_rxreset>
 8003038:	e5f2      	b.n	8002c20 <dw_main+0x98>
                    continue;
 800303a:	bf00      	nop
    	SSD1306_Clear ();
 800303c:	e5f0      	b.n	8002c20 <dw_main+0x98>
 800303e:	bf00      	nop
 8003040:	13000000 	.word	0x13000000
 8003044:	41b1dd19 	.word	0x41b1dd19
 8003048:	20000738 	.word	0x20000738
 800304c:	20000740 	.word	0x20000740
 8003050:	0800b1a4 	.word	0x0800b1a4
 8003054:	20000748 	.word	0x20000748
 8003058:	200007b4 	.word	0x200007b4
 800305c:	2000000c 	.word	0x2000000c
 8003060:	24279000 	.word	0x24279000
 8003064:	3bce48fa 	.word	0x3bce48fa
 8003068:	3db13518 	.word	0x3db13518

0800306c <get_tx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_tx_timestamp_u64(void)
{
 800306c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003070:	b086      	sub	sp, #24
 8003072:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int i;
    dwt_readtxtimestamp(ts_tab);
 8003080:	1d3b      	adds	r3, r7, #4
 8003082:	4618      	mov	r0, r3
 8003084:	f7fe faf0 	bl	8001668 <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--)
 8003088:	2304      	movs	r3, #4
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	e01e      	b.n	80030cc <get_tx_timestamp_u64+0x60>
    {
        ts <<= 8;
 800308e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	020b      	lsls	r3, r1, #8
 800309c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80030a0:	0202      	lsls	r2, r0, #8
 80030a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ts |= ts_tab[i];
 80030a6:	1d3a      	adds	r2, r7, #4
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4413      	add	r3, r2
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2200      	movs	r2, #0
 80030b2:	461c      	mov	r4, r3
 80030b4:	4615      	mov	r5, r2
 80030b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80030ba:	ea42 0804 	orr.w	r8, r2, r4
 80030be:	ea43 0905 	orr.w	r9, r3, r5
 80030c2:	e9c7 8904 	strd	r8, r9, [r7, #16]
    for (i = 4; i >= 0; i--)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	3b01      	subs	r3, #1
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	dadd      	bge.n	800308e <get_tx_timestamp_u64+0x22>
    }
    return ts;
 80030d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80030d6:	4610      	mov	r0, r2
 80030d8:	4619      	mov	r1, r3
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080030e2 <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_rx_timestamp_u64(void)
{
 80030e2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int i;
    dwt_readrxtimestamp(ts_tab);
 80030f6:	1d3b      	adds	r3, r7, #4
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7fe fac3 	bl	8001684 <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
 80030fe:	2304      	movs	r3, #4
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	e01e      	b.n	8003142 <get_rx_timestamp_u64+0x60>
    {
        ts <<= 8;
 8003104:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	020b      	lsls	r3, r1, #8
 8003112:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003116:	0202      	lsls	r2, r0, #8
 8003118:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ts |= ts_tab[i];
 800311c:	1d3a      	adds	r2, r7, #4
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4413      	add	r3, r2
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2200      	movs	r2, #0
 8003128:	461c      	mov	r4, r3
 800312a:	4615      	mov	r5, r2
 800312c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003130:	ea42 0804 	orr.w	r8, r2, r4
 8003134:	ea43 0905 	orr.w	r9, r3, r5
 8003138:	e9c7 8904 	strd	r8, r9, [r7, #16]
    for (i = 4; i >= 0; i--)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	3b01      	subs	r3, #1
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2b00      	cmp	r3, #0
 8003146:	dadd      	bge.n	8003104 <get_rx_timestamp_u64+0x22>
    }
    return ts;
 8003148:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800314c:	4610      	mov	r0, r2
 800314e:	4619      	mov	r1, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003158 <final_msg_get_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
static void final_msg_get_ts(const uint8 *ts_field, uint32 *ts)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
    int i;
    *ts = 0;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8003168:	2300      	movs	r3, #0
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	e010      	b.n	8003190 <final_msg_get_ts+0x38>
    {
        *ts += ts_field[i] << (i * 8);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	440a      	add	r2, r1
 8003178:	7812      	ldrb	r2, [r2, #0]
 800317a:	4611      	mov	r1, r2
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	00d2      	lsls	r2, r2, #3
 8003180:	fa01 f202 	lsl.w	r2, r1, r2
 8003184:	441a      	add	r2, r3
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	3301      	adds	r3, #1
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b03      	cmp	r3, #3
 8003194:	ddeb      	ble.n	800316e <final_msg_get_ts+0x16>
    }
}
 8003196:	bf00      	nop
 8003198:	bf00      	nop
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80031a8:	4b17      	ldr	r3, [pc, #92]	; (8003208 <MX_SPI1_Init+0x64>)
 80031aa:	4a18      	ldr	r2, [pc, #96]	; (800320c <MX_SPI1_Init+0x68>)
 80031ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80031ae:	4b16      	ldr	r3, [pc, #88]	; (8003208 <MX_SPI1_Init+0x64>)
 80031b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80031b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80031b6:	4b14      	ldr	r3, [pc, #80]	; (8003208 <MX_SPI1_Init+0x64>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80031bc:	4b12      	ldr	r3, [pc, #72]	; (8003208 <MX_SPI1_Init+0x64>)
 80031be:	2200      	movs	r2, #0
 80031c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031c2:	4b11      	ldr	r3, [pc, #68]	; (8003208 <MX_SPI1_Init+0x64>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031c8:	4b0f      	ldr	r3, [pc, #60]	; (8003208 <MX_SPI1_Init+0x64>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80031ce:	4b0e      	ldr	r3, [pc, #56]	; (8003208 <MX_SPI1_Init+0x64>)
 80031d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80031d6:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <MX_SPI1_Init+0x64>)
 80031d8:	2220      	movs	r2, #32
 80031da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031dc:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <MX_SPI1_Init+0x64>)
 80031de:	2200      	movs	r2, #0
 80031e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80031e2:	4b09      	ldr	r3, [pc, #36]	; (8003208 <MX_SPI1_Init+0x64>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031e8:	4b07      	ldr	r3, [pc, #28]	; (8003208 <MX_SPI1_Init+0x64>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80031ee:	4b06      	ldr	r3, [pc, #24]	; (8003208 <MX_SPI1_Init+0x64>)
 80031f0:	220a      	movs	r2, #10
 80031f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80031f4:	4804      	ldr	r0, [pc, #16]	; (8003208 <MX_SPI1_Init+0x64>)
 80031f6:	f002 f847 	bl	8005288 <HAL_SPI_Init>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003200:	f7ff fcba 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003204:	bf00      	nop
 8003206:	bd80      	pop	{r7, pc}
 8003208:	20000758 	.word	0x20000758
 800320c:	40013000 	.word	0x40013000

08003210 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08a      	sub	sp, #40	; 0x28
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003218:	f107 0314 	add.w	r3, r7, #20
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	605a      	str	r2, [r3, #4]
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	60da      	str	r2, [r3, #12]
 8003226:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a19      	ldr	r2, [pc, #100]	; (8003294 <HAL_SPI_MspInit+0x84>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d12b      	bne.n	800328a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003232:	2300      	movs	r3, #0
 8003234:	613b      	str	r3, [r7, #16]
 8003236:	4b18      	ldr	r3, [pc, #96]	; (8003298 <HAL_SPI_MspInit+0x88>)
 8003238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323a:	4a17      	ldr	r2, [pc, #92]	; (8003298 <HAL_SPI_MspInit+0x88>)
 800323c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003240:	6453      	str	r3, [r2, #68]	; 0x44
 8003242:	4b15      	ldr	r3, [pc, #84]	; (8003298 <HAL_SPI_MspInit+0x88>)
 8003244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003246:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	4b11      	ldr	r3, [pc, #68]	; (8003298 <HAL_SPI_MspInit+0x88>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	4a10      	ldr	r2, [pc, #64]	; (8003298 <HAL_SPI_MspInit+0x88>)
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	6313      	str	r3, [r2, #48]	; 0x30
 800325e:	4b0e      	ldr	r3, [pc, #56]	; (8003298 <HAL_SPI_MspInit+0x88>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800326a:	23e0      	movs	r3, #224	; 0xe0
 800326c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326e:	2302      	movs	r3, #2
 8003270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003276:	2303      	movs	r3, #3
 8003278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800327a:	2305      	movs	r3, #5
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800327e:	f107 0314 	add.w	r3, r7, #20
 8003282:	4619      	mov	r1, r3
 8003284:	4805      	ldr	r0, [pc, #20]	; (800329c <HAL_SPI_MspInit+0x8c>)
 8003286:	f000 fc5f 	bl	8003b48 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800328a:	bf00      	nop
 800328c:	3728      	adds	r7, #40	; 0x28
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40013000 	.word	0x40013000
 8003298:	40023800 	.word	0x40023800
 800329c:	40020000 	.word	0x40020000

080032a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032a6:	2300      	movs	r3, #0
 80032a8:	607b      	str	r3, [r7, #4]
 80032aa:	4b10      	ldr	r3, [pc, #64]	; (80032ec <HAL_MspInit+0x4c>)
 80032ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ae:	4a0f      	ldr	r2, [pc, #60]	; (80032ec <HAL_MspInit+0x4c>)
 80032b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032b4:	6453      	str	r3, [r2, #68]	; 0x44
 80032b6:	4b0d      	ldr	r3, [pc, #52]	; (80032ec <HAL_MspInit+0x4c>)
 80032b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032be:	607b      	str	r3, [r7, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	603b      	str	r3, [r7, #0]
 80032c6:	4b09      	ldr	r3, [pc, #36]	; (80032ec <HAL_MspInit+0x4c>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	4a08      	ldr	r2, [pc, #32]	; (80032ec <HAL_MspInit+0x4c>)
 80032cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d0:	6413      	str	r3, [r2, #64]	; 0x40
 80032d2:	4b06      	ldr	r3, [pc, #24]	; (80032ec <HAL_MspInit+0x4c>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032da:	603b      	str	r3, [r7, #0]
 80032dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40023800 	.word	0x40023800

080032f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032f4:	e7fe      	b.n	80032f4 <NMI_Handler+0x4>

080032f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032f6:	b480      	push	{r7}
 80032f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032fa:	e7fe      	b.n	80032fa <HardFault_Handler+0x4>

080032fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003300:	e7fe      	b.n	8003300 <MemManage_Handler+0x4>

08003302 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003302:	b480      	push	{r7}
 8003304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003306:	e7fe      	b.n	8003306 <BusFault_Handler+0x4>

08003308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800330c:	e7fe      	b.n	800330c <UsageFault_Handler+0x4>

0800330e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800330e:	b480      	push	{r7}
 8003310:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003312:	bf00      	nop
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003320:	bf00      	nop
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800332a:	b480      	push	{r7}
 800332c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800332e:	bf00      	nop
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800333c:	f000 f9ea 	bl	8003714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003340:	bf00      	nop
 8003342:	bd80      	pop	{r7, pc}

08003344 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_RST_Pin);
 8003348:	2001      	movs	r0, #1
 800334a:	f000 fdb3 	bl	8003eb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800334e:	bf00      	nop
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003358:	4802      	ldr	r0, [pc, #8]	; (8003364 <USART2_IRQHandler+0x10>)
 800335a:	f002 fb13 	bl	8005984 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800335e:	bf00      	nop
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	200007b4 	.word	0x200007b4

08003368 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_IRQ_Pin);
 800336c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003370:	f000 fda0 	bl	8003eb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003374:	bf00      	nop
 8003376:	bd80      	pop	{r7, pc}

08003378 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return 1;
 800337c:	2301      	movs	r3, #1
}
 800337e:	4618      	mov	r0, r3
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <_kill>:

int _kill(int pid, int sig)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003392:	f003 fa2b 	bl	80067ec <__errno>
 8003396:	4603      	mov	r3, r0
 8003398:	2216      	movs	r2, #22
 800339a:	601a      	str	r2, [r3, #0]
  return -1;
 800339c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <_exit>:

void _exit (int status)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033b0:	f04f 31ff 	mov.w	r1, #4294967295
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff ffe7 	bl	8003388 <_kill>
  while (1) {}    /* Make sure we hang here */
 80033ba:	e7fe      	b.n	80033ba <_exit+0x12>

080033bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033c8:	2300      	movs	r3, #0
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	e00a      	b.n	80033e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033ce:	f3af 8000 	nop.w
 80033d2:	4601      	mov	r1, r0
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	1c5a      	adds	r2, r3, #1
 80033d8:	60ba      	str	r2, [r7, #8]
 80033da:	b2ca      	uxtb	r2, r1
 80033dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	3301      	adds	r3, #1
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	dbf0      	blt.n	80033ce <_read+0x12>
  }

  return len;
 80033ec:	687b      	ldr	r3, [r7, #4]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b086      	sub	sp, #24
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
 8003406:	e009      	b.n	800341c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	60ba      	str	r2, [r7, #8]
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	3301      	adds	r3, #1
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	429a      	cmp	r2, r3
 8003422:	dbf1      	blt.n	8003408 <_write+0x12>
  }
  return len;
 8003424:	687b      	ldr	r3, [r7, #4]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <_close>:

int _close(int file)
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003436:	f04f 33ff 	mov.w	r3, #4294967295
}
 800343a:	4618      	mov	r0, r3
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003456:	605a      	str	r2, [r3, #4]
  return 0;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <_isatty>:

int _isatty(int file)
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800346e:	2301      	movs	r3, #1
}
 8003470:	4618      	mov	r0, r3
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
	...

08003498 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034a0:	4a14      	ldr	r2, [pc, #80]	; (80034f4 <_sbrk+0x5c>)
 80034a2:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <_sbrk+0x60>)
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034ac:	4b13      	ldr	r3, [pc, #76]	; (80034fc <_sbrk+0x64>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d102      	bne.n	80034ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034b4:	4b11      	ldr	r3, [pc, #68]	; (80034fc <_sbrk+0x64>)
 80034b6:	4a12      	ldr	r2, [pc, #72]	; (8003500 <_sbrk+0x68>)
 80034b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034ba:	4b10      	ldr	r3, [pc, #64]	; (80034fc <_sbrk+0x64>)
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4413      	add	r3, r2
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d207      	bcs.n	80034d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034c8:	f003 f990 	bl	80067ec <__errno>
 80034cc:	4603      	mov	r3, r0
 80034ce:	220c      	movs	r2, #12
 80034d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034d2:	f04f 33ff 	mov.w	r3, #4294967295
 80034d6:	e009      	b.n	80034ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034d8:	4b08      	ldr	r3, [pc, #32]	; (80034fc <_sbrk+0x64>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034de:	4b07      	ldr	r3, [pc, #28]	; (80034fc <_sbrk+0x64>)
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4413      	add	r3, r2
 80034e6:	4a05      	ldr	r2, [pc, #20]	; (80034fc <_sbrk+0x64>)
 80034e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034ea:	68fb      	ldr	r3, [r7, #12]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	20020000 	.word	0x20020000
 80034f8:	00000400 	.word	0x00000400
 80034fc:	200007b0 	.word	0x200007b0
 8003500:	20000810 	.word	0x20000810

08003504 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003508:	4b06      	ldr	r3, [pc, #24]	; (8003524 <SystemInit+0x20>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350e:	4a05      	ldr	r2, [pc, #20]	; (8003524 <SystemInit+0x20>)
 8003510:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003514:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003518:	bf00      	nop
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800352c:	4b11      	ldr	r3, [pc, #68]	; (8003574 <MX_USART2_UART_Init+0x4c>)
 800352e:	4a12      	ldr	r2, [pc, #72]	; (8003578 <MX_USART2_UART_Init+0x50>)
 8003530:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003532:	4b10      	ldr	r3, [pc, #64]	; (8003574 <MX_USART2_UART_Init+0x4c>)
 8003534:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003538:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800353a:	4b0e      	ldr	r3, [pc, #56]	; (8003574 <MX_USART2_UART_Init+0x4c>)
 800353c:	2200      	movs	r2, #0
 800353e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003540:	4b0c      	ldr	r3, [pc, #48]	; (8003574 <MX_USART2_UART_Init+0x4c>)
 8003542:	2200      	movs	r2, #0
 8003544:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003546:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <MX_USART2_UART_Init+0x4c>)
 8003548:	2200      	movs	r2, #0
 800354a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800354c:	4b09      	ldr	r3, [pc, #36]	; (8003574 <MX_USART2_UART_Init+0x4c>)
 800354e:	220c      	movs	r2, #12
 8003550:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003552:	4b08      	ldr	r3, [pc, #32]	; (8003574 <MX_USART2_UART_Init+0x4c>)
 8003554:	2200      	movs	r2, #0
 8003556:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003558:	4b06      	ldr	r3, [pc, #24]	; (8003574 <MX_USART2_UART_Init+0x4c>)
 800355a:	2200      	movs	r2, #0
 800355c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800355e:	4805      	ldr	r0, [pc, #20]	; (8003574 <MX_USART2_UART_Init+0x4c>)
 8003560:	f002 f930 	bl	80057c4 <HAL_UART_Init>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800356a:	f7ff fb05 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800356e:	bf00      	nop
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	200007b4 	.word	0x200007b4
 8003578:	40004400 	.word	0x40004400

0800357c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08a      	sub	sp, #40	; 0x28
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003584:	f107 0314 	add.w	r3, r7, #20
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	609a      	str	r2, [r3, #8]
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a1d      	ldr	r2, [pc, #116]	; (8003610 <HAL_UART_MspInit+0x94>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d133      	bne.n	8003606 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	613b      	str	r3, [r7, #16]
 80035a2:	4b1c      	ldr	r3, [pc, #112]	; (8003614 <HAL_UART_MspInit+0x98>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	4a1b      	ldr	r2, [pc, #108]	; (8003614 <HAL_UART_MspInit+0x98>)
 80035a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ac:	6413      	str	r3, [r2, #64]	; 0x40
 80035ae:	4b19      	ldr	r3, [pc, #100]	; (8003614 <HAL_UART_MspInit+0x98>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	4b15      	ldr	r3, [pc, #84]	; (8003614 <HAL_UART_MspInit+0x98>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	4a14      	ldr	r2, [pc, #80]	; (8003614 <HAL_UART_MspInit+0x98>)
 80035c4:	f043 0301 	orr.w	r3, r3, #1
 80035c8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ca:	4b12      	ldr	r3, [pc, #72]	; (8003614 <HAL_UART_MspInit+0x98>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80035d6:	230c      	movs	r3, #12
 80035d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035da:	2302      	movs	r3, #2
 80035dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035e2:	2303      	movs	r3, #3
 80035e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035e6:	2307      	movs	r3, #7
 80035e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ea:	f107 0314 	add.w	r3, r7, #20
 80035ee:	4619      	mov	r1, r3
 80035f0:	4809      	ldr	r0, [pc, #36]	; (8003618 <HAL_UART_MspInit+0x9c>)
 80035f2:	f000 faa9 	bl	8003b48 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80035f6:	2200      	movs	r2, #0
 80035f8:	2100      	movs	r1, #0
 80035fa:	2026      	movs	r0, #38	; 0x26
 80035fc:	f000 f9cd 	bl	800399a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003600:	2026      	movs	r0, #38	; 0x26
 8003602:	f000 f9e6 	bl	80039d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003606:	bf00      	nop
 8003608:	3728      	adds	r7, #40	; 0x28
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40004400 	.word	0x40004400
 8003614:	40023800 	.word	0x40023800
 8003618:	40020000 	.word	0x40020000

0800361c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800361c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003654 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003620:	480d      	ldr	r0, [pc, #52]	; (8003658 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003622:	490e      	ldr	r1, [pc, #56]	; (800365c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003624:	4a0e      	ldr	r2, [pc, #56]	; (8003660 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003628:	e002      	b.n	8003630 <LoopCopyDataInit>

0800362a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800362a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800362c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800362e:	3304      	adds	r3, #4

08003630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003634:	d3f9      	bcc.n	800362a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003636:	4a0b      	ldr	r2, [pc, #44]	; (8003664 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003638:	4c0b      	ldr	r4, [pc, #44]	; (8003668 <LoopFillZerobss+0x26>)
  movs r3, #0
 800363a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800363c:	e001      	b.n	8003642 <LoopFillZerobss>

0800363e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800363e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003640:	3204      	adds	r2, #4

08003642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003644:	d3fb      	bcc.n	800363e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003646:	f7ff ff5d 	bl	8003504 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800364a:	f003 f8d5 	bl	80067f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800364e:	f7ff fa15 	bl	8002a7c <main>
  bx  lr    
 8003652:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003654:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800365c:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 8003660:	0800cbfc 	.word	0x0800cbfc
  ldr r2, =_sbss
 8003664:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8003668:	2000080c 	.word	0x2000080c

0800366c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800366c:	e7fe      	b.n	800366c <ADC_IRQHandler>
	...

08003670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003674:	4b0e      	ldr	r3, [pc, #56]	; (80036b0 <HAL_Init+0x40>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a0d      	ldr	r2, [pc, #52]	; (80036b0 <HAL_Init+0x40>)
 800367a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800367e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003680:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <HAL_Init+0x40>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a0a      	ldr	r2, [pc, #40]	; (80036b0 <HAL_Init+0x40>)
 8003686:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800368a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800368c:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <HAL_Init+0x40>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a07      	ldr	r2, [pc, #28]	; (80036b0 <HAL_Init+0x40>)
 8003692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003696:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003698:	2003      	movs	r0, #3
 800369a:	f000 f973 	bl	8003984 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800369e:	2000      	movs	r0, #0
 80036a0:	f000 f808 	bl	80036b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036a4:	f7ff fdfc 	bl	80032a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40023c00 	.word	0x40023c00

080036b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036bc:	4b12      	ldr	r3, [pc, #72]	; (8003708 <HAL_InitTick+0x54>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	4b12      	ldr	r3, [pc, #72]	; (800370c <HAL_InitTick+0x58>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	4619      	mov	r1, r3
 80036c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80036ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 f999 	bl	8003a0a <HAL_SYSTICK_Config>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e00e      	b.n	8003700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b0f      	cmp	r3, #15
 80036e6:	d80a      	bhi.n	80036fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036e8:	2200      	movs	r2, #0
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	f04f 30ff 	mov.w	r0, #4294967295
 80036f0:	f000 f953 	bl	800399a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036f4:	4a06      	ldr	r2, [pc, #24]	; (8003710 <HAL_InitTick+0x5c>)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	e000      	b.n	8003700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
}
 8003700:	4618      	mov	r0, r3
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20000068 	.word	0x20000068
 800370c:	20000070 	.word	0x20000070
 8003710:	2000006c 	.word	0x2000006c

08003714 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003718:	4b06      	ldr	r3, [pc, #24]	; (8003734 <HAL_IncTick+0x20>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	4b06      	ldr	r3, [pc, #24]	; (8003738 <HAL_IncTick+0x24>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4413      	add	r3, r2
 8003724:	4a04      	ldr	r2, [pc, #16]	; (8003738 <HAL_IncTick+0x24>)
 8003726:	6013      	str	r3, [r2, #0]
}
 8003728:	bf00      	nop
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	20000070 	.word	0x20000070
 8003738:	200007f8 	.word	0x200007f8

0800373c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  return uwTick;
 8003740:	4b03      	ldr	r3, [pc, #12]	; (8003750 <HAL_GetTick+0x14>)
 8003742:	681b      	ldr	r3, [r3, #0]
}
 8003744:	4618      	mov	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	200007f8 	.word	0x200007f8

08003754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800375c:	f7ff ffee 	bl	800373c <HAL_GetTick>
 8003760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376c:	d005      	beq.n	800377a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800376e:	4b0a      	ldr	r3, [pc, #40]	; (8003798 <HAL_Delay+0x44>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	461a      	mov	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4413      	add	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800377a:	bf00      	nop
 800377c:	f7ff ffde 	bl	800373c <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	429a      	cmp	r2, r3
 800378a:	d8f7      	bhi.n	800377c <HAL_Delay+0x28>
  {
  }
}
 800378c:	bf00      	nop
 800378e:	bf00      	nop
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	20000070 	.word	0x20000070

0800379c <__NVIC_SetPriorityGrouping>:
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037ac:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <__NVIC_SetPriorityGrouping+0x44>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037b8:	4013      	ands	r3, r2
 80037ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ce:	4a04      	ldr	r2, [pc, #16]	; (80037e0 <__NVIC_SetPriorityGrouping+0x44>)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	60d3      	str	r3, [r2, #12]
}
 80037d4:	bf00      	nop
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	e000ed00 	.word	0xe000ed00

080037e4 <__NVIC_GetPriorityGrouping>:
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037e8:	4b04      	ldr	r3, [pc, #16]	; (80037fc <__NVIC_GetPriorityGrouping+0x18>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	0a1b      	lsrs	r3, r3, #8
 80037ee:	f003 0307 	and.w	r3, r3, #7
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	e000ed00 	.word	0xe000ed00

08003800 <__NVIC_EnableIRQ>:
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800380a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380e:	2b00      	cmp	r3, #0
 8003810:	db0b      	blt.n	800382a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003812:	79fb      	ldrb	r3, [r7, #7]
 8003814:	f003 021f 	and.w	r2, r3, #31
 8003818:	4907      	ldr	r1, [pc, #28]	; (8003838 <__NVIC_EnableIRQ+0x38>)
 800381a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	2001      	movs	r0, #1
 8003822:	fa00 f202 	lsl.w	r2, r0, r2
 8003826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	e000e100 	.word	0xe000e100

0800383c <__NVIC_DisableIRQ>:
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384a:	2b00      	cmp	r3, #0
 800384c:	db12      	blt.n	8003874 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	f003 021f 	and.w	r2, r3, #31
 8003854:	490a      	ldr	r1, [pc, #40]	; (8003880 <__NVIC_DisableIRQ+0x44>)
 8003856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	2001      	movs	r0, #1
 800385e:	fa00 f202 	lsl.w	r2, r0, r2
 8003862:	3320      	adds	r3, #32
 8003864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003868:	f3bf 8f4f 	dsb	sy
}
 800386c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800386e:	f3bf 8f6f 	isb	sy
}
 8003872:	bf00      	nop
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	e000e100 	.word	0xe000e100

08003884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	6039      	str	r1, [r7, #0]
 800388e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003894:	2b00      	cmp	r3, #0
 8003896:	db0a      	blt.n	80038ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	b2da      	uxtb	r2, r3
 800389c:	490c      	ldr	r1, [pc, #48]	; (80038d0 <__NVIC_SetPriority+0x4c>)
 800389e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a2:	0112      	lsls	r2, r2, #4
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	440b      	add	r3, r1
 80038a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038ac:	e00a      	b.n	80038c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	4908      	ldr	r1, [pc, #32]	; (80038d4 <__NVIC_SetPriority+0x50>)
 80038b4:	79fb      	ldrb	r3, [r7, #7]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	3b04      	subs	r3, #4
 80038bc:	0112      	lsls	r2, r2, #4
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	440b      	add	r3, r1
 80038c2:	761a      	strb	r2, [r3, #24]
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	e000e100 	.word	0xe000e100
 80038d4:	e000ed00 	.word	0xe000ed00

080038d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038d8:	b480      	push	{r7}
 80038da:	b089      	sub	sp, #36	; 0x24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f1c3 0307 	rsb	r3, r3, #7
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	bf28      	it	cs
 80038f6:	2304      	movcs	r3, #4
 80038f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	3304      	adds	r3, #4
 80038fe:	2b06      	cmp	r3, #6
 8003900:	d902      	bls.n	8003908 <NVIC_EncodePriority+0x30>
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	3b03      	subs	r3, #3
 8003906:	e000      	b.n	800390a <NVIC_EncodePriority+0x32>
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800390c:	f04f 32ff 	mov.w	r2, #4294967295
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	43da      	mvns	r2, r3
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	401a      	ands	r2, r3
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003920:	f04f 31ff 	mov.w	r1, #4294967295
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	fa01 f303 	lsl.w	r3, r1, r3
 800392a:	43d9      	mvns	r1, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003930:	4313      	orrs	r3, r2
         );
}
 8003932:	4618      	mov	r0, r3
 8003934:	3724      	adds	r7, #36	; 0x24
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
	...

08003940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3b01      	subs	r3, #1
 800394c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003950:	d301      	bcc.n	8003956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003952:	2301      	movs	r3, #1
 8003954:	e00f      	b.n	8003976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003956:	4a0a      	ldr	r2, [pc, #40]	; (8003980 <SysTick_Config+0x40>)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3b01      	subs	r3, #1
 800395c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800395e:	210f      	movs	r1, #15
 8003960:	f04f 30ff 	mov.w	r0, #4294967295
 8003964:	f7ff ff8e 	bl	8003884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003968:	4b05      	ldr	r3, [pc, #20]	; (8003980 <SysTick_Config+0x40>)
 800396a:	2200      	movs	r2, #0
 800396c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800396e:	4b04      	ldr	r3, [pc, #16]	; (8003980 <SysTick_Config+0x40>)
 8003970:	2207      	movs	r2, #7
 8003972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	e000e010 	.word	0xe000e010

08003984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f7ff ff05 	bl	800379c <__NVIC_SetPriorityGrouping>
}
 8003992:	bf00      	nop
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800399a:	b580      	push	{r7, lr}
 800399c:	b086      	sub	sp, #24
 800399e:	af00      	add	r7, sp, #0
 80039a0:	4603      	mov	r3, r0
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	607a      	str	r2, [r7, #4]
 80039a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039ac:	f7ff ff1a 	bl	80037e4 <__NVIC_GetPriorityGrouping>
 80039b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	68b9      	ldr	r1, [r7, #8]
 80039b6:	6978      	ldr	r0, [r7, #20]
 80039b8:	f7ff ff8e 	bl	80038d8 <NVIC_EncodePriority>
 80039bc:	4602      	mov	r2, r0
 80039be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039c2:	4611      	mov	r1, r2
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff ff5d 	bl	8003884 <__NVIC_SetPriority>
}
 80039ca:	bf00      	nop
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b082      	sub	sp, #8
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	4603      	mov	r3, r0
 80039da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff ff0d 	bl	8003800 <__NVIC_EnableIRQ>
}
 80039e6:	bf00      	nop
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	4603      	mov	r3, r0
 80039f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80039f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff ff1d 	bl	800383c <__NVIC_DisableIRQ>
}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b082      	sub	sp, #8
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff ff94 	bl	8003940 <SysTick_Config>
 8003a18:	4603      	mov	r3, r0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b084      	sub	sp, #16
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a30:	f7ff fe84 	bl	800373c <HAL_GetTick>
 8003a34:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d008      	beq.n	8003a54 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2280      	movs	r2, #128	; 0x80
 8003a46:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e052      	b.n	8003afa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0216 	bic.w	r2, r2, #22
 8003a62:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695a      	ldr	r2, [r3, #20]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a72:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d103      	bne.n	8003a84 <HAL_DMA_Abort+0x62>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d007      	beq.n	8003a94 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0208 	bic.w	r2, r2, #8
 8003a92:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0201 	bic.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aa4:	e013      	b.n	8003ace <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003aa6:	f7ff fe49 	bl	800373c <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b05      	cmp	r3, #5
 8003ab2:	d90c      	bls.n	8003ace <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2203      	movs	r2, #3
 8003abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e015      	b.n	8003afa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1e4      	bne.n	8003aa6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae0:	223f      	movs	r2, #63	; 0x3f
 8003ae2:	409a      	lsls	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d004      	beq.n	8003b20 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2280      	movs	r2, #128	; 0x80
 8003b1a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e00c      	b.n	8003b3a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2205      	movs	r2, #5
 8003b24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0201 	bic.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
	...

08003b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b089      	sub	sp, #36	; 0x24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61fb      	str	r3, [r7, #28]
 8003b62:	e159      	b.n	8003e18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b64:	2201      	movs	r2, #1
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4013      	ands	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	f040 8148 	bne.w	8003e12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d005      	beq.n	8003b9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d130      	bne.n	8003bfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	2203      	movs	r2, #3
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	43db      	mvns	r3, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	091b      	lsrs	r3, r3, #4
 8003be6:	f003 0201 	and.w	r2, r3, #1
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f003 0303 	and.w	r3, r3, #3
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d017      	beq.n	8003c38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	2203      	movs	r2, #3
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f003 0303 	and.w	r3, r3, #3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d123      	bne.n	8003c8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	08da      	lsrs	r2, r3, #3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3208      	adds	r2, #8
 8003c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	220f      	movs	r2, #15
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	43db      	mvns	r3, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4013      	ands	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	691a      	ldr	r2, [r3, #16]
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	08da      	lsrs	r2, r3, #3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3208      	adds	r2, #8
 8003c86:	69b9      	ldr	r1, [r7, #24]
 8003c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	2203      	movs	r2, #3
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 0203 	and.w	r2, r3, #3
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 80a2 	beq.w	8003e12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	4b57      	ldr	r3, [pc, #348]	; (8003e30 <HAL_GPIO_Init+0x2e8>)
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd6:	4a56      	ldr	r2, [pc, #344]	; (8003e30 <HAL_GPIO_Init+0x2e8>)
 8003cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8003cde:	4b54      	ldr	r3, [pc, #336]	; (8003e30 <HAL_GPIO_Init+0x2e8>)
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cea:	4a52      	ldr	r2, [pc, #328]	; (8003e34 <HAL_GPIO_Init+0x2ec>)
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	089b      	lsrs	r3, r3, #2
 8003cf0:	3302      	adds	r3, #2
 8003cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	220f      	movs	r2, #15
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43db      	mvns	r3, r3
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a49      	ldr	r2, [pc, #292]	; (8003e38 <HAL_GPIO_Init+0x2f0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d019      	beq.n	8003d4a <HAL_GPIO_Init+0x202>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a48      	ldr	r2, [pc, #288]	; (8003e3c <HAL_GPIO_Init+0x2f4>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d013      	beq.n	8003d46 <HAL_GPIO_Init+0x1fe>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a47      	ldr	r2, [pc, #284]	; (8003e40 <HAL_GPIO_Init+0x2f8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d00d      	beq.n	8003d42 <HAL_GPIO_Init+0x1fa>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a46      	ldr	r2, [pc, #280]	; (8003e44 <HAL_GPIO_Init+0x2fc>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d007      	beq.n	8003d3e <HAL_GPIO_Init+0x1f6>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a45      	ldr	r2, [pc, #276]	; (8003e48 <HAL_GPIO_Init+0x300>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d101      	bne.n	8003d3a <HAL_GPIO_Init+0x1f2>
 8003d36:	2304      	movs	r3, #4
 8003d38:	e008      	b.n	8003d4c <HAL_GPIO_Init+0x204>
 8003d3a:	2307      	movs	r3, #7
 8003d3c:	e006      	b.n	8003d4c <HAL_GPIO_Init+0x204>
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e004      	b.n	8003d4c <HAL_GPIO_Init+0x204>
 8003d42:	2302      	movs	r3, #2
 8003d44:	e002      	b.n	8003d4c <HAL_GPIO_Init+0x204>
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <HAL_GPIO_Init+0x204>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	69fa      	ldr	r2, [r7, #28]
 8003d4e:	f002 0203 	and.w	r2, r2, #3
 8003d52:	0092      	lsls	r2, r2, #2
 8003d54:	4093      	lsls	r3, r2
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d5c:	4935      	ldr	r1, [pc, #212]	; (8003e34 <HAL_GPIO_Init+0x2ec>)
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	089b      	lsrs	r3, r3, #2
 8003d62:	3302      	adds	r3, #2
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d6a:	4b38      	ldr	r3, [pc, #224]	; (8003e4c <HAL_GPIO_Init+0x304>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	43db      	mvns	r3, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4013      	ands	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d8e:	4a2f      	ldr	r2, [pc, #188]	; (8003e4c <HAL_GPIO_Init+0x304>)
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d94:	4b2d      	ldr	r3, [pc, #180]	; (8003e4c <HAL_GPIO_Init+0x304>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4013      	ands	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003db8:	4a24      	ldr	r2, [pc, #144]	; (8003e4c <HAL_GPIO_Init+0x304>)
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003dbe:	4b23      	ldr	r3, [pc, #140]	; (8003e4c <HAL_GPIO_Init+0x304>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003de2:	4a1a      	ldr	r2, [pc, #104]	; (8003e4c <HAL_GPIO_Init+0x304>)
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003de8:	4b18      	ldr	r3, [pc, #96]	; (8003e4c <HAL_GPIO_Init+0x304>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	43db      	mvns	r3, r3
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	4013      	ands	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e0c:	4a0f      	ldr	r2, [pc, #60]	; (8003e4c <HAL_GPIO_Init+0x304>)
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	3301      	adds	r3, #1
 8003e16:	61fb      	str	r3, [r7, #28]
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	2b0f      	cmp	r3, #15
 8003e1c:	f67f aea2 	bls.w	8003b64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e20:	bf00      	nop
 8003e22:	bf00      	nop
 8003e24:	3724      	adds	r7, #36	; 0x24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	40023800 	.word	0x40023800
 8003e34:	40013800 	.word	0x40013800
 8003e38:	40020000 	.word	0x40020000
 8003e3c:	40020400 	.word	0x40020400
 8003e40:	40020800 	.word	0x40020800
 8003e44:	40020c00 	.word	0x40020c00
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	40013c00 	.word	0x40013c00

08003e50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	887b      	ldrh	r3, [r7, #2]
 8003e62:	4013      	ands	r3, r2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	73fb      	strb	r3, [r7, #15]
 8003e6c:	e001      	b.n	8003e72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	807b      	strh	r3, [r7, #2]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e90:	787b      	ldrb	r3, [r7, #1]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e96:	887a      	ldrh	r2, [r7, #2]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e9c:	e003      	b.n	8003ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e9e:	887b      	ldrh	r3, [r7, #2]
 8003ea0:	041a      	lsls	r2, r3, #16
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	619a      	str	r2, [r3, #24]
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
	...

08003eb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	4603      	mov	r3, r0
 8003ebc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ebe:	4b08      	ldr	r3, [pc, #32]	; (8003ee0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ec0:	695a      	ldr	r2, [r3, #20]
 8003ec2:	88fb      	ldrh	r3, [r7, #6]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d006      	beq.n	8003ed8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003eca:	4a05      	ldr	r2, [pc, #20]	; (8003ee0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ecc:	88fb      	ldrh	r3, [r7, #6]
 8003ece:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ed0:	88fb      	ldrh	r3, [r7, #6]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fe f994 	bl	8002200 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ed8:	bf00      	nop
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40013c00 	.word	0x40013c00

08003ee4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e12b      	b.n	800414e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d106      	bne.n	8003f10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7fe fd6e 	bl	80029ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2224      	movs	r2, #36	; 0x24
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0201 	bic.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f48:	f001 f976 	bl	8005238 <HAL_RCC_GetPCLK1Freq>
 8003f4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	4a81      	ldr	r2, [pc, #516]	; (8004158 <HAL_I2C_Init+0x274>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d807      	bhi.n	8003f68 <HAL_I2C_Init+0x84>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4a80      	ldr	r2, [pc, #512]	; (800415c <HAL_I2C_Init+0x278>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	bf94      	ite	ls
 8003f60:	2301      	movls	r3, #1
 8003f62:	2300      	movhi	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	e006      	b.n	8003f76 <HAL_I2C_Init+0x92>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4a7d      	ldr	r2, [pc, #500]	; (8004160 <HAL_I2C_Init+0x27c>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	bf94      	ite	ls
 8003f70:	2301      	movls	r3, #1
 8003f72:	2300      	movhi	r3, #0
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e0e7      	b.n	800414e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	4a78      	ldr	r2, [pc, #480]	; (8004164 <HAL_I2C_Init+0x280>)
 8003f82:	fba2 2303 	umull	r2, r3, r2, r3
 8003f86:	0c9b      	lsrs	r3, r3, #18
 8003f88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	4a6a      	ldr	r2, [pc, #424]	; (8004158 <HAL_I2C_Init+0x274>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d802      	bhi.n	8003fb8 <HAL_I2C_Init+0xd4>
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	e009      	b.n	8003fcc <HAL_I2C_Init+0xe8>
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fbe:	fb02 f303 	mul.w	r3, r2, r3
 8003fc2:	4a69      	ldr	r2, [pc, #420]	; (8004168 <HAL_I2C_Init+0x284>)
 8003fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc8:	099b      	lsrs	r3, r3, #6
 8003fca:	3301      	adds	r3, #1
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6812      	ldr	r2, [r2, #0]
 8003fd0:	430b      	orrs	r3, r1
 8003fd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	495c      	ldr	r1, [pc, #368]	; (8004158 <HAL_I2C_Init+0x274>)
 8003fe8:	428b      	cmp	r3, r1
 8003fea:	d819      	bhi.n	8004020 <HAL_I2C_Init+0x13c>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	1e59      	subs	r1, r3, #1
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ffa:	1c59      	adds	r1, r3, #1
 8003ffc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004000:	400b      	ands	r3, r1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <HAL_I2C_Init+0x138>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	1e59      	subs	r1, r3, #1
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	fbb1 f3f3 	udiv	r3, r1, r3
 8004014:	3301      	adds	r3, #1
 8004016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800401a:	e051      	b.n	80040c0 <HAL_I2C_Init+0x1dc>
 800401c:	2304      	movs	r3, #4
 800401e:	e04f      	b.n	80040c0 <HAL_I2C_Init+0x1dc>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d111      	bne.n	800404c <HAL_I2C_Init+0x168>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	1e58      	subs	r0, r3, #1
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6859      	ldr	r1, [r3, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	440b      	add	r3, r1
 8004036:	fbb0 f3f3 	udiv	r3, r0, r3
 800403a:	3301      	adds	r3, #1
 800403c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004040:	2b00      	cmp	r3, #0
 8004042:	bf0c      	ite	eq
 8004044:	2301      	moveq	r3, #1
 8004046:	2300      	movne	r3, #0
 8004048:	b2db      	uxtb	r3, r3
 800404a:	e012      	b.n	8004072 <HAL_I2C_Init+0x18e>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	1e58      	subs	r0, r3, #1
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6859      	ldr	r1, [r3, #4]
 8004054:	460b      	mov	r3, r1
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	440b      	add	r3, r1
 800405a:	0099      	lsls	r1, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004062:	3301      	adds	r3, #1
 8004064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004068:	2b00      	cmp	r3, #0
 800406a:	bf0c      	ite	eq
 800406c:	2301      	moveq	r3, #1
 800406e:	2300      	movne	r3, #0
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <HAL_I2C_Init+0x196>
 8004076:	2301      	movs	r3, #1
 8004078:	e022      	b.n	80040c0 <HAL_I2C_Init+0x1dc>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10e      	bne.n	80040a0 <HAL_I2C_Init+0x1bc>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	1e58      	subs	r0, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6859      	ldr	r1, [r3, #4]
 800408a:	460b      	mov	r3, r1
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	440b      	add	r3, r1
 8004090:	fbb0 f3f3 	udiv	r3, r0, r3
 8004094:	3301      	adds	r3, #1
 8004096:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800409a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800409e:	e00f      	b.n	80040c0 <HAL_I2C_Init+0x1dc>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	1e58      	subs	r0, r3, #1
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6859      	ldr	r1, [r3, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	440b      	add	r3, r1
 80040ae:	0099      	lsls	r1, r3, #2
 80040b0:	440b      	add	r3, r1
 80040b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80040b6:	3301      	adds	r3, #1
 80040b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	6809      	ldr	r1, [r1, #0]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69da      	ldr	r2, [r3, #28]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	430a      	orrs	r2, r1
 80040e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6911      	ldr	r1, [r2, #16]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	68d2      	ldr	r2, [r2, #12]
 80040fa:	4311      	orrs	r1, r2
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6812      	ldr	r2, [r2, #0]
 8004100:	430b      	orrs	r3, r1
 8004102:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	695a      	ldr	r2, [r3, #20]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0201 	orr.w	r2, r2, #1
 800412e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	000186a0 	.word	0x000186a0
 800415c:	001e847f 	.word	0x001e847f
 8004160:	003d08ff 	.word	0x003d08ff
 8004164:	431bde83 	.word	0x431bde83
 8004168:	10624dd3 	.word	0x10624dd3

0800416c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af02      	add	r7, sp, #8
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	607a      	str	r2, [r7, #4]
 8004176:	461a      	mov	r2, r3
 8004178:	460b      	mov	r3, r1
 800417a:	817b      	strh	r3, [r7, #10]
 800417c:	4613      	mov	r3, r2
 800417e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004180:	f7ff fadc 	bl	800373c <HAL_GetTick>
 8004184:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b20      	cmp	r3, #32
 8004190:	f040 80e0 	bne.w	8004354 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	2319      	movs	r3, #25
 800419a:	2201      	movs	r2, #1
 800419c:	4970      	ldr	r1, [pc, #448]	; (8004360 <HAL_I2C_Master_Transmit+0x1f4>)
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 fa92 	bl	80046c8 <I2C_WaitOnFlagUntilTimeout>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80041aa:	2302      	movs	r3, #2
 80041ac:	e0d3      	b.n	8004356 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d101      	bne.n	80041bc <HAL_I2C_Master_Transmit+0x50>
 80041b8:	2302      	movs	r3, #2
 80041ba:	e0cc      	b.n	8004356 <HAL_I2C_Master_Transmit+0x1ea>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d007      	beq.n	80041e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f042 0201 	orr.w	r2, r2, #1
 80041e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2221      	movs	r2, #33	; 0x21
 80041f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2210      	movs	r2, #16
 80041fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	893a      	ldrh	r2, [r7, #8]
 8004212:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4a50      	ldr	r2, [pc, #320]	; (8004364 <HAL_I2C_Master_Transmit+0x1f8>)
 8004222:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004224:	8979      	ldrh	r1, [r7, #10]
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	6a3a      	ldr	r2, [r7, #32]
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 f9ca 	bl	80045c4 <I2C_MasterRequestWrite>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e08d      	b.n	8004356 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800423a:	2300      	movs	r3, #0
 800423c:	613b      	str	r3, [r7, #16]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	613b      	str	r3, [r7, #16]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	613b      	str	r3, [r7, #16]
 800424e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004250:	e066      	b.n	8004320 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	6a39      	ldr	r1, [r7, #32]
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 fb0c 	bl	8004874 <I2C_WaitOnTXEFlagUntilTimeout>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00d      	beq.n	800427e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	2b04      	cmp	r3, #4
 8004268:	d107      	bne.n	800427a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004278:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e06b      	b.n	8004356 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	781a      	ldrb	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004298:	b29b      	uxth	r3, r3
 800429a:	3b01      	subs	r3, #1
 800429c:	b29a      	uxth	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	2b04      	cmp	r3, #4
 80042ba:	d11b      	bne.n	80042f4 <HAL_I2C_Master_Transmit+0x188>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d017      	beq.n	80042f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	781a      	ldrb	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042de:	b29b      	uxth	r3, r3
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	6a39      	ldr	r1, [r7, #32]
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 fafc 	bl	80048f6 <I2C_WaitOnBTFFlagUntilTimeout>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00d      	beq.n	8004320 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	2b04      	cmp	r3, #4
 800430a:	d107      	bne.n	800431c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800431a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e01a      	b.n	8004356 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004324:	2b00      	cmp	r3, #0
 8004326:	d194      	bne.n	8004252 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004336:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004350:	2300      	movs	r3, #0
 8004352:	e000      	b.n	8004356 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004354:	2302      	movs	r3, #2
  }
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	00100002 	.word	0x00100002
 8004364:	ffff0000 	.word	0xffff0000

08004368 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b08a      	sub	sp, #40	; 0x28
 800436c:	af02      	add	r7, sp, #8
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	607a      	str	r2, [r7, #4]
 8004372:	603b      	str	r3, [r7, #0]
 8004374:	460b      	mov	r3, r1
 8004376:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004378:	f7ff f9e0 	bl	800373c <HAL_GetTick>
 800437c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800437e:	2300      	movs	r3, #0
 8004380:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b20      	cmp	r3, #32
 800438c:	f040 8111 	bne.w	80045b2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	2319      	movs	r3, #25
 8004396:	2201      	movs	r2, #1
 8004398:	4988      	ldr	r1, [pc, #544]	; (80045bc <HAL_I2C_IsDeviceReady+0x254>)
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 f994 	bl	80046c8 <I2C_WaitOnFlagUntilTimeout>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80043a6:	2302      	movs	r3, #2
 80043a8:	e104      	b.n	80045b4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d101      	bne.n	80043b8 <HAL_I2C_IsDeviceReady+0x50>
 80043b4:	2302      	movs	r3, #2
 80043b6:	e0fd      	b.n	80045b4 <HAL_I2C_IsDeviceReady+0x24c>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d007      	beq.n	80043de <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f042 0201 	orr.w	r2, r2, #1
 80043dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2224      	movs	r2, #36	; 0x24
 80043f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4a70      	ldr	r2, [pc, #448]	; (80045c0 <HAL_I2C_IsDeviceReady+0x258>)
 8004400:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004410:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2200      	movs	r2, #0
 800441a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 f952 	bl	80046c8 <I2C_WaitOnFlagUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00d      	beq.n	8004446 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004438:	d103      	bne.n	8004442 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004440:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e0b6      	b.n	80045b4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004446:	897b      	ldrh	r3, [r7, #10]
 8004448:	b2db      	uxtb	r3, r3
 800444a:	461a      	mov	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004454:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004456:	f7ff f971 	bl	800373c <HAL_GetTick>
 800445a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b02      	cmp	r3, #2
 8004468:	bf0c      	ite	eq
 800446a:	2301      	moveq	r3, #1
 800446c:	2300      	movne	r3, #0
 800446e:	b2db      	uxtb	r3, r3
 8004470:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800447c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004480:	bf0c      	ite	eq
 8004482:	2301      	moveq	r3, #1
 8004484:	2300      	movne	r3, #0
 8004486:	b2db      	uxtb	r3, r3
 8004488:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800448a:	e025      	b.n	80044d8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800448c:	f7ff f956 	bl	800373c <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	429a      	cmp	r2, r3
 800449a:	d302      	bcc.n	80044a2 <HAL_I2C_IsDeviceReady+0x13a>
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d103      	bne.n	80044aa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	22a0      	movs	r2, #160	; 0xa0
 80044a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	bf0c      	ite	eq
 80044b8:	2301      	moveq	r3, #1
 80044ba:	2300      	movne	r3, #0
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ce:	bf0c      	ite	eq
 80044d0:	2301      	moveq	r3, #1
 80044d2:	2300      	movne	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2ba0      	cmp	r3, #160	; 0xa0
 80044e2:	d005      	beq.n	80044f0 <HAL_I2C_IsDeviceReady+0x188>
 80044e4:	7dfb      	ldrb	r3, [r7, #23]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d102      	bne.n	80044f0 <HAL_I2C_IsDeviceReady+0x188>
 80044ea:	7dbb      	ldrb	r3, [r7, #22]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0cd      	beq.n	800448c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b02      	cmp	r3, #2
 8004504:	d129      	bne.n	800455a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004514:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004516:	2300      	movs	r3, #0
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	613b      	str	r3, [r7, #16]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	613b      	str	r3, [r7, #16]
 800452a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	2319      	movs	r3, #25
 8004532:	2201      	movs	r2, #1
 8004534:	4921      	ldr	r1, [pc, #132]	; (80045bc <HAL_I2C_IsDeviceReady+0x254>)
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 f8c6 	bl	80046c8 <I2C_WaitOnFlagUntilTimeout>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e036      	b.n	80045b4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2220      	movs	r2, #32
 800454a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004556:	2300      	movs	r3, #0
 8004558:	e02c      	b.n	80045b4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004568:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004572:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	2319      	movs	r3, #25
 800457a:	2201      	movs	r2, #1
 800457c:	490f      	ldr	r1, [pc, #60]	; (80045bc <HAL_I2C_IsDeviceReady+0x254>)
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 f8a2 	bl	80046c8 <I2C_WaitOnFlagUntilTimeout>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e012      	b.n	80045b4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	3301      	adds	r3, #1
 8004592:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	429a      	cmp	r2, r3
 800459a:	f4ff af32 	bcc.w	8004402 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e000      	b.n	80045b4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80045b2:	2302      	movs	r3, #2
  }
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3720      	adds	r7, #32
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	00100002 	.word	0x00100002
 80045c0:	ffff0000 	.word	0xffff0000

080045c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b088      	sub	sp, #32
 80045c8:	af02      	add	r7, sp, #8
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	607a      	str	r2, [r7, #4]
 80045ce:	603b      	str	r3, [r7, #0]
 80045d0:	460b      	mov	r3, r1
 80045d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d006      	beq.n	80045ee <I2C_MasterRequestWrite+0x2a>
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d003      	beq.n	80045ee <I2C_MasterRequestWrite+0x2a>
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045ec:	d108      	bne.n	8004600 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	e00b      	b.n	8004618 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004604:	2b12      	cmp	r3, #18
 8004606:	d107      	bne.n	8004618 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004616:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 f84f 	bl	80046c8 <I2C_WaitOnFlagUntilTimeout>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00d      	beq.n	800464c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800463e:	d103      	bne.n	8004648 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004646:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e035      	b.n	80046b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004654:	d108      	bne.n	8004668 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004656:	897b      	ldrh	r3, [r7, #10]
 8004658:	b2db      	uxtb	r3, r3
 800465a:	461a      	mov	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004664:	611a      	str	r2, [r3, #16]
 8004666:	e01b      	b.n	80046a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004668:	897b      	ldrh	r3, [r7, #10]
 800466a:	11db      	asrs	r3, r3, #7
 800466c:	b2db      	uxtb	r3, r3
 800466e:	f003 0306 	and.w	r3, r3, #6
 8004672:	b2db      	uxtb	r3, r3
 8004674:	f063 030f 	orn	r3, r3, #15
 8004678:	b2da      	uxtb	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	490e      	ldr	r1, [pc, #56]	; (80046c0 <I2C_MasterRequestWrite+0xfc>)
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 f875 	bl	8004776 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e010      	b.n	80046b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004696:	897b      	ldrh	r3, [r7, #10]
 8004698:	b2da      	uxtb	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	4907      	ldr	r1, [pc, #28]	; (80046c4 <I2C_MasterRequestWrite+0x100>)
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 f865 	bl	8004776 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e000      	b.n	80046b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	00010008 	.word	0x00010008
 80046c4:	00010002 	.word	0x00010002

080046c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	603b      	str	r3, [r7, #0]
 80046d4:	4613      	mov	r3, r2
 80046d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046d8:	e025      	b.n	8004726 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e0:	d021      	beq.n	8004726 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e2:	f7ff f82b 	bl	800373c <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d302      	bcc.n	80046f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d116      	bne.n	8004726 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2220      	movs	r2, #32
 8004702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	f043 0220 	orr.w	r2, r3, #32
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e023      	b.n	800476e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	0c1b      	lsrs	r3, r3, #16
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b01      	cmp	r3, #1
 800472e:	d10d      	bne.n	800474c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	43da      	mvns	r2, r3
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	4013      	ands	r3, r2
 800473c:	b29b      	uxth	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	bf0c      	ite	eq
 8004742:	2301      	moveq	r3, #1
 8004744:	2300      	movne	r3, #0
 8004746:	b2db      	uxtb	r3, r3
 8004748:	461a      	mov	r2, r3
 800474a:	e00c      	b.n	8004766 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	43da      	mvns	r2, r3
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4013      	ands	r3, r2
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	bf0c      	ite	eq
 800475e:	2301      	moveq	r3, #1
 8004760:	2300      	movne	r3, #0
 8004762:	b2db      	uxtb	r3, r3
 8004764:	461a      	mov	r2, r3
 8004766:	79fb      	ldrb	r3, [r7, #7]
 8004768:	429a      	cmp	r2, r3
 800476a:	d0b6      	beq.n	80046da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b084      	sub	sp, #16
 800477a:	af00      	add	r7, sp, #0
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	60b9      	str	r1, [r7, #8]
 8004780:	607a      	str	r2, [r7, #4]
 8004782:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004784:	e051      	b.n	800482a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004794:	d123      	bne.n	80047de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2220      	movs	r2, #32
 80047ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	f043 0204 	orr.w	r2, r3, #4
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e046      	b.n	800486c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e4:	d021      	beq.n	800482a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e6:	f7fe ffa9 	bl	800373c <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d302      	bcc.n	80047fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d116      	bne.n	800482a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2220      	movs	r2, #32
 8004806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	f043 0220 	orr.w	r2, r3, #32
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e020      	b.n	800486c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	0c1b      	lsrs	r3, r3, #16
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b01      	cmp	r3, #1
 8004832:	d10c      	bne.n	800484e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	43da      	mvns	r2, r3
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	4013      	ands	r3, r2
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	bf14      	ite	ne
 8004846:	2301      	movne	r3, #1
 8004848:	2300      	moveq	r3, #0
 800484a:	b2db      	uxtb	r3, r3
 800484c:	e00b      	b.n	8004866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	43da      	mvns	r2, r3
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	4013      	ands	r3, r2
 800485a:	b29b      	uxth	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	bf14      	ite	ne
 8004860:	2301      	movne	r3, #1
 8004862:	2300      	moveq	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d18d      	bne.n	8004786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004880:	e02d      	b.n	80048de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f000 f878 	bl	8004978 <I2C_IsAcknowledgeFailed>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e02d      	b.n	80048ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004898:	d021      	beq.n	80048de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800489a:	f7fe ff4f 	bl	800373c <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d302      	bcc.n	80048b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d116      	bne.n	80048de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	f043 0220 	orr.w	r2, r3, #32
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e007      	b.n	80048ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e8:	2b80      	cmp	r3, #128	; 0x80
 80048ea:	d1ca      	bne.n	8004882 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b084      	sub	sp, #16
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	60f8      	str	r0, [r7, #12]
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004902:	e02d      	b.n	8004960 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 f837 	bl	8004978 <I2C_IsAcknowledgeFailed>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e02d      	b.n	8004970 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491a:	d021      	beq.n	8004960 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800491c:	f7fe ff0e 	bl	800373c <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	429a      	cmp	r2, r3
 800492a:	d302      	bcc.n	8004932 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d116      	bne.n	8004960 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2220      	movs	r2, #32
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494c:	f043 0220 	orr.w	r2, r3, #32
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e007      	b.n	8004970 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	f003 0304 	and.w	r3, r3, #4
 800496a:	2b04      	cmp	r3, #4
 800496c:	d1ca      	bne.n	8004904 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800498a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800498e:	d11b      	bne.n	80049c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004998:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b4:	f043 0204 	orr.w	r2, r3, #4
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
	...

080049d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e267      	b.n	8004eba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d075      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049f6:	4b88      	ldr	r3, [pc, #544]	; (8004c18 <HAL_RCC_OscConfig+0x240>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f003 030c 	and.w	r3, r3, #12
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d00c      	beq.n	8004a1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a02:	4b85      	ldr	r3, [pc, #532]	; (8004c18 <HAL_RCC_OscConfig+0x240>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a0a:	2b08      	cmp	r3, #8
 8004a0c:	d112      	bne.n	8004a34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a0e:	4b82      	ldr	r3, [pc, #520]	; (8004c18 <HAL_RCC_OscConfig+0x240>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a1a:	d10b      	bne.n	8004a34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a1c:	4b7e      	ldr	r3, [pc, #504]	; (8004c18 <HAL_RCC_OscConfig+0x240>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d05b      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x108>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d157      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e242      	b.n	8004eba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a3c:	d106      	bne.n	8004a4c <HAL_RCC_OscConfig+0x74>
 8004a3e:	4b76      	ldr	r3, [pc, #472]	; (8004c18 <HAL_RCC_OscConfig+0x240>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a75      	ldr	r2, [pc, #468]	; (8004c18 <HAL_RCC_OscConfig+0x240>)
 8004a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	e01d      	b.n	8004a88 <HAL_RCC_OscConfig+0xb0>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a54:	d10c      	bne.n	8004a70 <HAL_RCC_OscConfig+0x98>
 8004a56:	4b70      	ldr	r3, [pc, #448]	; (8004c18 <HAL_RCC_OscConfig+0x240>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a6f      	ldr	r2, [pc, #444]	; (8004c18 <HAL_RCC_OscConfig+0x240>)
 8004a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	4b6d      	ldr	r3, [pc, #436]	; (8004c18 <HAL_RCC_OscConfig+0x240>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a6c      	ldr	r2, [pc, #432]	; (8004c18 <HAL_RCC_OscConfig+0x240>)
 8004a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	e00b      	b.n	8004a88 <HAL_RCC_OscConfig+0xb0>
 8004a70:	4b69      	ldr	r3, [pc, #420]	; (8004c18 <HAL_RCC_OscConfig+0x240>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a68      	ldr	r2, [pc, #416]	; (8004c18 <HAL_RCC_OscConfig+0x240>)
 8004a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a7a:	6013      	str	r3, [r2, #0]
 8004a7c:	4b66      	ldr	r3, [pc, #408]	; (8004c18 <HAL_RCC_OscConfig+0x240>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a65      	ldr	r2, [pc, #404]	; (8004c18 <HAL_RCC_OscConfig+0x240>)
 8004a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d013      	beq.n	8004ab8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a90:	f7fe fe54 	bl	800373c <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a98:	f7fe fe50 	bl	800373c <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b64      	cmp	r3, #100	; 0x64
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e207      	b.n	8004eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aaa:	4b5b      	ldr	r3, [pc, #364]	; (8004c18 <HAL_RCC_OscConfig+0x240>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0f0      	beq.n	8004a98 <HAL_RCC_OscConfig+0xc0>
 8004ab6:	e014      	b.n	8004ae2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab8:	f7fe fe40 	bl	800373c <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ac0:	f7fe fe3c 	bl	800373c <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b64      	cmp	r3, #100	; 0x64
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e1f3      	b.n	8004eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ad2:	4b51      	ldr	r3, [pc, #324]	; (8004c18 <HAL_RCC_OscConfig+0x240>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1f0      	bne.n	8004ac0 <HAL_RCC_OscConfig+0xe8>
 8004ade:	e000      	b.n	8004ae2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d063      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004aee:	4b4a      	ldr	r3, [pc, #296]	; (8004c18 <HAL_RCC_OscConfig+0x240>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 030c 	and.w	r3, r3, #12
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00b      	beq.n	8004b12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004afa:	4b47      	ldr	r3, [pc, #284]	; (8004c18 <HAL_RCC_OscConfig+0x240>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b02:	2b08      	cmp	r3, #8
 8004b04:	d11c      	bne.n	8004b40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b06:	4b44      	ldr	r3, [pc, #272]	; (8004c18 <HAL_RCC_OscConfig+0x240>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d116      	bne.n	8004b40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b12:	4b41      	ldr	r3, [pc, #260]	; (8004c18 <HAL_RCC_OscConfig+0x240>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d005      	beq.n	8004b2a <HAL_RCC_OscConfig+0x152>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d001      	beq.n	8004b2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e1c7      	b.n	8004eba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b2a:	4b3b      	ldr	r3, [pc, #236]	; (8004c18 <HAL_RCC_OscConfig+0x240>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	4937      	ldr	r1, [pc, #220]	; (8004c18 <HAL_RCC_OscConfig+0x240>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b3e:	e03a      	b.n	8004bb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d020      	beq.n	8004b8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b48:	4b34      	ldr	r3, [pc, #208]	; (8004c1c <HAL_RCC_OscConfig+0x244>)
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b4e:	f7fe fdf5 	bl	800373c <HAL_GetTick>
 8004b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b54:	e008      	b.n	8004b68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b56:	f7fe fdf1 	bl	800373c <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e1a8      	b.n	8004eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b68:	4b2b      	ldr	r3, [pc, #172]	; (8004c18 <HAL_RCC_OscConfig+0x240>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0f0      	beq.n	8004b56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b74:	4b28      	ldr	r3, [pc, #160]	; (8004c18 <HAL_RCC_OscConfig+0x240>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	4925      	ldr	r1, [pc, #148]	; (8004c18 <HAL_RCC_OscConfig+0x240>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	600b      	str	r3, [r1, #0]
 8004b88:	e015      	b.n	8004bb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b8a:	4b24      	ldr	r3, [pc, #144]	; (8004c1c <HAL_RCC_OscConfig+0x244>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b90:	f7fe fdd4 	bl	800373c <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b96:	e008      	b.n	8004baa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b98:	f7fe fdd0 	bl	800373c <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e187      	b.n	8004eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004baa:	4b1b      	ldr	r3, [pc, #108]	; (8004c18 <HAL_RCC_OscConfig+0x240>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1f0      	bne.n	8004b98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0308 	and.w	r3, r3, #8
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d036      	beq.n	8004c30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d016      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bca:	4b15      	ldr	r3, [pc, #84]	; (8004c20 <HAL_RCC_OscConfig+0x248>)
 8004bcc:	2201      	movs	r2, #1
 8004bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd0:	f7fe fdb4 	bl	800373c <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bd8:	f7fe fdb0 	bl	800373c <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e167      	b.n	8004eba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bea:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <HAL_RCC_OscConfig+0x240>)
 8004bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0f0      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x200>
 8004bf6:	e01b      	b.n	8004c30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bf8:	4b09      	ldr	r3, [pc, #36]	; (8004c20 <HAL_RCC_OscConfig+0x248>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bfe:	f7fe fd9d 	bl	800373c <HAL_GetTick>
 8004c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c04:	e00e      	b.n	8004c24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c06:	f7fe fd99 	bl	800373c <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d907      	bls.n	8004c24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e150      	b.n	8004eba <HAL_RCC_OscConfig+0x4e2>
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	42470000 	.word	0x42470000
 8004c20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c24:	4b88      	ldr	r3, [pc, #544]	; (8004e48 <HAL_RCC_OscConfig+0x470>)
 8004c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1ea      	bne.n	8004c06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 8097 	beq.w	8004d6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c42:	4b81      	ldr	r3, [pc, #516]	; (8004e48 <HAL_RCC_OscConfig+0x470>)
 8004c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10f      	bne.n	8004c6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60bb      	str	r3, [r7, #8]
 8004c52:	4b7d      	ldr	r3, [pc, #500]	; (8004e48 <HAL_RCC_OscConfig+0x470>)
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	4a7c      	ldr	r2, [pc, #496]	; (8004e48 <HAL_RCC_OscConfig+0x470>)
 8004c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c5e:	4b7a      	ldr	r3, [pc, #488]	; (8004e48 <HAL_RCC_OscConfig+0x470>)
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c66:	60bb      	str	r3, [r7, #8]
 8004c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c6e:	4b77      	ldr	r3, [pc, #476]	; (8004e4c <HAL_RCC_OscConfig+0x474>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d118      	bne.n	8004cac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c7a:	4b74      	ldr	r3, [pc, #464]	; (8004e4c <HAL_RCC_OscConfig+0x474>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a73      	ldr	r2, [pc, #460]	; (8004e4c <HAL_RCC_OscConfig+0x474>)
 8004c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c86:	f7fe fd59 	bl	800373c <HAL_GetTick>
 8004c8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c8c:	e008      	b.n	8004ca0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c8e:	f7fe fd55 	bl	800373c <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e10c      	b.n	8004eba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca0:	4b6a      	ldr	r3, [pc, #424]	; (8004e4c <HAL_RCC_OscConfig+0x474>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0f0      	beq.n	8004c8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d106      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x2ea>
 8004cb4:	4b64      	ldr	r3, [pc, #400]	; (8004e48 <HAL_RCC_OscConfig+0x470>)
 8004cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb8:	4a63      	ldr	r2, [pc, #396]	; (8004e48 <HAL_RCC_OscConfig+0x470>)
 8004cba:	f043 0301 	orr.w	r3, r3, #1
 8004cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8004cc0:	e01c      	b.n	8004cfc <HAL_RCC_OscConfig+0x324>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	2b05      	cmp	r3, #5
 8004cc8:	d10c      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x30c>
 8004cca:	4b5f      	ldr	r3, [pc, #380]	; (8004e48 <HAL_RCC_OscConfig+0x470>)
 8004ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cce:	4a5e      	ldr	r2, [pc, #376]	; (8004e48 <HAL_RCC_OscConfig+0x470>)
 8004cd0:	f043 0304 	orr.w	r3, r3, #4
 8004cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8004cd6:	4b5c      	ldr	r3, [pc, #368]	; (8004e48 <HAL_RCC_OscConfig+0x470>)
 8004cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cda:	4a5b      	ldr	r2, [pc, #364]	; (8004e48 <HAL_RCC_OscConfig+0x470>)
 8004cdc:	f043 0301 	orr.w	r3, r3, #1
 8004ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ce2:	e00b      	b.n	8004cfc <HAL_RCC_OscConfig+0x324>
 8004ce4:	4b58      	ldr	r3, [pc, #352]	; (8004e48 <HAL_RCC_OscConfig+0x470>)
 8004ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce8:	4a57      	ldr	r2, [pc, #348]	; (8004e48 <HAL_RCC_OscConfig+0x470>)
 8004cea:	f023 0301 	bic.w	r3, r3, #1
 8004cee:	6713      	str	r3, [r2, #112]	; 0x70
 8004cf0:	4b55      	ldr	r3, [pc, #340]	; (8004e48 <HAL_RCC_OscConfig+0x470>)
 8004cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf4:	4a54      	ldr	r2, [pc, #336]	; (8004e48 <HAL_RCC_OscConfig+0x470>)
 8004cf6:	f023 0304 	bic.w	r3, r3, #4
 8004cfa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d015      	beq.n	8004d30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d04:	f7fe fd1a 	bl	800373c <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d0a:	e00a      	b.n	8004d22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d0c:	f7fe fd16 	bl	800373c <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e0cb      	b.n	8004eba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d22:	4b49      	ldr	r3, [pc, #292]	; (8004e48 <HAL_RCC_OscConfig+0x470>)
 8004d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0ee      	beq.n	8004d0c <HAL_RCC_OscConfig+0x334>
 8004d2e:	e014      	b.n	8004d5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d30:	f7fe fd04 	bl	800373c <HAL_GetTick>
 8004d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d36:	e00a      	b.n	8004d4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d38:	f7fe fd00 	bl	800373c <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e0b5      	b.n	8004eba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d4e:	4b3e      	ldr	r3, [pc, #248]	; (8004e48 <HAL_RCC_OscConfig+0x470>)
 8004d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1ee      	bne.n	8004d38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d5a:	7dfb      	ldrb	r3, [r7, #23]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d105      	bne.n	8004d6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d60:	4b39      	ldr	r3, [pc, #228]	; (8004e48 <HAL_RCC_OscConfig+0x470>)
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	4a38      	ldr	r2, [pc, #224]	; (8004e48 <HAL_RCC_OscConfig+0x470>)
 8004d66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 80a1 	beq.w	8004eb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d76:	4b34      	ldr	r3, [pc, #208]	; (8004e48 <HAL_RCC_OscConfig+0x470>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 030c 	and.w	r3, r3, #12
 8004d7e:	2b08      	cmp	r3, #8
 8004d80:	d05c      	beq.n	8004e3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d141      	bne.n	8004e0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d8a:	4b31      	ldr	r3, [pc, #196]	; (8004e50 <HAL_RCC_OscConfig+0x478>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d90:	f7fe fcd4 	bl	800373c <HAL_GetTick>
 8004d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d96:	e008      	b.n	8004daa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d98:	f7fe fcd0 	bl	800373c <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e087      	b.n	8004eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004daa:	4b27      	ldr	r3, [pc, #156]	; (8004e48 <HAL_RCC_OscConfig+0x470>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1f0      	bne.n	8004d98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	69da      	ldr	r2, [r3, #28]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	019b      	lsls	r3, r3, #6
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dcc:	085b      	lsrs	r3, r3, #1
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	041b      	lsls	r3, r3, #16
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd8:	061b      	lsls	r3, r3, #24
 8004dda:	491b      	ldr	r1, [pc, #108]	; (8004e48 <HAL_RCC_OscConfig+0x470>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004de0:	4b1b      	ldr	r3, [pc, #108]	; (8004e50 <HAL_RCC_OscConfig+0x478>)
 8004de2:	2201      	movs	r2, #1
 8004de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de6:	f7fe fca9 	bl	800373c <HAL_GetTick>
 8004dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dec:	e008      	b.n	8004e00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dee:	f7fe fca5 	bl	800373c <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e05c      	b.n	8004eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e00:	4b11      	ldr	r3, [pc, #68]	; (8004e48 <HAL_RCC_OscConfig+0x470>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0f0      	beq.n	8004dee <HAL_RCC_OscConfig+0x416>
 8004e0c:	e054      	b.n	8004eb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e0e:	4b10      	ldr	r3, [pc, #64]	; (8004e50 <HAL_RCC_OscConfig+0x478>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e14:	f7fe fc92 	bl	800373c <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e1c:	f7fe fc8e 	bl	800373c <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e045      	b.n	8004eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e2e:	4b06      	ldr	r3, [pc, #24]	; (8004e48 <HAL_RCC_OscConfig+0x470>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1f0      	bne.n	8004e1c <HAL_RCC_OscConfig+0x444>
 8004e3a:	e03d      	b.n	8004eb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d107      	bne.n	8004e54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e038      	b.n	8004eba <HAL_RCC_OscConfig+0x4e2>
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	40007000 	.word	0x40007000
 8004e50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e54:	4b1b      	ldr	r3, [pc, #108]	; (8004ec4 <HAL_RCC_OscConfig+0x4ec>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d028      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d121      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d11a      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e84:	4013      	ands	r3, r2
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d111      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9a:	085b      	lsrs	r3, r3, #1
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d107      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d001      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e000      	b.n	8004eba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40023800 	.word	0x40023800

08004ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e0cc      	b.n	8005076 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004edc:	4b68      	ldr	r3, [pc, #416]	; (8005080 <HAL_RCC_ClockConfig+0x1b8>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d90c      	bls.n	8004f04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eea:	4b65      	ldr	r3, [pc, #404]	; (8005080 <HAL_RCC_ClockConfig+0x1b8>)
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	b2d2      	uxtb	r2, r2
 8004ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ef2:	4b63      	ldr	r3, [pc, #396]	; (8005080 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0307 	and.w	r3, r3, #7
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d001      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e0b8      	b.n	8005076 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d020      	beq.n	8004f52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d005      	beq.n	8004f28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f1c:	4b59      	ldr	r3, [pc, #356]	; (8005084 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	4a58      	ldr	r2, [pc, #352]	; (8005084 <HAL_RCC_ClockConfig+0x1bc>)
 8004f22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0308 	and.w	r3, r3, #8
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d005      	beq.n	8004f40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f34:	4b53      	ldr	r3, [pc, #332]	; (8005084 <HAL_RCC_ClockConfig+0x1bc>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	4a52      	ldr	r2, [pc, #328]	; (8005084 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f40:	4b50      	ldr	r3, [pc, #320]	; (8005084 <HAL_RCC_ClockConfig+0x1bc>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	494d      	ldr	r1, [pc, #308]	; (8005084 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d044      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d107      	bne.n	8004f76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f66:	4b47      	ldr	r3, [pc, #284]	; (8005084 <HAL_RCC_ClockConfig+0x1bc>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d119      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e07f      	b.n	8005076 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d003      	beq.n	8004f86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f82:	2b03      	cmp	r3, #3
 8004f84:	d107      	bne.n	8004f96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f86:	4b3f      	ldr	r3, [pc, #252]	; (8005084 <HAL_RCC_ClockConfig+0x1bc>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d109      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e06f      	b.n	8005076 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f96:	4b3b      	ldr	r3, [pc, #236]	; (8005084 <HAL_RCC_ClockConfig+0x1bc>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e067      	b.n	8005076 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fa6:	4b37      	ldr	r3, [pc, #220]	; (8005084 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f023 0203 	bic.w	r2, r3, #3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	4934      	ldr	r1, [pc, #208]	; (8005084 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fb8:	f7fe fbc0 	bl	800373c <HAL_GetTick>
 8004fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fbe:	e00a      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fc0:	f7fe fbbc 	bl	800373c <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e04f      	b.n	8005076 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fd6:	4b2b      	ldr	r3, [pc, #172]	; (8005084 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 020c 	and.w	r2, r3, #12
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d1eb      	bne.n	8004fc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fe8:	4b25      	ldr	r3, [pc, #148]	; (8005080 <HAL_RCC_ClockConfig+0x1b8>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d20c      	bcs.n	8005010 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ff6:	4b22      	ldr	r3, [pc, #136]	; (8005080 <HAL_RCC_ClockConfig+0x1b8>)
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffe:	4b20      	ldr	r3, [pc, #128]	; (8005080 <HAL_RCC_ClockConfig+0x1b8>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d001      	beq.n	8005010 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e032      	b.n	8005076 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b00      	cmp	r3, #0
 800501a:	d008      	beq.n	800502e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800501c:	4b19      	ldr	r3, [pc, #100]	; (8005084 <HAL_RCC_ClockConfig+0x1bc>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	4916      	ldr	r1, [pc, #88]	; (8005084 <HAL_RCC_ClockConfig+0x1bc>)
 800502a:	4313      	orrs	r3, r2
 800502c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0308 	and.w	r3, r3, #8
 8005036:	2b00      	cmp	r3, #0
 8005038:	d009      	beq.n	800504e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800503a:	4b12      	ldr	r3, [pc, #72]	; (8005084 <HAL_RCC_ClockConfig+0x1bc>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	490e      	ldr	r1, [pc, #56]	; (8005084 <HAL_RCC_ClockConfig+0x1bc>)
 800504a:	4313      	orrs	r3, r2
 800504c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800504e:	f000 f821 	bl	8005094 <HAL_RCC_GetSysClockFreq>
 8005052:	4602      	mov	r2, r0
 8005054:	4b0b      	ldr	r3, [pc, #44]	; (8005084 <HAL_RCC_ClockConfig+0x1bc>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	091b      	lsrs	r3, r3, #4
 800505a:	f003 030f 	and.w	r3, r3, #15
 800505e:	490a      	ldr	r1, [pc, #40]	; (8005088 <HAL_RCC_ClockConfig+0x1c0>)
 8005060:	5ccb      	ldrb	r3, [r1, r3]
 8005062:	fa22 f303 	lsr.w	r3, r2, r3
 8005066:	4a09      	ldr	r2, [pc, #36]	; (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8005068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800506a:	4b09      	ldr	r3, [pc, #36]	; (8005090 <HAL_RCC_ClockConfig+0x1c8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f7fe fb20 	bl	80036b4 <HAL_InitTick>

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	40023c00 	.word	0x40023c00
 8005084:	40023800 	.word	0x40023800
 8005088:	0800c730 	.word	0x0800c730
 800508c:	20000068 	.word	0x20000068
 8005090:	2000006c 	.word	0x2000006c

08005094 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005098:	b090      	sub	sp, #64	; 0x40
 800509a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800509c:	2300      	movs	r3, #0
 800509e:	637b      	str	r3, [r7, #52]	; 0x34
 80050a0:	2300      	movs	r3, #0
 80050a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050a4:	2300      	movs	r3, #0
 80050a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050ac:	4b59      	ldr	r3, [pc, #356]	; (8005214 <HAL_RCC_GetSysClockFreq+0x180>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f003 030c 	and.w	r3, r3, #12
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	d00d      	beq.n	80050d4 <HAL_RCC_GetSysClockFreq+0x40>
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	f200 80a1 	bhi.w	8005200 <HAL_RCC_GetSysClockFreq+0x16c>
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d002      	beq.n	80050c8 <HAL_RCC_GetSysClockFreq+0x34>
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d003      	beq.n	80050ce <HAL_RCC_GetSysClockFreq+0x3a>
 80050c6:	e09b      	b.n	8005200 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050c8:	4b53      	ldr	r3, [pc, #332]	; (8005218 <HAL_RCC_GetSysClockFreq+0x184>)
 80050ca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80050cc:	e09b      	b.n	8005206 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050ce:	4b53      	ldr	r3, [pc, #332]	; (800521c <HAL_RCC_GetSysClockFreq+0x188>)
 80050d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80050d2:	e098      	b.n	8005206 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050d4:	4b4f      	ldr	r3, [pc, #316]	; (8005214 <HAL_RCC_GetSysClockFreq+0x180>)
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050de:	4b4d      	ldr	r3, [pc, #308]	; (8005214 <HAL_RCC_GetSysClockFreq+0x180>)
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d028      	beq.n	800513c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050ea:	4b4a      	ldr	r3, [pc, #296]	; (8005214 <HAL_RCC_GetSysClockFreq+0x180>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	099b      	lsrs	r3, r3, #6
 80050f0:	2200      	movs	r2, #0
 80050f2:	623b      	str	r3, [r7, #32]
 80050f4:	627a      	str	r2, [r7, #36]	; 0x24
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80050fc:	2100      	movs	r1, #0
 80050fe:	4b47      	ldr	r3, [pc, #284]	; (800521c <HAL_RCC_GetSysClockFreq+0x188>)
 8005100:	fb03 f201 	mul.w	r2, r3, r1
 8005104:	2300      	movs	r3, #0
 8005106:	fb00 f303 	mul.w	r3, r0, r3
 800510a:	4413      	add	r3, r2
 800510c:	4a43      	ldr	r2, [pc, #268]	; (800521c <HAL_RCC_GetSysClockFreq+0x188>)
 800510e:	fba0 1202 	umull	r1, r2, r0, r2
 8005112:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005114:	460a      	mov	r2, r1
 8005116:	62ba      	str	r2, [r7, #40]	; 0x28
 8005118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800511a:	4413      	add	r3, r2
 800511c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800511e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005120:	2200      	movs	r2, #0
 8005122:	61bb      	str	r3, [r7, #24]
 8005124:	61fa      	str	r2, [r7, #28]
 8005126:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800512a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800512e:	f7fb fdb3 	bl	8000c98 <__aeabi_uldivmod>
 8005132:	4602      	mov	r2, r0
 8005134:	460b      	mov	r3, r1
 8005136:	4613      	mov	r3, r2
 8005138:	63fb      	str	r3, [r7, #60]	; 0x3c
 800513a:	e053      	b.n	80051e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800513c:	4b35      	ldr	r3, [pc, #212]	; (8005214 <HAL_RCC_GetSysClockFreq+0x180>)
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	099b      	lsrs	r3, r3, #6
 8005142:	2200      	movs	r2, #0
 8005144:	613b      	str	r3, [r7, #16]
 8005146:	617a      	str	r2, [r7, #20]
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800514e:	f04f 0b00 	mov.w	fp, #0
 8005152:	4652      	mov	r2, sl
 8005154:	465b      	mov	r3, fp
 8005156:	f04f 0000 	mov.w	r0, #0
 800515a:	f04f 0100 	mov.w	r1, #0
 800515e:	0159      	lsls	r1, r3, #5
 8005160:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005164:	0150      	lsls	r0, r2, #5
 8005166:	4602      	mov	r2, r0
 8005168:	460b      	mov	r3, r1
 800516a:	ebb2 080a 	subs.w	r8, r2, sl
 800516e:	eb63 090b 	sbc.w	r9, r3, fp
 8005172:	f04f 0200 	mov.w	r2, #0
 8005176:	f04f 0300 	mov.w	r3, #0
 800517a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800517e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005182:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005186:	ebb2 0408 	subs.w	r4, r2, r8
 800518a:	eb63 0509 	sbc.w	r5, r3, r9
 800518e:	f04f 0200 	mov.w	r2, #0
 8005192:	f04f 0300 	mov.w	r3, #0
 8005196:	00eb      	lsls	r3, r5, #3
 8005198:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800519c:	00e2      	lsls	r2, r4, #3
 800519e:	4614      	mov	r4, r2
 80051a0:	461d      	mov	r5, r3
 80051a2:	eb14 030a 	adds.w	r3, r4, sl
 80051a6:	603b      	str	r3, [r7, #0]
 80051a8:	eb45 030b 	adc.w	r3, r5, fp
 80051ac:	607b      	str	r3, [r7, #4]
 80051ae:	f04f 0200 	mov.w	r2, #0
 80051b2:	f04f 0300 	mov.w	r3, #0
 80051b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051ba:	4629      	mov	r1, r5
 80051bc:	028b      	lsls	r3, r1, #10
 80051be:	4621      	mov	r1, r4
 80051c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051c4:	4621      	mov	r1, r4
 80051c6:	028a      	lsls	r2, r1, #10
 80051c8:	4610      	mov	r0, r2
 80051ca:	4619      	mov	r1, r3
 80051cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ce:	2200      	movs	r2, #0
 80051d0:	60bb      	str	r3, [r7, #8]
 80051d2:	60fa      	str	r2, [r7, #12]
 80051d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051d8:	f7fb fd5e 	bl	8000c98 <__aeabi_uldivmod>
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4613      	mov	r3, r2
 80051e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051e4:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <HAL_RCC_GetSysClockFreq+0x180>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	0c1b      	lsrs	r3, r3, #16
 80051ea:	f003 0303 	and.w	r3, r3, #3
 80051ee:	3301      	adds	r3, #1
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80051f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80051fe:	e002      	b.n	8005206 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005200:	4b05      	ldr	r3, [pc, #20]	; (8005218 <HAL_RCC_GetSysClockFreq+0x184>)
 8005202:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005204:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005208:	4618      	mov	r0, r3
 800520a:	3740      	adds	r7, #64	; 0x40
 800520c:	46bd      	mov	sp, r7
 800520e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005212:	bf00      	nop
 8005214:	40023800 	.word	0x40023800
 8005218:	00f42400 	.word	0x00f42400
 800521c:	018cba80 	.word	0x018cba80

08005220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005220:	b480      	push	{r7}
 8005222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005224:	4b03      	ldr	r3, [pc, #12]	; (8005234 <HAL_RCC_GetHCLKFreq+0x14>)
 8005226:	681b      	ldr	r3, [r3, #0]
}
 8005228:	4618      	mov	r0, r3
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	20000068 	.word	0x20000068

08005238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800523c:	f7ff fff0 	bl	8005220 <HAL_RCC_GetHCLKFreq>
 8005240:	4602      	mov	r2, r0
 8005242:	4b05      	ldr	r3, [pc, #20]	; (8005258 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	0a9b      	lsrs	r3, r3, #10
 8005248:	f003 0307 	and.w	r3, r3, #7
 800524c:	4903      	ldr	r1, [pc, #12]	; (800525c <HAL_RCC_GetPCLK1Freq+0x24>)
 800524e:	5ccb      	ldrb	r3, [r1, r3]
 8005250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005254:	4618      	mov	r0, r3
 8005256:	bd80      	pop	{r7, pc}
 8005258:	40023800 	.word	0x40023800
 800525c:	0800c740 	.word	0x0800c740

08005260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005264:	f7ff ffdc 	bl	8005220 <HAL_RCC_GetHCLKFreq>
 8005268:	4602      	mov	r2, r0
 800526a:	4b05      	ldr	r3, [pc, #20]	; (8005280 <HAL_RCC_GetPCLK2Freq+0x20>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	0b5b      	lsrs	r3, r3, #13
 8005270:	f003 0307 	and.w	r3, r3, #7
 8005274:	4903      	ldr	r1, [pc, #12]	; (8005284 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005276:	5ccb      	ldrb	r3, [r1, r3]
 8005278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800527c:	4618      	mov	r0, r3
 800527e:	bd80      	pop	{r7, pc}
 8005280:	40023800 	.word	0x40023800
 8005284:	0800c740 	.word	0x0800c740

08005288 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e07b      	b.n	8005392 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d108      	bne.n	80052b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052aa:	d009      	beq.n	80052c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	61da      	str	r2, [r3, #28]
 80052b2:	e005      	b.n	80052c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d106      	bne.n	80052e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7fd ff98 	bl	8003210 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005308:	431a      	orrs	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	431a      	orrs	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005330:	431a      	orrs	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005344:	ea42 0103 	orr.w	r1, r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	0c1b      	lsrs	r3, r3, #16
 800535e:	f003 0104 	and.w	r1, r3, #4
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	f003 0210 	and.w	r2, r3, #16
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	69da      	ldr	r2, [r3, #28]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005380:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b088      	sub	sp, #32
 800539e:	af00      	add	r7, sp, #0
 80053a0:	60f8      	str	r0, [r7, #12]
 80053a2:	60b9      	str	r1, [r7, #8]
 80053a4:	603b      	str	r3, [r7, #0]
 80053a6:	4613      	mov	r3, r2
 80053a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d101      	bne.n	80053bc <HAL_SPI_Transmit+0x22>
 80053b8:	2302      	movs	r3, #2
 80053ba:	e126      	b.n	800560a <HAL_SPI_Transmit+0x270>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053c4:	f7fe f9ba 	bl	800373c <HAL_GetTick>
 80053c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80053ca:	88fb      	ldrh	r3, [r7, #6]
 80053cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d002      	beq.n	80053e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80053da:	2302      	movs	r3, #2
 80053dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053de:	e10b      	b.n	80055f8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <HAL_SPI_Transmit+0x52>
 80053e6:	88fb      	ldrh	r3, [r7, #6]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d102      	bne.n	80053f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053f0:	e102      	b.n	80055f8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2203      	movs	r2, #3
 80053f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	88fa      	ldrh	r2, [r7, #6]
 800540a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	88fa      	ldrh	r2, [r7, #6]
 8005410:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005438:	d10f      	bne.n	800545a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005448:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005458:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005464:	2b40      	cmp	r3, #64	; 0x40
 8005466:	d007      	beq.n	8005478 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005476:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005480:	d14b      	bne.n	800551a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <HAL_SPI_Transmit+0xf6>
 800548a:	8afb      	ldrh	r3, [r7, #22]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d13e      	bne.n	800550e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005494:	881a      	ldrh	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a0:	1c9a      	adds	r2, r3, #2
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	3b01      	subs	r3, #1
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80054b4:	e02b      	b.n	800550e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d112      	bne.n	80054ea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c8:	881a      	ldrh	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d4:	1c9a      	adds	r2, r3, #2
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054de:	b29b      	uxth	r3, r3
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80054e8:	e011      	b.n	800550e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054ea:	f7fe f927 	bl	800373c <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d803      	bhi.n	8005502 <HAL_SPI_Transmit+0x168>
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005500:	d102      	bne.n	8005508 <HAL_SPI_Transmit+0x16e>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d102      	bne.n	800550e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800550c:	e074      	b.n	80055f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005512:	b29b      	uxth	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1ce      	bne.n	80054b6 <HAL_SPI_Transmit+0x11c>
 8005518:	e04c      	b.n	80055b4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d002      	beq.n	8005528 <HAL_SPI_Transmit+0x18e>
 8005522:	8afb      	ldrh	r3, [r7, #22]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d140      	bne.n	80055aa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	330c      	adds	r3, #12
 8005532:	7812      	ldrb	r2, [r2, #0]
 8005534:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005544:	b29b      	uxth	r3, r3
 8005546:	3b01      	subs	r3, #1
 8005548:	b29a      	uxth	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800554e:	e02c      	b.n	80055aa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b02      	cmp	r3, #2
 800555c:	d113      	bne.n	8005586 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	330c      	adds	r3, #12
 8005568:	7812      	ldrb	r2, [r2, #0]
 800556a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800557a:	b29b      	uxth	r3, r3
 800557c:	3b01      	subs	r3, #1
 800557e:	b29a      	uxth	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	86da      	strh	r2, [r3, #54]	; 0x36
 8005584:	e011      	b.n	80055aa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005586:	f7fe f8d9 	bl	800373c <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	429a      	cmp	r2, r3
 8005594:	d803      	bhi.n	800559e <HAL_SPI_Transmit+0x204>
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559c:	d102      	bne.n	80055a4 <HAL_SPI_Transmit+0x20a>
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d102      	bne.n	80055aa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80055a8:	e026      	b.n	80055f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1cd      	bne.n	8005550 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	6839      	ldr	r1, [r7, #0]
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f000 f8c1 	bl	8005740 <SPI_EndRxTxTransaction>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d002      	beq.n	80055ca <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2220      	movs	r2, #32
 80055c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10a      	bne.n	80055e8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055d2:	2300      	movs	r3, #0
 80055d4:	613b      	str	r3, [r7, #16]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	613b      	str	r3, [r7, #16]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	613b      	str	r3, [r7, #16]
 80055e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	77fb      	strb	r3, [r7, #31]
 80055f4:	e000      	b.n	80055f8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80055f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005608:	7ffb      	ldrb	r3, [r7, #31]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3720      	adds	r7, #32
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005620:	b2db      	uxtb	r3, r3
}
 8005622:	4618      	mov	r0, r3
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
	...

08005630 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b088      	sub	sp, #32
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	603b      	str	r3, [r7, #0]
 800563c:	4613      	mov	r3, r2
 800563e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005640:	f7fe f87c 	bl	800373c <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005648:	1a9b      	subs	r3, r3, r2
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	4413      	add	r3, r2
 800564e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005650:	f7fe f874 	bl	800373c <HAL_GetTick>
 8005654:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005656:	4b39      	ldr	r3, [pc, #228]	; (800573c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	015b      	lsls	r3, r3, #5
 800565c:	0d1b      	lsrs	r3, r3, #20
 800565e:	69fa      	ldr	r2, [r7, #28]
 8005660:	fb02 f303 	mul.w	r3, r2, r3
 8005664:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005666:	e054      	b.n	8005712 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566e:	d050      	beq.n	8005712 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005670:	f7fe f864 	bl	800373c <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	69fa      	ldr	r2, [r7, #28]
 800567c:	429a      	cmp	r2, r3
 800567e:	d902      	bls.n	8005686 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d13d      	bne.n	8005702 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005694:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800569e:	d111      	bne.n	80056c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056a8:	d004      	beq.n	80056b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056b2:	d107      	bne.n	80056c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056cc:	d10f      	bne.n	80056ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e017      	b.n	8005732 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	3b01      	subs	r3, #1
 8005710:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	4013      	ands	r3, r2
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	429a      	cmp	r2, r3
 8005720:	bf0c      	ite	eq
 8005722:	2301      	moveq	r3, #1
 8005724:	2300      	movne	r3, #0
 8005726:	b2db      	uxtb	r3, r3
 8005728:	461a      	mov	r2, r3
 800572a:	79fb      	ldrb	r3, [r7, #7]
 800572c:	429a      	cmp	r2, r3
 800572e:	d19b      	bne.n	8005668 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3720      	adds	r7, #32
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	20000068 	.word	0x20000068

08005740 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b088      	sub	sp, #32
 8005744:	af02      	add	r7, sp, #8
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800574c:	4b1b      	ldr	r3, [pc, #108]	; (80057bc <SPI_EndRxTxTransaction+0x7c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a1b      	ldr	r2, [pc, #108]	; (80057c0 <SPI_EndRxTxTransaction+0x80>)
 8005752:	fba2 2303 	umull	r2, r3, r2, r3
 8005756:	0d5b      	lsrs	r3, r3, #21
 8005758:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800575c:	fb02 f303 	mul.w	r3, r2, r3
 8005760:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800576a:	d112      	bne.n	8005792 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2200      	movs	r2, #0
 8005774:	2180      	movs	r1, #128	; 0x80
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f7ff ff5a 	bl	8005630 <SPI_WaitFlagStateUntilTimeout>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d016      	beq.n	80057b0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005786:	f043 0220 	orr.w	r2, r3, #32
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e00f      	b.n	80057b2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00a      	beq.n	80057ae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	3b01      	subs	r3, #1
 800579c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a8:	2b80      	cmp	r3, #128	; 0x80
 80057aa:	d0f2      	beq.n	8005792 <SPI_EndRxTxTransaction+0x52>
 80057ac:	e000      	b.n	80057b0 <SPI_EndRxTxTransaction+0x70>
        break;
 80057ae:	bf00      	nop
  }

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3718      	adds	r7, #24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	20000068 	.word	0x20000068
 80057c0:	165e9f81 	.word	0x165e9f81

080057c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e03f      	b.n	8005856 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d106      	bne.n	80057f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7fd fec6 	bl	800357c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2224      	movs	r2, #36	; 0x24
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005806:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 fd7b 	bl	8006304 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	691a      	ldr	r2, [r3, #16]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800581c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	695a      	ldr	r2, [r3, #20]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800582c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68da      	ldr	r2, [r3, #12]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800583c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2220      	movs	r2, #32
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2220      	movs	r2, #32
 8005850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b08a      	sub	sp, #40	; 0x28
 8005862:	af02      	add	r7, sp, #8
 8005864:	60f8      	str	r0, [r7, #12]
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	603b      	str	r3, [r7, #0]
 800586a:	4613      	mov	r3, r2
 800586c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b20      	cmp	r3, #32
 800587c:	d17c      	bne.n	8005978 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d002      	beq.n	800588a <HAL_UART_Transmit+0x2c>
 8005884:	88fb      	ldrh	r3, [r7, #6]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e075      	b.n	800597a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005894:	2b01      	cmp	r3, #1
 8005896:	d101      	bne.n	800589c <HAL_UART_Transmit+0x3e>
 8005898:	2302      	movs	r3, #2
 800589a:	e06e      	b.n	800597a <HAL_UART_Transmit+0x11c>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2221      	movs	r2, #33	; 0x21
 80058ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058b2:	f7fd ff43 	bl	800373c <HAL_GetTick>
 80058b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	88fa      	ldrh	r2, [r7, #6]
 80058bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	88fa      	ldrh	r2, [r7, #6]
 80058c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058cc:	d108      	bne.n	80058e0 <HAL_UART_Transmit+0x82>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d104      	bne.n	80058e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80058d6:	2300      	movs	r3, #0
 80058d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	61bb      	str	r3, [r7, #24]
 80058de:	e003      	b.n	80058e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058e4:	2300      	movs	r3, #0
 80058e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80058f0:	e02a      	b.n	8005948 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2200      	movs	r2, #0
 80058fa:	2180      	movs	r1, #128	; 0x80
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 faf9 	bl	8005ef4 <UART_WaitOnFlagUntilTimeout>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e036      	b.n	800597a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10b      	bne.n	800592a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	461a      	mov	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005920:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	3302      	adds	r3, #2
 8005926:	61bb      	str	r3, [r7, #24]
 8005928:	e007      	b.n	800593a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	781a      	ldrb	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	3301      	adds	r3, #1
 8005938:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800593e:	b29b      	uxth	r3, r3
 8005940:	3b01      	subs	r3, #1
 8005942:	b29a      	uxth	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800594c:	b29b      	uxth	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1cf      	bne.n	80058f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	2200      	movs	r2, #0
 800595a:	2140      	movs	r1, #64	; 0x40
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 fac9 	bl	8005ef4 <UART_WaitOnFlagUntilTimeout>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e006      	b.n	800597a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2220      	movs	r2, #32
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005974:	2300      	movs	r3, #0
 8005976:	e000      	b.n	800597a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005978:	2302      	movs	r3, #2
  }
}
 800597a:	4618      	mov	r0, r3
 800597c:	3720      	adds	r7, #32
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
	...

08005984 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b0ba      	sub	sp, #232	; 0xe8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80059c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10f      	bne.n	80059ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ce:	f003 0320 	and.w	r3, r3, #32
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d009      	beq.n	80059ea <HAL_UART_IRQHandler+0x66>
 80059d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059da:	f003 0320 	and.w	r3, r3, #32
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fbd3 	bl	800618e <UART_Receive_IT>
      return;
 80059e8:	e256      	b.n	8005e98 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80059ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f000 80de 	beq.w	8005bb0 <HAL_UART_IRQHandler+0x22c>
 80059f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d106      	bne.n	8005a0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a04:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f000 80d1 	beq.w	8005bb0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00b      	beq.n	8005a32 <HAL_UART_IRQHandler+0xae>
 8005a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d005      	beq.n	8005a32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	f043 0201 	orr.w	r2, r3, #1
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a36:	f003 0304 	and.w	r3, r3, #4
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00b      	beq.n	8005a56 <HAL_UART_IRQHandler+0xd2>
 8005a3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d005      	beq.n	8005a56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4e:	f043 0202 	orr.w	r2, r3, #2
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00b      	beq.n	8005a7a <HAL_UART_IRQHandler+0xf6>
 8005a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d005      	beq.n	8005a7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a72:	f043 0204 	orr.w	r2, r3, #4
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a7e:	f003 0308 	and.w	r3, r3, #8
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d011      	beq.n	8005aaa <HAL_UART_IRQHandler+0x126>
 8005a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a8a:	f003 0320 	and.w	r3, r3, #32
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d105      	bne.n	8005a9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d005      	beq.n	8005aaa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	f043 0208 	orr.w	r2, r3, #8
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	f000 81ed 	beq.w	8005e8e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab8:	f003 0320 	and.w	r3, r3, #32
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d008      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x14e>
 8005ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ac4:	f003 0320 	and.w	r3, r3, #32
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 fb5e 	bl	800618e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005adc:	2b40      	cmp	r3, #64	; 0x40
 8005ade:	bf0c      	ite	eq
 8005ae0:	2301      	moveq	r3, #1
 8005ae2:	2300      	movne	r3, #0
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aee:	f003 0308 	and.w	r3, r3, #8
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d103      	bne.n	8005afe <HAL_UART_IRQHandler+0x17a>
 8005af6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d04f      	beq.n	8005b9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fa66 	bl	8005fd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b0e:	2b40      	cmp	r3, #64	; 0x40
 8005b10:	d141      	bne.n	8005b96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	3314      	adds	r3, #20
 8005b18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b20:	e853 3f00 	ldrex	r3, [r3]
 8005b24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3314      	adds	r3, #20
 8005b3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b4e:	e841 2300 	strex	r3, r2, [r1]
 8005b52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1d9      	bne.n	8005b12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d013      	beq.n	8005b8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6a:	4a7d      	ldr	r2, [pc, #500]	; (8005d60 <HAL_UART_IRQHandler+0x3dc>)
 8005b6c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7fd ffc5 	bl	8003b02 <HAL_DMA_Abort_IT>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d016      	beq.n	8005bac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b88:	4610      	mov	r0, r2
 8005b8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b8c:	e00e      	b.n	8005bac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f99a 	bl	8005ec8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b94:	e00a      	b.n	8005bac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f996 	bl	8005ec8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b9c:	e006      	b.n	8005bac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f992 	bl	8005ec8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005baa:	e170      	b.n	8005e8e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bac:	bf00      	nop
    return;
 8005bae:	e16e      	b.n	8005e8e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	f040 814a 	bne.w	8005e4e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bbe:	f003 0310 	and.w	r3, r3, #16
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 8143 	beq.w	8005e4e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bcc:	f003 0310 	and.w	r3, r3, #16
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 813c 	beq.w	8005e4e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60bb      	str	r3, [r7, #8]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	60bb      	str	r3, [r7, #8]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	60bb      	str	r3, [r7, #8]
 8005bea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf6:	2b40      	cmp	r3, #64	; 0x40
 8005bf8:	f040 80b4 	bne.w	8005d64 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 8140 	beq.w	8005e92 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	f080 8139 	bcs.w	8005e92 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c26:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c32:	f000 8088 	beq.w	8005d46 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	330c      	adds	r3, #12
 8005c3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c44:	e853 3f00 	ldrex	r3, [r3]
 8005c48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	330c      	adds	r3, #12
 8005c5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c72:	e841 2300 	strex	r3, r2, [r1]
 8005c76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1d9      	bne.n	8005c36 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3314      	adds	r3, #20
 8005c88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c8c:	e853 3f00 	ldrex	r3, [r3]
 8005c90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c94:	f023 0301 	bic.w	r3, r3, #1
 8005c98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	3314      	adds	r3, #20
 8005ca2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005ca6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005caa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005cae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005cb2:	e841 2300 	strex	r3, r2, [r1]
 8005cb6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005cb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1e1      	bne.n	8005c82 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3314      	adds	r3, #20
 8005cc4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cc8:	e853 3f00 	ldrex	r3, [r3]
 8005ccc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005cce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3314      	adds	r3, #20
 8005cde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ce2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ce4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ce8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cea:	e841 2300 	strex	r3, r2, [r1]
 8005cee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005cf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1e3      	bne.n	8005cbe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	330c      	adds	r3, #12
 8005d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d0e:	e853 3f00 	ldrex	r3, [r3]
 8005d12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d16:	f023 0310 	bic.w	r3, r3, #16
 8005d1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	330c      	adds	r3, #12
 8005d24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005d28:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d2a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d30:	e841 2300 	strex	r3, r2, [r1]
 8005d34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1e3      	bne.n	8005d04 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7fd fe6e 	bl	8003a22 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	4619      	mov	r1, r3
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f8c0 	bl	8005edc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d5c:	e099      	b.n	8005e92 <HAL_UART_IRQHandler+0x50e>
 8005d5e:	bf00      	nop
 8005d60:	08006097 	.word	0x08006097
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f000 808b 	beq.w	8005e96 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005d80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 8086 	beq.w	8005e96 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	330c      	adds	r3, #12
 8005d90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d94:	e853 3f00 	ldrex	r3, [r3]
 8005d98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005da0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	330c      	adds	r3, #12
 8005daa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005dae:	647a      	str	r2, [r7, #68]	; 0x44
 8005db0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005db4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005db6:	e841 2300 	strex	r3, r2, [r1]
 8005dba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1e3      	bne.n	8005d8a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3314      	adds	r3, #20
 8005dc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	e853 3f00 	ldrex	r3, [r3]
 8005dd0:	623b      	str	r3, [r7, #32]
   return(result);
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	f023 0301 	bic.w	r3, r3, #1
 8005dd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3314      	adds	r3, #20
 8005de2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005de6:	633a      	str	r2, [r7, #48]	; 0x30
 8005de8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dee:	e841 2300 	strex	r3, r2, [r1]
 8005df2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1e3      	bne.n	8005dc2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	330c      	adds	r3, #12
 8005e0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	e853 3f00 	ldrex	r3, [r3]
 8005e16:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 0310 	bic.w	r3, r3, #16
 8005e1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	330c      	adds	r3, #12
 8005e28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005e2c:	61fa      	str	r2, [r7, #28]
 8005e2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e30:	69b9      	ldr	r1, [r7, #24]
 8005e32:	69fa      	ldr	r2, [r7, #28]
 8005e34:	e841 2300 	strex	r3, r2, [r1]
 8005e38:	617b      	str	r3, [r7, #20]
   return(result);
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1e3      	bne.n	8005e08 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e44:	4619      	mov	r1, r3
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f848 	bl	8005edc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e4c:	e023      	b.n	8005e96 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d009      	beq.n	8005e6e <HAL_UART_IRQHandler+0x4ea>
 8005e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f929 	bl	80060be <UART_Transmit_IT>
    return;
 8005e6c:	e014      	b.n	8005e98 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00e      	beq.n	8005e98 <HAL_UART_IRQHandler+0x514>
 8005e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d008      	beq.n	8005e98 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f969 	bl	800615e <UART_EndTransmit_IT>
    return;
 8005e8c:	e004      	b.n	8005e98 <HAL_UART_IRQHandler+0x514>
    return;
 8005e8e:	bf00      	nop
 8005e90:	e002      	b.n	8005e98 <HAL_UART_IRQHandler+0x514>
      return;
 8005e92:	bf00      	nop
 8005e94:	e000      	b.n	8005e98 <HAL_UART_IRQHandler+0x514>
      return;
 8005e96:	bf00      	nop
  }
}
 8005e98:	37e8      	adds	r7, #232	; 0xe8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop

08005ea0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b090      	sub	sp, #64	; 0x40
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	603b      	str	r3, [r7, #0]
 8005f00:	4613      	mov	r3, r2
 8005f02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f04:	e050      	b.n	8005fa8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0c:	d04c      	beq.n	8005fa8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d007      	beq.n	8005f24 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f14:	f7fd fc12 	bl	800373c <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d241      	bcs.n	8005fa8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	330c      	adds	r3, #12
 8005f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2e:	e853 3f00 	ldrex	r3, [r3]
 8005f32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	330c      	adds	r3, #12
 8005f42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f44:	637a      	str	r2, [r7, #52]	; 0x34
 8005f46:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f4c:	e841 2300 	strex	r3, r2, [r1]
 8005f50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1e5      	bne.n	8005f24 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3314      	adds	r3, #20
 8005f5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	e853 3f00 	ldrex	r3, [r3]
 8005f66:	613b      	str	r3, [r7, #16]
   return(result);
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	f023 0301 	bic.w	r3, r3, #1
 8005f6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3314      	adds	r3, #20
 8005f76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f78:	623a      	str	r2, [r7, #32]
 8005f7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7c:	69f9      	ldr	r1, [r7, #28]
 8005f7e:	6a3a      	ldr	r2, [r7, #32]
 8005f80:	e841 2300 	strex	r3, r2, [r1]
 8005f84:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1e5      	bne.n	8005f58 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2220      	movs	r2, #32
 8005f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e00f      	b.n	8005fc8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	bf0c      	ite	eq
 8005fb8:	2301      	moveq	r3, #1
 8005fba:	2300      	movne	r3, #0
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	79fb      	ldrb	r3, [r7, #7]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d09f      	beq.n	8005f06 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3740      	adds	r7, #64	; 0x40
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b095      	sub	sp, #84	; 0x54
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	330c      	adds	r3, #12
 8005fde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe2:	e853 3f00 	ldrex	r3, [r3]
 8005fe6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	330c      	adds	r3, #12
 8005ff6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ff8:	643a      	str	r2, [r7, #64]	; 0x40
 8005ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ffe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006000:	e841 2300 	strex	r3, r2, [r1]
 8006004:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1e5      	bne.n	8005fd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	3314      	adds	r3, #20
 8006012:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	e853 3f00 	ldrex	r3, [r3]
 800601a:	61fb      	str	r3, [r7, #28]
   return(result);
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	f023 0301 	bic.w	r3, r3, #1
 8006022:	64bb      	str	r3, [r7, #72]	; 0x48
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	3314      	adds	r3, #20
 800602a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800602c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800602e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006030:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006034:	e841 2300 	strex	r3, r2, [r1]
 8006038:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1e5      	bne.n	800600c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006044:	2b01      	cmp	r3, #1
 8006046:	d119      	bne.n	800607c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	330c      	adds	r3, #12
 800604e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	e853 3f00 	ldrex	r3, [r3]
 8006056:	60bb      	str	r3, [r7, #8]
   return(result);
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	f023 0310 	bic.w	r3, r3, #16
 800605e:	647b      	str	r3, [r7, #68]	; 0x44
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	330c      	adds	r3, #12
 8006066:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006068:	61ba      	str	r2, [r7, #24]
 800606a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606c:	6979      	ldr	r1, [r7, #20]
 800606e:	69ba      	ldr	r2, [r7, #24]
 8006070:	e841 2300 	strex	r3, r2, [r1]
 8006074:	613b      	str	r3, [r7, #16]
   return(result);
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1e5      	bne.n	8006048 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2220      	movs	r2, #32
 8006080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	631a      	str	r2, [r3, #48]	; 0x30
}
 800608a:	bf00      	nop
 800608c:	3754      	adds	r7, #84	; 0x54
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b084      	sub	sp, #16
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f7ff ff09 	bl	8005ec8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060b6:	bf00      	nop
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80060be:	b480      	push	{r7}
 80060c0:	b085      	sub	sp, #20
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b21      	cmp	r3, #33	; 0x21
 80060d0:	d13e      	bne.n	8006150 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060da:	d114      	bne.n	8006106 <UART_Transmit_IT+0x48>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d110      	bne.n	8006106 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	881b      	ldrh	r3, [r3, #0]
 80060ee:	461a      	mov	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	1c9a      	adds	r2, r3, #2
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	621a      	str	r2, [r3, #32]
 8006104:	e008      	b.n	8006118 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	1c59      	adds	r1, r3, #1
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	6211      	str	r1, [r2, #32]
 8006110:	781a      	ldrb	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800611c:	b29b      	uxth	r3, r3
 800611e:	3b01      	subs	r3, #1
 8006120:	b29b      	uxth	r3, r3
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	4619      	mov	r1, r3
 8006126:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10f      	bne.n	800614c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800613a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68da      	ldr	r2, [r3, #12]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800614a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	e000      	b.n	8006152 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006150:	2302      	movs	r3, #2
  }
}
 8006152:	4618      	mov	r0, r3
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b082      	sub	sp, #8
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68da      	ldr	r2, [r3, #12]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006174:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2220      	movs	r2, #32
 800617a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7ff fe8e 	bl	8005ea0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b08c      	sub	sp, #48	; 0x30
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b22      	cmp	r3, #34	; 0x22
 80061a0:	f040 80ab 	bne.w	80062fa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ac:	d117      	bne.n	80061de <UART_Receive_IT+0x50>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d113      	bne.n	80061de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80061b6:	2300      	movs	r3, #0
 80061b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061be:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d6:	1c9a      	adds	r2, r3, #2
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	629a      	str	r2, [r3, #40]	; 0x28
 80061dc:	e026      	b.n	800622c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80061e4:	2300      	movs	r3, #0
 80061e6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061f0:	d007      	beq.n	8006202 <UART_Receive_IT+0x74>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10a      	bne.n	8006210 <UART_Receive_IT+0x82>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d106      	bne.n	8006210 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	b2da      	uxtb	r2, r3
 800620a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620c:	701a      	strb	r2, [r3, #0]
 800620e:	e008      	b.n	8006222 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	b2db      	uxtb	r3, r3
 8006218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800621c:	b2da      	uxtb	r2, r3
 800621e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006220:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006226:	1c5a      	adds	r2, r3, #1
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006230:	b29b      	uxth	r3, r3
 8006232:	3b01      	subs	r3, #1
 8006234:	b29b      	uxth	r3, r3
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	4619      	mov	r1, r3
 800623a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800623c:	2b00      	cmp	r3, #0
 800623e:	d15a      	bne.n	80062f6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 0220 	bic.w	r2, r2, #32
 800624e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68da      	ldr	r2, [r3, #12]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800625e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	695a      	ldr	r2, [r3, #20]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0201 	bic.w	r2, r2, #1
 800626e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2220      	movs	r2, #32
 8006274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627c:	2b01      	cmp	r3, #1
 800627e:	d135      	bne.n	80062ec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	330c      	adds	r3, #12
 800628c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	e853 3f00 	ldrex	r3, [r3]
 8006294:	613b      	str	r3, [r7, #16]
   return(result);
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	f023 0310 	bic.w	r3, r3, #16
 800629c:	627b      	str	r3, [r7, #36]	; 0x24
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	330c      	adds	r3, #12
 80062a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062a6:	623a      	str	r2, [r7, #32]
 80062a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062aa:	69f9      	ldr	r1, [r7, #28]
 80062ac:	6a3a      	ldr	r2, [r7, #32]
 80062ae:	e841 2300 	strex	r3, r2, [r1]
 80062b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1e5      	bne.n	8006286 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0310 	and.w	r3, r3, #16
 80062c4:	2b10      	cmp	r3, #16
 80062c6:	d10a      	bne.n	80062de <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062c8:	2300      	movs	r3, #0
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	60fb      	str	r3, [r7, #12]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	60fb      	str	r3, [r7, #12]
 80062dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062e2:	4619      	mov	r1, r3
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f7ff fdf9 	bl	8005edc <HAL_UARTEx_RxEventCallback>
 80062ea:	e002      	b.n	80062f2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f7ff fde1 	bl	8005eb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80062f2:	2300      	movs	r3, #0
 80062f4:	e002      	b.n	80062fc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	e000      	b.n	80062fc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80062fa:	2302      	movs	r3, #2
  }
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3730      	adds	r7, #48	; 0x30
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006308:	b0c0      	sub	sp, #256	; 0x100
 800630a:	af00      	add	r7, sp, #0
 800630c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800631c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006320:	68d9      	ldr	r1, [r3, #12]
 8006322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	ea40 0301 	orr.w	r3, r0, r1
 800632c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800632e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006332:	689a      	ldr	r2, [r3, #8]
 8006334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	431a      	orrs	r2, r3
 800633c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	431a      	orrs	r2, r3
 8006344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	4313      	orrs	r3, r2
 800634c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800635c:	f021 010c 	bic.w	r1, r1, #12
 8006360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800636a:	430b      	orrs	r3, r1
 800636c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800636e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800637a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800637e:	6999      	ldr	r1, [r3, #24]
 8006380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	ea40 0301 	orr.w	r3, r0, r1
 800638a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800638c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	4b8f      	ldr	r3, [pc, #572]	; (80065d0 <UART_SetConfig+0x2cc>)
 8006394:	429a      	cmp	r2, r3
 8006396:	d005      	beq.n	80063a4 <UART_SetConfig+0xa0>
 8006398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	4b8d      	ldr	r3, [pc, #564]	; (80065d4 <UART_SetConfig+0x2d0>)
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d104      	bne.n	80063ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063a4:	f7fe ff5c 	bl	8005260 <HAL_RCC_GetPCLK2Freq>
 80063a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80063ac:	e003      	b.n	80063b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80063ae:	f7fe ff43 	bl	8005238 <HAL_RCC_GetPCLK1Freq>
 80063b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ba:	69db      	ldr	r3, [r3, #28]
 80063bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063c0:	f040 810c 	bne.w	80065dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063c8:	2200      	movs	r2, #0
 80063ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80063d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80063d6:	4622      	mov	r2, r4
 80063d8:	462b      	mov	r3, r5
 80063da:	1891      	adds	r1, r2, r2
 80063dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80063de:	415b      	adcs	r3, r3
 80063e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80063e6:	4621      	mov	r1, r4
 80063e8:	eb12 0801 	adds.w	r8, r2, r1
 80063ec:	4629      	mov	r1, r5
 80063ee:	eb43 0901 	adc.w	r9, r3, r1
 80063f2:	f04f 0200 	mov.w	r2, #0
 80063f6:	f04f 0300 	mov.w	r3, #0
 80063fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006402:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006406:	4690      	mov	r8, r2
 8006408:	4699      	mov	r9, r3
 800640a:	4623      	mov	r3, r4
 800640c:	eb18 0303 	adds.w	r3, r8, r3
 8006410:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006414:	462b      	mov	r3, r5
 8006416:	eb49 0303 	adc.w	r3, r9, r3
 800641a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800641e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800642a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800642e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006432:	460b      	mov	r3, r1
 8006434:	18db      	adds	r3, r3, r3
 8006436:	653b      	str	r3, [r7, #80]	; 0x50
 8006438:	4613      	mov	r3, r2
 800643a:	eb42 0303 	adc.w	r3, r2, r3
 800643e:	657b      	str	r3, [r7, #84]	; 0x54
 8006440:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006444:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006448:	f7fa fc26 	bl	8000c98 <__aeabi_uldivmod>
 800644c:	4602      	mov	r2, r0
 800644e:	460b      	mov	r3, r1
 8006450:	4b61      	ldr	r3, [pc, #388]	; (80065d8 <UART_SetConfig+0x2d4>)
 8006452:	fba3 2302 	umull	r2, r3, r3, r2
 8006456:	095b      	lsrs	r3, r3, #5
 8006458:	011c      	lsls	r4, r3, #4
 800645a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800645e:	2200      	movs	r2, #0
 8006460:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006464:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006468:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800646c:	4642      	mov	r2, r8
 800646e:	464b      	mov	r3, r9
 8006470:	1891      	adds	r1, r2, r2
 8006472:	64b9      	str	r1, [r7, #72]	; 0x48
 8006474:	415b      	adcs	r3, r3
 8006476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006478:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800647c:	4641      	mov	r1, r8
 800647e:	eb12 0a01 	adds.w	sl, r2, r1
 8006482:	4649      	mov	r1, r9
 8006484:	eb43 0b01 	adc.w	fp, r3, r1
 8006488:	f04f 0200 	mov.w	r2, #0
 800648c:	f04f 0300 	mov.w	r3, #0
 8006490:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006494:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006498:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800649c:	4692      	mov	sl, r2
 800649e:	469b      	mov	fp, r3
 80064a0:	4643      	mov	r3, r8
 80064a2:	eb1a 0303 	adds.w	r3, sl, r3
 80064a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064aa:	464b      	mov	r3, r9
 80064ac:	eb4b 0303 	adc.w	r3, fp, r3
 80064b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80064b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80064c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80064c8:	460b      	mov	r3, r1
 80064ca:	18db      	adds	r3, r3, r3
 80064cc:	643b      	str	r3, [r7, #64]	; 0x40
 80064ce:	4613      	mov	r3, r2
 80064d0:	eb42 0303 	adc.w	r3, r2, r3
 80064d4:	647b      	str	r3, [r7, #68]	; 0x44
 80064d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80064da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80064de:	f7fa fbdb 	bl	8000c98 <__aeabi_uldivmod>
 80064e2:	4602      	mov	r2, r0
 80064e4:	460b      	mov	r3, r1
 80064e6:	4611      	mov	r1, r2
 80064e8:	4b3b      	ldr	r3, [pc, #236]	; (80065d8 <UART_SetConfig+0x2d4>)
 80064ea:	fba3 2301 	umull	r2, r3, r3, r1
 80064ee:	095b      	lsrs	r3, r3, #5
 80064f0:	2264      	movs	r2, #100	; 0x64
 80064f2:	fb02 f303 	mul.w	r3, r2, r3
 80064f6:	1acb      	subs	r3, r1, r3
 80064f8:	00db      	lsls	r3, r3, #3
 80064fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80064fe:	4b36      	ldr	r3, [pc, #216]	; (80065d8 <UART_SetConfig+0x2d4>)
 8006500:	fba3 2302 	umull	r2, r3, r3, r2
 8006504:	095b      	lsrs	r3, r3, #5
 8006506:	005b      	lsls	r3, r3, #1
 8006508:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800650c:	441c      	add	r4, r3
 800650e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006512:	2200      	movs	r2, #0
 8006514:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006518:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800651c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006520:	4642      	mov	r2, r8
 8006522:	464b      	mov	r3, r9
 8006524:	1891      	adds	r1, r2, r2
 8006526:	63b9      	str	r1, [r7, #56]	; 0x38
 8006528:	415b      	adcs	r3, r3
 800652a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800652c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006530:	4641      	mov	r1, r8
 8006532:	1851      	adds	r1, r2, r1
 8006534:	6339      	str	r1, [r7, #48]	; 0x30
 8006536:	4649      	mov	r1, r9
 8006538:	414b      	adcs	r3, r1
 800653a:	637b      	str	r3, [r7, #52]	; 0x34
 800653c:	f04f 0200 	mov.w	r2, #0
 8006540:	f04f 0300 	mov.w	r3, #0
 8006544:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006548:	4659      	mov	r1, fp
 800654a:	00cb      	lsls	r3, r1, #3
 800654c:	4651      	mov	r1, sl
 800654e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006552:	4651      	mov	r1, sl
 8006554:	00ca      	lsls	r2, r1, #3
 8006556:	4610      	mov	r0, r2
 8006558:	4619      	mov	r1, r3
 800655a:	4603      	mov	r3, r0
 800655c:	4642      	mov	r2, r8
 800655e:	189b      	adds	r3, r3, r2
 8006560:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006564:	464b      	mov	r3, r9
 8006566:	460a      	mov	r2, r1
 8006568:	eb42 0303 	adc.w	r3, r2, r3
 800656c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800657c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006580:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006584:	460b      	mov	r3, r1
 8006586:	18db      	adds	r3, r3, r3
 8006588:	62bb      	str	r3, [r7, #40]	; 0x28
 800658a:	4613      	mov	r3, r2
 800658c:	eb42 0303 	adc.w	r3, r2, r3
 8006590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006592:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006596:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800659a:	f7fa fb7d 	bl	8000c98 <__aeabi_uldivmod>
 800659e:	4602      	mov	r2, r0
 80065a0:	460b      	mov	r3, r1
 80065a2:	4b0d      	ldr	r3, [pc, #52]	; (80065d8 <UART_SetConfig+0x2d4>)
 80065a4:	fba3 1302 	umull	r1, r3, r3, r2
 80065a8:	095b      	lsrs	r3, r3, #5
 80065aa:	2164      	movs	r1, #100	; 0x64
 80065ac:	fb01 f303 	mul.w	r3, r1, r3
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	00db      	lsls	r3, r3, #3
 80065b4:	3332      	adds	r3, #50	; 0x32
 80065b6:	4a08      	ldr	r2, [pc, #32]	; (80065d8 <UART_SetConfig+0x2d4>)
 80065b8:	fba2 2303 	umull	r2, r3, r2, r3
 80065bc:	095b      	lsrs	r3, r3, #5
 80065be:	f003 0207 	and.w	r2, r3, #7
 80065c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4422      	add	r2, r4
 80065ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80065cc:	e105      	b.n	80067da <UART_SetConfig+0x4d6>
 80065ce:	bf00      	nop
 80065d0:	40011000 	.word	0x40011000
 80065d4:	40011400 	.word	0x40011400
 80065d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065e0:	2200      	movs	r2, #0
 80065e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80065e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80065ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80065ee:	4642      	mov	r2, r8
 80065f0:	464b      	mov	r3, r9
 80065f2:	1891      	adds	r1, r2, r2
 80065f4:	6239      	str	r1, [r7, #32]
 80065f6:	415b      	adcs	r3, r3
 80065f8:	627b      	str	r3, [r7, #36]	; 0x24
 80065fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065fe:	4641      	mov	r1, r8
 8006600:	1854      	adds	r4, r2, r1
 8006602:	4649      	mov	r1, r9
 8006604:	eb43 0501 	adc.w	r5, r3, r1
 8006608:	f04f 0200 	mov.w	r2, #0
 800660c:	f04f 0300 	mov.w	r3, #0
 8006610:	00eb      	lsls	r3, r5, #3
 8006612:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006616:	00e2      	lsls	r2, r4, #3
 8006618:	4614      	mov	r4, r2
 800661a:	461d      	mov	r5, r3
 800661c:	4643      	mov	r3, r8
 800661e:	18e3      	adds	r3, r4, r3
 8006620:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006624:	464b      	mov	r3, r9
 8006626:	eb45 0303 	adc.w	r3, r5, r3
 800662a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800662e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800663a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800663e:	f04f 0200 	mov.w	r2, #0
 8006642:	f04f 0300 	mov.w	r3, #0
 8006646:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800664a:	4629      	mov	r1, r5
 800664c:	008b      	lsls	r3, r1, #2
 800664e:	4621      	mov	r1, r4
 8006650:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006654:	4621      	mov	r1, r4
 8006656:	008a      	lsls	r2, r1, #2
 8006658:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800665c:	f7fa fb1c 	bl	8000c98 <__aeabi_uldivmod>
 8006660:	4602      	mov	r2, r0
 8006662:	460b      	mov	r3, r1
 8006664:	4b60      	ldr	r3, [pc, #384]	; (80067e8 <UART_SetConfig+0x4e4>)
 8006666:	fba3 2302 	umull	r2, r3, r3, r2
 800666a:	095b      	lsrs	r3, r3, #5
 800666c:	011c      	lsls	r4, r3, #4
 800666e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006672:	2200      	movs	r2, #0
 8006674:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006678:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800667c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006680:	4642      	mov	r2, r8
 8006682:	464b      	mov	r3, r9
 8006684:	1891      	adds	r1, r2, r2
 8006686:	61b9      	str	r1, [r7, #24]
 8006688:	415b      	adcs	r3, r3
 800668a:	61fb      	str	r3, [r7, #28]
 800668c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006690:	4641      	mov	r1, r8
 8006692:	1851      	adds	r1, r2, r1
 8006694:	6139      	str	r1, [r7, #16]
 8006696:	4649      	mov	r1, r9
 8006698:	414b      	adcs	r3, r1
 800669a:	617b      	str	r3, [r7, #20]
 800669c:	f04f 0200 	mov.w	r2, #0
 80066a0:	f04f 0300 	mov.w	r3, #0
 80066a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066a8:	4659      	mov	r1, fp
 80066aa:	00cb      	lsls	r3, r1, #3
 80066ac:	4651      	mov	r1, sl
 80066ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066b2:	4651      	mov	r1, sl
 80066b4:	00ca      	lsls	r2, r1, #3
 80066b6:	4610      	mov	r0, r2
 80066b8:	4619      	mov	r1, r3
 80066ba:	4603      	mov	r3, r0
 80066bc:	4642      	mov	r2, r8
 80066be:	189b      	adds	r3, r3, r2
 80066c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80066c4:	464b      	mov	r3, r9
 80066c6:	460a      	mov	r2, r1
 80066c8:	eb42 0303 	adc.w	r3, r2, r3
 80066cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80066da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80066dc:	f04f 0200 	mov.w	r2, #0
 80066e0:	f04f 0300 	mov.w	r3, #0
 80066e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80066e8:	4649      	mov	r1, r9
 80066ea:	008b      	lsls	r3, r1, #2
 80066ec:	4641      	mov	r1, r8
 80066ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066f2:	4641      	mov	r1, r8
 80066f4:	008a      	lsls	r2, r1, #2
 80066f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80066fa:	f7fa facd 	bl	8000c98 <__aeabi_uldivmod>
 80066fe:	4602      	mov	r2, r0
 8006700:	460b      	mov	r3, r1
 8006702:	4b39      	ldr	r3, [pc, #228]	; (80067e8 <UART_SetConfig+0x4e4>)
 8006704:	fba3 1302 	umull	r1, r3, r3, r2
 8006708:	095b      	lsrs	r3, r3, #5
 800670a:	2164      	movs	r1, #100	; 0x64
 800670c:	fb01 f303 	mul.w	r3, r1, r3
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	011b      	lsls	r3, r3, #4
 8006714:	3332      	adds	r3, #50	; 0x32
 8006716:	4a34      	ldr	r2, [pc, #208]	; (80067e8 <UART_SetConfig+0x4e4>)
 8006718:	fba2 2303 	umull	r2, r3, r2, r3
 800671c:	095b      	lsrs	r3, r3, #5
 800671e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006722:	441c      	add	r4, r3
 8006724:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006728:	2200      	movs	r2, #0
 800672a:	673b      	str	r3, [r7, #112]	; 0x70
 800672c:	677a      	str	r2, [r7, #116]	; 0x74
 800672e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006732:	4642      	mov	r2, r8
 8006734:	464b      	mov	r3, r9
 8006736:	1891      	adds	r1, r2, r2
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	415b      	adcs	r3, r3
 800673c:	60fb      	str	r3, [r7, #12]
 800673e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006742:	4641      	mov	r1, r8
 8006744:	1851      	adds	r1, r2, r1
 8006746:	6039      	str	r1, [r7, #0]
 8006748:	4649      	mov	r1, r9
 800674a:	414b      	adcs	r3, r1
 800674c:	607b      	str	r3, [r7, #4]
 800674e:	f04f 0200 	mov.w	r2, #0
 8006752:	f04f 0300 	mov.w	r3, #0
 8006756:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800675a:	4659      	mov	r1, fp
 800675c:	00cb      	lsls	r3, r1, #3
 800675e:	4651      	mov	r1, sl
 8006760:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006764:	4651      	mov	r1, sl
 8006766:	00ca      	lsls	r2, r1, #3
 8006768:	4610      	mov	r0, r2
 800676a:	4619      	mov	r1, r3
 800676c:	4603      	mov	r3, r0
 800676e:	4642      	mov	r2, r8
 8006770:	189b      	adds	r3, r3, r2
 8006772:	66bb      	str	r3, [r7, #104]	; 0x68
 8006774:	464b      	mov	r3, r9
 8006776:	460a      	mov	r2, r1
 8006778:	eb42 0303 	adc.w	r3, r2, r3
 800677c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800677e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	663b      	str	r3, [r7, #96]	; 0x60
 8006788:	667a      	str	r2, [r7, #100]	; 0x64
 800678a:	f04f 0200 	mov.w	r2, #0
 800678e:	f04f 0300 	mov.w	r3, #0
 8006792:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006796:	4649      	mov	r1, r9
 8006798:	008b      	lsls	r3, r1, #2
 800679a:	4641      	mov	r1, r8
 800679c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067a0:	4641      	mov	r1, r8
 80067a2:	008a      	lsls	r2, r1, #2
 80067a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80067a8:	f7fa fa76 	bl	8000c98 <__aeabi_uldivmod>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	4b0d      	ldr	r3, [pc, #52]	; (80067e8 <UART_SetConfig+0x4e4>)
 80067b2:	fba3 1302 	umull	r1, r3, r3, r2
 80067b6:	095b      	lsrs	r3, r3, #5
 80067b8:	2164      	movs	r1, #100	; 0x64
 80067ba:	fb01 f303 	mul.w	r3, r1, r3
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	011b      	lsls	r3, r3, #4
 80067c2:	3332      	adds	r3, #50	; 0x32
 80067c4:	4a08      	ldr	r2, [pc, #32]	; (80067e8 <UART_SetConfig+0x4e4>)
 80067c6:	fba2 2303 	umull	r2, r3, r2, r3
 80067ca:	095b      	lsrs	r3, r3, #5
 80067cc:	f003 020f 	and.w	r2, r3, #15
 80067d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4422      	add	r2, r4
 80067d8:	609a      	str	r2, [r3, #8]
}
 80067da:	bf00      	nop
 80067dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80067e0:	46bd      	mov	sp, r7
 80067e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067e6:	bf00      	nop
 80067e8:	51eb851f 	.word	0x51eb851f

080067ec <__errno>:
 80067ec:	4b01      	ldr	r3, [pc, #4]	; (80067f4 <__errno+0x8>)
 80067ee:	6818      	ldr	r0, [r3, #0]
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	20000074 	.word	0x20000074

080067f8 <__libc_init_array>:
 80067f8:	b570      	push	{r4, r5, r6, lr}
 80067fa:	4d0d      	ldr	r5, [pc, #52]	; (8006830 <__libc_init_array+0x38>)
 80067fc:	4c0d      	ldr	r4, [pc, #52]	; (8006834 <__libc_init_array+0x3c>)
 80067fe:	1b64      	subs	r4, r4, r5
 8006800:	10a4      	asrs	r4, r4, #2
 8006802:	2600      	movs	r6, #0
 8006804:	42a6      	cmp	r6, r4
 8006806:	d109      	bne.n	800681c <__libc_init_array+0x24>
 8006808:	4d0b      	ldr	r5, [pc, #44]	; (8006838 <__libc_init_array+0x40>)
 800680a:	4c0c      	ldr	r4, [pc, #48]	; (800683c <__libc_init_array+0x44>)
 800680c:	f004 fca0 	bl	800b150 <_init>
 8006810:	1b64      	subs	r4, r4, r5
 8006812:	10a4      	asrs	r4, r4, #2
 8006814:	2600      	movs	r6, #0
 8006816:	42a6      	cmp	r6, r4
 8006818:	d105      	bne.n	8006826 <__libc_init_array+0x2e>
 800681a:	bd70      	pop	{r4, r5, r6, pc}
 800681c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006820:	4798      	blx	r3
 8006822:	3601      	adds	r6, #1
 8006824:	e7ee      	b.n	8006804 <__libc_init_array+0xc>
 8006826:	f855 3b04 	ldr.w	r3, [r5], #4
 800682a:	4798      	blx	r3
 800682c:	3601      	adds	r6, #1
 800682e:	e7f2      	b.n	8006816 <__libc_init_array+0x1e>
 8006830:	0800cbf4 	.word	0x0800cbf4
 8006834:	0800cbf4 	.word	0x0800cbf4
 8006838:	0800cbf4 	.word	0x0800cbf4
 800683c:	0800cbf8 	.word	0x0800cbf8

08006840 <memcmp>:
 8006840:	b510      	push	{r4, lr}
 8006842:	3901      	subs	r1, #1
 8006844:	4402      	add	r2, r0
 8006846:	4290      	cmp	r0, r2
 8006848:	d101      	bne.n	800684e <memcmp+0xe>
 800684a:	2000      	movs	r0, #0
 800684c:	e005      	b.n	800685a <memcmp+0x1a>
 800684e:	7803      	ldrb	r3, [r0, #0]
 8006850:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006854:	42a3      	cmp	r3, r4
 8006856:	d001      	beq.n	800685c <memcmp+0x1c>
 8006858:	1b18      	subs	r0, r3, r4
 800685a:	bd10      	pop	{r4, pc}
 800685c:	3001      	adds	r0, #1
 800685e:	e7f2      	b.n	8006846 <memcmp+0x6>

08006860 <memset>:
 8006860:	4402      	add	r2, r0
 8006862:	4603      	mov	r3, r0
 8006864:	4293      	cmp	r3, r2
 8006866:	d100      	bne.n	800686a <memset+0xa>
 8006868:	4770      	bx	lr
 800686a:	f803 1b01 	strb.w	r1, [r3], #1
 800686e:	e7f9      	b.n	8006864 <memset+0x4>

08006870 <__cvt>:
 8006870:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006874:	ec55 4b10 	vmov	r4, r5, d0
 8006878:	2d00      	cmp	r5, #0
 800687a:	460e      	mov	r6, r1
 800687c:	4619      	mov	r1, r3
 800687e:	462b      	mov	r3, r5
 8006880:	bfbb      	ittet	lt
 8006882:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006886:	461d      	movlt	r5, r3
 8006888:	2300      	movge	r3, #0
 800688a:	232d      	movlt	r3, #45	; 0x2d
 800688c:	700b      	strb	r3, [r1, #0]
 800688e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006890:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006894:	4691      	mov	r9, r2
 8006896:	f023 0820 	bic.w	r8, r3, #32
 800689a:	bfbc      	itt	lt
 800689c:	4622      	movlt	r2, r4
 800689e:	4614      	movlt	r4, r2
 80068a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80068a4:	d005      	beq.n	80068b2 <__cvt+0x42>
 80068a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80068aa:	d100      	bne.n	80068ae <__cvt+0x3e>
 80068ac:	3601      	adds	r6, #1
 80068ae:	2102      	movs	r1, #2
 80068b0:	e000      	b.n	80068b4 <__cvt+0x44>
 80068b2:	2103      	movs	r1, #3
 80068b4:	ab03      	add	r3, sp, #12
 80068b6:	9301      	str	r3, [sp, #4]
 80068b8:	ab02      	add	r3, sp, #8
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	ec45 4b10 	vmov	d0, r4, r5
 80068c0:	4653      	mov	r3, sl
 80068c2:	4632      	mov	r2, r6
 80068c4:	f001 fdac 	bl	8008420 <_dtoa_r>
 80068c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80068cc:	4607      	mov	r7, r0
 80068ce:	d102      	bne.n	80068d6 <__cvt+0x66>
 80068d0:	f019 0f01 	tst.w	r9, #1
 80068d4:	d022      	beq.n	800691c <__cvt+0xac>
 80068d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80068da:	eb07 0906 	add.w	r9, r7, r6
 80068de:	d110      	bne.n	8006902 <__cvt+0x92>
 80068e0:	783b      	ldrb	r3, [r7, #0]
 80068e2:	2b30      	cmp	r3, #48	; 0x30
 80068e4:	d10a      	bne.n	80068fc <__cvt+0x8c>
 80068e6:	2200      	movs	r2, #0
 80068e8:	2300      	movs	r3, #0
 80068ea:	4620      	mov	r0, r4
 80068ec:	4629      	mov	r1, r5
 80068ee:	f7fa f8f3 	bl	8000ad8 <__aeabi_dcmpeq>
 80068f2:	b918      	cbnz	r0, 80068fc <__cvt+0x8c>
 80068f4:	f1c6 0601 	rsb	r6, r6, #1
 80068f8:	f8ca 6000 	str.w	r6, [sl]
 80068fc:	f8da 3000 	ldr.w	r3, [sl]
 8006900:	4499      	add	r9, r3
 8006902:	2200      	movs	r2, #0
 8006904:	2300      	movs	r3, #0
 8006906:	4620      	mov	r0, r4
 8006908:	4629      	mov	r1, r5
 800690a:	f7fa f8e5 	bl	8000ad8 <__aeabi_dcmpeq>
 800690e:	b108      	cbz	r0, 8006914 <__cvt+0xa4>
 8006910:	f8cd 900c 	str.w	r9, [sp, #12]
 8006914:	2230      	movs	r2, #48	; 0x30
 8006916:	9b03      	ldr	r3, [sp, #12]
 8006918:	454b      	cmp	r3, r9
 800691a:	d307      	bcc.n	800692c <__cvt+0xbc>
 800691c:	9b03      	ldr	r3, [sp, #12]
 800691e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006920:	1bdb      	subs	r3, r3, r7
 8006922:	4638      	mov	r0, r7
 8006924:	6013      	str	r3, [r2, #0]
 8006926:	b004      	add	sp, #16
 8006928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800692c:	1c59      	adds	r1, r3, #1
 800692e:	9103      	str	r1, [sp, #12]
 8006930:	701a      	strb	r2, [r3, #0]
 8006932:	e7f0      	b.n	8006916 <__cvt+0xa6>

08006934 <__exponent>:
 8006934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006936:	4603      	mov	r3, r0
 8006938:	2900      	cmp	r1, #0
 800693a:	bfb8      	it	lt
 800693c:	4249      	neglt	r1, r1
 800693e:	f803 2b02 	strb.w	r2, [r3], #2
 8006942:	bfb4      	ite	lt
 8006944:	222d      	movlt	r2, #45	; 0x2d
 8006946:	222b      	movge	r2, #43	; 0x2b
 8006948:	2909      	cmp	r1, #9
 800694a:	7042      	strb	r2, [r0, #1]
 800694c:	dd2a      	ble.n	80069a4 <__exponent+0x70>
 800694e:	f10d 0407 	add.w	r4, sp, #7
 8006952:	46a4      	mov	ip, r4
 8006954:	270a      	movs	r7, #10
 8006956:	46a6      	mov	lr, r4
 8006958:	460a      	mov	r2, r1
 800695a:	fb91 f6f7 	sdiv	r6, r1, r7
 800695e:	fb07 1516 	mls	r5, r7, r6, r1
 8006962:	3530      	adds	r5, #48	; 0x30
 8006964:	2a63      	cmp	r2, #99	; 0x63
 8006966:	f104 34ff 	add.w	r4, r4, #4294967295
 800696a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800696e:	4631      	mov	r1, r6
 8006970:	dcf1      	bgt.n	8006956 <__exponent+0x22>
 8006972:	3130      	adds	r1, #48	; 0x30
 8006974:	f1ae 0502 	sub.w	r5, lr, #2
 8006978:	f804 1c01 	strb.w	r1, [r4, #-1]
 800697c:	1c44      	adds	r4, r0, #1
 800697e:	4629      	mov	r1, r5
 8006980:	4561      	cmp	r1, ip
 8006982:	d30a      	bcc.n	800699a <__exponent+0x66>
 8006984:	f10d 0209 	add.w	r2, sp, #9
 8006988:	eba2 020e 	sub.w	r2, r2, lr
 800698c:	4565      	cmp	r5, ip
 800698e:	bf88      	it	hi
 8006990:	2200      	movhi	r2, #0
 8006992:	4413      	add	r3, r2
 8006994:	1a18      	subs	r0, r3, r0
 8006996:	b003      	add	sp, #12
 8006998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800699a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800699e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80069a2:	e7ed      	b.n	8006980 <__exponent+0x4c>
 80069a4:	2330      	movs	r3, #48	; 0x30
 80069a6:	3130      	adds	r1, #48	; 0x30
 80069a8:	7083      	strb	r3, [r0, #2]
 80069aa:	70c1      	strb	r1, [r0, #3]
 80069ac:	1d03      	adds	r3, r0, #4
 80069ae:	e7f1      	b.n	8006994 <__exponent+0x60>

080069b0 <_printf_float>:
 80069b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b4:	ed2d 8b02 	vpush	{d8}
 80069b8:	b08d      	sub	sp, #52	; 0x34
 80069ba:	460c      	mov	r4, r1
 80069bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80069c0:	4616      	mov	r6, r2
 80069c2:	461f      	mov	r7, r3
 80069c4:	4605      	mov	r5, r0
 80069c6:	f002 fe89 	bl	80096dc <_localeconv_r>
 80069ca:	f8d0 a000 	ldr.w	sl, [r0]
 80069ce:	4650      	mov	r0, sl
 80069d0:	f7f9 fc06 	bl	80001e0 <strlen>
 80069d4:	2300      	movs	r3, #0
 80069d6:	930a      	str	r3, [sp, #40]	; 0x28
 80069d8:	6823      	ldr	r3, [r4, #0]
 80069da:	9305      	str	r3, [sp, #20]
 80069dc:	f8d8 3000 	ldr.w	r3, [r8]
 80069e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80069e4:	3307      	adds	r3, #7
 80069e6:	f023 0307 	bic.w	r3, r3, #7
 80069ea:	f103 0208 	add.w	r2, r3, #8
 80069ee:	f8c8 2000 	str.w	r2, [r8]
 80069f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80069fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80069fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006a02:	9307      	str	r3, [sp, #28]
 8006a04:	f8cd 8018 	str.w	r8, [sp, #24]
 8006a08:	ee08 0a10 	vmov	s16, r0
 8006a0c:	4b9f      	ldr	r3, [pc, #636]	; (8006c8c <_printf_float+0x2dc>)
 8006a0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a12:	f04f 32ff 	mov.w	r2, #4294967295
 8006a16:	f7fa f891 	bl	8000b3c <__aeabi_dcmpun>
 8006a1a:	bb88      	cbnz	r0, 8006a80 <_printf_float+0xd0>
 8006a1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a20:	4b9a      	ldr	r3, [pc, #616]	; (8006c8c <_printf_float+0x2dc>)
 8006a22:	f04f 32ff 	mov.w	r2, #4294967295
 8006a26:	f7fa f86b 	bl	8000b00 <__aeabi_dcmple>
 8006a2a:	bb48      	cbnz	r0, 8006a80 <_printf_float+0xd0>
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	2300      	movs	r3, #0
 8006a30:	4640      	mov	r0, r8
 8006a32:	4649      	mov	r1, r9
 8006a34:	f7fa f85a 	bl	8000aec <__aeabi_dcmplt>
 8006a38:	b110      	cbz	r0, 8006a40 <_printf_float+0x90>
 8006a3a:	232d      	movs	r3, #45	; 0x2d
 8006a3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a40:	4b93      	ldr	r3, [pc, #588]	; (8006c90 <_printf_float+0x2e0>)
 8006a42:	4894      	ldr	r0, [pc, #592]	; (8006c94 <_printf_float+0x2e4>)
 8006a44:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006a48:	bf94      	ite	ls
 8006a4a:	4698      	movls	r8, r3
 8006a4c:	4680      	movhi	r8, r0
 8006a4e:	2303      	movs	r3, #3
 8006a50:	6123      	str	r3, [r4, #16]
 8006a52:	9b05      	ldr	r3, [sp, #20]
 8006a54:	f023 0204 	bic.w	r2, r3, #4
 8006a58:	6022      	str	r2, [r4, #0]
 8006a5a:	f04f 0900 	mov.w	r9, #0
 8006a5e:	9700      	str	r7, [sp, #0]
 8006a60:	4633      	mov	r3, r6
 8006a62:	aa0b      	add	r2, sp, #44	; 0x2c
 8006a64:	4621      	mov	r1, r4
 8006a66:	4628      	mov	r0, r5
 8006a68:	f000 f9d8 	bl	8006e1c <_printf_common>
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	f040 8090 	bne.w	8006b92 <_printf_float+0x1e2>
 8006a72:	f04f 30ff 	mov.w	r0, #4294967295
 8006a76:	b00d      	add	sp, #52	; 0x34
 8006a78:	ecbd 8b02 	vpop	{d8}
 8006a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a80:	4642      	mov	r2, r8
 8006a82:	464b      	mov	r3, r9
 8006a84:	4640      	mov	r0, r8
 8006a86:	4649      	mov	r1, r9
 8006a88:	f7fa f858 	bl	8000b3c <__aeabi_dcmpun>
 8006a8c:	b140      	cbz	r0, 8006aa0 <_printf_float+0xf0>
 8006a8e:	464b      	mov	r3, r9
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	bfbc      	itt	lt
 8006a94:	232d      	movlt	r3, #45	; 0x2d
 8006a96:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006a9a:	487f      	ldr	r0, [pc, #508]	; (8006c98 <_printf_float+0x2e8>)
 8006a9c:	4b7f      	ldr	r3, [pc, #508]	; (8006c9c <_printf_float+0x2ec>)
 8006a9e:	e7d1      	b.n	8006a44 <_printf_float+0x94>
 8006aa0:	6863      	ldr	r3, [r4, #4]
 8006aa2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006aa6:	9206      	str	r2, [sp, #24]
 8006aa8:	1c5a      	adds	r2, r3, #1
 8006aaa:	d13f      	bne.n	8006b2c <_printf_float+0x17c>
 8006aac:	2306      	movs	r3, #6
 8006aae:	6063      	str	r3, [r4, #4]
 8006ab0:	9b05      	ldr	r3, [sp, #20]
 8006ab2:	6861      	ldr	r1, [r4, #4]
 8006ab4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006ab8:	2300      	movs	r3, #0
 8006aba:	9303      	str	r3, [sp, #12]
 8006abc:	ab0a      	add	r3, sp, #40	; 0x28
 8006abe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006ac2:	ab09      	add	r3, sp, #36	; 0x24
 8006ac4:	ec49 8b10 	vmov	d0, r8, r9
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	6022      	str	r2, [r4, #0]
 8006acc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	f7ff fecd 	bl	8006870 <__cvt>
 8006ad6:	9b06      	ldr	r3, [sp, #24]
 8006ad8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ada:	2b47      	cmp	r3, #71	; 0x47
 8006adc:	4680      	mov	r8, r0
 8006ade:	d108      	bne.n	8006af2 <_printf_float+0x142>
 8006ae0:	1cc8      	adds	r0, r1, #3
 8006ae2:	db02      	blt.n	8006aea <_printf_float+0x13a>
 8006ae4:	6863      	ldr	r3, [r4, #4]
 8006ae6:	4299      	cmp	r1, r3
 8006ae8:	dd41      	ble.n	8006b6e <_printf_float+0x1be>
 8006aea:	f1ab 0b02 	sub.w	fp, fp, #2
 8006aee:	fa5f fb8b 	uxtb.w	fp, fp
 8006af2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006af6:	d820      	bhi.n	8006b3a <_printf_float+0x18a>
 8006af8:	3901      	subs	r1, #1
 8006afa:	465a      	mov	r2, fp
 8006afc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006b00:	9109      	str	r1, [sp, #36]	; 0x24
 8006b02:	f7ff ff17 	bl	8006934 <__exponent>
 8006b06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b08:	1813      	adds	r3, r2, r0
 8006b0a:	2a01      	cmp	r2, #1
 8006b0c:	4681      	mov	r9, r0
 8006b0e:	6123      	str	r3, [r4, #16]
 8006b10:	dc02      	bgt.n	8006b18 <_printf_float+0x168>
 8006b12:	6822      	ldr	r2, [r4, #0]
 8006b14:	07d2      	lsls	r2, r2, #31
 8006b16:	d501      	bpl.n	8006b1c <_printf_float+0x16c>
 8006b18:	3301      	adds	r3, #1
 8006b1a:	6123      	str	r3, [r4, #16]
 8006b1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d09c      	beq.n	8006a5e <_printf_float+0xae>
 8006b24:	232d      	movs	r3, #45	; 0x2d
 8006b26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b2a:	e798      	b.n	8006a5e <_printf_float+0xae>
 8006b2c:	9a06      	ldr	r2, [sp, #24]
 8006b2e:	2a47      	cmp	r2, #71	; 0x47
 8006b30:	d1be      	bne.n	8006ab0 <_printf_float+0x100>
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1bc      	bne.n	8006ab0 <_printf_float+0x100>
 8006b36:	2301      	movs	r3, #1
 8006b38:	e7b9      	b.n	8006aae <_printf_float+0xfe>
 8006b3a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006b3e:	d118      	bne.n	8006b72 <_printf_float+0x1c2>
 8006b40:	2900      	cmp	r1, #0
 8006b42:	6863      	ldr	r3, [r4, #4]
 8006b44:	dd0b      	ble.n	8006b5e <_printf_float+0x1ae>
 8006b46:	6121      	str	r1, [r4, #16]
 8006b48:	b913      	cbnz	r3, 8006b50 <_printf_float+0x1a0>
 8006b4a:	6822      	ldr	r2, [r4, #0]
 8006b4c:	07d0      	lsls	r0, r2, #31
 8006b4e:	d502      	bpl.n	8006b56 <_printf_float+0x1a6>
 8006b50:	3301      	adds	r3, #1
 8006b52:	440b      	add	r3, r1
 8006b54:	6123      	str	r3, [r4, #16]
 8006b56:	65a1      	str	r1, [r4, #88]	; 0x58
 8006b58:	f04f 0900 	mov.w	r9, #0
 8006b5c:	e7de      	b.n	8006b1c <_printf_float+0x16c>
 8006b5e:	b913      	cbnz	r3, 8006b66 <_printf_float+0x1b6>
 8006b60:	6822      	ldr	r2, [r4, #0]
 8006b62:	07d2      	lsls	r2, r2, #31
 8006b64:	d501      	bpl.n	8006b6a <_printf_float+0x1ba>
 8006b66:	3302      	adds	r3, #2
 8006b68:	e7f4      	b.n	8006b54 <_printf_float+0x1a4>
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e7f2      	b.n	8006b54 <_printf_float+0x1a4>
 8006b6e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b74:	4299      	cmp	r1, r3
 8006b76:	db05      	blt.n	8006b84 <_printf_float+0x1d4>
 8006b78:	6823      	ldr	r3, [r4, #0]
 8006b7a:	6121      	str	r1, [r4, #16]
 8006b7c:	07d8      	lsls	r0, r3, #31
 8006b7e:	d5ea      	bpl.n	8006b56 <_printf_float+0x1a6>
 8006b80:	1c4b      	adds	r3, r1, #1
 8006b82:	e7e7      	b.n	8006b54 <_printf_float+0x1a4>
 8006b84:	2900      	cmp	r1, #0
 8006b86:	bfd4      	ite	le
 8006b88:	f1c1 0202 	rsble	r2, r1, #2
 8006b8c:	2201      	movgt	r2, #1
 8006b8e:	4413      	add	r3, r2
 8006b90:	e7e0      	b.n	8006b54 <_printf_float+0x1a4>
 8006b92:	6823      	ldr	r3, [r4, #0]
 8006b94:	055a      	lsls	r2, r3, #21
 8006b96:	d407      	bmi.n	8006ba8 <_printf_float+0x1f8>
 8006b98:	6923      	ldr	r3, [r4, #16]
 8006b9a:	4642      	mov	r2, r8
 8006b9c:	4631      	mov	r1, r6
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	47b8      	blx	r7
 8006ba2:	3001      	adds	r0, #1
 8006ba4:	d12c      	bne.n	8006c00 <_printf_float+0x250>
 8006ba6:	e764      	b.n	8006a72 <_printf_float+0xc2>
 8006ba8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006bac:	f240 80e0 	bls.w	8006d70 <_printf_float+0x3c0>
 8006bb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	f7f9 ff8e 	bl	8000ad8 <__aeabi_dcmpeq>
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	d034      	beq.n	8006c2a <_printf_float+0x27a>
 8006bc0:	4a37      	ldr	r2, [pc, #220]	; (8006ca0 <_printf_float+0x2f0>)
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	4631      	mov	r1, r6
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	47b8      	blx	r7
 8006bca:	3001      	adds	r0, #1
 8006bcc:	f43f af51 	beq.w	8006a72 <_printf_float+0xc2>
 8006bd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	db02      	blt.n	8006bde <_printf_float+0x22e>
 8006bd8:	6823      	ldr	r3, [r4, #0]
 8006bda:	07d8      	lsls	r0, r3, #31
 8006bdc:	d510      	bpl.n	8006c00 <_printf_float+0x250>
 8006bde:	ee18 3a10 	vmov	r3, s16
 8006be2:	4652      	mov	r2, sl
 8006be4:	4631      	mov	r1, r6
 8006be6:	4628      	mov	r0, r5
 8006be8:	47b8      	blx	r7
 8006bea:	3001      	adds	r0, #1
 8006bec:	f43f af41 	beq.w	8006a72 <_printf_float+0xc2>
 8006bf0:	f04f 0800 	mov.w	r8, #0
 8006bf4:	f104 091a 	add.w	r9, r4, #26
 8006bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	4543      	cmp	r3, r8
 8006bfe:	dc09      	bgt.n	8006c14 <_printf_float+0x264>
 8006c00:	6823      	ldr	r3, [r4, #0]
 8006c02:	079b      	lsls	r3, r3, #30
 8006c04:	f100 8105 	bmi.w	8006e12 <_printf_float+0x462>
 8006c08:	68e0      	ldr	r0, [r4, #12]
 8006c0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c0c:	4298      	cmp	r0, r3
 8006c0e:	bfb8      	it	lt
 8006c10:	4618      	movlt	r0, r3
 8006c12:	e730      	b.n	8006a76 <_printf_float+0xc6>
 8006c14:	2301      	movs	r3, #1
 8006c16:	464a      	mov	r2, r9
 8006c18:	4631      	mov	r1, r6
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	47b8      	blx	r7
 8006c1e:	3001      	adds	r0, #1
 8006c20:	f43f af27 	beq.w	8006a72 <_printf_float+0xc2>
 8006c24:	f108 0801 	add.w	r8, r8, #1
 8006c28:	e7e6      	b.n	8006bf8 <_printf_float+0x248>
 8006c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	dc39      	bgt.n	8006ca4 <_printf_float+0x2f4>
 8006c30:	4a1b      	ldr	r2, [pc, #108]	; (8006ca0 <_printf_float+0x2f0>)
 8006c32:	2301      	movs	r3, #1
 8006c34:	4631      	mov	r1, r6
 8006c36:	4628      	mov	r0, r5
 8006c38:	47b8      	blx	r7
 8006c3a:	3001      	adds	r0, #1
 8006c3c:	f43f af19 	beq.w	8006a72 <_printf_float+0xc2>
 8006c40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c44:	4313      	orrs	r3, r2
 8006c46:	d102      	bne.n	8006c4e <_printf_float+0x29e>
 8006c48:	6823      	ldr	r3, [r4, #0]
 8006c4a:	07d9      	lsls	r1, r3, #31
 8006c4c:	d5d8      	bpl.n	8006c00 <_printf_float+0x250>
 8006c4e:	ee18 3a10 	vmov	r3, s16
 8006c52:	4652      	mov	r2, sl
 8006c54:	4631      	mov	r1, r6
 8006c56:	4628      	mov	r0, r5
 8006c58:	47b8      	blx	r7
 8006c5a:	3001      	adds	r0, #1
 8006c5c:	f43f af09 	beq.w	8006a72 <_printf_float+0xc2>
 8006c60:	f04f 0900 	mov.w	r9, #0
 8006c64:	f104 0a1a 	add.w	sl, r4, #26
 8006c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c6a:	425b      	negs	r3, r3
 8006c6c:	454b      	cmp	r3, r9
 8006c6e:	dc01      	bgt.n	8006c74 <_printf_float+0x2c4>
 8006c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c72:	e792      	b.n	8006b9a <_printf_float+0x1ea>
 8006c74:	2301      	movs	r3, #1
 8006c76:	4652      	mov	r2, sl
 8006c78:	4631      	mov	r1, r6
 8006c7a:	4628      	mov	r0, r5
 8006c7c:	47b8      	blx	r7
 8006c7e:	3001      	adds	r0, #1
 8006c80:	f43f aef7 	beq.w	8006a72 <_printf_float+0xc2>
 8006c84:	f109 0901 	add.w	r9, r9, #1
 8006c88:	e7ee      	b.n	8006c68 <_printf_float+0x2b8>
 8006c8a:	bf00      	nop
 8006c8c:	7fefffff 	.word	0x7fefffff
 8006c90:	0800c74c 	.word	0x0800c74c
 8006c94:	0800c750 	.word	0x0800c750
 8006c98:	0800c758 	.word	0x0800c758
 8006c9c:	0800c754 	.word	0x0800c754
 8006ca0:	0800c75c 	.word	0x0800c75c
 8006ca4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ca6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	bfa8      	it	ge
 8006cac:	461a      	movge	r2, r3
 8006cae:	2a00      	cmp	r2, #0
 8006cb0:	4691      	mov	r9, r2
 8006cb2:	dc37      	bgt.n	8006d24 <_printf_float+0x374>
 8006cb4:	f04f 0b00 	mov.w	fp, #0
 8006cb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cbc:	f104 021a 	add.w	r2, r4, #26
 8006cc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006cc2:	9305      	str	r3, [sp, #20]
 8006cc4:	eba3 0309 	sub.w	r3, r3, r9
 8006cc8:	455b      	cmp	r3, fp
 8006cca:	dc33      	bgt.n	8006d34 <_printf_float+0x384>
 8006ccc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	db3b      	blt.n	8006d4c <_printf_float+0x39c>
 8006cd4:	6823      	ldr	r3, [r4, #0]
 8006cd6:	07da      	lsls	r2, r3, #31
 8006cd8:	d438      	bmi.n	8006d4c <_printf_float+0x39c>
 8006cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cdc:	9a05      	ldr	r2, [sp, #20]
 8006cde:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ce0:	1a9a      	subs	r2, r3, r2
 8006ce2:	eba3 0901 	sub.w	r9, r3, r1
 8006ce6:	4591      	cmp	r9, r2
 8006ce8:	bfa8      	it	ge
 8006cea:	4691      	movge	r9, r2
 8006cec:	f1b9 0f00 	cmp.w	r9, #0
 8006cf0:	dc35      	bgt.n	8006d5e <_printf_float+0x3ae>
 8006cf2:	f04f 0800 	mov.w	r8, #0
 8006cf6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cfa:	f104 0a1a 	add.w	sl, r4, #26
 8006cfe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d02:	1a9b      	subs	r3, r3, r2
 8006d04:	eba3 0309 	sub.w	r3, r3, r9
 8006d08:	4543      	cmp	r3, r8
 8006d0a:	f77f af79 	ble.w	8006c00 <_printf_float+0x250>
 8006d0e:	2301      	movs	r3, #1
 8006d10:	4652      	mov	r2, sl
 8006d12:	4631      	mov	r1, r6
 8006d14:	4628      	mov	r0, r5
 8006d16:	47b8      	blx	r7
 8006d18:	3001      	adds	r0, #1
 8006d1a:	f43f aeaa 	beq.w	8006a72 <_printf_float+0xc2>
 8006d1e:	f108 0801 	add.w	r8, r8, #1
 8006d22:	e7ec      	b.n	8006cfe <_printf_float+0x34e>
 8006d24:	4613      	mov	r3, r2
 8006d26:	4631      	mov	r1, r6
 8006d28:	4642      	mov	r2, r8
 8006d2a:	4628      	mov	r0, r5
 8006d2c:	47b8      	blx	r7
 8006d2e:	3001      	adds	r0, #1
 8006d30:	d1c0      	bne.n	8006cb4 <_printf_float+0x304>
 8006d32:	e69e      	b.n	8006a72 <_printf_float+0xc2>
 8006d34:	2301      	movs	r3, #1
 8006d36:	4631      	mov	r1, r6
 8006d38:	4628      	mov	r0, r5
 8006d3a:	9205      	str	r2, [sp, #20]
 8006d3c:	47b8      	blx	r7
 8006d3e:	3001      	adds	r0, #1
 8006d40:	f43f ae97 	beq.w	8006a72 <_printf_float+0xc2>
 8006d44:	9a05      	ldr	r2, [sp, #20]
 8006d46:	f10b 0b01 	add.w	fp, fp, #1
 8006d4a:	e7b9      	b.n	8006cc0 <_printf_float+0x310>
 8006d4c:	ee18 3a10 	vmov	r3, s16
 8006d50:	4652      	mov	r2, sl
 8006d52:	4631      	mov	r1, r6
 8006d54:	4628      	mov	r0, r5
 8006d56:	47b8      	blx	r7
 8006d58:	3001      	adds	r0, #1
 8006d5a:	d1be      	bne.n	8006cda <_printf_float+0x32a>
 8006d5c:	e689      	b.n	8006a72 <_printf_float+0xc2>
 8006d5e:	9a05      	ldr	r2, [sp, #20]
 8006d60:	464b      	mov	r3, r9
 8006d62:	4442      	add	r2, r8
 8006d64:	4631      	mov	r1, r6
 8006d66:	4628      	mov	r0, r5
 8006d68:	47b8      	blx	r7
 8006d6a:	3001      	adds	r0, #1
 8006d6c:	d1c1      	bne.n	8006cf2 <_printf_float+0x342>
 8006d6e:	e680      	b.n	8006a72 <_printf_float+0xc2>
 8006d70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d72:	2a01      	cmp	r2, #1
 8006d74:	dc01      	bgt.n	8006d7a <_printf_float+0x3ca>
 8006d76:	07db      	lsls	r3, r3, #31
 8006d78:	d538      	bpl.n	8006dec <_printf_float+0x43c>
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	4642      	mov	r2, r8
 8006d7e:	4631      	mov	r1, r6
 8006d80:	4628      	mov	r0, r5
 8006d82:	47b8      	blx	r7
 8006d84:	3001      	adds	r0, #1
 8006d86:	f43f ae74 	beq.w	8006a72 <_printf_float+0xc2>
 8006d8a:	ee18 3a10 	vmov	r3, s16
 8006d8e:	4652      	mov	r2, sl
 8006d90:	4631      	mov	r1, r6
 8006d92:	4628      	mov	r0, r5
 8006d94:	47b8      	blx	r7
 8006d96:	3001      	adds	r0, #1
 8006d98:	f43f ae6b 	beq.w	8006a72 <_printf_float+0xc2>
 8006d9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006da0:	2200      	movs	r2, #0
 8006da2:	2300      	movs	r3, #0
 8006da4:	f7f9 fe98 	bl	8000ad8 <__aeabi_dcmpeq>
 8006da8:	b9d8      	cbnz	r0, 8006de2 <_printf_float+0x432>
 8006daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dac:	f108 0201 	add.w	r2, r8, #1
 8006db0:	3b01      	subs	r3, #1
 8006db2:	4631      	mov	r1, r6
 8006db4:	4628      	mov	r0, r5
 8006db6:	47b8      	blx	r7
 8006db8:	3001      	adds	r0, #1
 8006dba:	d10e      	bne.n	8006dda <_printf_float+0x42a>
 8006dbc:	e659      	b.n	8006a72 <_printf_float+0xc2>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	4652      	mov	r2, sl
 8006dc2:	4631      	mov	r1, r6
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	47b8      	blx	r7
 8006dc8:	3001      	adds	r0, #1
 8006dca:	f43f ae52 	beq.w	8006a72 <_printf_float+0xc2>
 8006dce:	f108 0801 	add.w	r8, r8, #1
 8006dd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	4543      	cmp	r3, r8
 8006dd8:	dcf1      	bgt.n	8006dbe <_printf_float+0x40e>
 8006dda:	464b      	mov	r3, r9
 8006ddc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006de0:	e6dc      	b.n	8006b9c <_printf_float+0x1ec>
 8006de2:	f04f 0800 	mov.w	r8, #0
 8006de6:	f104 0a1a 	add.w	sl, r4, #26
 8006dea:	e7f2      	b.n	8006dd2 <_printf_float+0x422>
 8006dec:	2301      	movs	r3, #1
 8006dee:	4642      	mov	r2, r8
 8006df0:	e7df      	b.n	8006db2 <_printf_float+0x402>
 8006df2:	2301      	movs	r3, #1
 8006df4:	464a      	mov	r2, r9
 8006df6:	4631      	mov	r1, r6
 8006df8:	4628      	mov	r0, r5
 8006dfa:	47b8      	blx	r7
 8006dfc:	3001      	adds	r0, #1
 8006dfe:	f43f ae38 	beq.w	8006a72 <_printf_float+0xc2>
 8006e02:	f108 0801 	add.w	r8, r8, #1
 8006e06:	68e3      	ldr	r3, [r4, #12]
 8006e08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e0a:	1a5b      	subs	r3, r3, r1
 8006e0c:	4543      	cmp	r3, r8
 8006e0e:	dcf0      	bgt.n	8006df2 <_printf_float+0x442>
 8006e10:	e6fa      	b.n	8006c08 <_printf_float+0x258>
 8006e12:	f04f 0800 	mov.w	r8, #0
 8006e16:	f104 0919 	add.w	r9, r4, #25
 8006e1a:	e7f4      	b.n	8006e06 <_printf_float+0x456>

08006e1c <_printf_common>:
 8006e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e20:	4616      	mov	r6, r2
 8006e22:	4699      	mov	r9, r3
 8006e24:	688a      	ldr	r2, [r1, #8]
 8006e26:	690b      	ldr	r3, [r1, #16]
 8006e28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	bfb8      	it	lt
 8006e30:	4613      	movlt	r3, r2
 8006e32:	6033      	str	r3, [r6, #0]
 8006e34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e38:	4607      	mov	r7, r0
 8006e3a:	460c      	mov	r4, r1
 8006e3c:	b10a      	cbz	r2, 8006e42 <_printf_common+0x26>
 8006e3e:	3301      	adds	r3, #1
 8006e40:	6033      	str	r3, [r6, #0]
 8006e42:	6823      	ldr	r3, [r4, #0]
 8006e44:	0699      	lsls	r1, r3, #26
 8006e46:	bf42      	ittt	mi
 8006e48:	6833      	ldrmi	r3, [r6, #0]
 8006e4a:	3302      	addmi	r3, #2
 8006e4c:	6033      	strmi	r3, [r6, #0]
 8006e4e:	6825      	ldr	r5, [r4, #0]
 8006e50:	f015 0506 	ands.w	r5, r5, #6
 8006e54:	d106      	bne.n	8006e64 <_printf_common+0x48>
 8006e56:	f104 0a19 	add.w	sl, r4, #25
 8006e5a:	68e3      	ldr	r3, [r4, #12]
 8006e5c:	6832      	ldr	r2, [r6, #0]
 8006e5e:	1a9b      	subs	r3, r3, r2
 8006e60:	42ab      	cmp	r3, r5
 8006e62:	dc26      	bgt.n	8006eb2 <_printf_common+0x96>
 8006e64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e68:	1e13      	subs	r3, r2, #0
 8006e6a:	6822      	ldr	r2, [r4, #0]
 8006e6c:	bf18      	it	ne
 8006e6e:	2301      	movne	r3, #1
 8006e70:	0692      	lsls	r2, r2, #26
 8006e72:	d42b      	bmi.n	8006ecc <_printf_common+0xb0>
 8006e74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e78:	4649      	mov	r1, r9
 8006e7a:	4638      	mov	r0, r7
 8006e7c:	47c0      	blx	r8
 8006e7e:	3001      	adds	r0, #1
 8006e80:	d01e      	beq.n	8006ec0 <_printf_common+0xa4>
 8006e82:	6823      	ldr	r3, [r4, #0]
 8006e84:	68e5      	ldr	r5, [r4, #12]
 8006e86:	6832      	ldr	r2, [r6, #0]
 8006e88:	f003 0306 	and.w	r3, r3, #6
 8006e8c:	2b04      	cmp	r3, #4
 8006e8e:	bf08      	it	eq
 8006e90:	1aad      	subeq	r5, r5, r2
 8006e92:	68a3      	ldr	r3, [r4, #8]
 8006e94:	6922      	ldr	r2, [r4, #16]
 8006e96:	bf0c      	ite	eq
 8006e98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e9c:	2500      	movne	r5, #0
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	bfc4      	itt	gt
 8006ea2:	1a9b      	subgt	r3, r3, r2
 8006ea4:	18ed      	addgt	r5, r5, r3
 8006ea6:	2600      	movs	r6, #0
 8006ea8:	341a      	adds	r4, #26
 8006eaa:	42b5      	cmp	r5, r6
 8006eac:	d11a      	bne.n	8006ee4 <_printf_common+0xc8>
 8006eae:	2000      	movs	r0, #0
 8006eb0:	e008      	b.n	8006ec4 <_printf_common+0xa8>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	4652      	mov	r2, sl
 8006eb6:	4649      	mov	r1, r9
 8006eb8:	4638      	mov	r0, r7
 8006eba:	47c0      	blx	r8
 8006ebc:	3001      	adds	r0, #1
 8006ebe:	d103      	bne.n	8006ec8 <_printf_common+0xac>
 8006ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ec8:	3501      	adds	r5, #1
 8006eca:	e7c6      	b.n	8006e5a <_printf_common+0x3e>
 8006ecc:	18e1      	adds	r1, r4, r3
 8006ece:	1c5a      	adds	r2, r3, #1
 8006ed0:	2030      	movs	r0, #48	; 0x30
 8006ed2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ed6:	4422      	add	r2, r4
 8006ed8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006edc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ee0:	3302      	adds	r3, #2
 8006ee2:	e7c7      	b.n	8006e74 <_printf_common+0x58>
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	4622      	mov	r2, r4
 8006ee8:	4649      	mov	r1, r9
 8006eea:	4638      	mov	r0, r7
 8006eec:	47c0      	blx	r8
 8006eee:	3001      	adds	r0, #1
 8006ef0:	d0e6      	beq.n	8006ec0 <_printf_common+0xa4>
 8006ef2:	3601      	adds	r6, #1
 8006ef4:	e7d9      	b.n	8006eaa <_printf_common+0x8e>
	...

08006ef8 <_printf_i>:
 8006ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006efc:	7e0f      	ldrb	r7, [r1, #24]
 8006efe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f00:	2f78      	cmp	r7, #120	; 0x78
 8006f02:	4691      	mov	r9, r2
 8006f04:	4680      	mov	r8, r0
 8006f06:	460c      	mov	r4, r1
 8006f08:	469a      	mov	sl, r3
 8006f0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f0e:	d807      	bhi.n	8006f20 <_printf_i+0x28>
 8006f10:	2f62      	cmp	r7, #98	; 0x62
 8006f12:	d80a      	bhi.n	8006f2a <_printf_i+0x32>
 8006f14:	2f00      	cmp	r7, #0
 8006f16:	f000 80d8 	beq.w	80070ca <_printf_i+0x1d2>
 8006f1a:	2f58      	cmp	r7, #88	; 0x58
 8006f1c:	f000 80a3 	beq.w	8007066 <_printf_i+0x16e>
 8006f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f28:	e03a      	b.n	8006fa0 <_printf_i+0xa8>
 8006f2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f2e:	2b15      	cmp	r3, #21
 8006f30:	d8f6      	bhi.n	8006f20 <_printf_i+0x28>
 8006f32:	a101      	add	r1, pc, #4	; (adr r1, 8006f38 <_printf_i+0x40>)
 8006f34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f38:	08006f91 	.word	0x08006f91
 8006f3c:	08006fa5 	.word	0x08006fa5
 8006f40:	08006f21 	.word	0x08006f21
 8006f44:	08006f21 	.word	0x08006f21
 8006f48:	08006f21 	.word	0x08006f21
 8006f4c:	08006f21 	.word	0x08006f21
 8006f50:	08006fa5 	.word	0x08006fa5
 8006f54:	08006f21 	.word	0x08006f21
 8006f58:	08006f21 	.word	0x08006f21
 8006f5c:	08006f21 	.word	0x08006f21
 8006f60:	08006f21 	.word	0x08006f21
 8006f64:	080070b1 	.word	0x080070b1
 8006f68:	08006fd5 	.word	0x08006fd5
 8006f6c:	08007093 	.word	0x08007093
 8006f70:	08006f21 	.word	0x08006f21
 8006f74:	08006f21 	.word	0x08006f21
 8006f78:	080070d3 	.word	0x080070d3
 8006f7c:	08006f21 	.word	0x08006f21
 8006f80:	08006fd5 	.word	0x08006fd5
 8006f84:	08006f21 	.word	0x08006f21
 8006f88:	08006f21 	.word	0x08006f21
 8006f8c:	0800709b 	.word	0x0800709b
 8006f90:	682b      	ldr	r3, [r5, #0]
 8006f92:	1d1a      	adds	r2, r3, #4
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	602a      	str	r2, [r5, #0]
 8006f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e0a3      	b.n	80070ec <_printf_i+0x1f4>
 8006fa4:	6820      	ldr	r0, [r4, #0]
 8006fa6:	6829      	ldr	r1, [r5, #0]
 8006fa8:	0606      	lsls	r6, r0, #24
 8006faa:	f101 0304 	add.w	r3, r1, #4
 8006fae:	d50a      	bpl.n	8006fc6 <_printf_i+0xce>
 8006fb0:	680e      	ldr	r6, [r1, #0]
 8006fb2:	602b      	str	r3, [r5, #0]
 8006fb4:	2e00      	cmp	r6, #0
 8006fb6:	da03      	bge.n	8006fc0 <_printf_i+0xc8>
 8006fb8:	232d      	movs	r3, #45	; 0x2d
 8006fba:	4276      	negs	r6, r6
 8006fbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fc0:	485e      	ldr	r0, [pc, #376]	; (800713c <_printf_i+0x244>)
 8006fc2:	230a      	movs	r3, #10
 8006fc4:	e019      	b.n	8006ffa <_printf_i+0x102>
 8006fc6:	680e      	ldr	r6, [r1, #0]
 8006fc8:	602b      	str	r3, [r5, #0]
 8006fca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006fce:	bf18      	it	ne
 8006fd0:	b236      	sxthne	r6, r6
 8006fd2:	e7ef      	b.n	8006fb4 <_printf_i+0xbc>
 8006fd4:	682b      	ldr	r3, [r5, #0]
 8006fd6:	6820      	ldr	r0, [r4, #0]
 8006fd8:	1d19      	adds	r1, r3, #4
 8006fda:	6029      	str	r1, [r5, #0]
 8006fdc:	0601      	lsls	r1, r0, #24
 8006fde:	d501      	bpl.n	8006fe4 <_printf_i+0xec>
 8006fe0:	681e      	ldr	r6, [r3, #0]
 8006fe2:	e002      	b.n	8006fea <_printf_i+0xf2>
 8006fe4:	0646      	lsls	r6, r0, #25
 8006fe6:	d5fb      	bpl.n	8006fe0 <_printf_i+0xe8>
 8006fe8:	881e      	ldrh	r6, [r3, #0]
 8006fea:	4854      	ldr	r0, [pc, #336]	; (800713c <_printf_i+0x244>)
 8006fec:	2f6f      	cmp	r7, #111	; 0x6f
 8006fee:	bf0c      	ite	eq
 8006ff0:	2308      	moveq	r3, #8
 8006ff2:	230a      	movne	r3, #10
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ffa:	6865      	ldr	r5, [r4, #4]
 8006ffc:	60a5      	str	r5, [r4, #8]
 8006ffe:	2d00      	cmp	r5, #0
 8007000:	bfa2      	ittt	ge
 8007002:	6821      	ldrge	r1, [r4, #0]
 8007004:	f021 0104 	bicge.w	r1, r1, #4
 8007008:	6021      	strge	r1, [r4, #0]
 800700a:	b90e      	cbnz	r6, 8007010 <_printf_i+0x118>
 800700c:	2d00      	cmp	r5, #0
 800700e:	d04d      	beq.n	80070ac <_printf_i+0x1b4>
 8007010:	4615      	mov	r5, r2
 8007012:	fbb6 f1f3 	udiv	r1, r6, r3
 8007016:	fb03 6711 	mls	r7, r3, r1, r6
 800701a:	5dc7      	ldrb	r7, [r0, r7]
 800701c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007020:	4637      	mov	r7, r6
 8007022:	42bb      	cmp	r3, r7
 8007024:	460e      	mov	r6, r1
 8007026:	d9f4      	bls.n	8007012 <_printf_i+0x11a>
 8007028:	2b08      	cmp	r3, #8
 800702a:	d10b      	bne.n	8007044 <_printf_i+0x14c>
 800702c:	6823      	ldr	r3, [r4, #0]
 800702e:	07de      	lsls	r6, r3, #31
 8007030:	d508      	bpl.n	8007044 <_printf_i+0x14c>
 8007032:	6923      	ldr	r3, [r4, #16]
 8007034:	6861      	ldr	r1, [r4, #4]
 8007036:	4299      	cmp	r1, r3
 8007038:	bfde      	ittt	le
 800703a:	2330      	movle	r3, #48	; 0x30
 800703c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007040:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007044:	1b52      	subs	r2, r2, r5
 8007046:	6122      	str	r2, [r4, #16]
 8007048:	f8cd a000 	str.w	sl, [sp]
 800704c:	464b      	mov	r3, r9
 800704e:	aa03      	add	r2, sp, #12
 8007050:	4621      	mov	r1, r4
 8007052:	4640      	mov	r0, r8
 8007054:	f7ff fee2 	bl	8006e1c <_printf_common>
 8007058:	3001      	adds	r0, #1
 800705a:	d14c      	bne.n	80070f6 <_printf_i+0x1fe>
 800705c:	f04f 30ff 	mov.w	r0, #4294967295
 8007060:	b004      	add	sp, #16
 8007062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007066:	4835      	ldr	r0, [pc, #212]	; (800713c <_printf_i+0x244>)
 8007068:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800706c:	6829      	ldr	r1, [r5, #0]
 800706e:	6823      	ldr	r3, [r4, #0]
 8007070:	f851 6b04 	ldr.w	r6, [r1], #4
 8007074:	6029      	str	r1, [r5, #0]
 8007076:	061d      	lsls	r5, r3, #24
 8007078:	d514      	bpl.n	80070a4 <_printf_i+0x1ac>
 800707a:	07df      	lsls	r7, r3, #31
 800707c:	bf44      	itt	mi
 800707e:	f043 0320 	orrmi.w	r3, r3, #32
 8007082:	6023      	strmi	r3, [r4, #0]
 8007084:	b91e      	cbnz	r6, 800708e <_printf_i+0x196>
 8007086:	6823      	ldr	r3, [r4, #0]
 8007088:	f023 0320 	bic.w	r3, r3, #32
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	2310      	movs	r3, #16
 8007090:	e7b0      	b.n	8006ff4 <_printf_i+0xfc>
 8007092:	6823      	ldr	r3, [r4, #0]
 8007094:	f043 0320 	orr.w	r3, r3, #32
 8007098:	6023      	str	r3, [r4, #0]
 800709a:	2378      	movs	r3, #120	; 0x78
 800709c:	4828      	ldr	r0, [pc, #160]	; (8007140 <_printf_i+0x248>)
 800709e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070a2:	e7e3      	b.n	800706c <_printf_i+0x174>
 80070a4:	0659      	lsls	r1, r3, #25
 80070a6:	bf48      	it	mi
 80070a8:	b2b6      	uxthmi	r6, r6
 80070aa:	e7e6      	b.n	800707a <_printf_i+0x182>
 80070ac:	4615      	mov	r5, r2
 80070ae:	e7bb      	b.n	8007028 <_printf_i+0x130>
 80070b0:	682b      	ldr	r3, [r5, #0]
 80070b2:	6826      	ldr	r6, [r4, #0]
 80070b4:	6961      	ldr	r1, [r4, #20]
 80070b6:	1d18      	adds	r0, r3, #4
 80070b8:	6028      	str	r0, [r5, #0]
 80070ba:	0635      	lsls	r5, r6, #24
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	d501      	bpl.n	80070c4 <_printf_i+0x1cc>
 80070c0:	6019      	str	r1, [r3, #0]
 80070c2:	e002      	b.n	80070ca <_printf_i+0x1d2>
 80070c4:	0670      	lsls	r0, r6, #25
 80070c6:	d5fb      	bpl.n	80070c0 <_printf_i+0x1c8>
 80070c8:	8019      	strh	r1, [r3, #0]
 80070ca:	2300      	movs	r3, #0
 80070cc:	6123      	str	r3, [r4, #16]
 80070ce:	4615      	mov	r5, r2
 80070d0:	e7ba      	b.n	8007048 <_printf_i+0x150>
 80070d2:	682b      	ldr	r3, [r5, #0]
 80070d4:	1d1a      	adds	r2, r3, #4
 80070d6:	602a      	str	r2, [r5, #0]
 80070d8:	681d      	ldr	r5, [r3, #0]
 80070da:	6862      	ldr	r2, [r4, #4]
 80070dc:	2100      	movs	r1, #0
 80070de:	4628      	mov	r0, r5
 80070e0:	f7f9 f886 	bl	80001f0 <memchr>
 80070e4:	b108      	cbz	r0, 80070ea <_printf_i+0x1f2>
 80070e6:	1b40      	subs	r0, r0, r5
 80070e8:	6060      	str	r0, [r4, #4]
 80070ea:	6863      	ldr	r3, [r4, #4]
 80070ec:	6123      	str	r3, [r4, #16]
 80070ee:	2300      	movs	r3, #0
 80070f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070f4:	e7a8      	b.n	8007048 <_printf_i+0x150>
 80070f6:	6923      	ldr	r3, [r4, #16]
 80070f8:	462a      	mov	r2, r5
 80070fa:	4649      	mov	r1, r9
 80070fc:	4640      	mov	r0, r8
 80070fe:	47d0      	blx	sl
 8007100:	3001      	adds	r0, #1
 8007102:	d0ab      	beq.n	800705c <_printf_i+0x164>
 8007104:	6823      	ldr	r3, [r4, #0]
 8007106:	079b      	lsls	r3, r3, #30
 8007108:	d413      	bmi.n	8007132 <_printf_i+0x23a>
 800710a:	68e0      	ldr	r0, [r4, #12]
 800710c:	9b03      	ldr	r3, [sp, #12]
 800710e:	4298      	cmp	r0, r3
 8007110:	bfb8      	it	lt
 8007112:	4618      	movlt	r0, r3
 8007114:	e7a4      	b.n	8007060 <_printf_i+0x168>
 8007116:	2301      	movs	r3, #1
 8007118:	4632      	mov	r2, r6
 800711a:	4649      	mov	r1, r9
 800711c:	4640      	mov	r0, r8
 800711e:	47d0      	blx	sl
 8007120:	3001      	adds	r0, #1
 8007122:	d09b      	beq.n	800705c <_printf_i+0x164>
 8007124:	3501      	adds	r5, #1
 8007126:	68e3      	ldr	r3, [r4, #12]
 8007128:	9903      	ldr	r1, [sp, #12]
 800712a:	1a5b      	subs	r3, r3, r1
 800712c:	42ab      	cmp	r3, r5
 800712e:	dcf2      	bgt.n	8007116 <_printf_i+0x21e>
 8007130:	e7eb      	b.n	800710a <_printf_i+0x212>
 8007132:	2500      	movs	r5, #0
 8007134:	f104 0619 	add.w	r6, r4, #25
 8007138:	e7f5      	b.n	8007126 <_printf_i+0x22e>
 800713a:	bf00      	nop
 800713c:	0800c75e 	.word	0x0800c75e
 8007140:	0800c76f 	.word	0x0800c76f

08007144 <_scanf_float>:
 8007144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007148:	b087      	sub	sp, #28
 800714a:	4617      	mov	r7, r2
 800714c:	9303      	str	r3, [sp, #12]
 800714e:	688b      	ldr	r3, [r1, #8]
 8007150:	1e5a      	subs	r2, r3, #1
 8007152:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007156:	bf83      	ittte	hi
 8007158:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800715c:	195b      	addhi	r3, r3, r5
 800715e:	9302      	strhi	r3, [sp, #8]
 8007160:	2300      	movls	r3, #0
 8007162:	bf86      	itte	hi
 8007164:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007168:	608b      	strhi	r3, [r1, #8]
 800716a:	9302      	strls	r3, [sp, #8]
 800716c:	680b      	ldr	r3, [r1, #0]
 800716e:	468b      	mov	fp, r1
 8007170:	2500      	movs	r5, #0
 8007172:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007176:	f84b 3b1c 	str.w	r3, [fp], #28
 800717a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800717e:	4680      	mov	r8, r0
 8007180:	460c      	mov	r4, r1
 8007182:	465e      	mov	r6, fp
 8007184:	46aa      	mov	sl, r5
 8007186:	46a9      	mov	r9, r5
 8007188:	9501      	str	r5, [sp, #4]
 800718a:	68a2      	ldr	r2, [r4, #8]
 800718c:	b152      	cbz	r2, 80071a4 <_scanf_float+0x60>
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	2b4e      	cmp	r3, #78	; 0x4e
 8007194:	d864      	bhi.n	8007260 <_scanf_float+0x11c>
 8007196:	2b40      	cmp	r3, #64	; 0x40
 8007198:	d83c      	bhi.n	8007214 <_scanf_float+0xd0>
 800719a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800719e:	b2c8      	uxtb	r0, r1
 80071a0:	280e      	cmp	r0, #14
 80071a2:	d93a      	bls.n	800721a <_scanf_float+0xd6>
 80071a4:	f1b9 0f00 	cmp.w	r9, #0
 80071a8:	d003      	beq.n	80071b2 <_scanf_float+0x6e>
 80071aa:	6823      	ldr	r3, [r4, #0]
 80071ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071b0:	6023      	str	r3, [r4, #0]
 80071b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80071b6:	f1ba 0f01 	cmp.w	sl, #1
 80071ba:	f200 8113 	bhi.w	80073e4 <_scanf_float+0x2a0>
 80071be:	455e      	cmp	r6, fp
 80071c0:	f200 8105 	bhi.w	80073ce <_scanf_float+0x28a>
 80071c4:	2501      	movs	r5, #1
 80071c6:	4628      	mov	r0, r5
 80071c8:	b007      	add	sp, #28
 80071ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80071d2:	2a0d      	cmp	r2, #13
 80071d4:	d8e6      	bhi.n	80071a4 <_scanf_float+0x60>
 80071d6:	a101      	add	r1, pc, #4	; (adr r1, 80071dc <_scanf_float+0x98>)
 80071d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80071dc:	0800731b 	.word	0x0800731b
 80071e0:	080071a5 	.word	0x080071a5
 80071e4:	080071a5 	.word	0x080071a5
 80071e8:	080071a5 	.word	0x080071a5
 80071ec:	0800737b 	.word	0x0800737b
 80071f0:	08007353 	.word	0x08007353
 80071f4:	080071a5 	.word	0x080071a5
 80071f8:	080071a5 	.word	0x080071a5
 80071fc:	08007329 	.word	0x08007329
 8007200:	080071a5 	.word	0x080071a5
 8007204:	080071a5 	.word	0x080071a5
 8007208:	080071a5 	.word	0x080071a5
 800720c:	080071a5 	.word	0x080071a5
 8007210:	080072e1 	.word	0x080072e1
 8007214:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007218:	e7db      	b.n	80071d2 <_scanf_float+0x8e>
 800721a:	290e      	cmp	r1, #14
 800721c:	d8c2      	bhi.n	80071a4 <_scanf_float+0x60>
 800721e:	a001      	add	r0, pc, #4	; (adr r0, 8007224 <_scanf_float+0xe0>)
 8007220:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007224:	080072d3 	.word	0x080072d3
 8007228:	080071a5 	.word	0x080071a5
 800722c:	080072d3 	.word	0x080072d3
 8007230:	08007367 	.word	0x08007367
 8007234:	080071a5 	.word	0x080071a5
 8007238:	08007281 	.word	0x08007281
 800723c:	080072bd 	.word	0x080072bd
 8007240:	080072bd 	.word	0x080072bd
 8007244:	080072bd 	.word	0x080072bd
 8007248:	080072bd 	.word	0x080072bd
 800724c:	080072bd 	.word	0x080072bd
 8007250:	080072bd 	.word	0x080072bd
 8007254:	080072bd 	.word	0x080072bd
 8007258:	080072bd 	.word	0x080072bd
 800725c:	080072bd 	.word	0x080072bd
 8007260:	2b6e      	cmp	r3, #110	; 0x6e
 8007262:	d809      	bhi.n	8007278 <_scanf_float+0x134>
 8007264:	2b60      	cmp	r3, #96	; 0x60
 8007266:	d8b2      	bhi.n	80071ce <_scanf_float+0x8a>
 8007268:	2b54      	cmp	r3, #84	; 0x54
 800726a:	d077      	beq.n	800735c <_scanf_float+0x218>
 800726c:	2b59      	cmp	r3, #89	; 0x59
 800726e:	d199      	bne.n	80071a4 <_scanf_float+0x60>
 8007270:	2d07      	cmp	r5, #7
 8007272:	d197      	bne.n	80071a4 <_scanf_float+0x60>
 8007274:	2508      	movs	r5, #8
 8007276:	e029      	b.n	80072cc <_scanf_float+0x188>
 8007278:	2b74      	cmp	r3, #116	; 0x74
 800727a:	d06f      	beq.n	800735c <_scanf_float+0x218>
 800727c:	2b79      	cmp	r3, #121	; 0x79
 800727e:	e7f6      	b.n	800726e <_scanf_float+0x12a>
 8007280:	6821      	ldr	r1, [r4, #0]
 8007282:	05c8      	lsls	r0, r1, #23
 8007284:	d51a      	bpl.n	80072bc <_scanf_float+0x178>
 8007286:	9b02      	ldr	r3, [sp, #8]
 8007288:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800728c:	6021      	str	r1, [r4, #0]
 800728e:	f109 0901 	add.w	r9, r9, #1
 8007292:	b11b      	cbz	r3, 800729c <_scanf_float+0x158>
 8007294:	3b01      	subs	r3, #1
 8007296:	3201      	adds	r2, #1
 8007298:	9302      	str	r3, [sp, #8]
 800729a:	60a2      	str	r2, [r4, #8]
 800729c:	68a3      	ldr	r3, [r4, #8]
 800729e:	3b01      	subs	r3, #1
 80072a0:	60a3      	str	r3, [r4, #8]
 80072a2:	6923      	ldr	r3, [r4, #16]
 80072a4:	3301      	adds	r3, #1
 80072a6:	6123      	str	r3, [r4, #16]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	3b01      	subs	r3, #1
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	607b      	str	r3, [r7, #4]
 80072b0:	f340 8084 	ble.w	80073bc <_scanf_float+0x278>
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	3301      	adds	r3, #1
 80072b8:	603b      	str	r3, [r7, #0]
 80072ba:	e766      	b.n	800718a <_scanf_float+0x46>
 80072bc:	eb1a 0f05 	cmn.w	sl, r5
 80072c0:	f47f af70 	bne.w	80071a4 <_scanf_float+0x60>
 80072c4:	6822      	ldr	r2, [r4, #0]
 80072c6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80072ca:	6022      	str	r2, [r4, #0]
 80072cc:	f806 3b01 	strb.w	r3, [r6], #1
 80072d0:	e7e4      	b.n	800729c <_scanf_float+0x158>
 80072d2:	6822      	ldr	r2, [r4, #0]
 80072d4:	0610      	lsls	r0, r2, #24
 80072d6:	f57f af65 	bpl.w	80071a4 <_scanf_float+0x60>
 80072da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072de:	e7f4      	b.n	80072ca <_scanf_float+0x186>
 80072e0:	f1ba 0f00 	cmp.w	sl, #0
 80072e4:	d10e      	bne.n	8007304 <_scanf_float+0x1c0>
 80072e6:	f1b9 0f00 	cmp.w	r9, #0
 80072ea:	d10e      	bne.n	800730a <_scanf_float+0x1c6>
 80072ec:	6822      	ldr	r2, [r4, #0]
 80072ee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80072f2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80072f6:	d108      	bne.n	800730a <_scanf_float+0x1c6>
 80072f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80072fc:	6022      	str	r2, [r4, #0]
 80072fe:	f04f 0a01 	mov.w	sl, #1
 8007302:	e7e3      	b.n	80072cc <_scanf_float+0x188>
 8007304:	f1ba 0f02 	cmp.w	sl, #2
 8007308:	d055      	beq.n	80073b6 <_scanf_float+0x272>
 800730a:	2d01      	cmp	r5, #1
 800730c:	d002      	beq.n	8007314 <_scanf_float+0x1d0>
 800730e:	2d04      	cmp	r5, #4
 8007310:	f47f af48 	bne.w	80071a4 <_scanf_float+0x60>
 8007314:	3501      	adds	r5, #1
 8007316:	b2ed      	uxtb	r5, r5
 8007318:	e7d8      	b.n	80072cc <_scanf_float+0x188>
 800731a:	f1ba 0f01 	cmp.w	sl, #1
 800731e:	f47f af41 	bne.w	80071a4 <_scanf_float+0x60>
 8007322:	f04f 0a02 	mov.w	sl, #2
 8007326:	e7d1      	b.n	80072cc <_scanf_float+0x188>
 8007328:	b97d      	cbnz	r5, 800734a <_scanf_float+0x206>
 800732a:	f1b9 0f00 	cmp.w	r9, #0
 800732e:	f47f af3c 	bne.w	80071aa <_scanf_float+0x66>
 8007332:	6822      	ldr	r2, [r4, #0]
 8007334:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007338:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800733c:	f47f af39 	bne.w	80071b2 <_scanf_float+0x6e>
 8007340:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007344:	6022      	str	r2, [r4, #0]
 8007346:	2501      	movs	r5, #1
 8007348:	e7c0      	b.n	80072cc <_scanf_float+0x188>
 800734a:	2d03      	cmp	r5, #3
 800734c:	d0e2      	beq.n	8007314 <_scanf_float+0x1d0>
 800734e:	2d05      	cmp	r5, #5
 8007350:	e7de      	b.n	8007310 <_scanf_float+0x1cc>
 8007352:	2d02      	cmp	r5, #2
 8007354:	f47f af26 	bne.w	80071a4 <_scanf_float+0x60>
 8007358:	2503      	movs	r5, #3
 800735a:	e7b7      	b.n	80072cc <_scanf_float+0x188>
 800735c:	2d06      	cmp	r5, #6
 800735e:	f47f af21 	bne.w	80071a4 <_scanf_float+0x60>
 8007362:	2507      	movs	r5, #7
 8007364:	e7b2      	b.n	80072cc <_scanf_float+0x188>
 8007366:	6822      	ldr	r2, [r4, #0]
 8007368:	0591      	lsls	r1, r2, #22
 800736a:	f57f af1b 	bpl.w	80071a4 <_scanf_float+0x60>
 800736e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007372:	6022      	str	r2, [r4, #0]
 8007374:	f8cd 9004 	str.w	r9, [sp, #4]
 8007378:	e7a8      	b.n	80072cc <_scanf_float+0x188>
 800737a:	6822      	ldr	r2, [r4, #0]
 800737c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007380:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007384:	d006      	beq.n	8007394 <_scanf_float+0x250>
 8007386:	0550      	lsls	r0, r2, #21
 8007388:	f57f af0c 	bpl.w	80071a4 <_scanf_float+0x60>
 800738c:	f1b9 0f00 	cmp.w	r9, #0
 8007390:	f43f af0f 	beq.w	80071b2 <_scanf_float+0x6e>
 8007394:	0591      	lsls	r1, r2, #22
 8007396:	bf58      	it	pl
 8007398:	9901      	ldrpl	r1, [sp, #4]
 800739a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800739e:	bf58      	it	pl
 80073a0:	eba9 0101 	subpl.w	r1, r9, r1
 80073a4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80073a8:	bf58      	it	pl
 80073aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80073ae:	6022      	str	r2, [r4, #0]
 80073b0:	f04f 0900 	mov.w	r9, #0
 80073b4:	e78a      	b.n	80072cc <_scanf_float+0x188>
 80073b6:	f04f 0a03 	mov.w	sl, #3
 80073ba:	e787      	b.n	80072cc <_scanf_float+0x188>
 80073bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80073c0:	4639      	mov	r1, r7
 80073c2:	4640      	mov	r0, r8
 80073c4:	4798      	blx	r3
 80073c6:	2800      	cmp	r0, #0
 80073c8:	f43f aedf 	beq.w	800718a <_scanf_float+0x46>
 80073cc:	e6ea      	b.n	80071a4 <_scanf_float+0x60>
 80073ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80073d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80073d6:	463a      	mov	r2, r7
 80073d8:	4640      	mov	r0, r8
 80073da:	4798      	blx	r3
 80073dc:	6923      	ldr	r3, [r4, #16]
 80073de:	3b01      	subs	r3, #1
 80073e0:	6123      	str	r3, [r4, #16]
 80073e2:	e6ec      	b.n	80071be <_scanf_float+0x7a>
 80073e4:	1e6b      	subs	r3, r5, #1
 80073e6:	2b06      	cmp	r3, #6
 80073e8:	d825      	bhi.n	8007436 <_scanf_float+0x2f2>
 80073ea:	2d02      	cmp	r5, #2
 80073ec:	d836      	bhi.n	800745c <_scanf_float+0x318>
 80073ee:	455e      	cmp	r6, fp
 80073f0:	f67f aee8 	bls.w	80071c4 <_scanf_float+0x80>
 80073f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80073f8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80073fc:	463a      	mov	r2, r7
 80073fe:	4640      	mov	r0, r8
 8007400:	4798      	blx	r3
 8007402:	6923      	ldr	r3, [r4, #16]
 8007404:	3b01      	subs	r3, #1
 8007406:	6123      	str	r3, [r4, #16]
 8007408:	e7f1      	b.n	80073ee <_scanf_float+0x2aa>
 800740a:	9802      	ldr	r0, [sp, #8]
 800740c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007410:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007414:	9002      	str	r0, [sp, #8]
 8007416:	463a      	mov	r2, r7
 8007418:	4640      	mov	r0, r8
 800741a:	4798      	blx	r3
 800741c:	6923      	ldr	r3, [r4, #16]
 800741e:	3b01      	subs	r3, #1
 8007420:	6123      	str	r3, [r4, #16]
 8007422:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007426:	fa5f fa8a 	uxtb.w	sl, sl
 800742a:	f1ba 0f02 	cmp.w	sl, #2
 800742e:	d1ec      	bne.n	800740a <_scanf_float+0x2c6>
 8007430:	3d03      	subs	r5, #3
 8007432:	b2ed      	uxtb	r5, r5
 8007434:	1b76      	subs	r6, r6, r5
 8007436:	6823      	ldr	r3, [r4, #0]
 8007438:	05da      	lsls	r2, r3, #23
 800743a:	d52f      	bpl.n	800749c <_scanf_float+0x358>
 800743c:	055b      	lsls	r3, r3, #21
 800743e:	d510      	bpl.n	8007462 <_scanf_float+0x31e>
 8007440:	455e      	cmp	r6, fp
 8007442:	f67f aebf 	bls.w	80071c4 <_scanf_float+0x80>
 8007446:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800744a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800744e:	463a      	mov	r2, r7
 8007450:	4640      	mov	r0, r8
 8007452:	4798      	blx	r3
 8007454:	6923      	ldr	r3, [r4, #16]
 8007456:	3b01      	subs	r3, #1
 8007458:	6123      	str	r3, [r4, #16]
 800745a:	e7f1      	b.n	8007440 <_scanf_float+0x2fc>
 800745c:	46aa      	mov	sl, r5
 800745e:	9602      	str	r6, [sp, #8]
 8007460:	e7df      	b.n	8007422 <_scanf_float+0x2de>
 8007462:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007466:	6923      	ldr	r3, [r4, #16]
 8007468:	2965      	cmp	r1, #101	; 0x65
 800746a:	f103 33ff 	add.w	r3, r3, #4294967295
 800746e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007472:	6123      	str	r3, [r4, #16]
 8007474:	d00c      	beq.n	8007490 <_scanf_float+0x34c>
 8007476:	2945      	cmp	r1, #69	; 0x45
 8007478:	d00a      	beq.n	8007490 <_scanf_float+0x34c>
 800747a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800747e:	463a      	mov	r2, r7
 8007480:	4640      	mov	r0, r8
 8007482:	4798      	blx	r3
 8007484:	6923      	ldr	r3, [r4, #16]
 8007486:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800748a:	3b01      	subs	r3, #1
 800748c:	1eb5      	subs	r5, r6, #2
 800748e:	6123      	str	r3, [r4, #16]
 8007490:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007494:	463a      	mov	r2, r7
 8007496:	4640      	mov	r0, r8
 8007498:	4798      	blx	r3
 800749a:	462e      	mov	r6, r5
 800749c:	6825      	ldr	r5, [r4, #0]
 800749e:	f015 0510 	ands.w	r5, r5, #16
 80074a2:	d159      	bne.n	8007558 <_scanf_float+0x414>
 80074a4:	7035      	strb	r5, [r6, #0]
 80074a6:	6823      	ldr	r3, [r4, #0]
 80074a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80074ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074b0:	d11b      	bne.n	80074ea <_scanf_float+0x3a6>
 80074b2:	9b01      	ldr	r3, [sp, #4]
 80074b4:	454b      	cmp	r3, r9
 80074b6:	eba3 0209 	sub.w	r2, r3, r9
 80074ba:	d123      	bne.n	8007504 <_scanf_float+0x3c0>
 80074bc:	2200      	movs	r2, #0
 80074be:	4659      	mov	r1, fp
 80074c0:	4640      	mov	r0, r8
 80074c2:	f000 fe97 	bl	80081f4 <_strtod_r>
 80074c6:	6822      	ldr	r2, [r4, #0]
 80074c8:	9b03      	ldr	r3, [sp, #12]
 80074ca:	f012 0f02 	tst.w	r2, #2
 80074ce:	ec57 6b10 	vmov	r6, r7, d0
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	d021      	beq.n	800751a <_scanf_float+0x3d6>
 80074d6:	9903      	ldr	r1, [sp, #12]
 80074d8:	1d1a      	adds	r2, r3, #4
 80074da:	600a      	str	r2, [r1, #0]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	e9c3 6700 	strd	r6, r7, [r3]
 80074e2:	68e3      	ldr	r3, [r4, #12]
 80074e4:	3301      	adds	r3, #1
 80074e6:	60e3      	str	r3, [r4, #12]
 80074e8:	e66d      	b.n	80071c6 <_scanf_float+0x82>
 80074ea:	9b04      	ldr	r3, [sp, #16]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d0e5      	beq.n	80074bc <_scanf_float+0x378>
 80074f0:	9905      	ldr	r1, [sp, #20]
 80074f2:	230a      	movs	r3, #10
 80074f4:	462a      	mov	r2, r5
 80074f6:	3101      	adds	r1, #1
 80074f8:	4640      	mov	r0, r8
 80074fa:	f000 ff03 	bl	8008304 <_strtol_r>
 80074fe:	9b04      	ldr	r3, [sp, #16]
 8007500:	9e05      	ldr	r6, [sp, #20]
 8007502:	1ac2      	subs	r2, r0, r3
 8007504:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007508:	429e      	cmp	r6, r3
 800750a:	bf28      	it	cs
 800750c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007510:	4912      	ldr	r1, [pc, #72]	; (800755c <_scanf_float+0x418>)
 8007512:	4630      	mov	r0, r6
 8007514:	f000 f82c 	bl	8007570 <siprintf>
 8007518:	e7d0      	b.n	80074bc <_scanf_float+0x378>
 800751a:	9903      	ldr	r1, [sp, #12]
 800751c:	f012 0f04 	tst.w	r2, #4
 8007520:	f103 0204 	add.w	r2, r3, #4
 8007524:	600a      	str	r2, [r1, #0]
 8007526:	d1d9      	bne.n	80074dc <_scanf_float+0x398>
 8007528:	f8d3 8000 	ldr.w	r8, [r3]
 800752c:	ee10 2a10 	vmov	r2, s0
 8007530:	ee10 0a10 	vmov	r0, s0
 8007534:	463b      	mov	r3, r7
 8007536:	4639      	mov	r1, r7
 8007538:	f7f9 fb00 	bl	8000b3c <__aeabi_dcmpun>
 800753c:	b128      	cbz	r0, 800754a <_scanf_float+0x406>
 800753e:	4808      	ldr	r0, [pc, #32]	; (8007560 <_scanf_float+0x41c>)
 8007540:	f000 f810 	bl	8007564 <nanf>
 8007544:	ed88 0a00 	vstr	s0, [r8]
 8007548:	e7cb      	b.n	80074e2 <_scanf_float+0x39e>
 800754a:	4630      	mov	r0, r6
 800754c:	4639      	mov	r1, r7
 800754e:	f7f9 fb53 	bl	8000bf8 <__aeabi_d2f>
 8007552:	f8c8 0000 	str.w	r0, [r8]
 8007556:	e7c4      	b.n	80074e2 <_scanf_float+0x39e>
 8007558:	2500      	movs	r5, #0
 800755a:	e634      	b.n	80071c6 <_scanf_float+0x82>
 800755c:	0800c780 	.word	0x0800c780
 8007560:	0800cb88 	.word	0x0800cb88

08007564 <nanf>:
 8007564:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800756c <nanf+0x8>
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	7fc00000 	.word	0x7fc00000

08007570 <siprintf>:
 8007570:	b40e      	push	{r1, r2, r3}
 8007572:	b500      	push	{lr}
 8007574:	b09c      	sub	sp, #112	; 0x70
 8007576:	ab1d      	add	r3, sp, #116	; 0x74
 8007578:	9002      	str	r0, [sp, #8]
 800757a:	9006      	str	r0, [sp, #24]
 800757c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007580:	4809      	ldr	r0, [pc, #36]	; (80075a8 <siprintf+0x38>)
 8007582:	9107      	str	r1, [sp, #28]
 8007584:	9104      	str	r1, [sp, #16]
 8007586:	4909      	ldr	r1, [pc, #36]	; (80075ac <siprintf+0x3c>)
 8007588:	f853 2b04 	ldr.w	r2, [r3], #4
 800758c:	9105      	str	r1, [sp, #20]
 800758e:	6800      	ldr	r0, [r0, #0]
 8007590:	9301      	str	r3, [sp, #4]
 8007592:	a902      	add	r1, sp, #8
 8007594:	f002 fee2 	bl	800a35c <_svfiprintf_r>
 8007598:	9b02      	ldr	r3, [sp, #8]
 800759a:	2200      	movs	r2, #0
 800759c:	701a      	strb	r2, [r3, #0]
 800759e:	b01c      	add	sp, #112	; 0x70
 80075a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80075a4:	b003      	add	sp, #12
 80075a6:	4770      	bx	lr
 80075a8:	20000074 	.word	0x20000074
 80075ac:	ffff0208 	.word	0xffff0208

080075b0 <sulp>:
 80075b0:	b570      	push	{r4, r5, r6, lr}
 80075b2:	4604      	mov	r4, r0
 80075b4:	460d      	mov	r5, r1
 80075b6:	ec45 4b10 	vmov	d0, r4, r5
 80075ba:	4616      	mov	r6, r2
 80075bc:	f002 fc2c 	bl	8009e18 <__ulp>
 80075c0:	ec51 0b10 	vmov	r0, r1, d0
 80075c4:	b17e      	cbz	r6, 80075e6 <sulp+0x36>
 80075c6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80075ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	dd09      	ble.n	80075e6 <sulp+0x36>
 80075d2:	051b      	lsls	r3, r3, #20
 80075d4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80075d8:	2400      	movs	r4, #0
 80075da:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80075de:	4622      	mov	r2, r4
 80075e0:	462b      	mov	r3, r5
 80075e2:	f7f9 f811 	bl	8000608 <__aeabi_dmul>
 80075e6:	bd70      	pop	{r4, r5, r6, pc}

080075e8 <_strtod_l>:
 80075e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ec:	ed2d 8b02 	vpush	{d8}
 80075f0:	b09d      	sub	sp, #116	; 0x74
 80075f2:	461f      	mov	r7, r3
 80075f4:	2300      	movs	r3, #0
 80075f6:	9318      	str	r3, [sp, #96]	; 0x60
 80075f8:	4ba2      	ldr	r3, [pc, #648]	; (8007884 <_strtod_l+0x29c>)
 80075fa:	9213      	str	r2, [sp, #76]	; 0x4c
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	9305      	str	r3, [sp, #20]
 8007600:	4604      	mov	r4, r0
 8007602:	4618      	mov	r0, r3
 8007604:	4688      	mov	r8, r1
 8007606:	f7f8 fdeb 	bl	80001e0 <strlen>
 800760a:	f04f 0a00 	mov.w	sl, #0
 800760e:	4605      	mov	r5, r0
 8007610:	f04f 0b00 	mov.w	fp, #0
 8007614:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007618:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800761a:	781a      	ldrb	r2, [r3, #0]
 800761c:	2a2b      	cmp	r2, #43	; 0x2b
 800761e:	d04e      	beq.n	80076be <_strtod_l+0xd6>
 8007620:	d83b      	bhi.n	800769a <_strtod_l+0xb2>
 8007622:	2a0d      	cmp	r2, #13
 8007624:	d834      	bhi.n	8007690 <_strtod_l+0xa8>
 8007626:	2a08      	cmp	r2, #8
 8007628:	d834      	bhi.n	8007694 <_strtod_l+0xac>
 800762a:	2a00      	cmp	r2, #0
 800762c:	d03e      	beq.n	80076ac <_strtod_l+0xc4>
 800762e:	2300      	movs	r3, #0
 8007630:	930a      	str	r3, [sp, #40]	; 0x28
 8007632:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007634:	7833      	ldrb	r3, [r6, #0]
 8007636:	2b30      	cmp	r3, #48	; 0x30
 8007638:	f040 80b0 	bne.w	800779c <_strtod_l+0x1b4>
 800763c:	7873      	ldrb	r3, [r6, #1]
 800763e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007642:	2b58      	cmp	r3, #88	; 0x58
 8007644:	d168      	bne.n	8007718 <_strtod_l+0x130>
 8007646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007648:	9301      	str	r3, [sp, #4]
 800764a:	ab18      	add	r3, sp, #96	; 0x60
 800764c:	9702      	str	r7, [sp, #8]
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	4a8d      	ldr	r2, [pc, #564]	; (8007888 <_strtod_l+0x2a0>)
 8007652:	ab19      	add	r3, sp, #100	; 0x64
 8007654:	a917      	add	r1, sp, #92	; 0x5c
 8007656:	4620      	mov	r0, r4
 8007658:	f001 fd38 	bl	80090cc <__gethex>
 800765c:	f010 0707 	ands.w	r7, r0, #7
 8007660:	4605      	mov	r5, r0
 8007662:	d005      	beq.n	8007670 <_strtod_l+0x88>
 8007664:	2f06      	cmp	r7, #6
 8007666:	d12c      	bne.n	80076c2 <_strtod_l+0xda>
 8007668:	3601      	adds	r6, #1
 800766a:	2300      	movs	r3, #0
 800766c:	9617      	str	r6, [sp, #92]	; 0x5c
 800766e:	930a      	str	r3, [sp, #40]	; 0x28
 8007670:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007672:	2b00      	cmp	r3, #0
 8007674:	f040 8590 	bne.w	8008198 <_strtod_l+0xbb0>
 8007678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800767a:	b1eb      	cbz	r3, 80076b8 <_strtod_l+0xd0>
 800767c:	4652      	mov	r2, sl
 800767e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007682:	ec43 2b10 	vmov	d0, r2, r3
 8007686:	b01d      	add	sp, #116	; 0x74
 8007688:	ecbd 8b02 	vpop	{d8}
 800768c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007690:	2a20      	cmp	r2, #32
 8007692:	d1cc      	bne.n	800762e <_strtod_l+0x46>
 8007694:	3301      	adds	r3, #1
 8007696:	9317      	str	r3, [sp, #92]	; 0x5c
 8007698:	e7be      	b.n	8007618 <_strtod_l+0x30>
 800769a:	2a2d      	cmp	r2, #45	; 0x2d
 800769c:	d1c7      	bne.n	800762e <_strtod_l+0x46>
 800769e:	2201      	movs	r2, #1
 80076a0:	920a      	str	r2, [sp, #40]	; 0x28
 80076a2:	1c5a      	adds	r2, r3, #1
 80076a4:	9217      	str	r2, [sp, #92]	; 0x5c
 80076a6:	785b      	ldrb	r3, [r3, #1]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1c2      	bne.n	8007632 <_strtod_l+0x4a>
 80076ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80076ae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f040 856e 	bne.w	8008194 <_strtod_l+0xbac>
 80076b8:	4652      	mov	r2, sl
 80076ba:	465b      	mov	r3, fp
 80076bc:	e7e1      	b.n	8007682 <_strtod_l+0x9a>
 80076be:	2200      	movs	r2, #0
 80076c0:	e7ee      	b.n	80076a0 <_strtod_l+0xb8>
 80076c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80076c4:	b13a      	cbz	r2, 80076d6 <_strtod_l+0xee>
 80076c6:	2135      	movs	r1, #53	; 0x35
 80076c8:	a81a      	add	r0, sp, #104	; 0x68
 80076ca:	f002 fcb0 	bl	800a02e <__copybits>
 80076ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80076d0:	4620      	mov	r0, r4
 80076d2:	f002 f86f 	bl	80097b4 <_Bfree>
 80076d6:	3f01      	subs	r7, #1
 80076d8:	2f04      	cmp	r7, #4
 80076da:	d806      	bhi.n	80076ea <_strtod_l+0x102>
 80076dc:	e8df f007 	tbb	[pc, r7]
 80076e0:	1714030a 	.word	0x1714030a
 80076e4:	0a          	.byte	0x0a
 80076e5:	00          	.byte	0x00
 80076e6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80076ea:	0728      	lsls	r0, r5, #28
 80076ec:	d5c0      	bpl.n	8007670 <_strtod_l+0x88>
 80076ee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80076f2:	e7bd      	b.n	8007670 <_strtod_l+0x88>
 80076f4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80076f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80076fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80076fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007702:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007706:	e7f0      	b.n	80076ea <_strtod_l+0x102>
 8007708:	f8df b180 	ldr.w	fp, [pc, #384]	; 800788c <_strtod_l+0x2a4>
 800770c:	e7ed      	b.n	80076ea <_strtod_l+0x102>
 800770e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007712:	f04f 3aff 	mov.w	sl, #4294967295
 8007716:	e7e8      	b.n	80076ea <_strtod_l+0x102>
 8007718:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800771a:	1c5a      	adds	r2, r3, #1
 800771c:	9217      	str	r2, [sp, #92]	; 0x5c
 800771e:	785b      	ldrb	r3, [r3, #1]
 8007720:	2b30      	cmp	r3, #48	; 0x30
 8007722:	d0f9      	beq.n	8007718 <_strtod_l+0x130>
 8007724:	2b00      	cmp	r3, #0
 8007726:	d0a3      	beq.n	8007670 <_strtod_l+0x88>
 8007728:	2301      	movs	r3, #1
 800772a:	f04f 0900 	mov.w	r9, #0
 800772e:	9304      	str	r3, [sp, #16]
 8007730:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007732:	9308      	str	r3, [sp, #32]
 8007734:	f8cd 901c 	str.w	r9, [sp, #28]
 8007738:	464f      	mov	r7, r9
 800773a:	220a      	movs	r2, #10
 800773c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800773e:	7806      	ldrb	r6, [r0, #0]
 8007740:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007744:	b2d9      	uxtb	r1, r3
 8007746:	2909      	cmp	r1, #9
 8007748:	d92a      	bls.n	80077a0 <_strtod_l+0x1b8>
 800774a:	9905      	ldr	r1, [sp, #20]
 800774c:	462a      	mov	r2, r5
 800774e:	f002 ff1f 	bl	800a590 <strncmp>
 8007752:	b398      	cbz	r0, 80077bc <_strtod_l+0x1d4>
 8007754:	2000      	movs	r0, #0
 8007756:	4632      	mov	r2, r6
 8007758:	463d      	mov	r5, r7
 800775a:	9005      	str	r0, [sp, #20]
 800775c:	4603      	mov	r3, r0
 800775e:	2a65      	cmp	r2, #101	; 0x65
 8007760:	d001      	beq.n	8007766 <_strtod_l+0x17e>
 8007762:	2a45      	cmp	r2, #69	; 0x45
 8007764:	d118      	bne.n	8007798 <_strtod_l+0x1b0>
 8007766:	b91d      	cbnz	r5, 8007770 <_strtod_l+0x188>
 8007768:	9a04      	ldr	r2, [sp, #16]
 800776a:	4302      	orrs	r2, r0
 800776c:	d09e      	beq.n	80076ac <_strtod_l+0xc4>
 800776e:	2500      	movs	r5, #0
 8007770:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007774:	f108 0201 	add.w	r2, r8, #1
 8007778:	9217      	str	r2, [sp, #92]	; 0x5c
 800777a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800777e:	2a2b      	cmp	r2, #43	; 0x2b
 8007780:	d075      	beq.n	800786e <_strtod_l+0x286>
 8007782:	2a2d      	cmp	r2, #45	; 0x2d
 8007784:	d07b      	beq.n	800787e <_strtod_l+0x296>
 8007786:	f04f 0c00 	mov.w	ip, #0
 800778a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800778e:	2909      	cmp	r1, #9
 8007790:	f240 8082 	bls.w	8007898 <_strtod_l+0x2b0>
 8007794:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007798:	2600      	movs	r6, #0
 800779a:	e09d      	b.n	80078d8 <_strtod_l+0x2f0>
 800779c:	2300      	movs	r3, #0
 800779e:	e7c4      	b.n	800772a <_strtod_l+0x142>
 80077a0:	2f08      	cmp	r7, #8
 80077a2:	bfd8      	it	le
 80077a4:	9907      	ldrle	r1, [sp, #28]
 80077a6:	f100 0001 	add.w	r0, r0, #1
 80077aa:	bfda      	itte	le
 80077ac:	fb02 3301 	mlale	r3, r2, r1, r3
 80077b0:	9307      	strle	r3, [sp, #28]
 80077b2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80077b6:	3701      	adds	r7, #1
 80077b8:	9017      	str	r0, [sp, #92]	; 0x5c
 80077ba:	e7bf      	b.n	800773c <_strtod_l+0x154>
 80077bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077be:	195a      	adds	r2, r3, r5
 80077c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80077c2:	5d5a      	ldrb	r2, [r3, r5]
 80077c4:	2f00      	cmp	r7, #0
 80077c6:	d037      	beq.n	8007838 <_strtod_l+0x250>
 80077c8:	9005      	str	r0, [sp, #20]
 80077ca:	463d      	mov	r5, r7
 80077cc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80077d0:	2b09      	cmp	r3, #9
 80077d2:	d912      	bls.n	80077fa <_strtod_l+0x212>
 80077d4:	2301      	movs	r3, #1
 80077d6:	e7c2      	b.n	800775e <_strtod_l+0x176>
 80077d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077da:	1c5a      	adds	r2, r3, #1
 80077dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80077de:	785a      	ldrb	r2, [r3, #1]
 80077e0:	3001      	adds	r0, #1
 80077e2:	2a30      	cmp	r2, #48	; 0x30
 80077e4:	d0f8      	beq.n	80077d8 <_strtod_l+0x1f0>
 80077e6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80077ea:	2b08      	cmp	r3, #8
 80077ec:	f200 84d9 	bhi.w	80081a2 <_strtod_l+0xbba>
 80077f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077f2:	9005      	str	r0, [sp, #20]
 80077f4:	2000      	movs	r0, #0
 80077f6:	9308      	str	r3, [sp, #32]
 80077f8:	4605      	mov	r5, r0
 80077fa:	3a30      	subs	r2, #48	; 0x30
 80077fc:	f100 0301 	add.w	r3, r0, #1
 8007800:	d014      	beq.n	800782c <_strtod_l+0x244>
 8007802:	9905      	ldr	r1, [sp, #20]
 8007804:	4419      	add	r1, r3
 8007806:	9105      	str	r1, [sp, #20]
 8007808:	462b      	mov	r3, r5
 800780a:	eb00 0e05 	add.w	lr, r0, r5
 800780e:	210a      	movs	r1, #10
 8007810:	4573      	cmp	r3, lr
 8007812:	d113      	bne.n	800783c <_strtod_l+0x254>
 8007814:	182b      	adds	r3, r5, r0
 8007816:	2b08      	cmp	r3, #8
 8007818:	f105 0501 	add.w	r5, r5, #1
 800781c:	4405      	add	r5, r0
 800781e:	dc1c      	bgt.n	800785a <_strtod_l+0x272>
 8007820:	9907      	ldr	r1, [sp, #28]
 8007822:	230a      	movs	r3, #10
 8007824:	fb03 2301 	mla	r3, r3, r1, r2
 8007828:	9307      	str	r3, [sp, #28]
 800782a:	2300      	movs	r3, #0
 800782c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800782e:	1c51      	adds	r1, r2, #1
 8007830:	9117      	str	r1, [sp, #92]	; 0x5c
 8007832:	7852      	ldrb	r2, [r2, #1]
 8007834:	4618      	mov	r0, r3
 8007836:	e7c9      	b.n	80077cc <_strtod_l+0x1e4>
 8007838:	4638      	mov	r0, r7
 800783a:	e7d2      	b.n	80077e2 <_strtod_l+0x1fa>
 800783c:	2b08      	cmp	r3, #8
 800783e:	dc04      	bgt.n	800784a <_strtod_l+0x262>
 8007840:	9e07      	ldr	r6, [sp, #28]
 8007842:	434e      	muls	r6, r1
 8007844:	9607      	str	r6, [sp, #28]
 8007846:	3301      	adds	r3, #1
 8007848:	e7e2      	b.n	8007810 <_strtod_l+0x228>
 800784a:	f103 0c01 	add.w	ip, r3, #1
 800784e:	f1bc 0f10 	cmp.w	ip, #16
 8007852:	bfd8      	it	le
 8007854:	fb01 f909 	mulle.w	r9, r1, r9
 8007858:	e7f5      	b.n	8007846 <_strtod_l+0x25e>
 800785a:	2d10      	cmp	r5, #16
 800785c:	bfdc      	itt	le
 800785e:	230a      	movle	r3, #10
 8007860:	fb03 2909 	mlale	r9, r3, r9, r2
 8007864:	e7e1      	b.n	800782a <_strtod_l+0x242>
 8007866:	2300      	movs	r3, #0
 8007868:	9305      	str	r3, [sp, #20]
 800786a:	2301      	movs	r3, #1
 800786c:	e77c      	b.n	8007768 <_strtod_l+0x180>
 800786e:	f04f 0c00 	mov.w	ip, #0
 8007872:	f108 0202 	add.w	r2, r8, #2
 8007876:	9217      	str	r2, [sp, #92]	; 0x5c
 8007878:	f898 2002 	ldrb.w	r2, [r8, #2]
 800787c:	e785      	b.n	800778a <_strtod_l+0x1a2>
 800787e:	f04f 0c01 	mov.w	ip, #1
 8007882:	e7f6      	b.n	8007872 <_strtod_l+0x28a>
 8007884:	0800c9d0 	.word	0x0800c9d0
 8007888:	0800c788 	.word	0x0800c788
 800788c:	7ff00000 	.word	0x7ff00000
 8007890:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007892:	1c51      	adds	r1, r2, #1
 8007894:	9117      	str	r1, [sp, #92]	; 0x5c
 8007896:	7852      	ldrb	r2, [r2, #1]
 8007898:	2a30      	cmp	r2, #48	; 0x30
 800789a:	d0f9      	beq.n	8007890 <_strtod_l+0x2a8>
 800789c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80078a0:	2908      	cmp	r1, #8
 80078a2:	f63f af79 	bhi.w	8007798 <_strtod_l+0x1b0>
 80078a6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80078aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80078ac:	9206      	str	r2, [sp, #24]
 80078ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80078b0:	1c51      	adds	r1, r2, #1
 80078b2:	9117      	str	r1, [sp, #92]	; 0x5c
 80078b4:	7852      	ldrb	r2, [r2, #1]
 80078b6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80078ba:	2e09      	cmp	r6, #9
 80078bc:	d937      	bls.n	800792e <_strtod_l+0x346>
 80078be:	9e06      	ldr	r6, [sp, #24]
 80078c0:	1b89      	subs	r1, r1, r6
 80078c2:	2908      	cmp	r1, #8
 80078c4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80078c8:	dc02      	bgt.n	80078d0 <_strtod_l+0x2e8>
 80078ca:	4576      	cmp	r6, lr
 80078cc:	bfa8      	it	ge
 80078ce:	4676      	movge	r6, lr
 80078d0:	f1bc 0f00 	cmp.w	ip, #0
 80078d4:	d000      	beq.n	80078d8 <_strtod_l+0x2f0>
 80078d6:	4276      	negs	r6, r6
 80078d8:	2d00      	cmp	r5, #0
 80078da:	d14d      	bne.n	8007978 <_strtod_l+0x390>
 80078dc:	9904      	ldr	r1, [sp, #16]
 80078de:	4301      	orrs	r1, r0
 80078e0:	f47f aec6 	bne.w	8007670 <_strtod_l+0x88>
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f47f aee1 	bne.w	80076ac <_strtod_l+0xc4>
 80078ea:	2a69      	cmp	r2, #105	; 0x69
 80078ec:	d027      	beq.n	800793e <_strtod_l+0x356>
 80078ee:	dc24      	bgt.n	800793a <_strtod_l+0x352>
 80078f0:	2a49      	cmp	r2, #73	; 0x49
 80078f2:	d024      	beq.n	800793e <_strtod_l+0x356>
 80078f4:	2a4e      	cmp	r2, #78	; 0x4e
 80078f6:	f47f aed9 	bne.w	80076ac <_strtod_l+0xc4>
 80078fa:	499f      	ldr	r1, [pc, #636]	; (8007b78 <_strtod_l+0x590>)
 80078fc:	a817      	add	r0, sp, #92	; 0x5c
 80078fe:	f001 fe3d 	bl	800957c <__match>
 8007902:	2800      	cmp	r0, #0
 8007904:	f43f aed2 	beq.w	80076ac <_strtod_l+0xc4>
 8007908:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	2b28      	cmp	r3, #40	; 0x28
 800790e:	d12d      	bne.n	800796c <_strtod_l+0x384>
 8007910:	499a      	ldr	r1, [pc, #616]	; (8007b7c <_strtod_l+0x594>)
 8007912:	aa1a      	add	r2, sp, #104	; 0x68
 8007914:	a817      	add	r0, sp, #92	; 0x5c
 8007916:	f001 fe45 	bl	80095a4 <__hexnan>
 800791a:	2805      	cmp	r0, #5
 800791c:	d126      	bne.n	800796c <_strtod_l+0x384>
 800791e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007920:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007924:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007928:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800792c:	e6a0      	b.n	8007670 <_strtod_l+0x88>
 800792e:	210a      	movs	r1, #10
 8007930:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007934:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007938:	e7b9      	b.n	80078ae <_strtod_l+0x2c6>
 800793a:	2a6e      	cmp	r2, #110	; 0x6e
 800793c:	e7db      	b.n	80078f6 <_strtod_l+0x30e>
 800793e:	4990      	ldr	r1, [pc, #576]	; (8007b80 <_strtod_l+0x598>)
 8007940:	a817      	add	r0, sp, #92	; 0x5c
 8007942:	f001 fe1b 	bl	800957c <__match>
 8007946:	2800      	cmp	r0, #0
 8007948:	f43f aeb0 	beq.w	80076ac <_strtod_l+0xc4>
 800794c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800794e:	498d      	ldr	r1, [pc, #564]	; (8007b84 <_strtod_l+0x59c>)
 8007950:	3b01      	subs	r3, #1
 8007952:	a817      	add	r0, sp, #92	; 0x5c
 8007954:	9317      	str	r3, [sp, #92]	; 0x5c
 8007956:	f001 fe11 	bl	800957c <__match>
 800795a:	b910      	cbnz	r0, 8007962 <_strtod_l+0x37a>
 800795c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800795e:	3301      	adds	r3, #1
 8007960:	9317      	str	r3, [sp, #92]	; 0x5c
 8007962:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007b94 <_strtod_l+0x5ac>
 8007966:	f04f 0a00 	mov.w	sl, #0
 800796a:	e681      	b.n	8007670 <_strtod_l+0x88>
 800796c:	4886      	ldr	r0, [pc, #536]	; (8007b88 <_strtod_l+0x5a0>)
 800796e:	f002 fdf7 	bl	800a560 <nan>
 8007972:	ec5b ab10 	vmov	sl, fp, d0
 8007976:	e67b      	b.n	8007670 <_strtod_l+0x88>
 8007978:	9b05      	ldr	r3, [sp, #20]
 800797a:	9807      	ldr	r0, [sp, #28]
 800797c:	1af3      	subs	r3, r6, r3
 800797e:	2f00      	cmp	r7, #0
 8007980:	bf08      	it	eq
 8007982:	462f      	moveq	r7, r5
 8007984:	2d10      	cmp	r5, #16
 8007986:	9306      	str	r3, [sp, #24]
 8007988:	46a8      	mov	r8, r5
 800798a:	bfa8      	it	ge
 800798c:	f04f 0810 	movge.w	r8, #16
 8007990:	f7f8 fdc0 	bl	8000514 <__aeabi_ui2d>
 8007994:	2d09      	cmp	r5, #9
 8007996:	4682      	mov	sl, r0
 8007998:	468b      	mov	fp, r1
 800799a:	dd13      	ble.n	80079c4 <_strtod_l+0x3dc>
 800799c:	4b7b      	ldr	r3, [pc, #492]	; (8007b8c <_strtod_l+0x5a4>)
 800799e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80079a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80079a6:	f7f8 fe2f 	bl	8000608 <__aeabi_dmul>
 80079aa:	4682      	mov	sl, r0
 80079ac:	4648      	mov	r0, r9
 80079ae:	468b      	mov	fp, r1
 80079b0:	f7f8 fdb0 	bl	8000514 <__aeabi_ui2d>
 80079b4:	4602      	mov	r2, r0
 80079b6:	460b      	mov	r3, r1
 80079b8:	4650      	mov	r0, sl
 80079ba:	4659      	mov	r1, fp
 80079bc:	f7f8 fc6e 	bl	800029c <__adddf3>
 80079c0:	4682      	mov	sl, r0
 80079c2:	468b      	mov	fp, r1
 80079c4:	2d0f      	cmp	r5, #15
 80079c6:	dc38      	bgt.n	8007a3a <_strtod_l+0x452>
 80079c8:	9b06      	ldr	r3, [sp, #24]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f43f ae50 	beq.w	8007670 <_strtod_l+0x88>
 80079d0:	dd24      	ble.n	8007a1c <_strtod_l+0x434>
 80079d2:	2b16      	cmp	r3, #22
 80079d4:	dc0b      	bgt.n	80079ee <_strtod_l+0x406>
 80079d6:	496d      	ldr	r1, [pc, #436]	; (8007b8c <_strtod_l+0x5a4>)
 80079d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80079dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079e0:	4652      	mov	r2, sl
 80079e2:	465b      	mov	r3, fp
 80079e4:	f7f8 fe10 	bl	8000608 <__aeabi_dmul>
 80079e8:	4682      	mov	sl, r0
 80079ea:	468b      	mov	fp, r1
 80079ec:	e640      	b.n	8007670 <_strtod_l+0x88>
 80079ee:	9a06      	ldr	r2, [sp, #24]
 80079f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80079f4:	4293      	cmp	r3, r2
 80079f6:	db20      	blt.n	8007a3a <_strtod_l+0x452>
 80079f8:	4c64      	ldr	r4, [pc, #400]	; (8007b8c <_strtod_l+0x5a4>)
 80079fa:	f1c5 050f 	rsb	r5, r5, #15
 80079fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007a02:	4652      	mov	r2, sl
 8007a04:	465b      	mov	r3, fp
 8007a06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a0a:	f7f8 fdfd 	bl	8000608 <__aeabi_dmul>
 8007a0e:	9b06      	ldr	r3, [sp, #24]
 8007a10:	1b5d      	subs	r5, r3, r5
 8007a12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007a16:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007a1a:	e7e3      	b.n	80079e4 <_strtod_l+0x3fc>
 8007a1c:	9b06      	ldr	r3, [sp, #24]
 8007a1e:	3316      	adds	r3, #22
 8007a20:	db0b      	blt.n	8007a3a <_strtod_l+0x452>
 8007a22:	9b05      	ldr	r3, [sp, #20]
 8007a24:	1b9e      	subs	r6, r3, r6
 8007a26:	4b59      	ldr	r3, [pc, #356]	; (8007b8c <_strtod_l+0x5a4>)
 8007a28:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007a2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a30:	4650      	mov	r0, sl
 8007a32:	4659      	mov	r1, fp
 8007a34:	f7f8 ff12 	bl	800085c <__aeabi_ddiv>
 8007a38:	e7d6      	b.n	80079e8 <_strtod_l+0x400>
 8007a3a:	9b06      	ldr	r3, [sp, #24]
 8007a3c:	eba5 0808 	sub.w	r8, r5, r8
 8007a40:	4498      	add	r8, r3
 8007a42:	f1b8 0f00 	cmp.w	r8, #0
 8007a46:	dd74      	ble.n	8007b32 <_strtod_l+0x54a>
 8007a48:	f018 030f 	ands.w	r3, r8, #15
 8007a4c:	d00a      	beq.n	8007a64 <_strtod_l+0x47c>
 8007a4e:	494f      	ldr	r1, [pc, #316]	; (8007b8c <_strtod_l+0x5a4>)
 8007a50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a54:	4652      	mov	r2, sl
 8007a56:	465b      	mov	r3, fp
 8007a58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a5c:	f7f8 fdd4 	bl	8000608 <__aeabi_dmul>
 8007a60:	4682      	mov	sl, r0
 8007a62:	468b      	mov	fp, r1
 8007a64:	f038 080f 	bics.w	r8, r8, #15
 8007a68:	d04f      	beq.n	8007b0a <_strtod_l+0x522>
 8007a6a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007a6e:	dd22      	ble.n	8007ab6 <_strtod_l+0x4ce>
 8007a70:	2500      	movs	r5, #0
 8007a72:	462e      	mov	r6, r5
 8007a74:	9507      	str	r5, [sp, #28]
 8007a76:	9505      	str	r5, [sp, #20]
 8007a78:	2322      	movs	r3, #34	; 0x22
 8007a7a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007b94 <_strtod_l+0x5ac>
 8007a7e:	6023      	str	r3, [r4, #0]
 8007a80:	f04f 0a00 	mov.w	sl, #0
 8007a84:	9b07      	ldr	r3, [sp, #28]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f43f adf2 	beq.w	8007670 <_strtod_l+0x88>
 8007a8c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f001 fe90 	bl	80097b4 <_Bfree>
 8007a94:	9905      	ldr	r1, [sp, #20]
 8007a96:	4620      	mov	r0, r4
 8007a98:	f001 fe8c 	bl	80097b4 <_Bfree>
 8007a9c:	4631      	mov	r1, r6
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	f001 fe88 	bl	80097b4 <_Bfree>
 8007aa4:	9907      	ldr	r1, [sp, #28]
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	f001 fe84 	bl	80097b4 <_Bfree>
 8007aac:	4629      	mov	r1, r5
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f001 fe80 	bl	80097b4 <_Bfree>
 8007ab4:	e5dc      	b.n	8007670 <_strtod_l+0x88>
 8007ab6:	4b36      	ldr	r3, [pc, #216]	; (8007b90 <_strtod_l+0x5a8>)
 8007ab8:	9304      	str	r3, [sp, #16]
 8007aba:	2300      	movs	r3, #0
 8007abc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007ac0:	4650      	mov	r0, sl
 8007ac2:	4659      	mov	r1, fp
 8007ac4:	4699      	mov	r9, r3
 8007ac6:	f1b8 0f01 	cmp.w	r8, #1
 8007aca:	dc21      	bgt.n	8007b10 <_strtod_l+0x528>
 8007acc:	b10b      	cbz	r3, 8007ad2 <_strtod_l+0x4ea>
 8007ace:	4682      	mov	sl, r0
 8007ad0:	468b      	mov	fp, r1
 8007ad2:	4b2f      	ldr	r3, [pc, #188]	; (8007b90 <_strtod_l+0x5a8>)
 8007ad4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007ad8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007adc:	4652      	mov	r2, sl
 8007ade:	465b      	mov	r3, fp
 8007ae0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007ae4:	f7f8 fd90 	bl	8000608 <__aeabi_dmul>
 8007ae8:	4b2a      	ldr	r3, [pc, #168]	; (8007b94 <_strtod_l+0x5ac>)
 8007aea:	460a      	mov	r2, r1
 8007aec:	400b      	ands	r3, r1
 8007aee:	492a      	ldr	r1, [pc, #168]	; (8007b98 <_strtod_l+0x5b0>)
 8007af0:	428b      	cmp	r3, r1
 8007af2:	4682      	mov	sl, r0
 8007af4:	d8bc      	bhi.n	8007a70 <_strtod_l+0x488>
 8007af6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007afa:	428b      	cmp	r3, r1
 8007afc:	bf86      	itte	hi
 8007afe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007b9c <_strtod_l+0x5b4>
 8007b02:	f04f 3aff 	movhi.w	sl, #4294967295
 8007b06:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	9304      	str	r3, [sp, #16]
 8007b0e:	e084      	b.n	8007c1a <_strtod_l+0x632>
 8007b10:	f018 0f01 	tst.w	r8, #1
 8007b14:	d005      	beq.n	8007b22 <_strtod_l+0x53a>
 8007b16:	9b04      	ldr	r3, [sp, #16]
 8007b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1c:	f7f8 fd74 	bl	8000608 <__aeabi_dmul>
 8007b20:	2301      	movs	r3, #1
 8007b22:	9a04      	ldr	r2, [sp, #16]
 8007b24:	3208      	adds	r2, #8
 8007b26:	f109 0901 	add.w	r9, r9, #1
 8007b2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007b2e:	9204      	str	r2, [sp, #16]
 8007b30:	e7c9      	b.n	8007ac6 <_strtod_l+0x4de>
 8007b32:	d0ea      	beq.n	8007b0a <_strtod_l+0x522>
 8007b34:	f1c8 0800 	rsb	r8, r8, #0
 8007b38:	f018 020f 	ands.w	r2, r8, #15
 8007b3c:	d00a      	beq.n	8007b54 <_strtod_l+0x56c>
 8007b3e:	4b13      	ldr	r3, [pc, #76]	; (8007b8c <_strtod_l+0x5a4>)
 8007b40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b44:	4650      	mov	r0, sl
 8007b46:	4659      	mov	r1, fp
 8007b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4c:	f7f8 fe86 	bl	800085c <__aeabi_ddiv>
 8007b50:	4682      	mov	sl, r0
 8007b52:	468b      	mov	fp, r1
 8007b54:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007b58:	d0d7      	beq.n	8007b0a <_strtod_l+0x522>
 8007b5a:	f1b8 0f1f 	cmp.w	r8, #31
 8007b5e:	dd1f      	ble.n	8007ba0 <_strtod_l+0x5b8>
 8007b60:	2500      	movs	r5, #0
 8007b62:	462e      	mov	r6, r5
 8007b64:	9507      	str	r5, [sp, #28]
 8007b66:	9505      	str	r5, [sp, #20]
 8007b68:	2322      	movs	r3, #34	; 0x22
 8007b6a:	f04f 0a00 	mov.w	sl, #0
 8007b6e:	f04f 0b00 	mov.w	fp, #0
 8007b72:	6023      	str	r3, [r4, #0]
 8007b74:	e786      	b.n	8007a84 <_strtod_l+0x49c>
 8007b76:	bf00      	nop
 8007b78:	0800c759 	.word	0x0800c759
 8007b7c:	0800c79c 	.word	0x0800c79c
 8007b80:	0800c751 	.word	0x0800c751
 8007b84:	0800c8dc 	.word	0x0800c8dc
 8007b88:	0800cb88 	.word	0x0800cb88
 8007b8c:	0800ca68 	.word	0x0800ca68
 8007b90:	0800ca40 	.word	0x0800ca40
 8007b94:	7ff00000 	.word	0x7ff00000
 8007b98:	7ca00000 	.word	0x7ca00000
 8007b9c:	7fefffff 	.word	0x7fefffff
 8007ba0:	f018 0310 	ands.w	r3, r8, #16
 8007ba4:	bf18      	it	ne
 8007ba6:	236a      	movne	r3, #106	; 0x6a
 8007ba8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007f58 <_strtod_l+0x970>
 8007bac:	9304      	str	r3, [sp, #16]
 8007bae:	4650      	mov	r0, sl
 8007bb0:	4659      	mov	r1, fp
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	f018 0f01 	tst.w	r8, #1
 8007bb8:	d004      	beq.n	8007bc4 <_strtod_l+0x5dc>
 8007bba:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007bbe:	f7f8 fd23 	bl	8000608 <__aeabi_dmul>
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007bc8:	f109 0908 	add.w	r9, r9, #8
 8007bcc:	d1f2      	bne.n	8007bb4 <_strtod_l+0x5cc>
 8007bce:	b10b      	cbz	r3, 8007bd4 <_strtod_l+0x5ec>
 8007bd0:	4682      	mov	sl, r0
 8007bd2:	468b      	mov	fp, r1
 8007bd4:	9b04      	ldr	r3, [sp, #16]
 8007bd6:	b1c3      	cbz	r3, 8007c0a <_strtod_l+0x622>
 8007bd8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007bdc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	4659      	mov	r1, fp
 8007be4:	dd11      	ble.n	8007c0a <_strtod_l+0x622>
 8007be6:	2b1f      	cmp	r3, #31
 8007be8:	f340 8124 	ble.w	8007e34 <_strtod_l+0x84c>
 8007bec:	2b34      	cmp	r3, #52	; 0x34
 8007bee:	bfde      	ittt	le
 8007bf0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007bf4:	f04f 33ff 	movle.w	r3, #4294967295
 8007bf8:	fa03 f202 	lslle.w	r2, r3, r2
 8007bfc:	f04f 0a00 	mov.w	sl, #0
 8007c00:	bfcc      	ite	gt
 8007c02:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007c06:	ea02 0b01 	andle.w	fp, r2, r1
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	4650      	mov	r0, sl
 8007c10:	4659      	mov	r1, fp
 8007c12:	f7f8 ff61 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c16:	2800      	cmp	r0, #0
 8007c18:	d1a2      	bne.n	8007b60 <_strtod_l+0x578>
 8007c1a:	9b07      	ldr	r3, [sp, #28]
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	9908      	ldr	r1, [sp, #32]
 8007c20:	462b      	mov	r3, r5
 8007c22:	463a      	mov	r2, r7
 8007c24:	4620      	mov	r0, r4
 8007c26:	f001 fe2d 	bl	8009884 <__s2b>
 8007c2a:	9007      	str	r0, [sp, #28]
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	f43f af1f 	beq.w	8007a70 <_strtod_l+0x488>
 8007c32:	9b05      	ldr	r3, [sp, #20]
 8007c34:	1b9e      	subs	r6, r3, r6
 8007c36:	9b06      	ldr	r3, [sp, #24]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	bfb4      	ite	lt
 8007c3c:	4633      	movlt	r3, r6
 8007c3e:	2300      	movge	r3, #0
 8007c40:	930c      	str	r3, [sp, #48]	; 0x30
 8007c42:	9b06      	ldr	r3, [sp, #24]
 8007c44:	2500      	movs	r5, #0
 8007c46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007c4a:	9312      	str	r3, [sp, #72]	; 0x48
 8007c4c:	462e      	mov	r6, r5
 8007c4e:	9b07      	ldr	r3, [sp, #28]
 8007c50:	4620      	mov	r0, r4
 8007c52:	6859      	ldr	r1, [r3, #4]
 8007c54:	f001 fd6e 	bl	8009734 <_Balloc>
 8007c58:	9005      	str	r0, [sp, #20]
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	f43f af0c 	beq.w	8007a78 <_strtod_l+0x490>
 8007c60:	9b07      	ldr	r3, [sp, #28]
 8007c62:	691a      	ldr	r2, [r3, #16]
 8007c64:	3202      	adds	r2, #2
 8007c66:	f103 010c 	add.w	r1, r3, #12
 8007c6a:	0092      	lsls	r2, r2, #2
 8007c6c:	300c      	adds	r0, #12
 8007c6e:	f001 fd53 	bl	8009718 <memcpy>
 8007c72:	ec4b ab10 	vmov	d0, sl, fp
 8007c76:	aa1a      	add	r2, sp, #104	; 0x68
 8007c78:	a919      	add	r1, sp, #100	; 0x64
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	f002 f948 	bl	8009f10 <__d2b>
 8007c80:	ec4b ab18 	vmov	d8, sl, fp
 8007c84:	9018      	str	r0, [sp, #96]	; 0x60
 8007c86:	2800      	cmp	r0, #0
 8007c88:	f43f aef6 	beq.w	8007a78 <_strtod_l+0x490>
 8007c8c:	2101      	movs	r1, #1
 8007c8e:	4620      	mov	r0, r4
 8007c90:	f001 fe92 	bl	80099b8 <__i2b>
 8007c94:	4606      	mov	r6, r0
 8007c96:	2800      	cmp	r0, #0
 8007c98:	f43f aeee 	beq.w	8007a78 <_strtod_l+0x490>
 8007c9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c9e:	9904      	ldr	r1, [sp, #16]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	bfab      	itete	ge
 8007ca4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007ca6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007ca8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007caa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007cae:	bfac      	ite	ge
 8007cb0:	eb03 0902 	addge.w	r9, r3, r2
 8007cb4:	1ad7      	sublt	r7, r2, r3
 8007cb6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007cb8:	eba3 0801 	sub.w	r8, r3, r1
 8007cbc:	4490      	add	r8, r2
 8007cbe:	4ba1      	ldr	r3, [pc, #644]	; (8007f44 <_strtod_l+0x95c>)
 8007cc0:	f108 38ff 	add.w	r8, r8, #4294967295
 8007cc4:	4598      	cmp	r8, r3
 8007cc6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007cca:	f280 80c7 	bge.w	8007e5c <_strtod_l+0x874>
 8007cce:	eba3 0308 	sub.w	r3, r3, r8
 8007cd2:	2b1f      	cmp	r3, #31
 8007cd4:	eba2 0203 	sub.w	r2, r2, r3
 8007cd8:	f04f 0101 	mov.w	r1, #1
 8007cdc:	f300 80b1 	bgt.w	8007e42 <_strtod_l+0x85a>
 8007ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ce4:	930d      	str	r3, [sp, #52]	; 0x34
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	9308      	str	r3, [sp, #32]
 8007cea:	eb09 0802 	add.w	r8, r9, r2
 8007cee:	9b04      	ldr	r3, [sp, #16]
 8007cf0:	45c1      	cmp	r9, r8
 8007cf2:	4417      	add	r7, r2
 8007cf4:	441f      	add	r7, r3
 8007cf6:	464b      	mov	r3, r9
 8007cf8:	bfa8      	it	ge
 8007cfa:	4643      	movge	r3, r8
 8007cfc:	42bb      	cmp	r3, r7
 8007cfe:	bfa8      	it	ge
 8007d00:	463b      	movge	r3, r7
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	bfc2      	ittt	gt
 8007d06:	eba8 0803 	subgt.w	r8, r8, r3
 8007d0a:	1aff      	subgt	r7, r7, r3
 8007d0c:	eba9 0903 	subgt.w	r9, r9, r3
 8007d10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	dd17      	ble.n	8007d46 <_strtod_l+0x75e>
 8007d16:	4631      	mov	r1, r6
 8007d18:	461a      	mov	r2, r3
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f001 ff0c 	bl	8009b38 <__pow5mult>
 8007d20:	4606      	mov	r6, r0
 8007d22:	2800      	cmp	r0, #0
 8007d24:	f43f aea8 	beq.w	8007a78 <_strtod_l+0x490>
 8007d28:	4601      	mov	r1, r0
 8007d2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	f001 fe59 	bl	80099e4 <__multiply>
 8007d32:	900b      	str	r0, [sp, #44]	; 0x2c
 8007d34:	2800      	cmp	r0, #0
 8007d36:	f43f ae9f 	beq.w	8007a78 <_strtod_l+0x490>
 8007d3a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	f001 fd39 	bl	80097b4 <_Bfree>
 8007d42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d44:	9318      	str	r3, [sp, #96]	; 0x60
 8007d46:	f1b8 0f00 	cmp.w	r8, #0
 8007d4a:	f300 808c 	bgt.w	8007e66 <_strtod_l+0x87e>
 8007d4e:	9b06      	ldr	r3, [sp, #24]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	dd08      	ble.n	8007d66 <_strtod_l+0x77e>
 8007d54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d56:	9905      	ldr	r1, [sp, #20]
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f001 feed 	bl	8009b38 <__pow5mult>
 8007d5e:	9005      	str	r0, [sp, #20]
 8007d60:	2800      	cmp	r0, #0
 8007d62:	f43f ae89 	beq.w	8007a78 <_strtod_l+0x490>
 8007d66:	2f00      	cmp	r7, #0
 8007d68:	dd08      	ble.n	8007d7c <_strtod_l+0x794>
 8007d6a:	9905      	ldr	r1, [sp, #20]
 8007d6c:	463a      	mov	r2, r7
 8007d6e:	4620      	mov	r0, r4
 8007d70:	f001 ff3c 	bl	8009bec <__lshift>
 8007d74:	9005      	str	r0, [sp, #20]
 8007d76:	2800      	cmp	r0, #0
 8007d78:	f43f ae7e 	beq.w	8007a78 <_strtod_l+0x490>
 8007d7c:	f1b9 0f00 	cmp.w	r9, #0
 8007d80:	dd08      	ble.n	8007d94 <_strtod_l+0x7ac>
 8007d82:	4631      	mov	r1, r6
 8007d84:	464a      	mov	r2, r9
 8007d86:	4620      	mov	r0, r4
 8007d88:	f001 ff30 	bl	8009bec <__lshift>
 8007d8c:	4606      	mov	r6, r0
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	f43f ae72 	beq.w	8007a78 <_strtod_l+0x490>
 8007d94:	9a05      	ldr	r2, [sp, #20]
 8007d96:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f001 ffb3 	bl	8009d04 <__mdiff>
 8007d9e:	4605      	mov	r5, r0
 8007da0:	2800      	cmp	r0, #0
 8007da2:	f43f ae69 	beq.w	8007a78 <_strtod_l+0x490>
 8007da6:	68c3      	ldr	r3, [r0, #12]
 8007da8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007daa:	2300      	movs	r3, #0
 8007dac:	60c3      	str	r3, [r0, #12]
 8007dae:	4631      	mov	r1, r6
 8007db0:	f001 ff8c 	bl	8009ccc <__mcmp>
 8007db4:	2800      	cmp	r0, #0
 8007db6:	da60      	bge.n	8007e7a <_strtod_l+0x892>
 8007db8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dba:	ea53 030a 	orrs.w	r3, r3, sl
 8007dbe:	f040 8082 	bne.w	8007ec6 <_strtod_l+0x8de>
 8007dc2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d17d      	bne.n	8007ec6 <_strtod_l+0x8de>
 8007dca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007dce:	0d1b      	lsrs	r3, r3, #20
 8007dd0:	051b      	lsls	r3, r3, #20
 8007dd2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007dd6:	d976      	bls.n	8007ec6 <_strtod_l+0x8de>
 8007dd8:	696b      	ldr	r3, [r5, #20]
 8007dda:	b913      	cbnz	r3, 8007de2 <_strtod_l+0x7fa>
 8007ddc:	692b      	ldr	r3, [r5, #16]
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	dd71      	ble.n	8007ec6 <_strtod_l+0x8de>
 8007de2:	4629      	mov	r1, r5
 8007de4:	2201      	movs	r2, #1
 8007de6:	4620      	mov	r0, r4
 8007de8:	f001 ff00 	bl	8009bec <__lshift>
 8007dec:	4631      	mov	r1, r6
 8007dee:	4605      	mov	r5, r0
 8007df0:	f001 ff6c 	bl	8009ccc <__mcmp>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	dd66      	ble.n	8007ec6 <_strtod_l+0x8de>
 8007df8:	9904      	ldr	r1, [sp, #16]
 8007dfa:	4a53      	ldr	r2, [pc, #332]	; (8007f48 <_strtod_l+0x960>)
 8007dfc:	465b      	mov	r3, fp
 8007dfe:	2900      	cmp	r1, #0
 8007e00:	f000 8081 	beq.w	8007f06 <_strtod_l+0x91e>
 8007e04:	ea02 010b 	and.w	r1, r2, fp
 8007e08:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007e0c:	dc7b      	bgt.n	8007f06 <_strtod_l+0x91e>
 8007e0e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007e12:	f77f aea9 	ble.w	8007b68 <_strtod_l+0x580>
 8007e16:	4b4d      	ldr	r3, [pc, #308]	; (8007f4c <_strtod_l+0x964>)
 8007e18:	4650      	mov	r0, sl
 8007e1a:	4659      	mov	r1, fp
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f7f8 fbf3 	bl	8000608 <__aeabi_dmul>
 8007e22:	460b      	mov	r3, r1
 8007e24:	4303      	orrs	r3, r0
 8007e26:	bf08      	it	eq
 8007e28:	2322      	moveq	r3, #34	; 0x22
 8007e2a:	4682      	mov	sl, r0
 8007e2c:	468b      	mov	fp, r1
 8007e2e:	bf08      	it	eq
 8007e30:	6023      	streq	r3, [r4, #0]
 8007e32:	e62b      	b.n	8007a8c <_strtod_l+0x4a4>
 8007e34:	f04f 32ff 	mov.w	r2, #4294967295
 8007e38:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3c:	ea03 0a0a 	and.w	sl, r3, sl
 8007e40:	e6e3      	b.n	8007c0a <_strtod_l+0x622>
 8007e42:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007e46:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007e4a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007e4e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007e52:	fa01 f308 	lsl.w	r3, r1, r8
 8007e56:	9308      	str	r3, [sp, #32]
 8007e58:	910d      	str	r1, [sp, #52]	; 0x34
 8007e5a:	e746      	b.n	8007cea <_strtod_l+0x702>
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	9308      	str	r3, [sp, #32]
 8007e60:	2301      	movs	r3, #1
 8007e62:	930d      	str	r3, [sp, #52]	; 0x34
 8007e64:	e741      	b.n	8007cea <_strtod_l+0x702>
 8007e66:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007e68:	4642      	mov	r2, r8
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f001 febe 	bl	8009bec <__lshift>
 8007e70:	9018      	str	r0, [sp, #96]	; 0x60
 8007e72:	2800      	cmp	r0, #0
 8007e74:	f47f af6b 	bne.w	8007d4e <_strtod_l+0x766>
 8007e78:	e5fe      	b.n	8007a78 <_strtod_l+0x490>
 8007e7a:	465f      	mov	r7, fp
 8007e7c:	d16e      	bne.n	8007f5c <_strtod_l+0x974>
 8007e7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e80:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e84:	b342      	cbz	r2, 8007ed8 <_strtod_l+0x8f0>
 8007e86:	4a32      	ldr	r2, [pc, #200]	; (8007f50 <_strtod_l+0x968>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d128      	bne.n	8007ede <_strtod_l+0x8f6>
 8007e8c:	9b04      	ldr	r3, [sp, #16]
 8007e8e:	4651      	mov	r1, sl
 8007e90:	b1eb      	cbz	r3, 8007ece <_strtod_l+0x8e6>
 8007e92:	4b2d      	ldr	r3, [pc, #180]	; (8007f48 <_strtod_l+0x960>)
 8007e94:	403b      	ands	r3, r7
 8007e96:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e9e:	d819      	bhi.n	8007ed4 <_strtod_l+0x8ec>
 8007ea0:	0d1b      	lsrs	r3, r3, #20
 8007ea2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eaa:	4299      	cmp	r1, r3
 8007eac:	d117      	bne.n	8007ede <_strtod_l+0x8f6>
 8007eae:	4b29      	ldr	r3, [pc, #164]	; (8007f54 <_strtod_l+0x96c>)
 8007eb0:	429f      	cmp	r7, r3
 8007eb2:	d102      	bne.n	8007eba <_strtod_l+0x8d2>
 8007eb4:	3101      	adds	r1, #1
 8007eb6:	f43f addf 	beq.w	8007a78 <_strtod_l+0x490>
 8007eba:	4b23      	ldr	r3, [pc, #140]	; (8007f48 <_strtod_l+0x960>)
 8007ebc:	403b      	ands	r3, r7
 8007ebe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007ec2:	f04f 0a00 	mov.w	sl, #0
 8007ec6:	9b04      	ldr	r3, [sp, #16]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1a4      	bne.n	8007e16 <_strtod_l+0x82e>
 8007ecc:	e5de      	b.n	8007a8c <_strtod_l+0x4a4>
 8007ece:	f04f 33ff 	mov.w	r3, #4294967295
 8007ed2:	e7ea      	b.n	8007eaa <_strtod_l+0x8c2>
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	e7e8      	b.n	8007eaa <_strtod_l+0x8c2>
 8007ed8:	ea53 030a 	orrs.w	r3, r3, sl
 8007edc:	d08c      	beq.n	8007df8 <_strtod_l+0x810>
 8007ede:	9b08      	ldr	r3, [sp, #32]
 8007ee0:	b1db      	cbz	r3, 8007f1a <_strtod_l+0x932>
 8007ee2:	423b      	tst	r3, r7
 8007ee4:	d0ef      	beq.n	8007ec6 <_strtod_l+0x8de>
 8007ee6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ee8:	9a04      	ldr	r2, [sp, #16]
 8007eea:	4650      	mov	r0, sl
 8007eec:	4659      	mov	r1, fp
 8007eee:	b1c3      	cbz	r3, 8007f22 <_strtod_l+0x93a>
 8007ef0:	f7ff fb5e 	bl	80075b0 <sulp>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	ec51 0b18 	vmov	r0, r1, d8
 8007efc:	f7f8 f9ce 	bl	800029c <__adddf3>
 8007f00:	4682      	mov	sl, r0
 8007f02:	468b      	mov	fp, r1
 8007f04:	e7df      	b.n	8007ec6 <_strtod_l+0x8de>
 8007f06:	4013      	ands	r3, r2
 8007f08:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007f0c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007f10:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007f14:	f04f 3aff 	mov.w	sl, #4294967295
 8007f18:	e7d5      	b.n	8007ec6 <_strtod_l+0x8de>
 8007f1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f1c:	ea13 0f0a 	tst.w	r3, sl
 8007f20:	e7e0      	b.n	8007ee4 <_strtod_l+0x8fc>
 8007f22:	f7ff fb45 	bl	80075b0 <sulp>
 8007f26:	4602      	mov	r2, r0
 8007f28:	460b      	mov	r3, r1
 8007f2a:	ec51 0b18 	vmov	r0, r1, d8
 8007f2e:	f7f8 f9b3 	bl	8000298 <__aeabi_dsub>
 8007f32:	2200      	movs	r2, #0
 8007f34:	2300      	movs	r3, #0
 8007f36:	4682      	mov	sl, r0
 8007f38:	468b      	mov	fp, r1
 8007f3a:	f7f8 fdcd 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	d0c1      	beq.n	8007ec6 <_strtod_l+0x8de>
 8007f42:	e611      	b.n	8007b68 <_strtod_l+0x580>
 8007f44:	fffffc02 	.word	0xfffffc02
 8007f48:	7ff00000 	.word	0x7ff00000
 8007f4c:	39500000 	.word	0x39500000
 8007f50:	000fffff 	.word	0x000fffff
 8007f54:	7fefffff 	.word	0x7fefffff
 8007f58:	0800c7b0 	.word	0x0800c7b0
 8007f5c:	4631      	mov	r1, r6
 8007f5e:	4628      	mov	r0, r5
 8007f60:	f002 f832 	bl	8009fc8 <__ratio>
 8007f64:	ec59 8b10 	vmov	r8, r9, d0
 8007f68:	ee10 0a10 	vmov	r0, s0
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f72:	4649      	mov	r1, r9
 8007f74:	f7f8 fdc4 	bl	8000b00 <__aeabi_dcmple>
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	d07a      	beq.n	8008072 <_strtod_l+0xa8a>
 8007f7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d04a      	beq.n	8008018 <_strtod_l+0xa30>
 8007f82:	4b95      	ldr	r3, [pc, #596]	; (80081d8 <_strtod_l+0xbf0>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007f8a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80081d8 <_strtod_l+0xbf0>
 8007f8e:	f04f 0800 	mov.w	r8, #0
 8007f92:	4b92      	ldr	r3, [pc, #584]	; (80081dc <_strtod_l+0xbf4>)
 8007f94:	403b      	ands	r3, r7
 8007f96:	930d      	str	r3, [sp, #52]	; 0x34
 8007f98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f9a:	4b91      	ldr	r3, [pc, #580]	; (80081e0 <_strtod_l+0xbf8>)
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	f040 80b0 	bne.w	8008102 <_strtod_l+0xb1a>
 8007fa2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007fa6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007faa:	ec4b ab10 	vmov	d0, sl, fp
 8007fae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007fb2:	f001 ff31 	bl	8009e18 <__ulp>
 8007fb6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007fba:	ec53 2b10 	vmov	r2, r3, d0
 8007fbe:	f7f8 fb23 	bl	8000608 <__aeabi_dmul>
 8007fc2:	4652      	mov	r2, sl
 8007fc4:	465b      	mov	r3, fp
 8007fc6:	f7f8 f969 	bl	800029c <__adddf3>
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4983      	ldr	r1, [pc, #524]	; (80081dc <_strtod_l+0xbf4>)
 8007fce:	4a85      	ldr	r2, [pc, #532]	; (80081e4 <_strtod_l+0xbfc>)
 8007fd0:	4019      	ands	r1, r3
 8007fd2:	4291      	cmp	r1, r2
 8007fd4:	4682      	mov	sl, r0
 8007fd6:	d960      	bls.n	800809a <_strtod_l+0xab2>
 8007fd8:	ee18 3a90 	vmov	r3, s17
 8007fdc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d104      	bne.n	8007fee <_strtod_l+0xa06>
 8007fe4:	ee18 3a10 	vmov	r3, s16
 8007fe8:	3301      	adds	r3, #1
 8007fea:	f43f ad45 	beq.w	8007a78 <_strtod_l+0x490>
 8007fee:	f8df b200 	ldr.w	fp, [pc, #512]	; 80081f0 <_strtod_l+0xc08>
 8007ff2:	f04f 3aff 	mov.w	sl, #4294967295
 8007ff6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f001 fbdb 	bl	80097b4 <_Bfree>
 8007ffe:	9905      	ldr	r1, [sp, #20]
 8008000:	4620      	mov	r0, r4
 8008002:	f001 fbd7 	bl	80097b4 <_Bfree>
 8008006:	4631      	mov	r1, r6
 8008008:	4620      	mov	r0, r4
 800800a:	f001 fbd3 	bl	80097b4 <_Bfree>
 800800e:	4629      	mov	r1, r5
 8008010:	4620      	mov	r0, r4
 8008012:	f001 fbcf 	bl	80097b4 <_Bfree>
 8008016:	e61a      	b.n	8007c4e <_strtod_l+0x666>
 8008018:	f1ba 0f00 	cmp.w	sl, #0
 800801c:	d11b      	bne.n	8008056 <_strtod_l+0xa6e>
 800801e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008022:	b9f3      	cbnz	r3, 8008062 <_strtod_l+0xa7a>
 8008024:	4b6c      	ldr	r3, [pc, #432]	; (80081d8 <_strtod_l+0xbf0>)
 8008026:	2200      	movs	r2, #0
 8008028:	4640      	mov	r0, r8
 800802a:	4649      	mov	r1, r9
 800802c:	f7f8 fd5e 	bl	8000aec <__aeabi_dcmplt>
 8008030:	b9d0      	cbnz	r0, 8008068 <_strtod_l+0xa80>
 8008032:	4640      	mov	r0, r8
 8008034:	4649      	mov	r1, r9
 8008036:	4b6c      	ldr	r3, [pc, #432]	; (80081e8 <_strtod_l+0xc00>)
 8008038:	2200      	movs	r2, #0
 800803a:	f7f8 fae5 	bl	8000608 <__aeabi_dmul>
 800803e:	4680      	mov	r8, r0
 8008040:	4689      	mov	r9, r1
 8008042:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008046:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800804a:	9315      	str	r3, [sp, #84]	; 0x54
 800804c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008050:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008054:	e79d      	b.n	8007f92 <_strtod_l+0x9aa>
 8008056:	f1ba 0f01 	cmp.w	sl, #1
 800805a:	d102      	bne.n	8008062 <_strtod_l+0xa7a>
 800805c:	2f00      	cmp	r7, #0
 800805e:	f43f ad83 	beq.w	8007b68 <_strtod_l+0x580>
 8008062:	4b62      	ldr	r3, [pc, #392]	; (80081ec <_strtod_l+0xc04>)
 8008064:	2200      	movs	r2, #0
 8008066:	e78e      	b.n	8007f86 <_strtod_l+0x99e>
 8008068:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80081e8 <_strtod_l+0xc00>
 800806c:	f04f 0800 	mov.w	r8, #0
 8008070:	e7e7      	b.n	8008042 <_strtod_l+0xa5a>
 8008072:	4b5d      	ldr	r3, [pc, #372]	; (80081e8 <_strtod_l+0xc00>)
 8008074:	4640      	mov	r0, r8
 8008076:	4649      	mov	r1, r9
 8008078:	2200      	movs	r2, #0
 800807a:	f7f8 fac5 	bl	8000608 <__aeabi_dmul>
 800807e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008080:	4680      	mov	r8, r0
 8008082:	4689      	mov	r9, r1
 8008084:	b933      	cbnz	r3, 8008094 <_strtod_l+0xaac>
 8008086:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800808a:	900e      	str	r0, [sp, #56]	; 0x38
 800808c:	930f      	str	r3, [sp, #60]	; 0x3c
 800808e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008092:	e7dd      	b.n	8008050 <_strtod_l+0xa68>
 8008094:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008098:	e7f9      	b.n	800808e <_strtod_l+0xaa6>
 800809a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800809e:	9b04      	ldr	r3, [sp, #16]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d1a8      	bne.n	8007ff6 <_strtod_l+0xa0e>
 80080a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80080a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80080aa:	0d1b      	lsrs	r3, r3, #20
 80080ac:	051b      	lsls	r3, r3, #20
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d1a1      	bne.n	8007ff6 <_strtod_l+0xa0e>
 80080b2:	4640      	mov	r0, r8
 80080b4:	4649      	mov	r1, r9
 80080b6:	f7f8 fe07 	bl	8000cc8 <__aeabi_d2lz>
 80080ba:	f7f8 fa77 	bl	80005ac <__aeabi_l2d>
 80080be:	4602      	mov	r2, r0
 80080c0:	460b      	mov	r3, r1
 80080c2:	4640      	mov	r0, r8
 80080c4:	4649      	mov	r1, r9
 80080c6:	f7f8 f8e7 	bl	8000298 <__aeabi_dsub>
 80080ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080d0:	ea43 030a 	orr.w	r3, r3, sl
 80080d4:	4313      	orrs	r3, r2
 80080d6:	4680      	mov	r8, r0
 80080d8:	4689      	mov	r9, r1
 80080da:	d055      	beq.n	8008188 <_strtod_l+0xba0>
 80080dc:	a336      	add	r3, pc, #216	; (adr r3, 80081b8 <_strtod_l+0xbd0>)
 80080de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e2:	f7f8 fd03 	bl	8000aec <__aeabi_dcmplt>
 80080e6:	2800      	cmp	r0, #0
 80080e8:	f47f acd0 	bne.w	8007a8c <_strtod_l+0x4a4>
 80080ec:	a334      	add	r3, pc, #208	; (adr r3, 80081c0 <_strtod_l+0xbd8>)
 80080ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f2:	4640      	mov	r0, r8
 80080f4:	4649      	mov	r1, r9
 80080f6:	f7f8 fd17 	bl	8000b28 <__aeabi_dcmpgt>
 80080fa:	2800      	cmp	r0, #0
 80080fc:	f43f af7b 	beq.w	8007ff6 <_strtod_l+0xa0e>
 8008100:	e4c4      	b.n	8007a8c <_strtod_l+0x4a4>
 8008102:	9b04      	ldr	r3, [sp, #16]
 8008104:	b333      	cbz	r3, 8008154 <_strtod_l+0xb6c>
 8008106:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008108:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800810c:	d822      	bhi.n	8008154 <_strtod_l+0xb6c>
 800810e:	a32e      	add	r3, pc, #184	; (adr r3, 80081c8 <_strtod_l+0xbe0>)
 8008110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008114:	4640      	mov	r0, r8
 8008116:	4649      	mov	r1, r9
 8008118:	f7f8 fcf2 	bl	8000b00 <__aeabi_dcmple>
 800811c:	b1a0      	cbz	r0, 8008148 <_strtod_l+0xb60>
 800811e:	4649      	mov	r1, r9
 8008120:	4640      	mov	r0, r8
 8008122:	f7f8 fd49 	bl	8000bb8 <__aeabi_d2uiz>
 8008126:	2801      	cmp	r0, #1
 8008128:	bf38      	it	cc
 800812a:	2001      	movcc	r0, #1
 800812c:	f7f8 f9f2 	bl	8000514 <__aeabi_ui2d>
 8008130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008132:	4680      	mov	r8, r0
 8008134:	4689      	mov	r9, r1
 8008136:	bb23      	cbnz	r3, 8008182 <_strtod_l+0xb9a>
 8008138:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800813c:	9010      	str	r0, [sp, #64]	; 0x40
 800813e:	9311      	str	r3, [sp, #68]	; 0x44
 8008140:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008144:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800814a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800814c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008150:	1a9b      	subs	r3, r3, r2
 8008152:	9309      	str	r3, [sp, #36]	; 0x24
 8008154:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008158:	eeb0 0a48 	vmov.f32	s0, s16
 800815c:	eef0 0a68 	vmov.f32	s1, s17
 8008160:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008164:	f001 fe58 	bl	8009e18 <__ulp>
 8008168:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800816c:	ec53 2b10 	vmov	r2, r3, d0
 8008170:	f7f8 fa4a 	bl	8000608 <__aeabi_dmul>
 8008174:	ec53 2b18 	vmov	r2, r3, d8
 8008178:	f7f8 f890 	bl	800029c <__adddf3>
 800817c:	4682      	mov	sl, r0
 800817e:	468b      	mov	fp, r1
 8008180:	e78d      	b.n	800809e <_strtod_l+0xab6>
 8008182:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008186:	e7db      	b.n	8008140 <_strtod_l+0xb58>
 8008188:	a311      	add	r3, pc, #68	; (adr r3, 80081d0 <_strtod_l+0xbe8>)
 800818a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818e:	f7f8 fcad 	bl	8000aec <__aeabi_dcmplt>
 8008192:	e7b2      	b.n	80080fa <_strtod_l+0xb12>
 8008194:	2300      	movs	r3, #0
 8008196:	930a      	str	r3, [sp, #40]	; 0x28
 8008198:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800819a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800819c:	6013      	str	r3, [r2, #0]
 800819e:	f7ff ba6b 	b.w	8007678 <_strtod_l+0x90>
 80081a2:	2a65      	cmp	r2, #101	; 0x65
 80081a4:	f43f ab5f 	beq.w	8007866 <_strtod_l+0x27e>
 80081a8:	2a45      	cmp	r2, #69	; 0x45
 80081aa:	f43f ab5c 	beq.w	8007866 <_strtod_l+0x27e>
 80081ae:	2301      	movs	r3, #1
 80081b0:	f7ff bb94 	b.w	80078dc <_strtod_l+0x2f4>
 80081b4:	f3af 8000 	nop.w
 80081b8:	94a03595 	.word	0x94a03595
 80081bc:	3fdfffff 	.word	0x3fdfffff
 80081c0:	35afe535 	.word	0x35afe535
 80081c4:	3fe00000 	.word	0x3fe00000
 80081c8:	ffc00000 	.word	0xffc00000
 80081cc:	41dfffff 	.word	0x41dfffff
 80081d0:	94a03595 	.word	0x94a03595
 80081d4:	3fcfffff 	.word	0x3fcfffff
 80081d8:	3ff00000 	.word	0x3ff00000
 80081dc:	7ff00000 	.word	0x7ff00000
 80081e0:	7fe00000 	.word	0x7fe00000
 80081e4:	7c9fffff 	.word	0x7c9fffff
 80081e8:	3fe00000 	.word	0x3fe00000
 80081ec:	bff00000 	.word	0xbff00000
 80081f0:	7fefffff 	.word	0x7fefffff

080081f4 <_strtod_r>:
 80081f4:	4b01      	ldr	r3, [pc, #4]	; (80081fc <_strtod_r+0x8>)
 80081f6:	f7ff b9f7 	b.w	80075e8 <_strtod_l>
 80081fa:	bf00      	nop
 80081fc:	200000dc 	.word	0x200000dc

08008200 <_strtol_l.constprop.0>:
 8008200:	2b01      	cmp	r3, #1
 8008202:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008206:	d001      	beq.n	800820c <_strtol_l.constprop.0+0xc>
 8008208:	2b24      	cmp	r3, #36	; 0x24
 800820a:	d906      	bls.n	800821a <_strtol_l.constprop.0+0x1a>
 800820c:	f7fe faee 	bl	80067ec <__errno>
 8008210:	2316      	movs	r3, #22
 8008212:	6003      	str	r3, [r0, #0]
 8008214:	2000      	movs	r0, #0
 8008216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800821a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008300 <_strtol_l.constprop.0+0x100>
 800821e:	460d      	mov	r5, r1
 8008220:	462e      	mov	r6, r5
 8008222:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008226:	f814 700c 	ldrb.w	r7, [r4, ip]
 800822a:	f017 0708 	ands.w	r7, r7, #8
 800822e:	d1f7      	bne.n	8008220 <_strtol_l.constprop.0+0x20>
 8008230:	2c2d      	cmp	r4, #45	; 0x2d
 8008232:	d132      	bne.n	800829a <_strtol_l.constprop.0+0x9a>
 8008234:	782c      	ldrb	r4, [r5, #0]
 8008236:	2701      	movs	r7, #1
 8008238:	1cb5      	adds	r5, r6, #2
 800823a:	2b00      	cmp	r3, #0
 800823c:	d05b      	beq.n	80082f6 <_strtol_l.constprop.0+0xf6>
 800823e:	2b10      	cmp	r3, #16
 8008240:	d109      	bne.n	8008256 <_strtol_l.constprop.0+0x56>
 8008242:	2c30      	cmp	r4, #48	; 0x30
 8008244:	d107      	bne.n	8008256 <_strtol_l.constprop.0+0x56>
 8008246:	782c      	ldrb	r4, [r5, #0]
 8008248:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800824c:	2c58      	cmp	r4, #88	; 0x58
 800824e:	d14d      	bne.n	80082ec <_strtol_l.constprop.0+0xec>
 8008250:	786c      	ldrb	r4, [r5, #1]
 8008252:	2310      	movs	r3, #16
 8008254:	3502      	adds	r5, #2
 8008256:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800825a:	f108 38ff 	add.w	r8, r8, #4294967295
 800825e:	f04f 0c00 	mov.w	ip, #0
 8008262:	fbb8 f9f3 	udiv	r9, r8, r3
 8008266:	4666      	mov	r6, ip
 8008268:	fb03 8a19 	mls	sl, r3, r9, r8
 800826c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008270:	f1be 0f09 	cmp.w	lr, #9
 8008274:	d816      	bhi.n	80082a4 <_strtol_l.constprop.0+0xa4>
 8008276:	4674      	mov	r4, lr
 8008278:	42a3      	cmp	r3, r4
 800827a:	dd24      	ble.n	80082c6 <_strtol_l.constprop.0+0xc6>
 800827c:	f1bc 0f00 	cmp.w	ip, #0
 8008280:	db1e      	blt.n	80082c0 <_strtol_l.constprop.0+0xc0>
 8008282:	45b1      	cmp	r9, r6
 8008284:	d31c      	bcc.n	80082c0 <_strtol_l.constprop.0+0xc0>
 8008286:	d101      	bne.n	800828c <_strtol_l.constprop.0+0x8c>
 8008288:	45a2      	cmp	sl, r4
 800828a:	db19      	blt.n	80082c0 <_strtol_l.constprop.0+0xc0>
 800828c:	fb06 4603 	mla	r6, r6, r3, r4
 8008290:	f04f 0c01 	mov.w	ip, #1
 8008294:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008298:	e7e8      	b.n	800826c <_strtol_l.constprop.0+0x6c>
 800829a:	2c2b      	cmp	r4, #43	; 0x2b
 800829c:	bf04      	itt	eq
 800829e:	782c      	ldrbeq	r4, [r5, #0]
 80082a0:	1cb5      	addeq	r5, r6, #2
 80082a2:	e7ca      	b.n	800823a <_strtol_l.constprop.0+0x3a>
 80082a4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80082a8:	f1be 0f19 	cmp.w	lr, #25
 80082ac:	d801      	bhi.n	80082b2 <_strtol_l.constprop.0+0xb2>
 80082ae:	3c37      	subs	r4, #55	; 0x37
 80082b0:	e7e2      	b.n	8008278 <_strtol_l.constprop.0+0x78>
 80082b2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80082b6:	f1be 0f19 	cmp.w	lr, #25
 80082ba:	d804      	bhi.n	80082c6 <_strtol_l.constprop.0+0xc6>
 80082bc:	3c57      	subs	r4, #87	; 0x57
 80082be:	e7db      	b.n	8008278 <_strtol_l.constprop.0+0x78>
 80082c0:	f04f 3cff 	mov.w	ip, #4294967295
 80082c4:	e7e6      	b.n	8008294 <_strtol_l.constprop.0+0x94>
 80082c6:	f1bc 0f00 	cmp.w	ip, #0
 80082ca:	da05      	bge.n	80082d8 <_strtol_l.constprop.0+0xd8>
 80082cc:	2322      	movs	r3, #34	; 0x22
 80082ce:	6003      	str	r3, [r0, #0]
 80082d0:	4646      	mov	r6, r8
 80082d2:	b942      	cbnz	r2, 80082e6 <_strtol_l.constprop.0+0xe6>
 80082d4:	4630      	mov	r0, r6
 80082d6:	e79e      	b.n	8008216 <_strtol_l.constprop.0+0x16>
 80082d8:	b107      	cbz	r7, 80082dc <_strtol_l.constprop.0+0xdc>
 80082da:	4276      	negs	r6, r6
 80082dc:	2a00      	cmp	r2, #0
 80082de:	d0f9      	beq.n	80082d4 <_strtol_l.constprop.0+0xd4>
 80082e0:	f1bc 0f00 	cmp.w	ip, #0
 80082e4:	d000      	beq.n	80082e8 <_strtol_l.constprop.0+0xe8>
 80082e6:	1e69      	subs	r1, r5, #1
 80082e8:	6011      	str	r1, [r2, #0]
 80082ea:	e7f3      	b.n	80082d4 <_strtol_l.constprop.0+0xd4>
 80082ec:	2430      	movs	r4, #48	; 0x30
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d1b1      	bne.n	8008256 <_strtol_l.constprop.0+0x56>
 80082f2:	2308      	movs	r3, #8
 80082f4:	e7af      	b.n	8008256 <_strtol_l.constprop.0+0x56>
 80082f6:	2c30      	cmp	r4, #48	; 0x30
 80082f8:	d0a5      	beq.n	8008246 <_strtol_l.constprop.0+0x46>
 80082fa:	230a      	movs	r3, #10
 80082fc:	e7ab      	b.n	8008256 <_strtol_l.constprop.0+0x56>
 80082fe:	bf00      	nop
 8008300:	0800c7d9 	.word	0x0800c7d9

08008304 <_strtol_r>:
 8008304:	f7ff bf7c 	b.w	8008200 <_strtol_l.constprop.0>

08008308 <quorem>:
 8008308:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800830c:	6903      	ldr	r3, [r0, #16]
 800830e:	690c      	ldr	r4, [r1, #16]
 8008310:	42a3      	cmp	r3, r4
 8008312:	4607      	mov	r7, r0
 8008314:	f2c0 8081 	blt.w	800841a <quorem+0x112>
 8008318:	3c01      	subs	r4, #1
 800831a:	f101 0814 	add.w	r8, r1, #20
 800831e:	f100 0514 	add.w	r5, r0, #20
 8008322:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008326:	9301      	str	r3, [sp, #4]
 8008328:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800832c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008330:	3301      	adds	r3, #1
 8008332:	429a      	cmp	r2, r3
 8008334:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008338:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800833c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008340:	d331      	bcc.n	80083a6 <quorem+0x9e>
 8008342:	f04f 0e00 	mov.w	lr, #0
 8008346:	4640      	mov	r0, r8
 8008348:	46ac      	mov	ip, r5
 800834a:	46f2      	mov	sl, lr
 800834c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008350:	b293      	uxth	r3, r2
 8008352:	fb06 e303 	mla	r3, r6, r3, lr
 8008356:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800835a:	b29b      	uxth	r3, r3
 800835c:	ebaa 0303 	sub.w	r3, sl, r3
 8008360:	f8dc a000 	ldr.w	sl, [ip]
 8008364:	0c12      	lsrs	r2, r2, #16
 8008366:	fa13 f38a 	uxtah	r3, r3, sl
 800836a:	fb06 e202 	mla	r2, r6, r2, lr
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	9b00      	ldr	r3, [sp, #0]
 8008372:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008376:	b292      	uxth	r2, r2
 8008378:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800837c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008380:	f8bd 3000 	ldrh.w	r3, [sp]
 8008384:	4581      	cmp	r9, r0
 8008386:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800838a:	f84c 3b04 	str.w	r3, [ip], #4
 800838e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008392:	d2db      	bcs.n	800834c <quorem+0x44>
 8008394:	f855 300b 	ldr.w	r3, [r5, fp]
 8008398:	b92b      	cbnz	r3, 80083a6 <quorem+0x9e>
 800839a:	9b01      	ldr	r3, [sp, #4]
 800839c:	3b04      	subs	r3, #4
 800839e:	429d      	cmp	r5, r3
 80083a0:	461a      	mov	r2, r3
 80083a2:	d32e      	bcc.n	8008402 <quorem+0xfa>
 80083a4:	613c      	str	r4, [r7, #16]
 80083a6:	4638      	mov	r0, r7
 80083a8:	f001 fc90 	bl	8009ccc <__mcmp>
 80083ac:	2800      	cmp	r0, #0
 80083ae:	db24      	blt.n	80083fa <quorem+0xf2>
 80083b0:	3601      	adds	r6, #1
 80083b2:	4628      	mov	r0, r5
 80083b4:	f04f 0c00 	mov.w	ip, #0
 80083b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80083bc:	f8d0 e000 	ldr.w	lr, [r0]
 80083c0:	b293      	uxth	r3, r2
 80083c2:	ebac 0303 	sub.w	r3, ip, r3
 80083c6:	0c12      	lsrs	r2, r2, #16
 80083c8:	fa13 f38e 	uxtah	r3, r3, lr
 80083cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80083d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083da:	45c1      	cmp	r9, r8
 80083dc:	f840 3b04 	str.w	r3, [r0], #4
 80083e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80083e4:	d2e8      	bcs.n	80083b8 <quorem+0xb0>
 80083e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083ee:	b922      	cbnz	r2, 80083fa <quorem+0xf2>
 80083f0:	3b04      	subs	r3, #4
 80083f2:	429d      	cmp	r5, r3
 80083f4:	461a      	mov	r2, r3
 80083f6:	d30a      	bcc.n	800840e <quorem+0x106>
 80083f8:	613c      	str	r4, [r7, #16]
 80083fa:	4630      	mov	r0, r6
 80083fc:	b003      	add	sp, #12
 80083fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008402:	6812      	ldr	r2, [r2, #0]
 8008404:	3b04      	subs	r3, #4
 8008406:	2a00      	cmp	r2, #0
 8008408:	d1cc      	bne.n	80083a4 <quorem+0x9c>
 800840a:	3c01      	subs	r4, #1
 800840c:	e7c7      	b.n	800839e <quorem+0x96>
 800840e:	6812      	ldr	r2, [r2, #0]
 8008410:	3b04      	subs	r3, #4
 8008412:	2a00      	cmp	r2, #0
 8008414:	d1f0      	bne.n	80083f8 <quorem+0xf0>
 8008416:	3c01      	subs	r4, #1
 8008418:	e7eb      	b.n	80083f2 <quorem+0xea>
 800841a:	2000      	movs	r0, #0
 800841c:	e7ee      	b.n	80083fc <quorem+0xf4>
	...

08008420 <_dtoa_r>:
 8008420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008424:	ed2d 8b04 	vpush	{d8-d9}
 8008428:	ec57 6b10 	vmov	r6, r7, d0
 800842c:	b093      	sub	sp, #76	; 0x4c
 800842e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008430:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008434:	9106      	str	r1, [sp, #24]
 8008436:	ee10 aa10 	vmov	sl, s0
 800843a:	4604      	mov	r4, r0
 800843c:	9209      	str	r2, [sp, #36]	; 0x24
 800843e:	930c      	str	r3, [sp, #48]	; 0x30
 8008440:	46bb      	mov	fp, r7
 8008442:	b975      	cbnz	r5, 8008462 <_dtoa_r+0x42>
 8008444:	2010      	movs	r0, #16
 8008446:	f001 f94d 	bl	80096e4 <malloc>
 800844a:	4602      	mov	r2, r0
 800844c:	6260      	str	r0, [r4, #36]	; 0x24
 800844e:	b920      	cbnz	r0, 800845a <_dtoa_r+0x3a>
 8008450:	4ba7      	ldr	r3, [pc, #668]	; (80086f0 <_dtoa_r+0x2d0>)
 8008452:	21ea      	movs	r1, #234	; 0xea
 8008454:	48a7      	ldr	r0, [pc, #668]	; (80086f4 <_dtoa_r+0x2d4>)
 8008456:	f002 f8bd 	bl	800a5d4 <__assert_func>
 800845a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800845e:	6005      	str	r5, [r0, #0]
 8008460:	60c5      	str	r5, [r0, #12]
 8008462:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008464:	6819      	ldr	r1, [r3, #0]
 8008466:	b151      	cbz	r1, 800847e <_dtoa_r+0x5e>
 8008468:	685a      	ldr	r2, [r3, #4]
 800846a:	604a      	str	r2, [r1, #4]
 800846c:	2301      	movs	r3, #1
 800846e:	4093      	lsls	r3, r2
 8008470:	608b      	str	r3, [r1, #8]
 8008472:	4620      	mov	r0, r4
 8008474:	f001 f99e 	bl	80097b4 <_Bfree>
 8008478:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800847a:	2200      	movs	r2, #0
 800847c:	601a      	str	r2, [r3, #0]
 800847e:	1e3b      	subs	r3, r7, #0
 8008480:	bfaa      	itet	ge
 8008482:	2300      	movge	r3, #0
 8008484:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008488:	f8c8 3000 	strge.w	r3, [r8]
 800848c:	4b9a      	ldr	r3, [pc, #616]	; (80086f8 <_dtoa_r+0x2d8>)
 800848e:	bfbc      	itt	lt
 8008490:	2201      	movlt	r2, #1
 8008492:	f8c8 2000 	strlt.w	r2, [r8]
 8008496:	ea33 030b 	bics.w	r3, r3, fp
 800849a:	d11b      	bne.n	80084d4 <_dtoa_r+0xb4>
 800849c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800849e:	f242 730f 	movw	r3, #9999	; 0x270f
 80084a2:	6013      	str	r3, [r2, #0]
 80084a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084a8:	4333      	orrs	r3, r6
 80084aa:	f000 8592 	beq.w	8008fd2 <_dtoa_r+0xbb2>
 80084ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084b0:	b963      	cbnz	r3, 80084cc <_dtoa_r+0xac>
 80084b2:	4b92      	ldr	r3, [pc, #584]	; (80086fc <_dtoa_r+0x2dc>)
 80084b4:	e022      	b.n	80084fc <_dtoa_r+0xdc>
 80084b6:	4b92      	ldr	r3, [pc, #584]	; (8008700 <_dtoa_r+0x2e0>)
 80084b8:	9301      	str	r3, [sp, #4]
 80084ba:	3308      	adds	r3, #8
 80084bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80084be:	6013      	str	r3, [r2, #0]
 80084c0:	9801      	ldr	r0, [sp, #4]
 80084c2:	b013      	add	sp, #76	; 0x4c
 80084c4:	ecbd 8b04 	vpop	{d8-d9}
 80084c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084cc:	4b8b      	ldr	r3, [pc, #556]	; (80086fc <_dtoa_r+0x2dc>)
 80084ce:	9301      	str	r3, [sp, #4]
 80084d0:	3303      	adds	r3, #3
 80084d2:	e7f3      	b.n	80084bc <_dtoa_r+0x9c>
 80084d4:	2200      	movs	r2, #0
 80084d6:	2300      	movs	r3, #0
 80084d8:	4650      	mov	r0, sl
 80084da:	4659      	mov	r1, fp
 80084dc:	f7f8 fafc 	bl	8000ad8 <__aeabi_dcmpeq>
 80084e0:	ec4b ab19 	vmov	d9, sl, fp
 80084e4:	4680      	mov	r8, r0
 80084e6:	b158      	cbz	r0, 8008500 <_dtoa_r+0xe0>
 80084e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084ea:	2301      	movs	r3, #1
 80084ec:	6013      	str	r3, [r2, #0]
 80084ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f000 856b 	beq.w	8008fcc <_dtoa_r+0xbac>
 80084f6:	4883      	ldr	r0, [pc, #524]	; (8008704 <_dtoa_r+0x2e4>)
 80084f8:	6018      	str	r0, [r3, #0]
 80084fa:	1e43      	subs	r3, r0, #1
 80084fc:	9301      	str	r3, [sp, #4]
 80084fe:	e7df      	b.n	80084c0 <_dtoa_r+0xa0>
 8008500:	ec4b ab10 	vmov	d0, sl, fp
 8008504:	aa10      	add	r2, sp, #64	; 0x40
 8008506:	a911      	add	r1, sp, #68	; 0x44
 8008508:	4620      	mov	r0, r4
 800850a:	f001 fd01 	bl	8009f10 <__d2b>
 800850e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008512:	ee08 0a10 	vmov	s16, r0
 8008516:	2d00      	cmp	r5, #0
 8008518:	f000 8084 	beq.w	8008624 <_dtoa_r+0x204>
 800851c:	ee19 3a90 	vmov	r3, s19
 8008520:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008524:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008528:	4656      	mov	r6, sl
 800852a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800852e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008532:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008536:	4b74      	ldr	r3, [pc, #464]	; (8008708 <_dtoa_r+0x2e8>)
 8008538:	2200      	movs	r2, #0
 800853a:	4630      	mov	r0, r6
 800853c:	4639      	mov	r1, r7
 800853e:	f7f7 feab 	bl	8000298 <__aeabi_dsub>
 8008542:	a365      	add	r3, pc, #404	; (adr r3, 80086d8 <_dtoa_r+0x2b8>)
 8008544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008548:	f7f8 f85e 	bl	8000608 <__aeabi_dmul>
 800854c:	a364      	add	r3, pc, #400	; (adr r3, 80086e0 <_dtoa_r+0x2c0>)
 800854e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008552:	f7f7 fea3 	bl	800029c <__adddf3>
 8008556:	4606      	mov	r6, r0
 8008558:	4628      	mov	r0, r5
 800855a:	460f      	mov	r7, r1
 800855c:	f7f7 ffea 	bl	8000534 <__aeabi_i2d>
 8008560:	a361      	add	r3, pc, #388	; (adr r3, 80086e8 <_dtoa_r+0x2c8>)
 8008562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008566:	f7f8 f84f 	bl	8000608 <__aeabi_dmul>
 800856a:	4602      	mov	r2, r0
 800856c:	460b      	mov	r3, r1
 800856e:	4630      	mov	r0, r6
 8008570:	4639      	mov	r1, r7
 8008572:	f7f7 fe93 	bl	800029c <__adddf3>
 8008576:	4606      	mov	r6, r0
 8008578:	460f      	mov	r7, r1
 800857a:	f7f8 faf5 	bl	8000b68 <__aeabi_d2iz>
 800857e:	2200      	movs	r2, #0
 8008580:	9000      	str	r0, [sp, #0]
 8008582:	2300      	movs	r3, #0
 8008584:	4630      	mov	r0, r6
 8008586:	4639      	mov	r1, r7
 8008588:	f7f8 fab0 	bl	8000aec <__aeabi_dcmplt>
 800858c:	b150      	cbz	r0, 80085a4 <_dtoa_r+0x184>
 800858e:	9800      	ldr	r0, [sp, #0]
 8008590:	f7f7 ffd0 	bl	8000534 <__aeabi_i2d>
 8008594:	4632      	mov	r2, r6
 8008596:	463b      	mov	r3, r7
 8008598:	f7f8 fa9e 	bl	8000ad8 <__aeabi_dcmpeq>
 800859c:	b910      	cbnz	r0, 80085a4 <_dtoa_r+0x184>
 800859e:	9b00      	ldr	r3, [sp, #0]
 80085a0:	3b01      	subs	r3, #1
 80085a2:	9300      	str	r3, [sp, #0]
 80085a4:	9b00      	ldr	r3, [sp, #0]
 80085a6:	2b16      	cmp	r3, #22
 80085a8:	d85a      	bhi.n	8008660 <_dtoa_r+0x240>
 80085aa:	9a00      	ldr	r2, [sp, #0]
 80085ac:	4b57      	ldr	r3, [pc, #348]	; (800870c <_dtoa_r+0x2ec>)
 80085ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b6:	ec51 0b19 	vmov	r0, r1, d9
 80085ba:	f7f8 fa97 	bl	8000aec <__aeabi_dcmplt>
 80085be:	2800      	cmp	r0, #0
 80085c0:	d050      	beq.n	8008664 <_dtoa_r+0x244>
 80085c2:	9b00      	ldr	r3, [sp, #0]
 80085c4:	3b01      	subs	r3, #1
 80085c6:	9300      	str	r3, [sp, #0]
 80085c8:	2300      	movs	r3, #0
 80085ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80085cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085ce:	1b5d      	subs	r5, r3, r5
 80085d0:	1e6b      	subs	r3, r5, #1
 80085d2:	9305      	str	r3, [sp, #20]
 80085d4:	bf45      	ittet	mi
 80085d6:	f1c5 0301 	rsbmi	r3, r5, #1
 80085da:	9304      	strmi	r3, [sp, #16]
 80085dc:	2300      	movpl	r3, #0
 80085de:	2300      	movmi	r3, #0
 80085e0:	bf4c      	ite	mi
 80085e2:	9305      	strmi	r3, [sp, #20]
 80085e4:	9304      	strpl	r3, [sp, #16]
 80085e6:	9b00      	ldr	r3, [sp, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	db3d      	blt.n	8008668 <_dtoa_r+0x248>
 80085ec:	9b05      	ldr	r3, [sp, #20]
 80085ee:	9a00      	ldr	r2, [sp, #0]
 80085f0:	920a      	str	r2, [sp, #40]	; 0x28
 80085f2:	4413      	add	r3, r2
 80085f4:	9305      	str	r3, [sp, #20]
 80085f6:	2300      	movs	r3, #0
 80085f8:	9307      	str	r3, [sp, #28]
 80085fa:	9b06      	ldr	r3, [sp, #24]
 80085fc:	2b09      	cmp	r3, #9
 80085fe:	f200 8089 	bhi.w	8008714 <_dtoa_r+0x2f4>
 8008602:	2b05      	cmp	r3, #5
 8008604:	bfc4      	itt	gt
 8008606:	3b04      	subgt	r3, #4
 8008608:	9306      	strgt	r3, [sp, #24]
 800860a:	9b06      	ldr	r3, [sp, #24]
 800860c:	f1a3 0302 	sub.w	r3, r3, #2
 8008610:	bfcc      	ite	gt
 8008612:	2500      	movgt	r5, #0
 8008614:	2501      	movle	r5, #1
 8008616:	2b03      	cmp	r3, #3
 8008618:	f200 8087 	bhi.w	800872a <_dtoa_r+0x30a>
 800861c:	e8df f003 	tbb	[pc, r3]
 8008620:	59383a2d 	.word	0x59383a2d
 8008624:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008628:	441d      	add	r5, r3
 800862a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800862e:	2b20      	cmp	r3, #32
 8008630:	bfc1      	itttt	gt
 8008632:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008636:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800863a:	fa0b f303 	lslgt.w	r3, fp, r3
 800863e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008642:	bfda      	itte	le
 8008644:	f1c3 0320 	rsble	r3, r3, #32
 8008648:	fa06 f003 	lslle.w	r0, r6, r3
 800864c:	4318      	orrgt	r0, r3
 800864e:	f7f7 ff61 	bl	8000514 <__aeabi_ui2d>
 8008652:	2301      	movs	r3, #1
 8008654:	4606      	mov	r6, r0
 8008656:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800865a:	3d01      	subs	r5, #1
 800865c:	930e      	str	r3, [sp, #56]	; 0x38
 800865e:	e76a      	b.n	8008536 <_dtoa_r+0x116>
 8008660:	2301      	movs	r3, #1
 8008662:	e7b2      	b.n	80085ca <_dtoa_r+0x1aa>
 8008664:	900b      	str	r0, [sp, #44]	; 0x2c
 8008666:	e7b1      	b.n	80085cc <_dtoa_r+0x1ac>
 8008668:	9b04      	ldr	r3, [sp, #16]
 800866a:	9a00      	ldr	r2, [sp, #0]
 800866c:	1a9b      	subs	r3, r3, r2
 800866e:	9304      	str	r3, [sp, #16]
 8008670:	4253      	negs	r3, r2
 8008672:	9307      	str	r3, [sp, #28]
 8008674:	2300      	movs	r3, #0
 8008676:	930a      	str	r3, [sp, #40]	; 0x28
 8008678:	e7bf      	b.n	80085fa <_dtoa_r+0x1da>
 800867a:	2300      	movs	r3, #0
 800867c:	9308      	str	r3, [sp, #32]
 800867e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008680:	2b00      	cmp	r3, #0
 8008682:	dc55      	bgt.n	8008730 <_dtoa_r+0x310>
 8008684:	2301      	movs	r3, #1
 8008686:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800868a:	461a      	mov	r2, r3
 800868c:	9209      	str	r2, [sp, #36]	; 0x24
 800868e:	e00c      	b.n	80086aa <_dtoa_r+0x28a>
 8008690:	2301      	movs	r3, #1
 8008692:	e7f3      	b.n	800867c <_dtoa_r+0x25c>
 8008694:	2300      	movs	r3, #0
 8008696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008698:	9308      	str	r3, [sp, #32]
 800869a:	9b00      	ldr	r3, [sp, #0]
 800869c:	4413      	add	r3, r2
 800869e:	9302      	str	r3, [sp, #8]
 80086a0:	3301      	adds	r3, #1
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	9303      	str	r3, [sp, #12]
 80086a6:	bfb8      	it	lt
 80086a8:	2301      	movlt	r3, #1
 80086aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80086ac:	2200      	movs	r2, #0
 80086ae:	6042      	str	r2, [r0, #4]
 80086b0:	2204      	movs	r2, #4
 80086b2:	f102 0614 	add.w	r6, r2, #20
 80086b6:	429e      	cmp	r6, r3
 80086b8:	6841      	ldr	r1, [r0, #4]
 80086ba:	d93d      	bls.n	8008738 <_dtoa_r+0x318>
 80086bc:	4620      	mov	r0, r4
 80086be:	f001 f839 	bl	8009734 <_Balloc>
 80086c2:	9001      	str	r0, [sp, #4]
 80086c4:	2800      	cmp	r0, #0
 80086c6:	d13b      	bne.n	8008740 <_dtoa_r+0x320>
 80086c8:	4b11      	ldr	r3, [pc, #68]	; (8008710 <_dtoa_r+0x2f0>)
 80086ca:	4602      	mov	r2, r0
 80086cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80086d0:	e6c0      	b.n	8008454 <_dtoa_r+0x34>
 80086d2:	2301      	movs	r3, #1
 80086d4:	e7df      	b.n	8008696 <_dtoa_r+0x276>
 80086d6:	bf00      	nop
 80086d8:	636f4361 	.word	0x636f4361
 80086dc:	3fd287a7 	.word	0x3fd287a7
 80086e0:	8b60c8b3 	.word	0x8b60c8b3
 80086e4:	3fc68a28 	.word	0x3fc68a28
 80086e8:	509f79fb 	.word	0x509f79fb
 80086ec:	3fd34413 	.word	0x3fd34413
 80086f0:	0800c8e6 	.word	0x0800c8e6
 80086f4:	0800c8fd 	.word	0x0800c8fd
 80086f8:	7ff00000 	.word	0x7ff00000
 80086fc:	0800c8e2 	.word	0x0800c8e2
 8008700:	0800c8d9 	.word	0x0800c8d9
 8008704:	0800c75d 	.word	0x0800c75d
 8008708:	3ff80000 	.word	0x3ff80000
 800870c:	0800ca68 	.word	0x0800ca68
 8008710:	0800c958 	.word	0x0800c958
 8008714:	2501      	movs	r5, #1
 8008716:	2300      	movs	r3, #0
 8008718:	9306      	str	r3, [sp, #24]
 800871a:	9508      	str	r5, [sp, #32]
 800871c:	f04f 33ff 	mov.w	r3, #4294967295
 8008720:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008724:	2200      	movs	r2, #0
 8008726:	2312      	movs	r3, #18
 8008728:	e7b0      	b.n	800868c <_dtoa_r+0x26c>
 800872a:	2301      	movs	r3, #1
 800872c:	9308      	str	r3, [sp, #32]
 800872e:	e7f5      	b.n	800871c <_dtoa_r+0x2fc>
 8008730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008732:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008736:	e7b8      	b.n	80086aa <_dtoa_r+0x28a>
 8008738:	3101      	adds	r1, #1
 800873a:	6041      	str	r1, [r0, #4]
 800873c:	0052      	lsls	r2, r2, #1
 800873e:	e7b8      	b.n	80086b2 <_dtoa_r+0x292>
 8008740:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008742:	9a01      	ldr	r2, [sp, #4]
 8008744:	601a      	str	r2, [r3, #0]
 8008746:	9b03      	ldr	r3, [sp, #12]
 8008748:	2b0e      	cmp	r3, #14
 800874a:	f200 809d 	bhi.w	8008888 <_dtoa_r+0x468>
 800874e:	2d00      	cmp	r5, #0
 8008750:	f000 809a 	beq.w	8008888 <_dtoa_r+0x468>
 8008754:	9b00      	ldr	r3, [sp, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	dd32      	ble.n	80087c0 <_dtoa_r+0x3a0>
 800875a:	4ab7      	ldr	r2, [pc, #732]	; (8008a38 <_dtoa_r+0x618>)
 800875c:	f003 030f 	and.w	r3, r3, #15
 8008760:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008764:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008768:	9b00      	ldr	r3, [sp, #0]
 800876a:	05d8      	lsls	r0, r3, #23
 800876c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008770:	d516      	bpl.n	80087a0 <_dtoa_r+0x380>
 8008772:	4bb2      	ldr	r3, [pc, #712]	; (8008a3c <_dtoa_r+0x61c>)
 8008774:	ec51 0b19 	vmov	r0, r1, d9
 8008778:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800877c:	f7f8 f86e 	bl	800085c <__aeabi_ddiv>
 8008780:	f007 070f 	and.w	r7, r7, #15
 8008784:	4682      	mov	sl, r0
 8008786:	468b      	mov	fp, r1
 8008788:	2503      	movs	r5, #3
 800878a:	4eac      	ldr	r6, [pc, #688]	; (8008a3c <_dtoa_r+0x61c>)
 800878c:	b957      	cbnz	r7, 80087a4 <_dtoa_r+0x384>
 800878e:	4642      	mov	r2, r8
 8008790:	464b      	mov	r3, r9
 8008792:	4650      	mov	r0, sl
 8008794:	4659      	mov	r1, fp
 8008796:	f7f8 f861 	bl	800085c <__aeabi_ddiv>
 800879a:	4682      	mov	sl, r0
 800879c:	468b      	mov	fp, r1
 800879e:	e028      	b.n	80087f2 <_dtoa_r+0x3d2>
 80087a0:	2502      	movs	r5, #2
 80087a2:	e7f2      	b.n	800878a <_dtoa_r+0x36a>
 80087a4:	07f9      	lsls	r1, r7, #31
 80087a6:	d508      	bpl.n	80087ba <_dtoa_r+0x39a>
 80087a8:	4640      	mov	r0, r8
 80087aa:	4649      	mov	r1, r9
 80087ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80087b0:	f7f7 ff2a 	bl	8000608 <__aeabi_dmul>
 80087b4:	3501      	adds	r5, #1
 80087b6:	4680      	mov	r8, r0
 80087b8:	4689      	mov	r9, r1
 80087ba:	107f      	asrs	r7, r7, #1
 80087bc:	3608      	adds	r6, #8
 80087be:	e7e5      	b.n	800878c <_dtoa_r+0x36c>
 80087c0:	f000 809b 	beq.w	80088fa <_dtoa_r+0x4da>
 80087c4:	9b00      	ldr	r3, [sp, #0]
 80087c6:	4f9d      	ldr	r7, [pc, #628]	; (8008a3c <_dtoa_r+0x61c>)
 80087c8:	425e      	negs	r6, r3
 80087ca:	4b9b      	ldr	r3, [pc, #620]	; (8008a38 <_dtoa_r+0x618>)
 80087cc:	f006 020f 	and.w	r2, r6, #15
 80087d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d8:	ec51 0b19 	vmov	r0, r1, d9
 80087dc:	f7f7 ff14 	bl	8000608 <__aeabi_dmul>
 80087e0:	1136      	asrs	r6, r6, #4
 80087e2:	4682      	mov	sl, r0
 80087e4:	468b      	mov	fp, r1
 80087e6:	2300      	movs	r3, #0
 80087e8:	2502      	movs	r5, #2
 80087ea:	2e00      	cmp	r6, #0
 80087ec:	d17a      	bne.n	80088e4 <_dtoa_r+0x4c4>
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1d3      	bne.n	800879a <_dtoa_r+0x37a>
 80087f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f000 8082 	beq.w	80088fe <_dtoa_r+0x4de>
 80087fa:	4b91      	ldr	r3, [pc, #580]	; (8008a40 <_dtoa_r+0x620>)
 80087fc:	2200      	movs	r2, #0
 80087fe:	4650      	mov	r0, sl
 8008800:	4659      	mov	r1, fp
 8008802:	f7f8 f973 	bl	8000aec <__aeabi_dcmplt>
 8008806:	2800      	cmp	r0, #0
 8008808:	d079      	beq.n	80088fe <_dtoa_r+0x4de>
 800880a:	9b03      	ldr	r3, [sp, #12]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d076      	beq.n	80088fe <_dtoa_r+0x4de>
 8008810:	9b02      	ldr	r3, [sp, #8]
 8008812:	2b00      	cmp	r3, #0
 8008814:	dd36      	ble.n	8008884 <_dtoa_r+0x464>
 8008816:	9b00      	ldr	r3, [sp, #0]
 8008818:	4650      	mov	r0, sl
 800881a:	4659      	mov	r1, fp
 800881c:	1e5f      	subs	r7, r3, #1
 800881e:	2200      	movs	r2, #0
 8008820:	4b88      	ldr	r3, [pc, #544]	; (8008a44 <_dtoa_r+0x624>)
 8008822:	f7f7 fef1 	bl	8000608 <__aeabi_dmul>
 8008826:	9e02      	ldr	r6, [sp, #8]
 8008828:	4682      	mov	sl, r0
 800882a:	468b      	mov	fp, r1
 800882c:	3501      	adds	r5, #1
 800882e:	4628      	mov	r0, r5
 8008830:	f7f7 fe80 	bl	8000534 <__aeabi_i2d>
 8008834:	4652      	mov	r2, sl
 8008836:	465b      	mov	r3, fp
 8008838:	f7f7 fee6 	bl	8000608 <__aeabi_dmul>
 800883c:	4b82      	ldr	r3, [pc, #520]	; (8008a48 <_dtoa_r+0x628>)
 800883e:	2200      	movs	r2, #0
 8008840:	f7f7 fd2c 	bl	800029c <__adddf3>
 8008844:	46d0      	mov	r8, sl
 8008846:	46d9      	mov	r9, fp
 8008848:	4682      	mov	sl, r0
 800884a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800884e:	2e00      	cmp	r6, #0
 8008850:	d158      	bne.n	8008904 <_dtoa_r+0x4e4>
 8008852:	4b7e      	ldr	r3, [pc, #504]	; (8008a4c <_dtoa_r+0x62c>)
 8008854:	2200      	movs	r2, #0
 8008856:	4640      	mov	r0, r8
 8008858:	4649      	mov	r1, r9
 800885a:	f7f7 fd1d 	bl	8000298 <__aeabi_dsub>
 800885e:	4652      	mov	r2, sl
 8008860:	465b      	mov	r3, fp
 8008862:	4680      	mov	r8, r0
 8008864:	4689      	mov	r9, r1
 8008866:	f7f8 f95f 	bl	8000b28 <__aeabi_dcmpgt>
 800886a:	2800      	cmp	r0, #0
 800886c:	f040 8295 	bne.w	8008d9a <_dtoa_r+0x97a>
 8008870:	4652      	mov	r2, sl
 8008872:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008876:	4640      	mov	r0, r8
 8008878:	4649      	mov	r1, r9
 800887a:	f7f8 f937 	bl	8000aec <__aeabi_dcmplt>
 800887e:	2800      	cmp	r0, #0
 8008880:	f040 8289 	bne.w	8008d96 <_dtoa_r+0x976>
 8008884:	ec5b ab19 	vmov	sl, fp, d9
 8008888:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800888a:	2b00      	cmp	r3, #0
 800888c:	f2c0 8148 	blt.w	8008b20 <_dtoa_r+0x700>
 8008890:	9a00      	ldr	r2, [sp, #0]
 8008892:	2a0e      	cmp	r2, #14
 8008894:	f300 8144 	bgt.w	8008b20 <_dtoa_r+0x700>
 8008898:	4b67      	ldr	r3, [pc, #412]	; (8008a38 <_dtoa_r+0x618>)
 800889a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800889e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f280 80d5 	bge.w	8008a54 <_dtoa_r+0x634>
 80088aa:	9b03      	ldr	r3, [sp, #12]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	f300 80d1 	bgt.w	8008a54 <_dtoa_r+0x634>
 80088b2:	f040 826f 	bne.w	8008d94 <_dtoa_r+0x974>
 80088b6:	4b65      	ldr	r3, [pc, #404]	; (8008a4c <_dtoa_r+0x62c>)
 80088b8:	2200      	movs	r2, #0
 80088ba:	4640      	mov	r0, r8
 80088bc:	4649      	mov	r1, r9
 80088be:	f7f7 fea3 	bl	8000608 <__aeabi_dmul>
 80088c2:	4652      	mov	r2, sl
 80088c4:	465b      	mov	r3, fp
 80088c6:	f7f8 f925 	bl	8000b14 <__aeabi_dcmpge>
 80088ca:	9e03      	ldr	r6, [sp, #12]
 80088cc:	4637      	mov	r7, r6
 80088ce:	2800      	cmp	r0, #0
 80088d0:	f040 8245 	bne.w	8008d5e <_dtoa_r+0x93e>
 80088d4:	9d01      	ldr	r5, [sp, #4]
 80088d6:	2331      	movs	r3, #49	; 0x31
 80088d8:	f805 3b01 	strb.w	r3, [r5], #1
 80088dc:	9b00      	ldr	r3, [sp, #0]
 80088de:	3301      	adds	r3, #1
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	e240      	b.n	8008d66 <_dtoa_r+0x946>
 80088e4:	07f2      	lsls	r2, r6, #31
 80088e6:	d505      	bpl.n	80088f4 <_dtoa_r+0x4d4>
 80088e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088ec:	f7f7 fe8c 	bl	8000608 <__aeabi_dmul>
 80088f0:	3501      	adds	r5, #1
 80088f2:	2301      	movs	r3, #1
 80088f4:	1076      	asrs	r6, r6, #1
 80088f6:	3708      	adds	r7, #8
 80088f8:	e777      	b.n	80087ea <_dtoa_r+0x3ca>
 80088fa:	2502      	movs	r5, #2
 80088fc:	e779      	b.n	80087f2 <_dtoa_r+0x3d2>
 80088fe:	9f00      	ldr	r7, [sp, #0]
 8008900:	9e03      	ldr	r6, [sp, #12]
 8008902:	e794      	b.n	800882e <_dtoa_r+0x40e>
 8008904:	9901      	ldr	r1, [sp, #4]
 8008906:	4b4c      	ldr	r3, [pc, #304]	; (8008a38 <_dtoa_r+0x618>)
 8008908:	4431      	add	r1, r6
 800890a:	910d      	str	r1, [sp, #52]	; 0x34
 800890c:	9908      	ldr	r1, [sp, #32]
 800890e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008912:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008916:	2900      	cmp	r1, #0
 8008918:	d043      	beq.n	80089a2 <_dtoa_r+0x582>
 800891a:	494d      	ldr	r1, [pc, #308]	; (8008a50 <_dtoa_r+0x630>)
 800891c:	2000      	movs	r0, #0
 800891e:	f7f7 ff9d 	bl	800085c <__aeabi_ddiv>
 8008922:	4652      	mov	r2, sl
 8008924:	465b      	mov	r3, fp
 8008926:	f7f7 fcb7 	bl	8000298 <__aeabi_dsub>
 800892a:	9d01      	ldr	r5, [sp, #4]
 800892c:	4682      	mov	sl, r0
 800892e:	468b      	mov	fp, r1
 8008930:	4649      	mov	r1, r9
 8008932:	4640      	mov	r0, r8
 8008934:	f7f8 f918 	bl	8000b68 <__aeabi_d2iz>
 8008938:	4606      	mov	r6, r0
 800893a:	f7f7 fdfb 	bl	8000534 <__aeabi_i2d>
 800893e:	4602      	mov	r2, r0
 8008940:	460b      	mov	r3, r1
 8008942:	4640      	mov	r0, r8
 8008944:	4649      	mov	r1, r9
 8008946:	f7f7 fca7 	bl	8000298 <__aeabi_dsub>
 800894a:	3630      	adds	r6, #48	; 0x30
 800894c:	f805 6b01 	strb.w	r6, [r5], #1
 8008950:	4652      	mov	r2, sl
 8008952:	465b      	mov	r3, fp
 8008954:	4680      	mov	r8, r0
 8008956:	4689      	mov	r9, r1
 8008958:	f7f8 f8c8 	bl	8000aec <__aeabi_dcmplt>
 800895c:	2800      	cmp	r0, #0
 800895e:	d163      	bne.n	8008a28 <_dtoa_r+0x608>
 8008960:	4642      	mov	r2, r8
 8008962:	464b      	mov	r3, r9
 8008964:	4936      	ldr	r1, [pc, #216]	; (8008a40 <_dtoa_r+0x620>)
 8008966:	2000      	movs	r0, #0
 8008968:	f7f7 fc96 	bl	8000298 <__aeabi_dsub>
 800896c:	4652      	mov	r2, sl
 800896e:	465b      	mov	r3, fp
 8008970:	f7f8 f8bc 	bl	8000aec <__aeabi_dcmplt>
 8008974:	2800      	cmp	r0, #0
 8008976:	f040 80b5 	bne.w	8008ae4 <_dtoa_r+0x6c4>
 800897a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800897c:	429d      	cmp	r5, r3
 800897e:	d081      	beq.n	8008884 <_dtoa_r+0x464>
 8008980:	4b30      	ldr	r3, [pc, #192]	; (8008a44 <_dtoa_r+0x624>)
 8008982:	2200      	movs	r2, #0
 8008984:	4650      	mov	r0, sl
 8008986:	4659      	mov	r1, fp
 8008988:	f7f7 fe3e 	bl	8000608 <__aeabi_dmul>
 800898c:	4b2d      	ldr	r3, [pc, #180]	; (8008a44 <_dtoa_r+0x624>)
 800898e:	4682      	mov	sl, r0
 8008990:	468b      	mov	fp, r1
 8008992:	4640      	mov	r0, r8
 8008994:	4649      	mov	r1, r9
 8008996:	2200      	movs	r2, #0
 8008998:	f7f7 fe36 	bl	8000608 <__aeabi_dmul>
 800899c:	4680      	mov	r8, r0
 800899e:	4689      	mov	r9, r1
 80089a0:	e7c6      	b.n	8008930 <_dtoa_r+0x510>
 80089a2:	4650      	mov	r0, sl
 80089a4:	4659      	mov	r1, fp
 80089a6:	f7f7 fe2f 	bl	8000608 <__aeabi_dmul>
 80089aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089ac:	9d01      	ldr	r5, [sp, #4]
 80089ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80089b0:	4682      	mov	sl, r0
 80089b2:	468b      	mov	fp, r1
 80089b4:	4649      	mov	r1, r9
 80089b6:	4640      	mov	r0, r8
 80089b8:	f7f8 f8d6 	bl	8000b68 <__aeabi_d2iz>
 80089bc:	4606      	mov	r6, r0
 80089be:	f7f7 fdb9 	bl	8000534 <__aeabi_i2d>
 80089c2:	3630      	adds	r6, #48	; 0x30
 80089c4:	4602      	mov	r2, r0
 80089c6:	460b      	mov	r3, r1
 80089c8:	4640      	mov	r0, r8
 80089ca:	4649      	mov	r1, r9
 80089cc:	f7f7 fc64 	bl	8000298 <__aeabi_dsub>
 80089d0:	f805 6b01 	strb.w	r6, [r5], #1
 80089d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089d6:	429d      	cmp	r5, r3
 80089d8:	4680      	mov	r8, r0
 80089da:	4689      	mov	r9, r1
 80089dc:	f04f 0200 	mov.w	r2, #0
 80089e0:	d124      	bne.n	8008a2c <_dtoa_r+0x60c>
 80089e2:	4b1b      	ldr	r3, [pc, #108]	; (8008a50 <_dtoa_r+0x630>)
 80089e4:	4650      	mov	r0, sl
 80089e6:	4659      	mov	r1, fp
 80089e8:	f7f7 fc58 	bl	800029c <__adddf3>
 80089ec:	4602      	mov	r2, r0
 80089ee:	460b      	mov	r3, r1
 80089f0:	4640      	mov	r0, r8
 80089f2:	4649      	mov	r1, r9
 80089f4:	f7f8 f898 	bl	8000b28 <__aeabi_dcmpgt>
 80089f8:	2800      	cmp	r0, #0
 80089fa:	d173      	bne.n	8008ae4 <_dtoa_r+0x6c4>
 80089fc:	4652      	mov	r2, sl
 80089fe:	465b      	mov	r3, fp
 8008a00:	4913      	ldr	r1, [pc, #76]	; (8008a50 <_dtoa_r+0x630>)
 8008a02:	2000      	movs	r0, #0
 8008a04:	f7f7 fc48 	bl	8000298 <__aeabi_dsub>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	4640      	mov	r0, r8
 8008a0e:	4649      	mov	r1, r9
 8008a10:	f7f8 f86c 	bl	8000aec <__aeabi_dcmplt>
 8008a14:	2800      	cmp	r0, #0
 8008a16:	f43f af35 	beq.w	8008884 <_dtoa_r+0x464>
 8008a1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008a1c:	1e6b      	subs	r3, r5, #1
 8008a1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a24:	2b30      	cmp	r3, #48	; 0x30
 8008a26:	d0f8      	beq.n	8008a1a <_dtoa_r+0x5fa>
 8008a28:	9700      	str	r7, [sp, #0]
 8008a2a:	e049      	b.n	8008ac0 <_dtoa_r+0x6a0>
 8008a2c:	4b05      	ldr	r3, [pc, #20]	; (8008a44 <_dtoa_r+0x624>)
 8008a2e:	f7f7 fdeb 	bl	8000608 <__aeabi_dmul>
 8008a32:	4680      	mov	r8, r0
 8008a34:	4689      	mov	r9, r1
 8008a36:	e7bd      	b.n	80089b4 <_dtoa_r+0x594>
 8008a38:	0800ca68 	.word	0x0800ca68
 8008a3c:	0800ca40 	.word	0x0800ca40
 8008a40:	3ff00000 	.word	0x3ff00000
 8008a44:	40240000 	.word	0x40240000
 8008a48:	401c0000 	.word	0x401c0000
 8008a4c:	40140000 	.word	0x40140000
 8008a50:	3fe00000 	.word	0x3fe00000
 8008a54:	9d01      	ldr	r5, [sp, #4]
 8008a56:	4656      	mov	r6, sl
 8008a58:	465f      	mov	r7, fp
 8008a5a:	4642      	mov	r2, r8
 8008a5c:	464b      	mov	r3, r9
 8008a5e:	4630      	mov	r0, r6
 8008a60:	4639      	mov	r1, r7
 8008a62:	f7f7 fefb 	bl	800085c <__aeabi_ddiv>
 8008a66:	f7f8 f87f 	bl	8000b68 <__aeabi_d2iz>
 8008a6a:	4682      	mov	sl, r0
 8008a6c:	f7f7 fd62 	bl	8000534 <__aeabi_i2d>
 8008a70:	4642      	mov	r2, r8
 8008a72:	464b      	mov	r3, r9
 8008a74:	f7f7 fdc8 	bl	8000608 <__aeabi_dmul>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	4630      	mov	r0, r6
 8008a7e:	4639      	mov	r1, r7
 8008a80:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008a84:	f7f7 fc08 	bl	8000298 <__aeabi_dsub>
 8008a88:	f805 6b01 	strb.w	r6, [r5], #1
 8008a8c:	9e01      	ldr	r6, [sp, #4]
 8008a8e:	9f03      	ldr	r7, [sp, #12]
 8008a90:	1bae      	subs	r6, r5, r6
 8008a92:	42b7      	cmp	r7, r6
 8008a94:	4602      	mov	r2, r0
 8008a96:	460b      	mov	r3, r1
 8008a98:	d135      	bne.n	8008b06 <_dtoa_r+0x6e6>
 8008a9a:	f7f7 fbff 	bl	800029c <__adddf3>
 8008a9e:	4642      	mov	r2, r8
 8008aa0:	464b      	mov	r3, r9
 8008aa2:	4606      	mov	r6, r0
 8008aa4:	460f      	mov	r7, r1
 8008aa6:	f7f8 f83f 	bl	8000b28 <__aeabi_dcmpgt>
 8008aaa:	b9d0      	cbnz	r0, 8008ae2 <_dtoa_r+0x6c2>
 8008aac:	4642      	mov	r2, r8
 8008aae:	464b      	mov	r3, r9
 8008ab0:	4630      	mov	r0, r6
 8008ab2:	4639      	mov	r1, r7
 8008ab4:	f7f8 f810 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ab8:	b110      	cbz	r0, 8008ac0 <_dtoa_r+0x6a0>
 8008aba:	f01a 0f01 	tst.w	sl, #1
 8008abe:	d110      	bne.n	8008ae2 <_dtoa_r+0x6c2>
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	ee18 1a10 	vmov	r1, s16
 8008ac6:	f000 fe75 	bl	80097b4 <_Bfree>
 8008aca:	2300      	movs	r3, #0
 8008acc:	9800      	ldr	r0, [sp, #0]
 8008ace:	702b      	strb	r3, [r5, #0]
 8008ad0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ad2:	3001      	adds	r0, #1
 8008ad4:	6018      	str	r0, [r3, #0]
 8008ad6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f43f acf1 	beq.w	80084c0 <_dtoa_r+0xa0>
 8008ade:	601d      	str	r5, [r3, #0]
 8008ae0:	e4ee      	b.n	80084c0 <_dtoa_r+0xa0>
 8008ae2:	9f00      	ldr	r7, [sp, #0]
 8008ae4:	462b      	mov	r3, r5
 8008ae6:	461d      	mov	r5, r3
 8008ae8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008aec:	2a39      	cmp	r2, #57	; 0x39
 8008aee:	d106      	bne.n	8008afe <_dtoa_r+0x6de>
 8008af0:	9a01      	ldr	r2, [sp, #4]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d1f7      	bne.n	8008ae6 <_dtoa_r+0x6c6>
 8008af6:	9901      	ldr	r1, [sp, #4]
 8008af8:	2230      	movs	r2, #48	; 0x30
 8008afa:	3701      	adds	r7, #1
 8008afc:	700a      	strb	r2, [r1, #0]
 8008afe:	781a      	ldrb	r2, [r3, #0]
 8008b00:	3201      	adds	r2, #1
 8008b02:	701a      	strb	r2, [r3, #0]
 8008b04:	e790      	b.n	8008a28 <_dtoa_r+0x608>
 8008b06:	4ba6      	ldr	r3, [pc, #664]	; (8008da0 <_dtoa_r+0x980>)
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f7f7 fd7d 	bl	8000608 <__aeabi_dmul>
 8008b0e:	2200      	movs	r2, #0
 8008b10:	2300      	movs	r3, #0
 8008b12:	4606      	mov	r6, r0
 8008b14:	460f      	mov	r7, r1
 8008b16:	f7f7 ffdf 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b1a:	2800      	cmp	r0, #0
 8008b1c:	d09d      	beq.n	8008a5a <_dtoa_r+0x63a>
 8008b1e:	e7cf      	b.n	8008ac0 <_dtoa_r+0x6a0>
 8008b20:	9a08      	ldr	r2, [sp, #32]
 8008b22:	2a00      	cmp	r2, #0
 8008b24:	f000 80d7 	beq.w	8008cd6 <_dtoa_r+0x8b6>
 8008b28:	9a06      	ldr	r2, [sp, #24]
 8008b2a:	2a01      	cmp	r2, #1
 8008b2c:	f300 80ba 	bgt.w	8008ca4 <_dtoa_r+0x884>
 8008b30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b32:	2a00      	cmp	r2, #0
 8008b34:	f000 80b2 	beq.w	8008c9c <_dtoa_r+0x87c>
 8008b38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008b3c:	9e07      	ldr	r6, [sp, #28]
 8008b3e:	9d04      	ldr	r5, [sp, #16]
 8008b40:	9a04      	ldr	r2, [sp, #16]
 8008b42:	441a      	add	r2, r3
 8008b44:	9204      	str	r2, [sp, #16]
 8008b46:	9a05      	ldr	r2, [sp, #20]
 8008b48:	2101      	movs	r1, #1
 8008b4a:	441a      	add	r2, r3
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	9205      	str	r2, [sp, #20]
 8008b50:	f000 ff32 	bl	80099b8 <__i2b>
 8008b54:	4607      	mov	r7, r0
 8008b56:	2d00      	cmp	r5, #0
 8008b58:	dd0c      	ble.n	8008b74 <_dtoa_r+0x754>
 8008b5a:	9b05      	ldr	r3, [sp, #20]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	dd09      	ble.n	8008b74 <_dtoa_r+0x754>
 8008b60:	42ab      	cmp	r3, r5
 8008b62:	9a04      	ldr	r2, [sp, #16]
 8008b64:	bfa8      	it	ge
 8008b66:	462b      	movge	r3, r5
 8008b68:	1ad2      	subs	r2, r2, r3
 8008b6a:	9204      	str	r2, [sp, #16]
 8008b6c:	9a05      	ldr	r2, [sp, #20]
 8008b6e:	1aed      	subs	r5, r5, r3
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	9305      	str	r3, [sp, #20]
 8008b74:	9b07      	ldr	r3, [sp, #28]
 8008b76:	b31b      	cbz	r3, 8008bc0 <_dtoa_r+0x7a0>
 8008b78:	9b08      	ldr	r3, [sp, #32]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	f000 80af 	beq.w	8008cde <_dtoa_r+0x8be>
 8008b80:	2e00      	cmp	r6, #0
 8008b82:	dd13      	ble.n	8008bac <_dtoa_r+0x78c>
 8008b84:	4639      	mov	r1, r7
 8008b86:	4632      	mov	r2, r6
 8008b88:	4620      	mov	r0, r4
 8008b8a:	f000 ffd5 	bl	8009b38 <__pow5mult>
 8008b8e:	ee18 2a10 	vmov	r2, s16
 8008b92:	4601      	mov	r1, r0
 8008b94:	4607      	mov	r7, r0
 8008b96:	4620      	mov	r0, r4
 8008b98:	f000 ff24 	bl	80099e4 <__multiply>
 8008b9c:	ee18 1a10 	vmov	r1, s16
 8008ba0:	4680      	mov	r8, r0
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	f000 fe06 	bl	80097b4 <_Bfree>
 8008ba8:	ee08 8a10 	vmov	s16, r8
 8008bac:	9b07      	ldr	r3, [sp, #28]
 8008bae:	1b9a      	subs	r2, r3, r6
 8008bb0:	d006      	beq.n	8008bc0 <_dtoa_r+0x7a0>
 8008bb2:	ee18 1a10 	vmov	r1, s16
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f000 ffbe 	bl	8009b38 <__pow5mult>
 8008bbc:	ee08 0a10 	vmov	s16, r0
 8008bc0:	2101      	movs	r1, #1
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	f000 fef8 	bl	80099b8 <__i2b>
 8008bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	4606      	mov	r6, r0
 8008bce:	f340 8088 	ble.w	8008ce2 <_dtoa_r+0x8c2>
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	4601      	mov	r1, r0
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	f000 ffae 	bl	8009b38 <__pow5mult>
 8008bdc:	9b06      	ldr	r3, [sp, #24]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	4606      	mov	r6, r0
 8008be2:	f340 8081 	ble.w	8008ce8 <_dtoa_r+0x8c8>
 8008be6:	f04f 0800 	mov.w	r8, #0
 8008bea:	6933      	ldr	r3, [r6, #16]
 8008bec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008bf0:	6918      	ldr	r0, [r3, #16]
 8008bf2:	f000 fe91 	bl	8009918 <__hi0bits>
 8008bf6:	f1c0 0020 	rsb	r0, r0, #32
 8008bfa:	9b05      	ldr	r3, [sp, #20]
 8008bfc:	4418      	add	r0, r3
 8008bfe:	f010 001f 	ands.w	r0, r0, #31
 8008c02:	f000 8092 	beq.w	8008d2a <_dtoa_r+0x90a>
 8008c06:	f1c0 0320 	rsb	r3, r0, #32
 8008c0a:	2b04      	cmp	r3, #4
 8008c0c:	f340 808a 	ble.w	8008d24 <_dtoa_r+0x904>
 8008c10:	f1c0 001c 	rsb	r0, r0, #28
 8008c14:	9b04      	ldr	r3, [sp, #16]
 8008c16:	4403      	add	r3, r0
 8008c18:	9304      	str	r3, [sp, #16]
 8008c1a:	9b05      	ldr	r3, [sp, #20]
 8008c1c:	4403      	add	r3, r0
 8008c1e:	4405      	add	r5, r0
 8008c20:	9305      	str	r3, [sp, #20]
 8008c22:	9b04      	ldr	r3, [sp, #16]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	dd07      	ble.n	8008c38 <_dtoa_r+0x818>
 8008c28:	ee18 1a10 	vmov	r1, s16
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f000 ffdc 	bl	8009bec <__lshift>
 8008c34:	ee08 0a10 	vmov	s16, r0
 8008c38:	9b05      	ldr	r3, [sp, #20]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	dd05      	ble.n	8008c4a <_dtoa_r+0x82a>
 8008c3e:	4631      	mov	r1, r6
 8008c40:	461a      	mov	r2, r3
 8008c42:	4620      	mov	r0, r4
 8008c44:	f000 ffd2 	bl	8009bec <__lshift>
 8008c48:	4606      	mov	r6, r0
 8008c4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d06e      	beq.n	8008d2e <_dtoa_r+0x90e>
 8008c50:	ee18 0a10 	vmov	r0, s16
 8008c54:	4631      	mov	r1, r6
 8008c56:	f001 f839 	bl	8009ccc <__mcmp>
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	da67      	bge.n	8008d2e <_dtoa_r+0x90e>
 8008c5e:	9b00      	ldr	r3, [sp, #0]
 8008c60:	3b01      	subs	r3, #1
 8008c62:	ee18 1a10 	vmov	r1, s16
 8008c66:	9300      	str	r3, [sp, #0]
 8008c68:	220a      	movs	r2, #10
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	f000 fdc3 	bl	80097f8 <__multadd>
 8008c72:	9b08      	ldr	r3, [sp, #32]
 8008c74:	ee08 0a10 	vmov	s16, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	f000 81b1 	beq.w	8008fe0 <_dtoa_r+0xbc0>
 8008c7e:	2300      	movs	r3, #0
 8008c80:	4639      	mov	r1, r7
 8008c82:	220a      	movs	r2, #10
 8008c84:	4620      	mov	r0, r4
 8008c86:	f000 fdb7 	bl	80097f8 <__multadd>
 8008c8a:	9b02      	ldr	r3, [sp, #8]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	4607      	mov	r7, r0
 8008c90:	f300 808e 	bgt.w	8008db0 <_dtoa_r+0x990>
 8008c94:	9b06      	ldr	r3, [sp, #24]
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	dc51      	bgt.n	8008d3e <_dtoa_r+0x91e>
 8008c9a:	e089      	b.n	8008db0 <_dtoa_r+0x990>
 8008c9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008ca2:	e74b      	b.n	8008b3c <_dtoa_r+0x71c>
 8008ca4:	9b03      	ldr	r3, [sp, #12]
 8008ca6:	1e5e      	subs	r6, r3, #1
 8008ca8:	9b07      	ldr	r3, [sp, #28]
 8008caa:	42b3      	cmp	r3, r6
 8008cac:	bfbf      	itttt	lt
 8008cae:	9b07      	ldrlt	r3, [sp, #28]
 8008cb0:	9607      	strlt	r6, [sp, #28]
 8008cb2:	1af2      	sublt	r2, r6, r3
 8008cb4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008cb6:	bfb6      	itet	lt
 8008cb8:	189b      	addlt	r3, r3, r2
 8008cba:	1b9e      	subge	r6, r3, r6
 8008cbc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008cbe:	9b03      	ldr	r3, [sp, #12]
 8008cc0:	bfb8      	it	lt
 8008cc2:	2600      	movlt	r6, #0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	bfb7      	itett	lt
 8008cc8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008ccc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008cd0:	1a9d      	sublt	r5, r3, r2
 8008cd2:	2300      	movlt	r3, #0
 8008cd4:	e734      	b.n	8008b40 <_dtoa_r+0x720>
 8008cd6:	9e07      	ldr	r6, [sp, #28]
 8008cd8:	9d04      	ldr	r5, [sp, #16]
 8008cda:	9f08      	ldr	r7, [sp, #32]
 8008cdc:	e73b      	b.n	8008b56 <_dtoa_r+0x736>
 8008cde:	9a07      	ldr	r2, [sp, #28]
 8008ce0:	e767      	b.n	8008bb2 <_dtoa_r+0x792>
 8008ce2:	9b06      	ldr	r3, [sp, #24]
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	dc18      	bgt.n	8008d1a <_dtoa_r+0x8fa>
 8008ce8:	f1ba 0f00 	cmp.w	sl, #0
 8008cec:	d115      	bne.n	8008d1a <_dtoa_r+0x8fa>
 8008cee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008cf2:	b993      	cbnz	r3, 8008d1a <_dtoa_r+0x8fa>
 8008cf4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008cf8:	0d1b      	lsrs	r3, r3, #20
 8008cfa:	051b      	lsls	r3, r3, #20
 8008cfc:	b183      	cbz	r3, 8008d20 <_dtoa_r+0x900>
 8008cfe:	9b04      	ldr	r3, [sp, #16]
 8008d00:	3301      	adds	r3, #1
 8008d02:	9304      	str	r3, [sp, #16]
 8008d04:	9b05      	ldr	r3, [sp, #20]
 8008d06:	3301      	adds	r3, #1
 8008d08:	9305      	str	r3, [sp, #20]
 8008d0a:	f04f 0801 	mov.w	r8, #1
 8008d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f47f af6a 	bne.w	8008bea <_dtoa_r+0x7ca>
 8008d16:	2001      	movs	r0, #1
 8008d18:	e76f      	b.n	8008bfa <_dtoa_r+0x7da>
 8008d1a:	f04f 0800 	mov.w	r8, #0
 8008d1e:	e7f6      	b.n	8008d0e <_dtoa_r+0x8ee>
 8008d20:	4698      	mov	r8, r3
 8008d22:	e7f4      	b.n	8008d0e <_dtoa_r+0x8ee>
 8008d24:	f43f af7d 	beq.w	8008c22 <_dtoa_r+0x802>
 8008d28:	4618      	mov	r0, r3
 8008d2a:	301c      	adds	r0, #28
 8008d2c:	e772      	b.n	8008c14 <_dtoa_r+0x7f4>
 8008d2e:	9b03      	ldr	r3, [sp, #12]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	dc37      	bgt.n	8008da4 <_dtoa_r+0x984>
 8008d34:	9b06      	ldr	r3, [sp, #24]
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	dd34      	ble.n	8008da4 <_dtoa_r+0x984>
 8008d3a:	9b03      	ldr	r3, [sp, #12]
 8008d3c:	9302      	str	r3, [sp, #8]
 8008d3e:	9b02      	ldr	r3, [sp, #8]
 8008d40:	b96b      	cbnz	r3, 8008d5e <_dtoa_r+0x93e>
 8008d42:	4631      	mov	r1, r6
 8008d44:	2205      	movs	r2, #5
 8008d46:	4620      	mov	r0, r4
 8008d48:	f000 fd56 	bl	80097f8 <__multadd>
 8008d4c:	4601      	mov	r1, r0
 8008d4e:	4606      	mov	r6, r0
 8008d50:	ee18 0a10 	vmov	r0, s16
 8008d54:	f000 ffba 	bl	8009ccc <__mcmp>
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	f73f adbb 	bgt.w	80088d4 <_dtoa_r+0x4b4>
 8008d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d60:	9d01      	ldr	r5, [sp, #4]
 8008d62:	43db      	mvns	r3, r3
 8008d64:	9300      	str	r3, [sp, #0]
 8008d66:	f04f 0800 	mov.w	r8, #0
 8008d6a:	4631      	mov	r1, r6
 8008d6c:	4620      	mov	r0, r4
 8008d6e:	f000 fd21 	bl	80097b4 <_Bfree>
 8008d72:	2f00      	cmp	r7, #0
 8008d74:	f43f aea4 	beq.w	8008ac0 <_dtoa_r+0x6a0>
 8008d78:	f1b8 0f00 	cmp.w	r8, #0
 8008d7c:	d005      	beq.n	8008d8a <_dtoa_r+0x96a>
 8008d7e:	45b8      	cmp	r8, r7
 8008d80:	d003      	beq.n	8008d8a <_dtoa_r+0x96a>
 8008d82:	4641      	mov	r1, r8
 8008d84:	4620      	mov	r0, r4
 8008d86:	f000 fd15 	bl	80097b4 <_Bfree>
 8008d8a:	4639      	mov	r1, r7
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f000 fd11 	bl	80097b4 <_Bfree>
 8008d92:	e695      	b.n	8008ac0 <_dtoa_r+0x6a0>
 8008d94:	2600      	movs	r6, #0
 8008d96:	4637      	mov	r7, r6
 8008d98:	e7e1      	b.n	8008d5e <_dtoa_r+0x93e>
 8008d9a:	9700      	str	r7, [sp, #0]
 8008d9c:	4637      	mov	r7, r6
 8008d9e:	e599      	b.n	80088d4 <_dtoa_r+0x4b4>
 8008da0:	40240000 	.word	0x40240000
 8008da4:	9b08      	ldr	r3, [sp, #32]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f000 80ca 	beq.w	8008f40 <_dtoa_r+0xb20>
 8008dac:	9b03      	ldr	r3, [sp, #12]
 8008dae:	9302      	str	r3, [sp, #8]
 8008db0:	2d00      	cmp	r5, #0
 8008db2:	dd05      	ble.n	8008dc0 <_dtoa_r+0x9a0>
 8008db4:	4639      	mov	r1, r7
 8008db6:	462a      	mov	r2, r5
 8008db8:	4620      	mov	r0, r4
 8008dba:	f000 ff17 	bl	8009bec <__lshift>
 8008dbe:	4607      	mov	r7, r0
 8008dc0:	f1b8 0f00 	cmp.w	r8, #0
 8008dc4:	d05b      	beq.n	8008e7e <_dtoa_r+0xa5e>
 8008dc6:	6879      	ldr	r1, [r7, #4]
 8008dc8:	4620      	mov	r0, r4
 8008dca:	f000 fcb3 	bl	8009734 <_Balloc>
 8008dce:	4605      	mov	r5, r0
 8008dd0:	b928      	cbnz	r0, 8008dde <_dtoa_r+0x9be>
 8008dd2:	4b87      	ldr	r3, [pc, #540]	; (8008ff0 <_dtoa_r+0xbd0>)
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008dda:	f7ff bb3b 	b.w	8008454 <_dtoa_r+0x34>
 8008dde:	693a      	ldr	r2, [r7, #16]
 8008de0:	3202      	adds	r2, #2
 8008de2:	0092      	lsls	r2, r2, #2
 8008de4:	f107 010c 	add.w	r1, r7, #12
 8008de8:	300c      	adds	r0, #12
 8008dea:	f000 fc95 	bl	8009718 <memcpy>
 8008dee:	2201      	movs	r2, #1
 8008df0:	4629      	mov	r1, r5
 8008df2:	4620      	mov	r0, r4
 8008df4:	f000 fefa 	bl	8009bec <__lshift>
 8008df8:	9b01      	ldr	r3, [sp, #4]
 8008dfa:	f103 0901 	add.w	r9, r3, #1
 8008dfe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008e02:	4413      	add	r3, r2
 8008e04:	9305      	str	r3, [sp, #20]
 8008e06:	f00a 0301 	and.w	r3, sl, #1
 8008e0a:	46b8      	mov	r8, r7
 8008e0c:	9304      	str	r3, [sp, #16]
 8008e0e:	4607      	mov	r7, r0
 8008e10:	4631      	mov	r1, r6
 8008e12:	ee18 0a10 	vmov	r0, s16
 8008e16:	f7ff fa77 	bl	8008308 <quorem>
 8008e1a:	4641      	mov	r1, r8
 8008e1c:	9002      	str	r0, [sp, #8]
 8008e1e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008e22:	ee18 0a10 	vmov	r0, s16
 8008e26:	f000 ff51 	bl	8009ccc <__mcmp>
 8008e2a:	463a      	mov	r2, r7
 8008e2c:	9003      	str	r0, [sp, #12]
 8008e2e:	4631      	mov	r1, r6
 8008e30:	4620      	mov	r0, r4
 8008e32:	f000 ff67 	bl	8009d04 <__mdiff>
 8008e36:	68c2      	ldr	r2, [r0, #12]
 8008e38:	f109 3bff 	add.w	fp, r9, #4294967295
 8008e3c:	4605      	mov	r5, r0
 8008e3e:	bb02      	cbnz	r2, 8008e82 <_dtoa_r+0xa62>
 8008e40:	4601      	mov	r1, r0
 8008e42:	ee18 0a10 	vmov	r0, s16
 8008e46:	f000 ff41 	bl	8009ccc <__mcmp>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	4629      	mov	r1, r5
 8008e4e:	4620      	mov	r0, r4
 8008e50:	9207      	str	r2, [sp, #28]
 8008e52:	f000 fcaf 	bl	80097b4 <_Bfree>
 8008e56:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008e5a:	ea43 0102 	orr.w	r1, r3, r2
 8008e5e:	9b04      	ldr	r3, [sp, #16]
 8008e60:	430b      	orrs	r3, r1
 8008e62:	464d      	mov	r5, r9
 8008e64:	d10f      	bne.n	8008e86 <_dtoa_r+0xa66>
 8008e66:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008e6a:	d02a      	beq.n	8008ec2 <_dtoa_r+0xaa2>
 8008e6c:	9b03      	ldr	r3, [sp, #12]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	dd02      	ble.n	8008e78 <_dtoa_r+0xa58>
 8008e72:	9b02      	ldr	r3, [sp, #8]
 8008e74:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008e78:	f88b a000 	strb.w	sl, [fp]
 8008e7c:	e775      	b.n	8008d6a <_dtoa_r+0x94a>
 8008e7e:	4638      	mov	r0, r7
 8008e80:	e7ba      	b.n	8008df8 <_dtoa_r+0x9d8>
 8008e82:	2201      	movs	r2, #1
 8008e84:	e7e2      	b.n	8008e4c <_dtoa_r+0xa2c>
 8008e86:	9b03      	ldr	r3, [sp, #12]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	db04      	blt.n	8008e96 <_dtoa_r+0xa76>
 8008e8c:	9906      	ldr	r1, [sp, #24]
 8008e8e:	430b      	orrs	r3, r1
 8008e90:	9904      	ldr	r1, [sp, #16]
 8008e92:	430b      	orrs	r3, r1
 8008e94:	d122      	bne.n	8008edc <_dtoa_r+0xabc>
 8008e96:	2a00      	cmp	r2, #0
 8008e98:	ddee      	ble.n	8008e78 <_dtoa_r+0xa58>
 8008e9a:	ee18 1a10 	vmov	r1, s16
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f000 fea3 	bl	8009bec <__lshift>
 8008ea6:	4631      	mov	r1, r6
 8008ea8:	ee08 0a10 	vmov	s16, r0
 8008eac:	f000 ff0e 	bl	8009ccc <__mcmp>
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	dc03      	bgt.n	8008ebc <_dtoa_r+0xa9c>
 8008eb4:	d1e0      	bne.n	8008e78 <_dtoa_r+0xa58>
 8008eb6:	f01a 0f01 	tst.w	sl, #1
 8008eba:	d0dd      	beq.n	8008e78 <_dtoa_r+0xa58>
 8008ebc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008ec0:	d1d7      	bne.n	8008e72 <_dtoa_r+0xa52>
 8008ec2:	2339      	movs	r3, #57	; 0x39
 8008ec4:	f88b 3000 	strb.w	r3, [fp]
 8008ec8:	462b      	mov	r3, r5
 8008eca:	461d      	mov	r5, r3
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008ed2:	2a39      	cmp	r2, #57	; 0x39
 8008ed4:	d071      	beq.n	8008fba <_dtoa_r+0xb9a>
 8008ed6:	3201      	adds	r2, #1
 8008ed8:	701a      	strb	r2, [r3, #0]
 8008eda:	e746      	b.n	8008d6a <_dtoa_r+0x94a>
 8008edc:	2a00      	cmp	r2, #0
 8008ede:	dd07      	ble.n	8008ef0 <_dtoa_r+0xad0>
 8008ee0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008ee4:	d0ed      	beq.n	8008ec2 <_dtoa_r+0xaa2>
 8008ee6:	f10a 0301 	add.w	r3, sl, #1
 8008eea:	f88b 3000 	strb.w	r3, [fp]
 8008eee:	e73c      	b.n	8008d6a <_dtoa_r+0x94a>
 8008ef0:	9b05      	ldr	r3, [sp, #20]
 8008ef2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008ef6:	4599      	cmp	r9, r3
 8008ef8:	d047      	beq.n	8008f8a <_dtoa_r+0xb6a>
 8008efa:	ee18 1a10 	vmov	r1, s16
 8008efe:	2300      	movs	r3, #0
 8008f00:	220a      	movs	r2, #10
 8008f02:	4620      	mov	r0, r4
 8008f04:	f000 fc78 	bl	80097f8 <__multadd>
 8008f08:	45b8      	cmp	r8, r7
 8008f0a:	ee08 0a10 	vmov	s16, r0
 8008f0e:	f04f 0300 	mov.w	r3, #0
 8008f12:	f04f 020a 	mov.w	r2, #10
 8008f16:	4641      	mov	r1, r8
 8008f18:	4620      	mov	r0, r4
 8008f1a:	d106      	bne.n	8008f2a <_dtoa_r+0xb0a>
 8008f1c:	f000 fc6c 	bl	80097f8 <__multadd>
 8008f20:	4680      	mov	r8, r0
 8008f22:	4607      	mov	r7, r0
 8008f24:	f109 0901 	add.w	r9, r9, #1
 8008f28:	e772      	b.n	8008e10 <_dtoa_r+0x9f0>
 8008f2a:	f000 fc65 	bl	80097f8 <__multadd>
 8008f2e:	4639      	mov	r1, r7
 8008f30:	4680      	mov	r8, r0
 8008f32:	2300      	movs	r3, #0
 8008f34:	220a      	movs	r2, #10
 8008f36:	4620      	mov	r0, r4
 8008f38:	f000 fc5e 	bl	80097f8 <__multadd>
 8008f3c:	4607      	mov	r7, r0
 8008f3e:	e7f1      	b.n	8008f24 <_dtoa_r+0xb04>
 8008f40:	9b03      	ldr	r3, [sp, #12]
 8008f42:	9302      	str	r3, [sp, #8]
 8008f44:	9d01      	ldr	r5, [sp, #4]
 8008f46:	ee18 0a10 	vmov	r0, s16
 8008f4a:	4631      	mov	r1, r6
 8008f4c:	f7ff f9dc 	bl	8008308 <quorem>
 8008f50:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008f54:	9b01      	ldr	r3, [sp, #4]
 8008f56:	f805 ab01 	strb.w	sl, [r5], #1
 8008f5a:	1aea      	subs	r2, r5, r3
 8008f5c:	9b02      	ldr	r3, [sp, #8]
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	dd09      	ble.n	8008f76 <_dtoa_r+0xb56>
 8008f62:	ee18 1a10 	vmov	r1, s16
 8008f66:	2300      	movs	r3, #0
 8008f68:	220a      	movs	r2, #10
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f000 fc44 	bl	80097f8 <__multadd>
 8008f70:	ee08 0a10 	vmov	s16, r0
 8008f74:	e7e7      	b.n	8008f46 <_dtoa_r+0xb26>
 8008f76:	9b02      	ldr	r3, [sp, #8]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	bfc8      	it	gt
 8008f7c:	461d      	movgt	r5, r3
 8008f7e:	9b01      	ldr	r3, [sp, #4]
 8008f80:	bfd8      	it	le
 8008f82:	2501      	movle	r5, #1
 8008f84:	441d      	add	r5, r3
 8008f86:	f04f 0800 	mov.w	r8, #0
 8008f8a:	ee18 1a10 	vmov	r1, s16
 8008f8e:	2201      	movs	r2, #1
 8008f90:	4620      	mov	r0, r4
 8008f92:	f000 fe2b 	bl	8009bec <__lshift>
 8008f96:	4631      	mov	r1, r6
 8008f98:	ee08 0a10 	vmov	s16, r0
 8008f9c:	f000 fe96 	bl	8009ccc <__mcmp>
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	dc91      	bgt.n	8008ec8 <_dtoa_r+0xaa8>
 8008fa4:	d102      	bne.n	8008fac <_dtoa_r+0xb8c>
 8008fa6:	f01a 0f01 	tst.w	sl, #1
 8008faa:	d18d      	bne.n	8008ec8 <_dtoa_r+0xaa8>
 8008fac:	462b      	mov	r3, r5
 8008fae:	461d      	mov	r5, r3
 8008fb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fb4:	2a30      	cmp	r2, #48	; 0x30
 8008fb6:	d0fa      	beq.n	8008fae <_dtoa_r+0xb8e>
 8008fb8:	e6d7      	b.n	8008d6a <_dtoa_r+0x94a>
 8008fba:	9a01      	ldr	r2, [sp, #4]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d184      	bne.n	8008eca <_dtoa_r+0xaaa>
 8008fc0:	9b00      	ldr	r3, [sp, #0]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	9300      	str	r3, [sp, #0]
 8008fc6:	2331      	movs	r3, #49	; 0x31
 8008fc8:	7013      	strb	r3, [r2, #0]
 8008fca:	e6ce      	b.n	8008d6a <_dtoa_r+0x94a>
 8008fcc:	4b09      	ldr	r3, [pc, #36]	; (8008ff4 <_dtoa_r+0xbd4>)
 8008fce:	f7ff ba95 	b.w	80084fc <_dtoa_r+0xdc>
 8008fd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f47f aa6e 	bne.w	80084b6 <_dtoa_r+0x96>
 8008fda:	4b07      	ldr	r3, [pc, #28]	; (8008ff8 <_dtoa_r+0xbd8>)
 8008fdc:	f7ff ba8e 	b.w	80084fc <_dtoa_r+0xdc>
 8008fe0:	9b02      	ldr	r3, [sp, #8]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	dcae      	bgt.n	8008f44 <_dtoa_r+0xb24>
 8008fe6:	9b06      	ldr	r3, [sp, #24]
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	f73f aea8 	bgt.w	8008d3e <_dtoa_r+0x91e>
 8008fee:	e7a9      	b.n	8008f44 <_dtoa_r+0xb24>
 8008ff0:	0800c958 	.word	0x0800c958
 8008ff4:	0800c75c 	.word	0x0800c75c
 8008ff8:	0800c8d9 	.word	0x0800c8d9

08008ffc <rshift>:
 8008ffc:	6903      	ldr	r3, [r0, #16]
 8008ffe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009002:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009006:	ea4f 1261 	mov.w	r2, r1, asr #5
 800900a:	f100 0414 	add.w	r4, r0, #20
 800900e:	dd45      	ble.n	800909c <rshift+0xa0>
 8009010:	f011 011f 	ands.w	r1, r1, #31
 8009014:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009018:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800901c:	d10c      	bne.n	8009038 <rshift+0x3c>
 800901e:	f100 0710 	add.w	r7, r0, #16
 8009022:	4629      	mov	r1, r5
 8009024:	42b1      	cmp	r1, r6
 8009026:	d334      	bcc.n	8009092 <rshift+0x96>
 8009028:	1a9b      	subs	r3, r3, r2
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	1eea      	subs	r2, r5, #3
 800902e:	4296      	cmp	r6, r2
 8009030:	bf38      	it	cc
 8009032:	2300      	movcc	r3, #0
 8009034:	4423      	add	r3, r4
 8009036:	e015      	b.n	8009064 <rshift+0x68>
 8009038:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800903c:	f1c1 0820 	rsb	r8, r1, #32
 8009040:	40cf      	lsrs	r7, r1
 8009042:	f105 0e04 	add.w	lr, r5, #4
 8009046:	46a1      	mov	r9, r4
 8009048:	4576      	cmp	r6, lr
 800904a:	46f4      	mov	ip, lr
 800904c:	d815      	bhi.n	800907a <rshift+0x7e>
 800904e:	1a9a      	subs	r2, r3, r2
 8009050:	0092      	lsls	r2, r2, #2
 8009052:	3a04      	subs	r2, #4
 8009054:	3501      	adds	r5, #1
 8009056:	42ae      	cmp	r6, r5
 8009058:	bf38      	it	cc
 800905a:	2200      	movcc	r2, #0
 800905c:	18a3      	adds	r3, r4, r2
 800905e:	50a7      	str	r7, [r4, r2]
 8009060:	b107      	cbz	r7, 8009064 <rshift+0x68>
 8009062:	3304      	adds	r3, #4
 8009064:	1b1a      	subs	r2, r3, r4
 8009066:	42a3      	cmp	r3, r4
 8009068:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800906c:	bf08      	it	eq
 800906e:	2300      	moveq	r3, #0
 8009070:	6102      	str	r2, [r0, #16]
 8009072:	bf08      	it	eq
 8009074:	6143      	streq	r3, [r0, #20]
 8009076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800907a:	f8dc c000 	ldr.w	ip, [ip]
 800907e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009082:	ea4c 0707 	orr.w	r7, ip, r7
 8009086:	f849 7b04 	str.w	r7, [r9], #4
 800908a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800908e:	40cf      	lsrs	r7, r1
 8009090:	e7da      	b.n	8009048 <rshift+0x4c>
 8009092:	f851 cb04 	ldr.w	ip, [r1], #4
 8009096:	f847 cf04 	str.w	ip, [r7, #4]!
 800909a:	e7c3      	b.n	8009024 <rshift+0x28>
 800909c:	4623      	mov	r3, r4
 800909e:	e7e1      	b.n	8009064 <rshift+0x68>

080090a0 <__hexdig_fun>:
 80090a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80090a4:	2b09      	cmp	r3, #9
 80090a6:	d802      	bhi.n	80090ae <__hexdig_fun+0xe>
 80090a8:	3820      	subs	r0, #32
 80090aa:	b2c0      	uxtb	r0, r0
 80090ac:	4770      	bx	lr
 80090ae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80090b2:	2b05      	cmp	r3, #5
 80090b4:	d801      	bhi.n	80090ba <__hexdig_fun+0x1a>
 80090b6:	3847      	subs	r0, #71	; 0x47
 80090b8:	e7f7      	b.n	80090aa <__hexdig_fun+0xa>
 80090ba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80090be:	2b05      	cmp	r3, #5
 80090c0:	d801      	bhi.n	80090c6 <__hexdig_fun+0x26>
 80090c2:	3827      	subs	r0, #39	; 0x27
 80090c4:	e7f1      	b.n	80090aa <__hexdig_fun+0xa>
 80090c6:	2000      	movs	r0, #0
 80090c8:	4770      	bx	lr
	...

080090cc <__gethex>:
 80090cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d0:	ed2d 8b02 	vpush	{d8}
 80090d4:	b089      	sub	sp, #36	; 0x24
 80090d6:	ee08 0a10 	vmov	s16, r0
 80090da:	9304      	str	r3, [sp, #16]
 80090dc:	4bb4      	ldr	r3, [pc, #720]	; (80093b0 <__gethex+0x2e4>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	9301      	str	r3, [sp, #4]
 80090e2:	4618      	mov	r0, r3
 80090e4:	468b      	mov	fp, r1
 80090e6:	4690      	mov	r8, r2
 80090e8:	f7f7 f87a 	bl	80001e0 <strlen>
 80090ec:	9b01      	ldr	r3, [sp, #4]
 80090ee:	f8db 2000 	ldr.w	r2, [fp]
 80090f2:	4403      	add	r3, r0
 80090f4:	4682      	mov	sl, r0
 80090f6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80090fa:	9305      	str	r3, [sp, #20]
 80090fc:	1c93      	adds	r3, r2, #2
 80090fe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009102:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009106:	32fe      	adds	r2, #254	; 0xfe
 8009108:	18d1      	adds	r1, r2, r3
 800910a:	461f      	mov	r7, r3
 800910c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009110:	9100      	str	r1, [sp, #0]
 8009112:	2830      	cmp	r0, #48	; 0x30
 8009114:	d0f8      	beq.n	8009108 <__gethex+0x3c>
 8009116:	f7ff ffc3 	bl	80090a0 <__hexdig_fun>
 800911a:	4604      	mov	r4, r0
 800911c:	2800      	cmp	r0, #0
 800911e:	d13a      	bne.n	8009196 <__gethex+0xca>
 8009120:	9901      	ldr	r1, [sp, #4]
 8009122:	4652      	mov	r2, sl
 8009124:	4638      	mov	r0, r7
 8009126:	f001 fa33 	bl	800a590 <strncmp>
 800912a:	4605      	mov	r5, r0
 800912c:	2800      	cmp	r0, #0
 800912e:	d168      	bne.n	8009202 <__gethex+0x136>
 8009130:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009134:	eb07 060a 	add.w	r6, r7, sl
 8009138:	f7ff ffb2 	bl	80090a0 <__hexdig_fun>
 800913c:	2800      	cmp	r0, #0
 800913e:	d062      	beq.n	8009206 <__gethex+0x13a>
 8009140:	4633      	mov	r3, r6
 8009142:	7818      	ldrb	r0, [r3, #0]
 8009144:	2830      	cmp	r0, #48	; 0x30
 8009146:	461f      	mov	r7, r3
 8009148:	f103 0301 	add.w	r3, r3, #1
 800914c:	d0f9      	beq.n	8009142 <__gethex+0x76>
 800914e:	f7ff ffa7 	bl	80090a0 <__hexdig_fun>
 8009152:	2301      	movs	r3, #1
 8009154:	fab0 f480 	clz	r4, r0
 8009158:	0964      	lsrs	r4, r4, #5
 800915a:	4635      	mov	r5, r6
 800915c:	9300      	str	r3, [sp, #0]
 800915e:	463a      	mov	r2, r7
 8009160:	4616      	mov	r6, r2
 8009162:	3201      	adds	r2, #1
 8009164:	7830      	ldrb	r0, [r6, #0]
 8009166:	f7ff ff9b 	bl	80090a0 <__hexdig_fun>
 800916a:	2800      	cmp	r0, #0
 800916c:	d1f8      	bne.n	8009160 <__gethex+0x94>
 800916e:	9901      	ldr	r1, [sp, #4]
 8009170:	4652      	mov	r2, sl
 8009172:	4630      	mov	r0, r6
 8009174:	f001 fa0c 	bl	800a590 <strncmp>
 8009178:	b980      	cbnz	r0, 800919c <__gethex+0xd0>
 800917a:	b94d      	cbnz	r5, 8009190 <__gethex+0xc4>
 800917c:	eb06 050a 	add.w	r5, r6, sl
 8009180:	462a      	mov	r2, r5
 8009182:	4616      	mov	r6, r2
 8009184:	3201      	adds	r2, #1
 8009186:	7830      	ldrb	r0, [r6, #0]
 8009188:	f7ff ff8a 	bl	80090a0 <__hexdig_fun>
 800918c:	2800      	cmp	r0, #0
 800918e:	d1f8      	bne.n	8009182 <__gethex+0xb6>
 8009190:	1bad      	subs	r5, r5, r6
 8009192:	00ad      	lsls	r5, r5, #2
 8009194:	e004      	b.n	80091a0 <__gethex+0xd4>
 8009196:	2400      	movs	r4, #0
 8009198:	4625      	mov	r5, r4
 800919a:	e7e0      	b.n	800915e <__gethex+0x92>
 800919c:	2d00      	cmp	r5, #0
 800919e:	d1f7      	bne.n	8009190 <__gethex+0xc4>
 80091a0:	7833      	ldrb	r3, [r6, #0]
 80091a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80091a6:	2b50      	cmp	r3, #80	; 0x50
 80091a8:	d13b      	bne.n	8009222 <__gethex+0x156>
 80091aa:	7873      	ldrb	r3, [r6, #1]
 80091ac:	2b2b      	cmp	r3, #43	; 0x2b
 80091ae:	d02c      	beq.n	800920a <__gethex+0x13e>
 80091b0:	2b2d      	cmp	r3, #45	; 0x2d
 80091b2:	d02e      	beq.n	8009212 <__gethex+0x146>
 80091b4:	1c71      	adds	r1, r6, #1
 80091b6:	f04f 0900 	mov.w	r9, #0
 80091ba:	7808      	ldrb	r0, [r1, #0]
 80091bc:	f7ff ff70 	bl	80090a0 <__hexdig_fun>
 80091c0:	1e43      	subs	r3, r0, #1
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	2b18      	cmp	r3, #24
 80091c6:	d82c      	bhi.n	8009222 <__gethex+0x156>
 80091c8:	f1a0 0210 	sub.w	r2, r0, #16
 80091cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80091d0:	f7ff ff66 	bl	80090a0 <__hexdig_fun>
 80091d4:	1e43      	subs	r3, r0, #1
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	2b18      	cmp	r3, #24
 80091da:	d91d      	bls.n	8009218 <__gethex+0x14c>
 80091dc:	f1b9 0f00 	cmp.w	r9, #0
 80091e0:	d000      	beq.n	80091e4 <__gethex+0x118>
 80091e2:	4252      	negs	r2, r2
 80091e4:	4415      	add	r5, r2
 80091e6:	f8cb 1000 	str.w	r1, [fp]
 80091ea:	b1e4      	cbz	r4, 8009226 <__gethex+0x15a>
 80091ec:	9b00      	ldr	r3, [sp, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	bf14      	ite	ne
 80091f2:	2700      	movne	r7, #0
 80091f4:	2706      	moveq	r7, #6
 80091f6:	4638      	mov	r0, r7
 80091f8:	b009      	add	sp, #36	; 0x24
 80091fa:	ecbd 8b02 	vpop	{d8}
 80091fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009202:	463e      	mov	r6, r7
 8009204:	4625      	mov	r5, r4
 8009206:	2401      	movs	r4, #1
 8009208:	e7ca      	b.n	80091a0 <__gethex+0xd4>
 800920a:	f04f 0900 	mov.w	r9, #0
 800920e:	1cb1      	adds	r1, r6, #2
 8009210:	e7d3      	b.n	80091ba <__gethex+0xee>
 8009212:	f04f 0901 	mov.w	r9, #1
 8009216:	e7fa      	b.n	800920e <__gethex+0x142>
 8009218:	230a      	movs	r3, #10
 800921a:	fb03 0202 	mla	r2, r3, r2, r0
 800921e:	3a10      	subs	r2, #16
 8009220:	e7d4      	b.n	80091cc <__gethex+0x100>
 8009222:	4631      	mov	r1, r6
 8009224:	e7df      	b.n	80091e6 <__gethex+0x11a>
 8009226:	1bf3      	subs	r3, r6, r7
 8009228:	3b01      	subs	r3, #1
 800922a:	4621      	mov	r1, r4
 800922c:	2b07      	cmp	r3, #7
 800922e:	dc0b      	bgt.n	8009248 <__gethex+0x17c>
 8009230:	ee18 0a10 	vmov	r0, s16
 8009234:	f000 fa7e 	bl	8009734 <_Balloc>
 8009238:	4604      	mov	r4, r0
 800923a:	b940      	cbnz	r0, 800924e <__gethex+0x182>
 800923c:	4b5d      	ldr	r3, [pc, #372]	; (80093b4 <__gethex+0x2e8>)
 800923e:	4602      	mov	r2, r0
 8009240:	21de      	movs	r1, #222	; 0xde
 8009242:	485d      	ldr	r0, [pc, #372]	; (80093b8 <__gethex+0x2ec>)
 8009244:	f001 f9c6 	bl	800a5d4 <__assert_func>
 8009248:	3101      	adds	r1, #1
 800924a:	105b      	asrs	r3, r3, #1
 800924c:	e7ee      	b.n	800922c <__gethex+0x160>
 800924e:	f100 0914 	add.w	r9, r0, #20
 8009252:	f04f 0b00 	mov.w	fp, #0
 8009256:	f1ca 0301 	rsb	r3, sl, #1
 800925a:	f8cd 9008 	str.w	r9, [sp, #8]
 800925e:	f8cd b000 	str.w	fp, [sp]
 8009262:	9306      	str	r3, [sp, #24]
 8009264:	42b7      	cmp	r7, r6
 8009266:	d340      	bcc.n	80092ea <__gethex+0x21e>
 8009268:	9802      	ldr	r0, [sp, #8]
 800926a:	9b00      	ldr	r3, [sp, #0]
 800926c:	f840 3b04 	str.w	r3, [r0], #4
 8009270:	eba0 0009 	sub.w	r0, r0, r9
 8009274:	1080      	asrs	r0, r0, #2
 8009276:	0146      	lsls	r6, r0, #5
 8009278:	6120      	str	r0, [r4, #16]
 800927a:	4618      	mov	r0, r3
 800927c:	f000 fb4c 	bl	8009918 <__hi0bits>
 8009280:	1a30      	subs	r0, r6, r0
 8009282:	f8d8 6000 	ldr.w	r6, [r8]
 8009286:	42b0      	cmp	r0, r6
 8009288:	dd63      	ble.n	8009352 <__gethex+0x286>
 800928a:	1b87      	subs	r7, r0, r6
 800928c:	4639      	mov	r1, r7
 800928e:	4620      	mov	r0, r4
 8009290:	f000 fef0 	bl	800a074 <__any_on>
 8009294:	4682      	mov	sl, r0
 8009296:	b1a8      	cbz	r0, 80092c4 <__gethex+0x1f8>
 8009298:	1e7b      	subs	r3, r7, #1
 800929a:	1159      	asrs	r1, r3, #5
 800929c:	f003 021f 	and.w	r2, r3, #31
 80092a0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80092a4:	f04f 0a01 	mov.w	sl, #1
 80092a8:	fa0a f202 	lsl.w	r2, sl, r2
 80092ac:	420a      	tst	r2, r1
 80092ae:	d009      	beq.n	80092c4 <__gethex+0x1f8>
 80092b0:	4553      	cmp	r3, sl
 80092b2:	dd05      	ble.n	80092c0 <__gethex+0x1f4>
 80092b4:	1eb9      	subs	r1, r7, #2
 80092b6:	4620      	mov	r0, r4
 80092b8:	f000 fedc 	bl	800a074 <__any_on>
 80092bc:	2800      	cmp	r0, #0
 80092be:	d145      	bne.n	800934c <__gethex+0x280>
 80092c0:	f04f 0a02 	mov.w	sl, #2
 80092c4:	4639      	mov	r1, r7
 80092c6:	4620      	mov	r0, r4
 80092c8:	f7ff fe98 	bl	8008ffc <rshift>
 80092cc:	443d      	add	r5, r7
 80092ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80092d2:	42ab      	cmp	r3, r5
 80092d4:	da4c      	bge.n	8009370 <__gethex+0x2a4>
 80092d6:	ee18 0a10 	vmov	r0, s16
 80092da:	4621      	mov	r1, r4
 80092dc:	f000 fa6a 	bl	80097b4 <_Bfree>
 80092e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80092e2:	2300      	movs	r3, #0
 80092e4:	6013      	str	r3, [r2, #0]
 80092e6:	27a3      	movs	r7, #163	; 0xa3
 80092e8:	e785      	b.n	80091f6 <__gethex+0x12a>
 80092ea:	1e73      	subs	r3, r6, #1
 80092ec:	9a05      	ldr	r2, [sp, #20]
 80092ee:	9303      	str	r3, [sp, #12]
 80092f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d019      	beq.n	800932c <__gethex+0x260>
 80092f8:	f1bb 0f20 	cmp.w	fp, #32
 80092fc:	d107      	bne.n	800930e <__gethex+0x242>
 80092fe:	9b02      	ldr	r3, [sp, #8]
 8009300:	9a00      	ldr	r2, [sp, #0]
 8009302:	f843 2b04 	str.w	r2, [r3], #4
 8009306:	9302      	str	r3, [sp, #8]
 8009308:	2300      	movs	r3, #0
 800930a:	9300      	str	r3, [sp, #0]
 800930c:	469b      	mov	fp, r3
 800930e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009312:	f7ff fec5 	bl	80090a0 <__hexdig_fun>
 8009316:	9b00      	ldr	r3, [sp, #0]
 8009318:	f000 000f 	and.w	r0, r0, #15
 800931c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009320:	4303      	orrs	r3, r0
 8009322:	9300      	str	r3, [sp, #0]
 8009324:	f10b 0b04 	add.w	fp, fp, #4
 8009328:	9b03      	ldr	r3, [sp, #12]
 800932a:	e00d      	b.n	8009348 <__gethex+0x27c>
 800932c:	9b03      	ldr	r3, [sp, #12]
 800932e:	9a06      	ldr	r2, [sp, #24]
 8009330:	4413      	add	r3, r2
 8009332:	42bb      	cmp	r3, r7
 8009334:	d3e0      	bcc.n	80092f8 <__gethex+0x22c>
 8009336:	4618      	mov	r0, r3
 8009338:	9901      	ldr	r1, [sp, #4]
 800933a:	9307      	str	r3, [sp, #28]
 800933c:	4652      	mov	r2, sl
 800933e:	f001 f927 	bl	800a590 <strncmp>
 8009342:	9b07      	ldr	r3, [sp, #28]
 8009344:	2800      	cmp	r0, #0
 8009346:	d1d7      	bne.n	80092f8 <__gethex+0x22c>
 8009348:	461e      	mov	r6, r3
 800934a:	e78b      	b.n	8009264 <__gethex+0x198>
 800934c:	f04f 0a03 	mov.w	sl, #3
 8009350:	e7b8      	b.n	80092c4 <__gethex+0x1f8>
 8009352:	da0a      	bge.n	800936a <__gethex+0x29e>
 8009354:	1a37      	subs	r7, r6, r0
 8009356:	4621      	mov	r1, r4
 8009358:	ee18 0a10 	vmov	r0, s16
 800935c:	463a      	mov	r2, r7
 800935e:	f000 fc45 	bl	8009bec <__lshift>
 8009362:	1bed      	subs	r5, r5, r7
 8009364:	4604      	mov	r4, r0
 8009366:	f100 0914 	add.w	r9, r0, #20
 800936a:	f04f 0a00 	mov.w	sl, #0
 800936e:	e7ae      	b.n	80092ce <__gethex+0x202>
 8009370:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009374:	42a8      	cmp	r0, r5
 8009376:	dd72      	ble.n	800945e <__gethex+0x392>
 8009378:	1b45      	subs	r5, r0, r5
 800937a:	42ae      	cmp	r6, r5
 800937c:	dc36      	bgt.n	80093ec <__gethex+0x320>
 800937e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009382:	2b02      	cmp	r3, #2
 8009384:	d02a      	beq.n	80093dc <__gethex+0x310>
 8009386:	2b03      	cmp	r3, #3
 8009388:	d02c      	beq.n	80093e4 <__gethex+0x318>
 800938a:	2b01      	cmp	r3, #1
 800938c:	d11c      	bne.n	80093c8 <__gethex+0x2fc>
 800938e:	42ae      	cmp	r6, r5
 8009390:	d11a      	bne.n	80093c8 <__gethex+0x2fc>
 8009392:	2e01      	cmp	r6, #1
 8009394:	d112      	bne.n	80093bc <__gethex+0x2f0>
 8009396:	9a04      	ldr	r2, [sp, #16]
 8009398:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800939c:	6013      	str	r3, [r2, #0]
 800939e:	2301      	movs	r3, #1
 80093a0:	6123      	str	r3, [r4, #16]
 80093a2:	f8c9 3000 	str.w	r3, [r9]
 80093a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80093a8:	2762      	movs	r7, #98	; 0x62
 80093aa:	601c      	str	r4, [r3, #0]
 80093ac:	e723      	b.n	80091f6 <__gethex+0x12a>
 80093ae:	bf00      	nop
 80093b0:	0800c9d0 	.word	0x0800c9d0
 80093b4:	0800c958 	.word	0x0800c958
 80093b8:	0800c969 	.word	0x0800c969
 80093bc:	1e71      	subs	r1, r6, #1
 80093be:	4620      	mov	r0, r4
 80093c0:	f000 fe58 	bl	800a074 <__any_on>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	d1e6      	bne.n	8009396 <__gethex+0x2ca>
 80093c8:	ee18 0a10 	vmov	r0, s16
 80093cc:	4621      	mov	r1, r4
 80093ce:	f000 f9f1 	bl	80097b4 <_Bfree>
 80093d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80093d4:	2300      	movs	r3, #0
 80093d6:	6013      	str	r3, [r2, #0]
 80093d8:	2750      	movs	r7, #80	; 0x50
 80093da:	e70c      	b.n	80091f6 <__gethex+0x12a>
 80093dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d1f2      	bne.n	80093c8 <__gethex+0x2fc>
 80093e2:	e7d8      	b.n	8009396 <__gethex+0x2ca>
 80093e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1d5      	bne.n	8009396 <__gethex+0x2ca>
 80093ea:	e7ed      	b.n	80093c8 <__gethex+0x2fc>
 80093ec:	1e6f      	subs	r7, r5, #1
 80093ee:	f1ba 0f00 	cmp.w	sl, #0
 80093f2:	d131      	bne.n	8009458 <__gethex+0x38c>
 80093f4:	b127      	cbz	r7, 8009400 <__gethex+0x334>
 80093f6:	4639      	mov	r1, r7
 80093f8:	4620      	mov	r0, r4
 80093fa:	f000 fe3b 	bl	800a074 <__any_on>
 80093fe:	4682      	mov	sl, r0
 8009400:	117b      	asrs	r3, r7, #5
 8009402:	2101      	movs	r1, #1
 8009404:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009408:	f007 071f 	and.w	r7, r7, #31
 800940c:	fa01 f707 	lsl.w	r7, r1, r7
 8009410:	421f      	tst	r7, r3
 8009412:	4629      	mov	r1, r5
 8009414:	4620      	mov	r0, r4
 8009416:	bf18      	it	ne
 8009418:	f04a 0a02 	orrne.w	sl, sl, #2
 800941c:	1b76      	subs	r6, r6, r5
 800941e:	f7ff fded 	bl	8008ffc <rshift>
 8009422:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009426:	2702      	movs	r7, #2
 8009428:	f1ba 0f00 	cmp.w	sl, #0
 800942c:	d048      	beq.n	80094c0 <__gethex+0x3f4>
 800942e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009432:	2b02      	cmp	r3, #2
 8009434:	d015      	beq.n	8009462 <__gethex+0x396>
 8009436:	2b03      	cmp	r3, #3
 8009438:	d017      	beq.n	800946a <__gethex+0x39e>
 800943a:	2b01      	cmp	r3, #1
 800943c:	d109      	bne.n	8009452 <__gethex+0x386>
 800943e:	f01a 0f02 	tst.w	sl, #2
 8009442:	d006      	beq.n	8009452 <__gethex+0x386>
 8009444:	f8d9 0000 	ldr.w	r0, [r9]
 8009448:	ea4a 0a00 	orr.w	sl, sl, r0
 800944c:	f01a 0f01 	tst.w	sl, #1
 8009450:	d10e      	bne.n	8009470 <__gethex+0x3a4>
 8009452:	f047 0710 	orr.w	r7, r7, #16
 8009456:	e033      	b.n	80094c0 <__gethex+0x3f4>
 8009458:	f04f 0a01 	mov.w	sl, #1
 800945c:	e7d0      	b.n	8009400 <__gethex+0x334>
 800945e:	2701      	movs	r7, #1
 8009460:	e7e2      	b.n	8009428 <__gethex+0x35c>
 8009462:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009464:	f1c3 0301 	rsb	r3, r3, #1
 8009468:	9315      	str	r3, [sp, #84]	; 0x54
 800946a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800946c:	2b00      	cmp	r3, #0
 800946e:	d0f0      	beq.n	8009452 <__gethex+0x386>
 8009470:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009474:	f104 0314 	add.w	r3, r4, #20
 8009478:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800947c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009480:	f04f 0c00 	mov.w	ip, #0
 8009484:	4618      	mov	r0, r3
 8009486:	f853 2b04 	ldr.w	r2, [r3], #4
 800948a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800948e:	d01c      	beq.n	80094ca <__gethex+0x3fe>
 8009490:	3201      	adds	r2, #1
 8009492:	6002      	str	r2, [r0, #0]
 8009494:	2f02      	cmp	r7, #2
 8009496:	f104 0314 	add.w	r3, r4, #20
 800949a:	d13f      	bne.n	800951c <__gethex+0x450>
 800949c:	f8d8 2000 	ldr.w	r2, [r8]
 80094a0:	3a01      	subs	r2, #1
 80094a2:	42b2      	cmp	r2, r6
 80094a4:	d10a      	bne.n	80094bc <__gethex+0x3f0>
 80094a6:	1171      	asrs	r1, r6, #5
 80094a8:	2201      	movs	r2, #1
 80094aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80094ae:	f006 061f 	and.w	r6, r6, #31
 80094b2:	fa02 f606 	lsl.w	r6, r2, r6
 80094b6:	421e      	tst	r6, r3
 80094b8:	bf18      	it	ne
 80094ba:	4617      	movne	r7, r2
 80094bc:	f047 0720 	orr.w	r7, r7, #32
 80094c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80094c2:	601c      	str	r4, [r3, #0]
 80094c4:	9b04      	ldr	r3, [sp, #16]
 80094c6:	601d      	str	r5, [r3, #0]
 80094c8:	e695      	b.n	80091f6 <__gethex+0x12a>
 80094ca:	4299      	cmp	r1, r3
 80094cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80094d0:	d8d8      	bhi.n	8009484 <__gethex+0x3b8>
 80094d2:	68a3      	ldr	r3, [r4, #8]
 80094d4:	459b      	cmp	fp, r3
 80094d6:	db19      	blt.n	800950c <__gethex+0x440>
 80094d8:	6861      	ldr	r1, [r4, #4]
 80094da:	ee18 0a10 	vmov	r0, s16
 80094de:	3101      	adds	r1, #1
 80094e0:	f000 f928 	bl	8009734 <_Balloc>
 80094e4:	4681      	mov	r9, r0
 80094e6:	b918      	cbnz	r0, 80094f0 <__gethex+0x424>
 80094e8:	4b1a      	ldr	r3, [pc, #104]	; (8009554 <__gethex+0x488>)
 80094ea:	4602      	mov	r2, r0
 80094ec:	2184      	movs	r1, #132	; 0x84
 80094ee:	e6a8      	b.n	8009242 <__gethex+0x176>
 80094f0:	6922      	ldr	r2, [r4, #16]
 80094f2:	3202      	adds	r2, #2
 80094f4:	f104 010c 	add.w	r1, r4, #12
 80094f8:	0092      	lsls	r2, r2, #2
 80094fa:	300c      	adds	r0, #12
 80094fc:	f000 f90c 	bl	8009718 <memcpy>
 8009500:	4621      	mov	r1, r4
 8009502:	ee18 0a10 	vmov	r0, s16
 8009506:	f000 f955 	bl	80097b4 <_Bfree>
 800950a:	464c      	mov	r4, r9
 800950c:	6923      	ldr	r3, [r4, #16]
 800950e:	1c5a      	adds	r2, r3, #1
 8009510:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009514:	6122      	str	r2, [r4, #16]
 8009516:	2201      	movs	r2, #1
 8009518:	615a      	str	r2, [r3, #20]
 800951a:	e7bb      	b.n	8009494 <__gethex+0x3c8>
 800951c:	6922      	ldr	r2, [r4, #16]
 800951e:	455a      	cmp	r2, fp
 8009520:	dd0b      	ble.n	800953a <__gethex+0x46e>
 8009522:	2101      	movs	r1, #1
 8009524:	4620      	mov	r0, r4
 8009526:	f7ff fd69 	bl	8008ffc <rshift>
 800952a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800952e:	3501      	adds	r5, #1
 8009530:	42ab      	cmp	r3, r5
 8009532:	f6ff aed0 	blt.w	80092d6 <__gethex+0x20a>
 8009536:	2701      	movs	r7, #1
 8009538:	e7c0      	b.n	80094bc <__gethex+0x3f0>
 800953a:	f016 061f 	ands.w	r6, r6, #31
 800953e:	d0fa      	beq.n	8009536 <__gethex+0x46a>
 8009540:	4453      	add	r3, sl
 8009542:	f1c6 0620 	rsb	r6, r6, #32
 8009546:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800954a:	f000 f9e5 	bl	8009918 <__hi0bits>
 800954e:	42b0      	cmp	r0, r6
 8009550:	dbe7      	blt.n	8009522 <__gethex+0x456>
 8009552:	e7f0      	b.n	8009536 <__gethex+0x46a>
 8009554:	0800c958 	.word	0x0800c958

08009558 <L_shift>:
 8009558:	f1c2 0208 	rsb	r2, r2, #8
 800955c:	0092      	lsls	r2, r2, #2
 800955e:	b570      	push	{r4, r5, r6, lr}
 8009560:	f1c2 0620 	rsb	r6, r2, #32
 8009564:	6843      	ldr	r3, [r0, #4]
 8009566:	6804      	ldr	r4, [r0, #0]
 8009568:	fa03 f506 	lsl.w	r5, r3, r6
 800956c:	432c      	orrs	r4, r5
 800956e:	40d3      	lsrs	r3, r2
 8009570:	6004      	str	r4, [r0, #0]
 8009572:	f840 3f04 	str.w	r3, [r0, #4]!
 8009576:	4288      	cmp	r0, r1
 8009578:	d3f4      	bcc.n	8009564 <L_shift+0xc>
 800957a:	bd70      	pop	{r4, r5, r6, pc}

0800957c <__match>:
 800957c:	b530      	push	{r4, r5, lr}
 800957e:	6803      	ldr	r3, [r0, #0]
 8009580:	3301      	adds	r3, #1
 8009582:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009586:	b914      	cbnz	r4, 800958e <__match+0x12>
 8009588:	6003      	str	r3, [r0, #0]
 800958a:	2001      	movs	r0, #1
 800958c:	bd30      	pop	{r4, r5, pc}
 800958e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009592:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009596:	2d19      	cmp	r5, #25
 8009598:	bf98      	it	ls
 800959a:	3220      	addls	r2, #32
 800959c:	42a2      	cmp	r2, r4
 800959e:	d0f0      	beq.n	8009582 <__match+0x6>
 80095a0:	2000      	movs	r0, #0
 80095a2:	e7f3      	b.n	800958c <__match+0x10>

080095a4 <__hexnan>:
 80095a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a8:	680b      	ldr	r3, [r1, #0]
 80095aa:	115e      	asrs	r6, r3, #5
 80095ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80095b0:	f013 031f 	ands.w	r3, r3, #31
 80095b4:	b087      	sub	sp, #28
 80095b6:	bf18      	it	ne
 80095b8:	3604      	addne	r6, #4
 80095ba:	2500      	movs	r5, #0
 80095bc:	1f37      	subs	r7, r6, #4
 80095be:	4690      	mov	r8, r2
 80095c0:	6802      	ldr	r2, [r0, #0]
 80095c2:	9301      	str	r3, [sp, #4]
 80095c4:	4682      	mov	sl, r0
 80095c6:	f846 5c04 	str.w	r5, [r6, #-4]
 80095ca:	46b9      	mov	r9, r7
 80095cc:	463c      	mov	r4, r7
 80095ce:	9502      	str	r5, [sp, #8]
 80095d0:	46ab      	mov	fp, r5
 80095d2:	7851      	ldrb	r1, [r2, #1]
 80095d4:	1c53      	adds	r3, r2, #1
 80095d6:	9303      	str	r3, [sp, #12]
 80095d8:	b341      	cbz	r1, 800962c <__hexnan+0x88>
 80095da:	4608      	mov	r0, r1
 80095dc:	9205      	str	r2, [sp, #20]
 80095de:	9104      	str	r1, [sp, #16]
 80095e0:	f7ff fd5e 	bl	80090a0 <__hexdig_fun>
 80095e4:	2800      	cmp	r0, #0
 80095e6:	d14f      	bne.n	8009688 <__hexnan+0xe4>
 80095e8:	9904      	ldr	r1, [sp, #16]
 80095ea:	9a05      	ldr	r2, [sp, #20]
 80095ec:	2920      	cmp	r1, #32
 80095ee:	d818      	bhi.n	8009622 <__hexnan+0x7e>
 80095f0:	9b02      	ldr	r3, [sp, #8]
 80095f2:	459b      	cmp	fp, r3
 80095f4:	dd13      	ble.n	800961e <__hexnan+0x7a>
 80095f6:	454c      	cmp	r4, r9
 80095f8:	d206      	bcs.n	8009608 <__hexnan+0x64>
 80095fa:	2d07      	cmp	r5, #7
 80095fc:	dc04      	bgt.n	8009608 <__hexnan+0x64>
 80095fe:	462a      	mov	r2, r5
 8009600:	4649      	mov	r1, r9
 8009602:	4620      	mov	r0, r4
 8009604:	f7ff ffa8 	bl	8009558 <L_shift>
 8009608:	4544      	cmp	r4, r8
 800960a:	d950      	bls.n	80096ae <__hexnan+0x10a>
 800960c:	2300      	movs	r3, #0
 800960e:	f1a4 0904 	sub.w	r9, r4, #4
 8009612:	f844 3c04 	str.w	r3, [r4, #-4]
 8009616:	f8cd b008 	str.w	fp, [sp, #8]
 800961a:	464c      	mov	r4, r9
 800961c:	461d      	mov	r5, r3
 800961e:	9a03      	ldr	r2, [sp, #12]
 8009620:	e7d7      	b.n	80095d2 <__hexnan+0x2e>
 8009622:	2929      	cmp	r1, #41	; 0x29
 8009624:	d156      	bne.n	80096d4 <__hexnan+0x130>
 8009626:	3202      	adds	r2, #2
 8009628:	f8ca 2000 	str.w	r2, [sl]
 800962c:	f1bb 0f00 	cmp.w	fp, #0
 8009630:	d050      	beq.n	80096d4 <__hexnan+0x130>
 8009632:	454c      	cmp	r4, r9
 8009634:	d206      	bcs.n	8009644 <__hexnan+0xa0>
 8009636:	2d07      	cmp	r5, #7
 8009638:	dc04      	bgt.n	8009644 <__hexnan+0xa0>
 800963a:	462a      	mov	r2, r5
 800963c:	4649      	mov	r1, r9
 800963e:	4620      	mov	r0, r4
 8009640:	f7ff ff8a 	bl	8009558 <L_shift>
 8009644:	4544      	cmp	r4, r8
 8009646:	d934      	bls.n	80096b2 <__hexnan+0x10e>
 8009648:	f1a8 0204 	sub.w	r2, r8, #4
 800964c:	4623      	mov	r3, r4
 800964e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009652:	f842 1f04 	str.w	r1, [r2, #4]!
 8009656:	429f      	cmp	r7, r3
 8009658:	d2f9      	bcs.n	800964e <__hexnan+0xaa>
 800965a:	1b3b      	subs	r3, r7, r4
 800965c:	f023 0303 	bic.w	r3, r3, #3
 8009660:	3304      	adds	r3, #4
 8009662:	3401      	adds	r4, #1
 8009664:	3e03      	subs	r6, #3
 8009666:	42b4      	cmp	r4, r6
 8009668:	bf88      	it	hi
 800966a:	2304      	movhi	r3, #4
 800966c:	4443      	add	r3, r8
 800966e:	2200      	movs	r2, #0
 8009670:	f843 2b04 	str.w	r2, [r3], #4
 8009674:	429f      	cmp	r7, r3
 8009676:	d2fb      	bcs.n	8009670 <__hexnan+0xcc>
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	b91b      	cbnz	r3, 8009684 <__hexnan+0xe0>
 800967c:	4547      	cmp	r7, r8
 800967e:	d127      	bne.n	80096d0 <__hexnan+0x12c>
 8009680:	2301      	movs	r3, #1
 8009682:	603b      	str	r3, [r7, #0]
 8009684:	2005      	movs	r0, #5
 8009686:	e026      	b.n	80096d6 <__hexnan+0x132>
 8009688:	3501      	adds	r5, #1
 800968a:	2d08      	cmp	r5, #8
 800968c:	f10b 0b01 	add.w	fp, fp, #1
 8009690:	dd06      	ble.n	80096a0 <__hexnan+0xfc>
 8009692:	4544      	cmp	r4, r8
 8009694:	d9c3      	bls.n	800961e <__hexnan+0x7a>
 8009696:	2300      	movs	r3, #0
 8009698:	f844 3c04 	str.w	r3, [r4, #-4]
 800969c:	2501      	movs	r5, #1
 800969e:	3c04      	subs	r4, #4
 80096a0:	6822      	ldr	r2, [r4, #0]
 80096a2:	f000 000f 	and.w	r0, r0, #15
 80096a6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80096aa:	6022      	str	r2, [r4, #0]
 80096ac:	e7b7      	b.n	800961e <__hexnan+0x7a>
 80096ae:	2508      	movs	r5, #8
 80096b0:	e7b5      	b.n	800961e <__hexnan+0x7a>
 80096b2:	9b01      	ldr	r3, [sp, #4]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d0df      	beq.n	8009678 <__hexnan+0xd4>
 80096b8:	f04f 32ff 	mov.w	r2, #4294967295
 80096bc:	f1c3 0320 	rsb	r3, r3, #32
 80096c0:	fa22 f303 	lsr.w	r3, r2, r3
 80096c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80096c8:	401a      	ands	r2, r3
 80096ca:	f846 2c04 	str.w	r2, [r6, #-4]
 80096ce:	e7d3      	b.n	8009678 <__hexnan+0xd4>
 80096d0:	3f04      	subs	r7, #4
 80096d2:	e7d1      	b.n	8009678 <__hexnan+0xd4>
 80096d4:	2004      	movs	r0, #4
 80096d6:	b007      	add	sp, #28
 80096d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080096dc <_localeconv_r>:
 80096dc:	4800      	ldr	r0, [pc, #0]	; (80096e0 <_localeconv_r+0x4>)
 80096de:	4770      	bx	lr
 80096e0:	200001cc 	.word	0x200001cc

080096e4 <malloc>:
 80096e4:	4b02      	ldr	r3, [pc, #8]	; (80096f0 <malloc+0xc>)
 80096e6:	4601      	mov	r1, r0
 80096e8:	6818      	ldr	r0, [r3, #0]
 80096ea:	f000 bd67 	b.w	800a1bc <_malloc_r>
 80096ee:	bf00      	nop
 80096f0:	20000074 	.word	0x20000074

080096f4 <__ascii_mbtowc>:
 80096f4:	b082      	sub	sp, #8
 80096f6:	b901      	cbnz	r1, 80096fa <__ascii_mbtowc+0x6>
 80096f8:	a901      	add	r1, sp, #4
 80096fa:	b142      	cbz	r2, 800970e <__ascii_mbtowc+0x1a>
 80096fc:	b14b      	cbz	r3, 8009712 <__ascii_mbtowc+0x1e>
 80096fe:	7813      	ldrb	r3, [r2, #0]
 8009700:	600b      	str	r3, [r1, #0]
 8009702:	7812      	ldrb	r2, [r2, #0]
 8009704:	1e10      	subs	r0, r2, #0
 8009706:	bf18      	it	ne
 8009708:	2001      	movne	r0, #1
 800970a:	b002      	add	sp, #8
 800970c:	4770      	bx	lr
 800970e:	4610      	mov	r0, r2
 8009710:	e7fb      	b.n	800970a <__ascii_mbtowc+0x16>
 8009712:	f06f 0001 	mvn.w	r0, #1
 8009716:	e7f8      	b.n	800970a <__ascii_mbtowc+0x16>

08009718 <memcpy>:
 8009718:	440a      	add	r2, r1
 800971a:	4291      	cmp	r1, r2
 800971c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009720:	d100      	bne.n	8009724 <memcpy+0xc>
 8009722:	4770      	bx	lr
 8009724:	b510      	push	{r4, lr}
 8009726:	f811 4b01 	ldrb.w	r4, [r1], #1
 800972a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800972e:	4291      	cmp	r1, r2
 8009730:	d1f9      	bne.n	8009726 <memcpy+0xe>
 8009732:	bd10      	pop	{r4, pc}

08009734 <_Balloc>:
 8009734:	b570      	push	{r4, r5, r6, lr}
 8009736:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009738:	4604      	mov	r4, r0
 800973a:	460d      	mov	r5, r1
 800973c:	b976      	cbnz	r6, 800975c <_Balloc+0x28>
 800973e:	2010      	movs	r0, #16
 8009740:	f7ff ffd0 	bl	80096e4 <malloc>
 8009744:	4602      	mov	r2, r0
 8009746:	6260      	str	r0, [r4, #36]	; 0x24
 8009748:	b920      	cbnz	r0, 8009754 <_Balloc+0x20>
 800974a:	4b18      	ldr	r3, [pc, #96]	; (80097ac <_Balloc+0x78>)
 800974c:	4818      	ldr	r0, [pc, #96]	; (80097b0 <_Balloc+0x7c>)
 800974e:	2166      	movs	r1, #102	; 0x66
 8009750:	f000 ff40 	bl	800a5d4 <__assert_func>
 8009754:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009758:	6006      	str	r6, [r0, #0]
 800975a:	60c6      	str	r6, [r0, #12]
 800975c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800975e:	68f3      	ldr	r3, [r6, #12]
 8009760:	b183      	cbz	r3, 8009784 <_Balloc+0x50>
 8009762:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800976a:	b9b8      	cbnz	r0, 800979c <_Balloc+0x68>
 800976c:	2101      	movs	r1, #1
 800976e:	fa01 f605 	lsl.w	r6, r1, r5
 8009772:	1d72      	adds	r2, r6, #5
 8009774:	0092      	lsls	r2, r2, #2
 8009776:	4620      	mov	r0, r4
 8009778:	f000 fc9d 	bl	800a0b6 <_calloc_r>
 800977c:	b160      	cbz	r0, 8009798 <_Balloc+0x64>
 800977e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009782:	e00e      	b.n	80097a2 <_Balloc+0x6e>
 8009784:	2221      	movs	r2, #33	; 0x21
 8009786:	2104      	movs	r1, #4
 8009788:	4620      	mov	r0, r4
 800978a:	f000 fc94 	bl	800a0b6 <_calloc_r>
 800978e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009790:	60f0      	str	r0, [r6, #12]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d1e4      	bne.n	8009762 <_Balloc+0x2e>
 8009798:	2000      	movs	r0, #0
 800979a:	bd70      	pop	{r4, r5, r6, pc}
 800979c:	6802      	ldr	r2, [r0, #0]
 800979e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80097a2:	2300      	movs	r3, #0
 80097a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80097a8:	e7f7      	b.n	800979a <_Balloc+0x66>
 80097aa:	bf00      	nop
 80097ac:	0800c8e6 	.word	0x0800c8e6
 80097b0:	0800c9e4 	.word	0x0800c9e4

080097b4 <_Bfree>:
 80097b4:	b570      	push	{r4, r5, r6, lr}
 80097b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80097b8:	4605      	mov	r5, r0
 80097ba:	460c      	mov	r4, r1
 80097bc:	b976      	cbnz	r6, 80097dc <_Bfree+0x28>
 80097be:	2010      	movs	r0, #16
 80097c0:	f7ff ff90 	bl	80096e4 <malloc>
 80097c4:	4602      	mov	r2, r0
 80097c6:	6268      	str	r0, [r5, #36]	; 0x24
 80097c8:	b920      	cbnz	r0, 80097d4 <_Bfree+0x20>
 80097ca:	4b09      	ldr	r3, [pc, #36]	; (80097f0 <_Bfree+0x3c>)
 80097cc:	4809      	ldr	r0, [pc, #36]	; (80097f4 <_Bfree+0x40>)
 80097ce:	218a      	movs	r1, #138	; 0x8a
 80097d0:	f000 ff00 	bl	800a5d4 <__assert_func>
 80097d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097d8:	6006      	str	r6, [r0, #0]
 80097da:	60c6      	str	r6, [r0, #12]
 80097dc:	b13c      	cbz	r4, 80097ee <_Bfree+0x3a>
 80097de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80097e0:	6862      	ldr	r2, [r4, #4]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80097e8:	6021      	str	r1, [r4, #0]
 80097ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80097ee:	bd70      	pop	{r4, r5, r6, pc}
 80097f0:	0800c8e6 	.word	0x0800c8e6
 80097f4:	0800c9e4 	.word	0x0800c9e4

080097f8 <__multadd>:
 80097f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097fc:	690d      	ldr	r5, [r1, #16]
 80097fe:	4607      	mov	r7, r0
 8009800:	460c      	mov	r4, r1
 8009802:	461e      	mov	r6, r3
 8009804:	f101 0c14 	add.w	ip, r1, #20
 8009808:	2000      	movs	r0, #0
 800980a:	f8dc 3000 	ldr.w	r3, [ip]
 800980e:	b299      	uxth	r1, r3
 8009810:	fb02 6101 	mla	r1, r2, r1, r6
 8009814:	0c1e      	lsrs	r6, r3, #16
 8009816:	0c0b      	lsrs	r3, r1, #16
 8009818:	fb02 3306 	mla	r3, r2, r6, r3
 800981c:	b289      	uxth	r1, r1
 800981e:	3001      	adds	r0, #1
 8009820:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009824:	4285      	cmp	r5, r0
 8009826:	f84c 1b04 	str.w	r1, [ip], #4
 800982a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800982e:	dcec      	bgt.n	800980a <__multadd+0x12>
 8009830:	b30e      	cbz	r6, 8009876 <__multadd+0x7e>
 8009832:	68a3      	ldr	r3, [r4, #8]
 8009834:	42ab      	cmp	r3, r5
 8009836:	dc19      	bgt.n	800986c <__multadd+0x74>
 8009838:	6861      	ldr	r1, [r4, #4]
 800983a:	4638      	mov	r0, r7
 800983c:	3101      	adds	r1, #1
 800983e:	f7ff ff79 	bl	8009734 <_Balloc>
 8009842:	4680      	mov	r8, r0
 8009844:	b928      	cbnz	r0, 8009852 <__multadd+0x5a>
 8009846:	4602      	mov	r2, r0
 8009848:	4b0c      	ldr	r3, [pc, #48]	; (800987c <__multadd+0x84>)
 800984a:	480d      	ldr	r0, [pc, #52]	; (8009880 <__multadd+0x88>)
 800984c:	21b5      	movs	r1, #181	; 0xb5
 800984e:	f000 fec1 	bl	800a5d4 <__assert_func>
 8009852:	6922      	ldr	r2, [r4, #16]
 8009854:	3202      	adds	r2, #2
 8009856:	f104 010c 	add.w	r1, r4, #12
 800985a:	0092      	lsls	r2, r2, #2
 800985c:	300c      	adds	r0, #12
 800985e:	f7ff ff5b 	bl	8009718 <memcpy>
 8009862:	4621      	mov	r1, r4
 8009864:	4638      	mov	r0, r7
 8009866:	f7ff ffa5 	bl	80097b4 <_Bfree>
 800986a:	4644      	mov	r4, r8
 800986c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009870:	3501      	adds	r5, #1
 8009872:	615e      	str	r6, [r3, #20]
 8009874:	6125      	str	r5, [r4, #16]
 8009876:	4620      	mov	r0, r4
 8009878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800987c:	0800c958 	.word	0x0800c958
 8009880:	0800c9e4 	.word	0x0800c9e4

08009884 <__s2b>:
 8009884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009888:	460c      	mov	r4, r1
 800988a:	4615      	mov	r5, r2
 800988c:	461f      	mov	r7, r3
 800988e:	2209      	movs	r2, #9
 8009890:	3308      	adds	r3, #8
 8009892:	4606      	mov	r6, r0
 8009894:	fb93 f3f2 	sdiv	r3, r3, r2
 8009898:	2100      	movs	r1, #0
 800989a:	2201      	movs	r2, #1
 800989c:	429a      	cmp	r2, r3
 800989e:	db09      	blt.n	80098b4 <__s2b+0x30>
 80098a0:	4630      	mov	r0, r6
 80098a2:	f7ff ff47 	bl	8009734 <_Balloc>
 80098a6:	b940      	cbnz	r0, 80098ba <__s2b+0x36>
 80098a8:	4602      	mov	r2, r0
 80098aa:	4b19      	ldr	r3, [pc, #100]	; (8009910 <__s2b+0x8c>)
 80098ac:	4819      	ldr	r0, [pc, #100]	; (8009914 <__s2b+0x90>)
 80098ae:	21ce      	movs	r1, #206	; 0xce
 80098b0:	f000 fe90 	bl	800a5d4 <__assert_func>
 80098b4:	0052      	lsls	r2, r2, #1
 80098b6:	3101      	adds	r1, #1
 80098b8:	e7f0      	b.n	800989c <__s2b+0x18>
 80098ba:	9b08      	ldr	r3, [sp, #32]
 80098bc:	6143      	str	r3, [r0, #20]
 80098be:	2d09      	cmp	r5, #9
 80098c0:	f04f 0301 	mov.w	r3, #1
 80098c4:	6103      	str	r3, [r0, #16]
 80098c6:	dd16      	ble.n	80098f6 <__s2b+0x72>
 80098c8:	f104 0909 	add.w	r9, r4, #9
 80098cc:	46c8      	mov	r8, r9
 80098ce:	442c      	add	r4, r5
 80098d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80098d4:	4601      	mov	r1, r0
 80098d6:	3b30      	subs	r3, #48	; 0x30
 80098d8:	220a      	movs	r2, #10
 80098da:	4630      	mov	r0, r6
 80098dc:	f7ff ff8c 	bl	80097f8 <__multadd>
 80098e0:	45a0      	cmp	r8, r4
 80098e2:	d1f5      	bne.n	80098d0 <__s2b+0x4c>
 80098e4:	f1a5 0408 	sub.w	r4, r5, #8
 80098e8:	444c      	add	r4, r9
 80098ea:	1b2d      	subs	r5, r5, r4
 80098ec:	1963      	adds	r3, r4, r5
 80098ee:	42bb      	cmp	r3, r7
 80098f0:	db04      	blt.n	80098fc <__s2b+0x78>
 80098f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098f6:	340a      	adds	r4, #10
 80098f8:	2509      	movs	r5, #9
 80098fa:	e7f6      	b.n	80098ea <__s2b+0x66>
 80098fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009900:	4601      	mov	r1, r0
 8009902:	3b30      	subs	r3, #48	; 0x30
 8009904:	220a      	movs	r2, #10
 8009906:	4630      	mov	r0, r6
 8009908:	f7ff ff76 	bl	80097f8 <__multadd>
 800990c:	e7ee      	b.n	80098ec <__s2b+0x68>
 800990e:	bf00      	nop
 8009910:	0800c958 	.word	0x0800c958
 8009914:	0800c9e4 	.word	0x0800c9e4

08009918 <__hi0bits>:
 8009918:	0c03      	lsrs	r3, r0, #16
 800991a:	041b      	lsls	r3, r3, #16
 800991c:	b9d3      	cbnz	r3, 8009954 <__hi0bits+0x3c>
 800991e:	0400      	lsls	r0, r0, #16
 8009920:	2310      	movs	r3, #16
 8009922:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009926:	bf04      	itt	eq
 8009928:	0200      	lsleq	r0, r0, #8
 800992a:	3308      	addeq	r3, #8
 800992c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009930:	bf04      	itt	eq
 8009932:	0100      	lsleq	r0, r0, #4
 8009934:	3304      	addeq	r3, #4
 8009936:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800993a:	bf04      	itt	eq
 800993c:	0080      	lsleq	r0, r0, #2
 800993e:	3302      	addeq	r3, #2
 8009940:	2800      	cmp	r0, #0
 8009942:	db05      	blt.n	8009950 <__hi0bits+0x38>
 8009944:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009948:	f103 0301 	add.w	r3, r3, #1
 800994c:	bf08      	it	eq
 800994e:	2320      	moveq	r3, #32
 8009950:	4618      	mov	r0, r3
 8009952:	4770      	bx	lr
 8009954:	2300      	movs	r3, #0
 8009956:	e7e4      	b.n	8009922 <__hi0bits+0xa>

08009958 <__lo0bits>:
 8009958:	6803      	ldr	r3, [r0, #0]
 800995a:	f013 0207 	ands.w	r2, r3, #7
 800995e:	4601      	mov	r1, r0
 8009960:	d00b      	beq.n	800997a <__lo0bits+0x22>
 8009962:	07da      	lsls	r2, r3, #31
 8009964:	d423      	bmi.n	80099ae <__lo0bits+0x56>
 8009966:	0798      	lsls	r0, r3, #30
 8009968:	bf49      	itett	mi
 800996a:	085b      	lsrmi	r3, r3, #1
 800996c:	089b      	lsrpl	r3, r3, #2
 800996e:	2001      	movmi	r0, #1
 8009970:	600b      	strmi	r3, [r1, #0]
 8009972:	bf5c      	itt	pl
 8009974:	600b      	strpl	r3, [r1, #0]
 8009976:	2002      	movpl	r0, #2
 8009978:	4770      	bx	lr
 800997a:	b298      	uxth	r0, r3
 800997c:	b9a8      	cbnz	r0, 80099aa <__lo0bits+0x52>
 800997e:	0c1b      	lsrs	r3, r3, #16
 8009980:	2010      	movs	r0, #16
 8009982:	b2da      	uxtb	r2, r3
 8009984:	b90a      	cbnz	r2, 800998a <__lo0bits+0x32>
 8009986:	3008      	adds	r0, #8
 8009988:	0a1b      	lsrs	r3, r3, #8
 800998a:	071a      	lsls	r2, r3, #28
 800998c:	bf04      	itt	eq
 800998e:	091b      	lsreq	r3, r3, #4
 8009990:	3004      	addeq	r0, #4
 8009992:	079a      	lsls	r2, r3, #30
 8009994:	bf04      	itt	eq
 8009996:	089b      	lsreq	r3, r3, #2
 8009998:	3002      	addeq	r0, #2
 800999a:	07da      	lsls	r2, r3, #31
 800999c:	d403      	bmi.n	80099a6 <__lo0bits+0x4e>
 800999e:	085b      	lsrs	r3, r3, #1
 80099a0:	f100 0001 	add.w	r0, r0, #1
 80099a4:	d005      	beq.n	80099b2 <__lo0bits+0x5a>
 80099a6:	600b      	str	r3, [r1, #0]
 80099a8:	4770      	bx	lr
 80099aa:	4610      	mov	r0, r2
 80099ac:	e7e9      	b.n	8009982 <__lo0bits+0x2a>
 80099ae:	2000      	movs	r0, #0
 80099b0:	4770      	bx	lr
 80099b2:	2020      	movs	r0, #32
 80099b4:	4770      	bx	lr
	...

080099b8 <__i2b>:
 80099b8:	b510      	push	{r4, lr}
 80099ba:	460c      	mov	r4, r1
 80099bc:	2101      	movs	r1, #1
 80099be:	f7ff feb9 	bl	8009734 <_Balloc>
 80099c2:	4602      	mov	r2, r0
 80099c4:	b928      	cbnz	r0, 80099d2 <__i2b+0x1a>
 80099c6:	4b05      	ldr	r3, [pc, #20]	; (80099dc <__i2b+0x24>)
 80099c8:	4805      	ldr	r0, [pc, #20]	; (80099e0 <__i2b+0x28>)
 80099ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80099ce:	f000 fe01 	bl	800a5d4 <__assert_func>
 80099d2:	2301      	movs	r3, #1
 80099d4:	6144      	str	r4, [r0, #20]
 80099d6:	6103      	str	r3, [r0, #16]
 80099d8:	bd10      	pop	{r4, pc}
 80099da:	bf00      	nop
 80099dc:	0800c958 	.word	0x0800c958
 80099e0:	0800c9e4 	.word	0x0800c9e4

080099e4 <__multiply>:
 80099e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e8:	4691      	mov	r9, r2
 80099ea:	690a      	ldr	r2, [r1, #16]
 80099ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	bfb8      	it	lt
 80099f4:	460b      	movlt	r3, r1
 80099f6:	460c      	mov	r4, r1
 80099f8:	bfbc      	itt	lt
 80099fa:	464c      	movlt	r4, r9
 80099fc:	4699      	movlt	r9, r3
 80099fe:	6927      	ldr	r7, [r4, #16]
 8009a00:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009a04:	68a3      	ldr	r3, [r4, #8]
 8009a06:	6861      	ldr	r1, [r4, #4]
 8009a08:	eb07 060a 	add.w	r6, r7, sl
 8009a0c:	42b3      	cmp	r3, r6
 8009a0e:	b085      	sub	sp, #20
 8009a10:	bfb8      	it	lt
 8009a12:	3101      	addlt	r1, #1
 8009a14:	f7ff fe8e 	bl	8009734 <_Balloc>
 8009a18:	b930      	cbnz	r0, 8009a28 <__multiply+0x44>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	4b44      	ldr	r3, [pc, #272]	; (8009b30 <__multiply+0x14c>)
 8009a1e:	4845      	ldr	r0, [pc, #276]	; (8009b34 <__multiply+0x150>)
 8009a20:	f240 115d 	movw	r1, #349	; 0x15d
 8009a24:	f000 fdd6 	bl	800a5d4 <__assert_func>
 8009a28:	f100 0514 	add.w	r5, r0, #20
 8009a2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009a30:	462b      	mov	r3, r5
 8009a32:	2200      	movs	r2, #0
 8009a34:	4543      	cmp	r3, r8
 8009a36:	d321      	bcc.n	8009a7c <__multiply+0x98>
 8009a38:	f104 0314 	add.w	r3, r4, #20
 8009a3c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009a40:	f109 0314 	add.w	r3, r9, #20
 8009a44:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009a48:	9202      	str	r2, [sp, #8]
 8009a4a:	1b3a      	subs	r2, r7, r4
 8009a4c:	3a15      	subs	r2, #21
 8009a4e:	f022 0203 	bic.w	r2, r2, #3
 8009a52:	3204      	adds	r2, #4
 8009a54:	f104 0115 	add.w	r1, r4, #21
 8009a58:	428f      	cmp	r7, r1
 8009a5a:	bf38      	it	cc
 8009a5c:	2204      	movcc	r2, #4
 8009a5e:	9201      	str	r2, [sp, #4]
 8009a60:	9a02      	ldr	r2, [sp, #8]
 8009a62:	9303      	str	r3, [sp, #12]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d80c      	bhi.n	8009a82 <__multiply+0x9e>
 8009a68:	2e00      	cmp	r6, #0
 8009a6a:	dd03      	ble.n	8009a74 <__multiply+0x90>
 8009a6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d05a      	beq.n	8009b2a <__multiply+0x146>
 8009a74:	6106      	str	r6, [r0, #16]
 8009a76:	b005      	add	sp, #20
 8009a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a7c:	f843 2b04 	str.w	r2, [r3], #4
 8009a80:	e7d8      	b.n	8009a34 <__multiply+0x50>
 8009a82:	f8b3 a000 	ldrh.w	sl, [r3]
 8009a86:	f1ba 0f00 	cmp.w	sl, #0
 8009a8a:	d024      	beq.n	8009ad6 <__multiply+0xf2>
 8009a8c:	f104 0e14 	add.w	lr, r4, #20
 8009a90:	46a9      	mov	r9, r5
 8009a92:	f04f 0c00 	mov.w	ip, #0
 8009a96:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009a9a:	f8d9 1000 	ldr.w	r1, [r9]
 8009a9e:	fa1f fb82 	uxth.w	fp, r2
 8009aa2:	b289      	uxth	r1, r1
 8009aa4:	fb0a 110b 	mla	r1, sl, fp, r1
 8009aa8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009aac:	f8d9 2000 	ldr.w	r2, [r9]
 8009ab0:	4461      	add	r1, ip
 8009ab2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009ab6:	fb0a c20b 	mla	r2, sl, fp, ip
 8009aba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009abe:	b289      	uxth	r1, r1
 8009ac0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ac4:	4577      	cmp	r7, lr
 8009ac6:	f849 1b04 	str.w	r1, [r9], #4
 8009aca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009ace:	d8e2      	bhi.n	8009a96 <__multiply+0xb2>
 8009ad0:	9a01      	ldr	r2, [sp, #4]
 8009ad2:	f845 c002 	str.w	ip, [r5, r2]
 8009ad6:	9a03      	ldr	r2, [sp, #12]
 8009ad8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009adc:	3304      	adds	r3, #4
 8009ade:	f1b9 0f00 	cmp.w	r9, #0
 8009ae2:	d020      	beq.n	8009b26 <__multiply+0x142>
 8009ae4:	6829      	ldr	r1, [r5, #0]
 8009ae6:	f104 0c14 	add.w	ip, r4, #20
 8009aea:	46ae      	mov	lr, r5
 8009aec:	f04f 0a00 	mov.w	sl, #0
 8009af0:	f8bc b000 	ldrh.w	fp, [ip]
 8009af4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009af8:	fb09 220b 	mla	r2, r9, fp, r2
 8009afc:	4492      	add	sl, r2
 8009afe:	b289      	uxth	r1, r1
 8009b00:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009b04:	f84e 1b04 	str.w	r1, [lr], #4
 8009b08:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009b0c:	f8be 1000 	ldrh.w	r1, [lr]
 8009b10:	0c12      	lsrs	r2, r2, #16
 8009b12:	fb09 1102 	mla	r1, r9, r2, r1
 8009b16:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009b1a:	4567      	cmp	r7, ip
 8009b1c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009b20:	d8e6      	bhi.n	8009af0 <__multiply+0x10c>
 8009b22:	9a01      	ldr	r2, [sp, #4]
 8009b24:	50a9      	str	r1, [r5, r2]
 8009b26:	3504      	adds	r5, #4
 8009b28:	e79a      	b.n	8009a60 <__multiply+0x7c>
 8009b2a:	3e01      	subs	r6, #1
 8009b2c:	e79c      	b.n	8009a68 <__multiply+0x84>
 8009b2e:	bf00      	nop
 8009b30:	0800c958 	.word	0x0800c958
 8009b34:	0800c9e4 	.word	0x0800c9e4

08009b38 <__pow5mult>:
 8009b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b3c:	4615      	mov	r5, r2
 8009b3e:	f012 0203 	ands.w	r2, r2, #3
 8009b42:	4606      	mov	r6, r0
 8009b44:	460f      	mov	r7, r1
 8009b46:	d007      	beq.n	8009b58 <__pow5mult+0x20>
 8009b48:	4c25      	ldr	r4, [pc, #148]	; (8009be0 <__pow5mult+0xa8>)
 8009b4a:	3a01      	subs	r2, #1
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b52:	f7ff fe51 	bl	80097f8 <__multadd>
 8009b56:	4607      	mov	r7, r0
 8009b58:	10ad      	asrs	r5, r5, #2
 8009b5a:	d03d      	beq.n	8009bd8 <__pow5mult+0xa0>
 8009b5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009b5e:	b97c      	cbnz	r4, 8009b80 <__pow5mult+0x48>
 8009b60:	2010      	movs	r0, #16
 8009b62:	f7ff fdbf 	bl	80096e4 <malloc>
 8009b66:	4602      	mov	r2, r0
 8009b68:	6270      	str	r0, [r6, #36]	; 0x24
 8009b6a:	b928      	cbnz	r0, 8009b78 <__pow5mult+0x40>
 8009b6c:	4b1d      	ldr	r3, [pc, #116]	; (8009be4 <__pow5mult+0xac>)
 8009b6e:	481e      	ldr	r0, [pc, #120]	; (8009be8 <__pow5mult+0xb0>)
 8009b70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009b74:	f000 fd2e 	bl	800a5d4 <__assert_func>
 8009b78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b7c:	6004      	str	r4, [r0, #0]
 8009b7e:	60c4      	str	r4, [r0, #12]
 8009b80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009b84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b88:	b94c      	cbnz	r4, 8009b9e <__pow5mult+0x66>
 8009b8a:	f240 2171 	movw	r1, #625	; 0x271
 8009b8e:	4630      	mov	r0, r6
 8009b90:	f7ff ff12 	bl	80099b8 <__i2b>
 8009b94:	2300      	movs	r3, #0
 8009b96:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	6003      	str	r3, [r0, #0]
 8009b9e:	f04f 0900 	mov.w	r9, #0
 8009ba2:	07eb      	lsls	r3, r5, #31
 8009ba4:	d50a      	bpl.n	8009bbc <__pow5mult+0x84>
 8009ba6:	4639      	mov	r1, r7
 8009ba8:	4622      	mov	r2, r4
 8009baa:	4630      	mov	r0, r6
 8009bac:	f7ff ff1a 	bl	80099e4 <__multiply>
 8009bb0:	4639      	mov	r1, r7
 8009bb2:	4680      	mov	r8, r0
 8009bb4:	4630      	mov	r0, r6
 8009bb6:	f7ff fdfd 	bl	80097b4 <_Bfree>
 8009bba:	4647      	mov	r7, r8
 8009bbc:	106d      	asrs	r5, r5, #1
 8009bbe:	d00b      	beq.n	8009bd8 <__pow5mult+0xa0>
 8009bc0:	6820      	ldr	r0, [r4, #0]
 8009bc2:	b938      	cbnz	r0, 8009bd4 <__pow5mult+0x9c>
 8009bc4:	4622      	mov	r2, r4
 8009bc6:	4621      	mov	r1, r4
 8009bc8:	4630      	mov	r0, r6
 8009bca:	f7ff ff0b 	bl	80099e4 <__multiply>
 8009bce:	6020      	str	r0, [r4, #0]
 8009bd0:	f8c0 9000 	str.w	r9, [r0]
 8009bd4:	4604      	mov	r4, r0
 8009bd6:	e7e4      	b.n	8009ba2 <__pow5mult+0x6a>
 8009bd8:	4638      	mov	r0, r7
 8009bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bde:	bf00      	nop
 8009be0:	0800cb30 	.word	0x0800cb30
 8009be4:	0800c8e6 	.word	0x0800c8e6
 8009be8:	0800c9e4 	.word	0x0800c9e4

08009bec <__lshift>:
 8009bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bf0:	460c      	mov	r4, r1
 8009bf2:	6849      	ldr	r1, [r1, #4]
 8009bf4:	6923      	ldr	r3, [r4, #16]
 8009bf6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009bfa:	68a3      	ldr	r3, [r4, #8]
 8009bfc:	4607      	mov	r7, r0
 8009bfe:	4691      	mov	r9, r2
 8009c00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c04:	f108 0601 	add.w	r6, r8, #1
 8009c08:	42b3      	cmp	r3, r6
 8009c0a:	db0b      	blt.n	8009c24 <__lshift+0x38>
 8009c0c:	4638      	mov	r0, r7
 8009c0e:	f7ff fd91 	bl	8009734 <_Balloc>
 8009c12:	4605      	mov	r5, r0
 8009c14:	b948      	cbnz	r0, 8009c2a <__lshift+0x3e>
 8009c16:	4602      	mov	r2, r0
 8009c18:	4b2a      	ldr	r3, [pc, #168]	; (8009cc4 <__lshift+0xd8>)
 8009c1a:	482b      	ldr	r0, [pc, #172]	; (8009cc8 <__lshift+0xdc>)
 8009c1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009c20:	f000 fcd8 	bl	800a5d4 <__assert_func>
 8009c24:	3101      	adds	r1, #1
 8009c26:	005b      	lsls	r3, r3, #1
 8009c28:	e7ee      	b.n	8009c08 <__lshift+0x1c>
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	f100 0114 	add.w	r1, r0, #20
 8009c30:	f100 0210 	add.w	r2, r0, #16
 8009c34:	4618      	mov	r0, r3
 8009c36:	4553      	cmp	r3, sl
 8009c38:	db37      	blt.n	8009caa <__lshift+0xbe>
 8009c3a:	6920      	ldr	r0, [r4, #16]
 8009c3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c40:	f104 0314 	add.w	r3, r4, #20
 8009c44:	f019 091f 	ands.w	r9, r9, #31
 8009c48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009c50:	d02f      	beq.n	8009cb2 <__lshift+0xc6>
 8009c52:	f1c9 0e20 	rsb	lr, r9, #32
 8009c56:	468a      	mov	sl, r1
 8009c58:	f04f 0c00 	mov.w	ip, #0
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	fa02 f209 	lsl.w	r2, r2, r9
 8009c62:	ea42 020c 	orr.w	r2, r2, ip
 8009c66:	f84a 2b04 	str.w	r2, [sl], #4
 8009c6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c6e:	4298      	cmp	r0, r3
 8009c70:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009c74:	d8f2      	bhi.n	8009c5c <__lshift+0x70>
 8009c76:	1b03      	subs	r3, r0, r4
 8009c78:	3b15      	subs	r3, #21
 8009c7a:	f023 0303 	bic.w	r3, r3, #3
 8009c7e:	3304      	adds	r3, #4
 8009c80:	f104 0215 	add.w	r2, r4, #21
 8009c84:	4290      	cmp	r0, r2
 8009c86:	bf38      	it	cc
 8009c88:	2304      	movcc	r3, #4
 8009c8a:	f841 c003 	str.w	ip, [r1, r3]
 8009c8e:	f1bc 0f00 	cmp.w	ip, #0
 8009c92:	d001      	beq.n	8009c98 <__lshift+0xac>
 8009c94:	f108 0602 	add.w	r6, r8, #2
 8009c98:	3e01      	subs	r6, #1
 8009c9a:	4638      	mov	r0, r7
 8009c9c:	612e      	str	r6, [r5, #16]
 8009c9e:	4621      	mov	r1, r4
 8009ca0:	f7ff fd88 	bl	80097b4 <_Bfree>
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009caa:	f842 0f04 	str.w	r0, [r2, #4]!
 8009cae:	3301      	adds	r3, #1
 8009cb0:	e7c1      	b.n	8009c36 <__lshift+0x4a>
 8009cb2:	3904      	subs	r1, #4
 8009cb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cb8:	f841 2f04 	str.w	r2, [r1, #4]!
 8009cbc:	4298      	cmp	r0, r3
 8009cbe:	d8f9      	bhi.n	8009cb4 <__lshift+0xc8>
 8009cc0:	e7ea      	b.n	8009c98 <__lshift+0xac>
 8009cc2:	bf00      	nop
 8009cc4:	0800c958 	.word	0x0800c958
 8009cc8:	0800c9e4 	.word	0x0800c9e4

08009ccc <__mcmp>:
 8009ccc:	b530      	push	{r4, r5, lr}
 8009cce:	6902      	ldr	r2, [r0, #16]
 8009cd0:	690c      	ldr	r4, [r1, #16]
 8009cd2:	1b12      	subs	r2, r2, r4
 8009cd4:	d10e      	bne.n	8009cf4 <__mcmp+0x28>
 8009cd6:	f100 0314 	add.w	r3, r0, #20
 8009cda:	3114      	adds	r1, #20
 8009cdc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ce0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ce4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009ce8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009cec:	42a5      	cmp	r5, r4
 8009cee:	d003      	beq.n	8009cf8 <__mcmp+0x2c>
 8009cf0:	d305      	bcc.n	8009cfe <__mcmp+0x32>
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	4610      	mov	r0, r2
 8009cf6:	bd30      	pop	{r4, r5, pc}
 8009cf8:	4283      	cmp	r3, r0
 8009cfa:	d3f3      	bcc.n	8009ce4 <__mcmp+0x18>
 8009cfc:	e7fa      	b.n	8009cf4 <__mcmp+0x28>
 8009cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8009d02:	e7f7      	b.n	8009cf4 <__mcmp+0x28>

08009d04 <__mdiff>:
 8009d04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d08:	460c      	mov	r4, r1
 8009d0a:	4606      	mov	r6, r0
 8009d0c:	4611      	mov	r1, r2
 8009d0e:	4620      	mov	r0, r4
 8009d10:	4690      	mov	r8, r2
 8009d12:	f7ff ffdb 	bl	8009ccc <__mcmp>
 8009d16:	1e05      	subs	r5, r0, #0
 8009d18:	d110      	bne.n	8009d3c <__mdiff+0x38>
 8009d1a:	4629      	mov	r1, r5
 8009d1c:	4630      	mov	r0, r6
 8009d1e:	f7ff fd09 	bl	8009734 <_Balloc>
 8009d22:	b930      	cbnz	r0, 8009d32 <__mdiff+0x2e>
 8009d24:	4b3a      	ldr	r3, [pc, #232]	; (8009e10 <__mdiff+0x10c>)
 8009d26:	4602      	mov	r2, r0
 8009d28:	f240 2132 	movw	r1, #562	; 0x232
 8009d2c:	4839      	ldr	r0, [pc, #228]	; (8009e14 <__mdiff+0x110>)
 8009d2e:	f000 fc51 	bl	800a5d4 <__assert_func>
 8009d32:	2301      	movs	r3, #1
 8009d34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d3c:	bfa4      	itt	ge
 8009d3e:	4643      	movge	r3, r8
 8009d40:	46a0      	movge	r8, r4
 8009d42:	4630      	mov	r0, r6
 8009d44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009d48:	bfa6      	itte	ge
 8009d4a:	461c      	movge	r4, r3
 8009d4c:	2500      	movge	r5, #0
 8009d4e:	2501      	movlt	r5, #1
 8009d50:	f7ff fcf0 	bl	8009734 <_Balloc>
 8009d54:	b920      	cbnz	r0, 8009d60 <__mdiff+0x5c>
 8009d56:	4b2e      	ldr	r3, [pc, #184]	; (8009e10 <__mdiff+0x10c>)
 8009d58:	4602      	mov	r2, r0
 8009d5a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009d5e:	e7e5      	b.n	8009d2c <__mdiff+0x28>
 8009d60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009d64:	6926      	ldr	r6, [r4, #16]
 8009d66:	60c5      	str	r5, [r0, #12]
 8009d68:	f104 0914 	add.w	r9, r4, #20
 8009d6c:	f108 0514 	add.w	r5, r8, #20
 8009d70:	f100 0e14 	add.w	lr, r0, #20
 8009d74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009d78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009d7c:	f108 0210 	add.w	r2, r8, #16
 8009d80:	46f2      	mov	sl, lr
 8009d82:	2100      	movs	r1, #0
 8009d84:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009d8c:	fa1f f883 	uxth.w	r8, r3
 8009d90:	fa11 f18b 	uxtah	r1, r1, fp
 8009d94:	0c1b      	lsrs	r3, r3, #16
 8009d96:	eba1 0808 	sub.w	r8, r1, r8
 8009d9a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009d9e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009da2:	fa1f f888 	uxth.w	r8, r8
 8009da6:	1419      	asrs	r1, r3, #16
 8009da8:	454e      	cmp	r6, r9
 8009daa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009dae:	f84a 3b04 	str.w	r3, [sl], #4
 8009db2:	d8e7      	bhi.n	8009d84 <__mdiff+0x80>
 8009db4:	1b33      	subs	r3, r6, r4
 8009db6:	3b15      	subs	r3, #21
 8009db8:	f023 0303 	bic.w	r3, r3, #3
 8009dbc:	3304      	adds	r3, #4
 8009dbe:	3415      	adds	r4, #21
 8009dc0:	42a6      	cmp	r6, r4
 8009dc2:	bf38      	it	cc
 8009dc4:	2304      	movcc	r3, #4
 8009dc6:	441d      	add	r5, r3
 8009dc8:	4473      	add	r3, lr
 8009dca:	469e      	mov	lr, r3
 8009dcc:	462e      	mov	r6, r5
 8009dce:	4566      	cmp	r6, ip
 8009dd0:	d30e      	bcc.n	8009df0 <__mdiff+0xec>
 8009dd2:	f10c 0203 	add.w	r2, ip, #3
 8009dd6:	1b52      	subs	r2, r2, r5
 8009dd8:	f022 0203 	bic.w	r2, r2, #3
 8009ddc:	3d03      	subs	r5, #3
 8009dde:	45ac      	cmp	ip, r5
 8009de0:	bf38      	it	cc
 8009de2:	2200      	movcc	r2, #0
 8009de4:	441a      	add	r2, r3
 8009de6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009dea:	b17b      	cbz	r3, 8009e0c <__mdiff+0x108>
 8009dec:	6107      	str	r7, [r0, #16]
 8009dee:	e7a3      	b.n	8009d38 <__mdiff+0x34>
 8009df0:	f856 8b04 	ldr.w	r8, [r6], #4
 8009df4:	fa11 f288 	uxtah	r2, r1, r8
 8009df8:	1414      	asrs	r4, r2, #16
 8009dfa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009dfe:	b292      	uxth	r2, r2
 8009e00:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009e04:	f84e 2b04 	str.w	r2, [lr], #4
 8009e08:	1421      	asrs	r1, r4, #16
 8009e0a:	e7e0      	b.n	8009dce <__mdiff+0xca>
 8009e0c:	3f01      	subs	r7, #1
 8009e0e:	e7ea      	b.n	8009de6 <__mdiff+0xe2>
 8009e10:	0800c958 	.word	0x0800c958
 8009e14:	0800c9e4 	.word	0x0800c9e4

08009e18 <__ulp>:
 8009e18:	b082      	sub	sp, #8
 8009e1a:	ed8d 0b00 	vstr	d0, [sp]
 8009e1e:	9b01      	ldr	r3, [sp, #4]
 8009e20:	4912      	ldr	r1, [pc, #72]	; (8009e6c <__ulp+0x54>)
 8009e22:	4019      	ands	r1, r3
 8009e24:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009e28:	2900      	cmp	r1, #0
 8009e2a:	dd05      	ble.n	8009e38 <__ulp+0x20>
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	460b      	mov	r3, r1
 8009e30:	ec43 2b10 	vmov	d0, r2, r3
 8009e34:	b002      	add	sp, #8
 8009e36:	4770      	bx	lr
 8009e38:	4249      	negs	r1, r1
 8009e3a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009e3e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009e42:	f04f 0200 	mov.w	r2, #0
 8009e46:	f04f 0300 	mov.w	r3, #0
 8009e4a:	da04      	bge.n	8009e56 <__ulp+0x3e>
 8009e4c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009e50:	fa41 f300 	asr.w	r3, r1, r0
 8009e54:	e7ec      	b.n	8009e30 <__ulp+0x18>
 8009e56:	f1a0 0114 	sub.w	r1, r0, #20
 8009e5a:	291e      	cmp	r1, #30
 8009e5c:	bfda      	itte	le
 8009e5e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009e62:	fa20 f101 	lsrle.w	r1, r0, r1
 8009e66:	2101      	movgt	r1, #1
 8009e68:	460a      	mov	r2, r1
 8009e6a:	e7e1      	b.n	8009e30 <__ulp+0x18>
 8009e6c:	7ff00000 	.word	0x7ff00000

08009e70 <__b2d>:
 8009e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e72:	6905      	ldr	r5, [r0, #16]
 8009e74:	f100 0714 	add.w	r7, r0, #20
 8009e78:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009e7c:	1f2e      	subs	r6, r5, #4
 8009e7e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009e82:	4620      	mov	r0, r4
 8009e84:	f7ff fd48 	bl	8009918 <__hi0bits>
 8009e88:	f1c0 0320 	rsb	r3, r0, #32
 8009e8c:	280a      	cmp	r0, #10
 8009e8e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009f0c <__b2d+0x9c>
 8009e92:	600b      	str	r3, [r1, #0]
 8009e94:	dc14      	bgt.n	8009ec0 <__b2d+0x50>
 8009e96:	f1c0 0e0b 	rsb	lr, r0, #11
 8009e9a:	fa24 f10e 	lsr.w	r1, r4, lr
 8009e9e:	42b7      	cmp	r7, r6
 8009ea0:	ea41 030c 	orr.w	r3, r1, ip
 8009ea4:	bf34      	ite	cc
 8009ea6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009eaa:	2100      	movcs	r1, #0
 8009eac:	3015      	adds	r0, #21
 8009eae:	fa04 f000 	lsl.w	r0, r4, r0
 8009eb2:	fa21 f10e 	lsr.w	r1, r1, lr
 8009eb6:	ea40 0201 	orr.w	r2, r0, r1
 8009eba:	ec43 2b10 	vmov	d0, r2, r3
 8009ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ec0:	42b7      	cmp	r7, r6
 8009ec2:	bf3a      	itte	cc
 8009ec4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009ec8:	f1a5 0608 	subcc.w	r6, r5, #8
 8009ecc:	2100      	movcs	r1, #0
 8009ece:	380b      	subs	r0, #11
 8009ed0:	d017      	beq.n	8009f02 <__b2d+0x92>
 8009ed2:	f1c0 0c20 	rsb	ip, r0, #32
 8009ed6:	fa04 f500 	lsl.w	r5, r4, r0
 8009eda:	42be      	cmp	r6, r7
 8009edc:	fa21 f40c 	lsr.w	r4, r1, ip
 8009ee0:	ea45 0504 	orr.w	r5, r5, r4
 8009ee4:	bf8c      	ite	hi
 8009ee6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009eea:	2400      	movls	r4, #0
 8009eec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009ef0:	fa01 f000 	lsl.w	r0, r1, r0
 8009ef4:	fa24 f40c 	lsr.w	r4, r4, ip
 8009ef8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009efc:	ea40 0204 	orr.w	r2, r0, r4
 8009f00:	e7db      	b.n	8009eba <__b2d+0x4a>
 8009f02:	ea44 030c 	orr.w	r3, r4, ip
 8009f06:	460a      	mov	r2, r1
 8009f08:	e7d7      	b.n	8009eba <__b2d+0x4a>
 8009f0a:	bf00      	nop
 8009f0c:	3ff00000 	.word	0x3ff00000

08009f10 <__d2b>:
 8009f10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f14:	4689      	mov	r9, r1
 8009f16:	2101      	movs	r1, #1
 8009f18:	ec57 6b10 	vmov	r6, r7, d0
 8009f1c:	4690      	mov	r8, r2
 8009f1e:	f7ff fc09 	bl	8009734 <_Balloc>
 8009f22:	4604      	mov	r4, r0
 8009f24:	b930      	cbnz	r0, 8009f34 <__d2b+0x24>
 8009f26:	4602      	mov	r2, r0
 8009f28:	4b25      	ldr	r3, [pc, #148]	; (8009fc0 <__d2b+0xb0>)
 8009f2a:	4826      	ldr	r0, [pc, #152]	; (8009fc4 <__d2b+0xb4>)
 8009f2c:	f240 310a 	movw	r1, #778	; 0x30a
 8009f30:	f000 fb50 	bl	800a5d4 <__assert_func>
 8009f34:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009f38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009f3c:	bb35      	cbnz	r5, 8009f8c <__d2b+0x7c>
 8009f3e:	2e00      	cmp	r6, #0
 8009f40:	9301      	str	r3, [sp, #4]
 8009f42:	d028      	beq.n	8009f96 <__d2b+0x86>
 8009f44:	4668      	mov	r0, sp
 8009f46:	9600      	str	r6, [sp, #0]
 8009f48:	f7ff fd06 	bl	8009958 <__lo0bits>
 8009f4c:	9900      	ldr	r1, [sp, #0]
 8009f4e:	b300      	cbz	r0, 8009f92 <__d2b+0x82>
 8009f50:	9a01      	ldr	r2, [sp, #4]
 8009f52:	f1c0 0320 	rsb	r3, r0, #32
 8009f56:	fa02 f303 	lsl.w	r3, r2, r3
 8009f5a:	430b      	orrs	r3, r1
 8009f5c:	40c2      	lsrs	r2, r0
 8009f5e:	6163      	str	r3, [r4, #20]
 8009f60:	9201      	str	r2, [sp, #4]
 8009f62:	9b01      	ldr	r3, [sp, #4]
 8009f64:	61a3      	str	r3, [r4, #24]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	bf14      	ite	ne
 8009f6a:	2202      	movne	r2, #2
 8009f6c:	2201      	moveq	r2, #1
 8009f6e:	6122      	str	r2, [r4, #16]
 8009f70:	b1d5      	cbz	r5, 8009fa8 <__d2b+0x98>
 8009f72:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009f76:	4405      	add	r5, r0
 8009f78:	f8c9 5000 	str.w	r5, [r9]
 8009f7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f80:	f8c8 0000 	str.w	r0, [r8]
 8009f84:	4620      	mov	r0, r4
 8009f86:	b003      	add	sp, #12
 8009f88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f90:	e7d5      	b.n	8009f3e <__d2b+0x2e>
 8009f92:	6161      	str	r1, [r4, #20]
 8009f94:	e7e5      	b.n	8009f62 <__d2b+0x52>
 8009f96:	a801      	add	r0, sp, #4
 8009f98:	f7ff fcde 	bl	8009958 <__lo0bits>
 8009f9c:	9b01      	ldr	r3, [sp, #4]
 8009f9e:	6163      	str	r3, [r4, #20]
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	6122      	str	r2, [r4, #16]
 8009fa4:	3020      	adds	r0, #32
 8009fa6:	e7e3      	b.n	8009f70 <__d2b+0x60>
 8009fa8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009fac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009fb0:	f8c9 0000 	str.w	r0, [r9]
 8009fb4:	6918      	ldr	r0, [r3, #16]
 8009fb6:	f7ff fcaf 	bl	8009918 <__hi0bits>
 8009fba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009fbe:	e7df      	b.n	8009f80 <__d2b+0x70>
 8009fc0:	0800c958 	.word	0x0800c958
 8009fc4:	0800c9e4 	.word	0x0800c9e4

08009fc8 <__ratio>:
 8009fc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fcc:	4688      	mov	r8, r1
 8009fce:	4669      	mov	r1, sp
 8009fd0:	4681      	mov	r9, r0
 8009fd2:	f7ff ff4d 	bl	8009e70 <__b2d>
 8009fd6:	a901      	add	r1, sp, #4
 8009fd8:	4640      	mov	r0, r8
 8009fda:	ec55 4b10 	vmov	r4, r5, d0
 8009fde:	f7ff ff47 	bl	8009e70 <__b2d>
 8009fe2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009fe6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009fea:	eba3 0c02 	sub.w	ip, r3, r2
 8009fee:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009ff2:	1a9b      	subs	r3, r3, r2
 8009ff4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009ff8:	ec51 0b10 	vmov	r0, r1, d0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	bfd6      	itet	le
 800a000:	460a      	movle	r2, r1
 800a002:	462a      	movgt	r2, r5
 800a004:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a008:	468b      	mov	fp, r1
 800a00a:	462f      	mov	r7, r5
 800a00c:	bfd4      	ite	le
 800a00e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a012:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a016:	4620      	mov	r0, r4
 800a018:	ee10 2a10 	vmov	r2, s0
 800a01c:	465b      	mov	r3, fp
 800a01e:	4639      	mov	r1, r7
 800a020:	f7f6 fc1c 	bl	800085c <__aeabi_ddiv>
 800a024:	ec41 0b10 	vmov	d0, r0, r1
 800a028:	b003      	add	sp, #12
 800a02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a02e <__copybits>:
 800a02e:	3901      	subs	r1, #1
 800a030:	b570      	push	{r4, r5, r6, lr}
 800a032:	1149      	asrs	r1, r1, #5
 800a034:	6914      	ldr	r4, [r2, #16]
 800a036:	3101      	adds	r1, #1
 800a038:	f102 0314 	add.w	r3, r2, #20
 800a03c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a040:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a044:	1f05      	subs	r5, r0, #4
 800a046:	42a3      	cmp	r3, r4
 800a048:	d30c      	bcc.n	800a064 <__copybits+0x36>
 800a04a:	1aa3      	subs	r3, r4, r2
 800a04c:	3b11      	subs	r3, #17
 800a04e:	f023 0303 	bic.w	r3, r3, #3
 800a052:	3211      	adds	r2, #17
 800a054:	42a2      	cmp	r2, r4
 800a056:	bf88      	it	hi
 800a058:	2300      	movhi	r3, #0
 800a05a:	4418      	add	r0, r3
 800a05c:	2300      	movs	r3, #0
 800a05e:	4288      	cmp	r0, r1
 800a060:	d305      	bcc.n	800a06e <__copybits+0x40>
 800a062:	bd70      	pop	{r4, r5, r6, pc}
 800a064:	f853 6b04 	ldr.w	r6, [r3], #4
 800a068:	f845 6f04 	str.w	r6, [r5, #4]!
 800a06c:	e7eb      	b.n	800a046 <__copybits+0x18>
 800a06e:	f840 3b04 	str.w	r3, [r0], #4
 800a072:	e7f4      	b.n	800a05e <__copybits+0x30>

0800a074 <__any_on>:
 800a074:	f100 0214 	add.w	r2, r0, #20
 800a078:	6900      	ldr	r0, [r0, #16]
 800a07a:	114b      	asrs	r3, r1, #5
 800a07c:	4298      	cmp	r0, r3
 800a07e:	b510      	push	{r4, lr}
 800a080:	db11      	blt.n	800a0a6 <__any_on+0x32>
 800a082:	dd0a      	ble.n	800a09a <__any_on+0x26>
 800a084:	f011 011f 	ands.w	r1, r1, #31
 800a088:	d007      	beq.n	800a09a <__any_on+0x26>
 800a08a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a08e:	fa24 f001 	lsr.w	r0, r4, r1
 800a092:	fa00 f101 	lsl.w	r1, r0, r1
 800a096:	428c      	cmp	r4, r1
 800a098:	d10b      	bne.n	800a0b2 <__any_on+0x3e>
 800a09a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d803      	bhi.n	800a0aa <__any_on+0x36>
 800a0a2:	2000      	movs	r0, #0
 800a0a4:	bd10      	pop	{r4, pc}
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	e7f7      	b.n	800a09a <__any_on+0x26>
 800a0aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a0ae:	2900      	cmp	r1, #0
 800a0b0:	d0f5      	beq.n	800a09e <__any_on+0x2a>
 800a0b2:	2001      	movs	r0, #1
 800a0b4:	e7f6      	b.n	800a0a4 <__any_on+0x30>

0800a0b6 <_calloc_r>:
 800a0b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0b8:	fba1 2402 	umull	r2, r4, r1, r2
 800a0bc:	b94c      	cbnz	r4, 800a0d2 <_calloc_r+0x1c>
 800a0be:	4611      	mov	r1, r2
 800a0c0:	9201      	str	r2, [sp, #4]
 800a0c2:	f000 f87b 	bl	800a1bc <_malloc_r>
 800a0c6:	9a01      	ldr	r2, [sp, #4]
 800a0c8:	4605      	mov	r5, r0
 800a0ca:	b930      	cbnz	r0, 800a0da <_calloc_r+0x24>
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	b003      	add	sp, #12
 800a0d0:	bd30      	pop	{r4, r5, pc}
 800a0d2:	220c      	movs	r2, #12
 800a0d4:	6002      	str	r2, [r0, #0]
 800a0d6:	2500      	movs	r5, #0
 800a0d8:	e7f8      	b.n	800a0cc <_calloc_r+0x16>
 800a0da:	4621      	mov	r1, r4
 800a0dc:	f7fc fbc0 	bl	8006860 <memset>
 800a0e0:	e7f4      	b.n	800a0cc <_calloc_r+0x16>
	...

0800a0e4 <_free_r>:
 800a0e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0e6:	2900      	cmp	r1, #0
 800a0e8:	d044      	beq.n	800a174 <_free_r+0x90>
 800a0ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0ee:	9001      	str	r0, [sp, #4]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f1a1 0404 	sub.w	r4, r1, #4
 800a0f6:	bfb8      	it	lt
 800a0f8:	18e4      	addlt	r4, r4, r3
 800a0fa:	f000 fab5 	bl	800a668 <__malloc_lock>
 800a0fe:	4a1e      	ldr	r2, [pc, #120]	; (800a178 <_free_r+0x94>)
 800a100:	9801      	ldr	r0, [sp, #4]
 800a102:	6813      	ldr	r3, [r2, #0]
 800a104:	b933      	cbnz	r3, 800a114 <_free_r+0x30>
 800a106:	6063      	str	r3, [r4, #4]
 800a108:	6014      	str	r4, [r2, #0]
 800a10a:	b003      	add	sp, #12
 800a10c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a110:	f000 bab0 	b.w	800a674 <__malloc_unlock>
 800a114:	42a3      	cmp	r3, r4
 800a116:	d908      	bls.n	800a12a <_free_r+0x46>
 800a118:	6825      	ldr	r5, [r4, #0]
 800a11a:	1961      	adds	r1, r4, r5
 800a11c:	428b      	cmp	r3, r1
 800a11e:	bf01      	itttt	eq
 800a120:	6819      	ldreq	r1, [r3, #0]
 800a122:	685b      	ldreq	r3, [r3, #4]
 800a124:	1949      	addeq	r1, r1, r5
 800a126:	6021      	streq	r1, [r4, #0]
 800a128:	e7ed      	b.n	800a106 <_free_r+0x22>
 800a12a:	461a      	mov	r2, r3
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	b10b      	cbz	r3, 800a134 <_free_r+0x50>
 800a130:	42a3      	cmp	r3, r4
 800a132:	d9fa      	bls.n	800a12a <_free_r+0x46>
 800a134:	6811      	ldr	r1, [r2, #0]
 800a136:	1855      	adds	r5, r2, r1
 800a138:	42a5      	cmp	r5, r4
 800a13a:	d10b      	bne.n	800a154 <_free_r+0x70>
 800a13c:	6824      	ldr	r4, [r4, #0]
 800a13e:	4421      	add	r1, r4
 800a140:	1854      	adds	r4, r2, r1
 800a142:	42a3      	cmp	r3, r4
 800a144:	6011      	str	r1, [r2, #0]
 800a146:	d1e0      	bne.n	800a10a <_free_r+0x26>
 800a148:	681c      	ldr	r4, [r3, #0]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	6053      	str	r3, [r2, #4]
 800a14e:	4421      	add	r1, r4
 800a150:	6011      	str	r1, [r2, #0]
 800a152:	e7da      	b.n	800a10a <_free_r+0x26>
 800a154:	d902      	bls.n	800a15c <_free_r+0x78>
 800a156:	230c      	movs	r3, #12
 800a158:	6003      	str	r3, [r0, #0]
 800a15a:	e7d6      	b.n	800a10a <_free_r+0x26>
 800a15c:	6825      	ldr	r5, [r4, #0]
 800a15e:	1961      	adds	r1, r4, r5
 800a160:	428b      	cmp	r3, r1
 800a162:	bf04      	itt	eq
 800a164:	6819      	ldreq	r1, [r3, #0]
 800a166:	685b      	ldreq	r3, [r3, #4]
 800a168:	6063      	str	r3, [r4, #4]
 800a16a:	bf04      	itt	eq
 800a16c:	1949      	addeq	r1, r1, r5
 800a16e:	6021      	streq	r1, [r4, #0]
 800a170:	6054      	str	r4, [r2, #4]
 800a172:	e7ca      	b.n	800a10a <_free_r+0x26>
 800a174:	b003      	add	sp, #12
 800a176:	bd30      	pop	{r4, r5, pc}
 800a178:	200007fc 	.word	0x200007fc

0800a17c <sbrk_aligned>:
 800a17c:	b570      	push	{r4, r5, r6, lr}
 800a17e:	4e0e      	ldr	r6, [pc, #56]	; (800a1b8 <sbrk_aligned+0x3c>)
 800a180:	460c      	mov	r4, r1
 800a182:	6831      	ldr	r1, [r6, #0]
 800a184:	4605      	mov	r5, r0
 800a186:	b911      	cbnz	r1, 800a18e <sbrk_aligned+0x12>
 800a188:	f000 f9f2 	bl	800a570 <_sbrk_r>
 800a18c:	6030      	str	r0, [r6, #0]
 800a18e:	4621      	mov	r1, r4
 800a190:	4628      	mov	r0, r5
 800a192:	f000 f9ed 	bl	800a570 <_sbrk_r>
 800a196:	1c43      	adds	r3, r0, #1
 800a198:	d00a      	beq.n	800a1b0 <sbrk_aligned+0x34>
 800a19a:	1cc4      	adds	r4, r0, #3
 800a19c:	f024 0403 	bic.w	r4, r4, #3
 800a1a0:	42a0      	cmp	r0, r4
 800a1a2:	d007      	beq.n	800a1b4 <sbrk_aligned+0x38>
 800a1a4:	1a21      	subs	r1, r4, r0
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	f000 f9e2 	bl	800a570 <_sbrk_r>
 800a1ac:	3001      	adds	r0, #1
 800a1ae:	d101      	bne.n	800a1b4 <sbrk_aligned+0x38>
 800a1b0:	f04f 34ff 	mov.w	r4, #4294967295
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	bd70      	pop	{r4, r5, r6, pc}
 800a1b8:	20000800 	.word	0x20000800

0800a1bc <_malloc_r>:
 800a1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c0:	1ccd      	adds	r5, r1, #3
 800a1c2:	f025 0503 	bic.w	r5, r5, #3
 800a1c6:	3508      	adds	r5, #8
 800a1c8:	2d0c      	cmp	r5, #12
 800a1ca:	bf38      	it	cc
 800a1cc:	250c      	movcc	r5, #12
 800a1ce:	2d00      	cmp	r5, #0
 800a1d0:	4607      	mov	r7, r0
 800a1d2:	db01      	blt.n	800a1d8 <_malloc_r+0x1c>
 800a1d4:	42a9      	cmp	r1, r5
 800a1d6:	d905      	bls.n	800a1e4 <_malloc_r+0x28>
 800a1d8:	230c      	movs	r3, #12
 800a1da:	603b      	str	r3, [r7, #0]
 800a1dc:	2600      	movs	r6, #0
 800a1de:	4630      	mov	r0, r6
 800a1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1e4:	4e2e      	ldr	r6, [pc, #184]	; (800a2a0 <_malloc_r+0xe4>)
 800a1e6:	f000 fa3f 	bl	800a668 <__malloc_lock>
 800a1ea:	6833      	ldr	r3, [r6, #0]
 800a1ec:	461c      	mov	r4, r3
 800a1ee:	bb34      	cbnz	r4, 800a23e <_malloc_r+0x82>
 800a1f0:	4629      	mov	r1, r5
 800a1f2:	4638      	mov	r0, r7
 800a1f4:	f7ff ffc2 	bl	800a17c <sbrk_aligned>
 800a1f8:	1c43      	adds	r3, r0, #1
 800a1fa:	4604      	mov	r4, r0
 800a1fc:	d14d      	bne.n	800a29a <_malloc_r+0xde>
 800a1fe:	6834      	ldr	r4, [r6, #0]
 800a200:	4626      	mov	r6, r4
 800a202:	2e00      	cmp	r6, #0
 800a204:	d140      	bne.n	800a288 <_malloc_r+0xcc>
 800a206:	6823      	ldr	r3, [r4, #0]
 800a208:	4631      	mov	r1, r6
 800a20a:	4638      	mov	r0, r7
 800a20c:	eb04 0803 	add.w	r8, r4, r3
 800a210:	f000 f9ae 	bl	800a570 <_sbrk_r>
 800a214:	4580      	cmp	r8, r0
 800a216:	d13a      	bne.n	800a28e <_malloc_r+0xd2>
 800a218:	6821      	ldr	r1, [r4, #0]
 800a21a:	3503      	adds	r5, #3
 800a21c:	1a6d      	subs	r5, r5, r1
 800a21e:	f025 0503 	bic.w	r5, r5, #3
 800a222:	3508      	adds	r5, #8
 800a224:	2d0c      	cmp	r5, #12
 800a226:	bf38      	it	cc
 800a228:	250c      	movcc	r5, #12
 800a22a:	4629      	mov	r1, r5
 800a22c:	4638      	mov	r0, r7
 800a22e:	f7ff ffa5 	bl	800a17c <sbrk_aligned>
 800a232:	3001      	adds	r0, #1
 800a234:	d02b      	beq.n	800a28e <_malloc_r+0xd2>
 800a236:	6823      	ldr	r3, [r4, #0]
 800a238:	442b      	add	r3, r5
 800a23a:	6023      	str	r3, [r4, #0]
 800a23c:	e00e      	b.n	800a25c <_malloc_r+0xa0>
 800a23e:	6822      	ldr	r2, [r4, #0]
 800a240:	1b52      	subs	r2, r2, r5
 800a242:	d41e      	bmi.n	800a282 <_malloc_r+0xc6>
 800a244:	2a0b      	cmp	r2, #11
 800a246:	d916      	bls.n	800a276 <_malloc_r+0xba>
 800a248:	1961      	adds	r1, r4, r5
 800a24a:	42a3      	cmp	r3, r4
 800a24c:	6025      	str	r5, [r4, #0]
 800a24e:	bf18      	it	ne
 800a250:	6059      	strne	r1, [r3, #4]
 800a252:	6863      	ldr	r3, [r4, #4]
 800a254:	bf08      	it	eq
 800a256:	6031      	streq	r1, [r6, #0]
 800a258:	5162      	str	r2, [r4, r5]
 800a25a:	604b      	str	r3, [r1, #4]
 800a25c:	4638      	mov	r0, r7
 800a25e:	f104 060b 	add.w	r6, r4, #11
 800a262:	f000 fa07 	bl	800a674 <__malloc_unlock>
 800a266:	f026 0607 	bic.w	r6, r6, #7
 800a26a:	1d23      	adds	r3, r4, #4
 800a26c:	1af2      	subs	r2, r6, r3
 800a26e:	d0b6      	beq.n	800a1de <_malloc_r+0x22>
 800a270:	1b9b      	subs	r3, r3, r6
 800a272:	50a3      	str	r3, [r4, r2]
 800a274:	e7b3      	b.n	800a1de <_malloc_r+0x22>
 800a276:	6862      	ldr	r2, [r4, #4]
 800a278:	42a3      	cmp	r3, r4
 800a27a:	bf0c      	ite	eq
 800a27c:	6032      	streq	r2, [r6, #0]
 800a27e:	605a      	strne	r2, [r3, #4]
 800a280:	e7ec      	b.n	800a25c <_malloc_r+0xa0>
 800a282:	4623      	mov	r3, r4
 800a284:	6864      	ldr	r4, [r4, #4]
 800a286:	e7b2      	b.n	800a1ee <_malloc_r+0x32>
 800a288:	4634      	mov	r4, r6
 800a28a:	6876      	ldr	r6, [r6, #4]
 800a28c:	e7b9      	b.n	800a202 <_malloc_r+0x46>
 800a28e:	230c      	movs	r3, #12
 800a290:	603b      	str	r3, [r7, #0]
 800a292:	4638      	mov	r0, r7
 800a294:	f000 f9ee 	bl	800a674 <__malloc_unlock>
 800a298:	e7a1      	b.n	800a1de <_malloc_r+0x22>
 800a29a:	6025      	str	r5, [r4, #0]
 800a29c:	e7de      	b.n	800a25c <_malloc_r+0xa0>
 800a29e:	bf00      	nop
 800a2a0:	200007fc 	.word	0x200007fc

0800a2a4 <__ssputs_r>:
 800a2a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2a8:	688e      	ldr	r6, [r1, #8]
 800a2aa:	429e      	cmp	r6, r3
 800a2ac:	4682      	mov	sl, r0
 800a2ae:	460c      	mov	r4, r1
 800a2b0:	4690      	mov	r8, r2
 800a2b2:	461f      	mov	r7, r3
 800a2b4:	d838      	bhi.n	800a328 <__ssputs_r+0x84>
 800a2b6:	898a      	ldrh	r2, [r1, #12]
 800a2b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a2bc:	d032      	beq.n	800a324 <__ssputs_r+0x80>
 800a2be:	6825      	ldr	r5, [r4, #0]
 800a2c0:	6909      	ldr	r1, [r1, #16]
 800a2c2:	eba5 0901 	sub.w	r9, r5, r1
 800a2c6:	6965      	ldr	r5, [r4, #20]
 800a2c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	444b      	add	r3, r9
 800a2d4:	106d      	asrs	r5, r5, #1
 800a2d6:	429d      	cmp	r5, r3
 800a2d8:	bf38      	it	cc
 800a2da:	461d      	movcc	r5, r3
 800a2dc:	0553      	lsls	r3, r2, #21
 800a2de:	d531      	bpl.n	800a344 <__ssputs_r+0xa0>
 800a2e0:	4629      	mov	r1, r5
 800a2e2:	f7ff ff6b 	bl	800a1bc <_malloc_r>
 800a2e6:	4606      	mov	r6, r0
 800a2e8:	b950      	cbnz	r0, 800a300 <__ssputs_r+0x5c>
 800a2ea:	230c      	movs	r3, #12
 800a2ec:	f8ca 3000 	str.w	r3, [sl]
 800a2f0:	89a3      	ldrh	r3, [r4, #12]
 800a2f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2f6:	81a3      	strh	r3, [r4, #12]
 800a2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a300:	6921      	ldr	r1, [r4, #16]
 800a302:	464a      	mov	r2, r9
 800a304:	f7ff fa08 	bl	8009718 <memcpy>
 800a308:	89a3      	ldrh	r3, [r4, #12]
 800a30a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a30e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a312:	81a3      	strh	r3, [r4, #12]
 800a314:	6126      	str	r6, [r4, #16]
 800a316:	6165      	str	r5, [r4, #20]
 800a318:	444e      	add	r6, r9
 800a31a:	eba5 0509 	sub.w	r5, r5, r9
 800a31e:	6026      	str	r6, [r4, #0]
 800a320:	60a5      	str	r5, [r4, #8]
 800a322:	463e      	mov	r6, r7
 800a324:	42be      	cmp	r6, r7
 800a326:	d900      	bls.n	800a32a <__ssputs_r+0x86>
 800a328:	463e      	mov	r6, r7
 800a32a:	6820      	ldr	r0, [r4, #0]
 800a32c:	4632      	mov	r2, r6
 800a32e:	4641      	mov	r1, r8
 800a330:	f000 f980 	bl	800a634 <memmove>
 800a334:	68a3      	ldr	r3, [r4, #8]
 800a336:	1b9b      	subs	r3, r3, r6
 800a338:	60a3      	str	r3, [r4, #8]
 800a33a:	6823      	ldr	r3, [r4, #0]
 800a33c:	4433      	add	r3, r6
 800a33e:	6023      	str	r3, [r4, #0]
 800a340:	2000      	movs	r0, #0
 800a342:	e7db      	b.n	800a2fc <__ssputs_r+0x58>
 800a344:	462a      	mov	r2, r5
 800a346:	f000 f99b 	bl	800a680 <_realloc_r>
 800a34a:	4606      	mov	r6, r0
 800a34c:	2800      	cmp	r0, #0
 800a34e:	d1e1      	bne.n	800a314 <__ssputs_r+0x70>
 800a350:	6921      	ldr	r1, [r4, #16]
 800a352:	4650      	mov	r0, sl
 800a354:	f7ff fec6 	bl	800a0e4 <_free_r>
 800a358:	e7c7      	b.n	800a2ea <__ssputs_r+0x46>
	...

0800a35c <_svfiprintf_r>:
 800a35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a360:	4698      	mov	r8, r3
 800a362:	898b      	ldrh	r3, [r1, #12]
 800a364:	061b      	lsls	r3, r3, #24
 800a366:	b09d      	sub	sp, #116	; 0x74
 800a368:	4607      	mov	r7, r0
 800a36a:	460d      	mov	r5, r1
 800a36c:	4614      	mov	r4, r2
 800a36e:	d50e      	bpl.n	800a38e <_svfiprintf_r+0x32>
 800a370:	690b      	ldr	r3, [r1, #16]
 800a372:	b963      	cbnz	r3, 800a38e <_svfiprintf_r+0x32>
 800a374:	2140      	movs	r1, #64	; 0x40
 800a376:	f7ff ff21 	bl	800a1bc <_malloc_r>
 800a37a:	6028      	str	r0, [r5, #0]
 800a37c:	6128      	str	r0, [r5, #16]
 800a37e:	b920      	cbnz	r0, 800a38a <_svfiprintf_r+0x2e>
 800a380:	230c      	movs	r3, #12
 800a382:	603b      	str	r3, [r7, #0]
 800a384:	f04f 30ff 	mov.w	r0, #4294967295
 800a388:	e0d1      	b.n	800a52e <_svfiprintf_r+0x1d2>
 800a38a:	2340      	movs	r3, #64	; 0x40
 800a38c:	616b      	str	r3, [r5, #20]
 800a38e:	2300      	movs	r3, #0
 800a390:	9309      	str	r3, [sp, #36]	; 0x24
 800a392:	2320      	movs	r3, #32
 800a394:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a398:	f8cd 800c 	str.w	r8, [sp, #12]
 800a39c:	2330      	movs	r3, #48	; 0x30
 800a39e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a548 <_svfiprintf_r+0x1ec>
 800a3a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3a6:	f04f 0901 	mov.w	r9, #1
 800a3aa:	4623      	mov	r3, r4
 800a3ac:	469a      	mov	sl, r3
 800a3ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3b2:	b10a      	cbz	r2, 800a3b8 <_svfiprintf_r+0x5c>
 800a3b4:	2a25      	cmp	r2, #37	; 0x25
 800a3b6:	d1f9      	bne.n	800a3ac <_svfiprintf_r+0x50>
 800a3b8:	ebba 0b04 	subs.w	fp, sl, r4
 800a3bc:	d00b      	beq.n	800a3d6 <_svfiprintf_r+0x7a>
 800a3be:	465b      	mov	r3, fp
 800a3c0:	4622      	mov	r2, r4
 800a3c2:	4629      	mov	r1, r5
 800a3c4:	4638      	mov	r0, r7
 800a3c6:	f7ff ff6d 	bl	800a2a4 <__ssputs_r>
 800a3ca:	3001      	adds	r0, #1
 800a3cc:	f000 80aa 	beq.w	800a524 <_svfiprintf_r+0x1c8>
 800a3d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3d2:	445a      	add	r2, fp
 800a3d4:	9209      	str	r2, [sp, #36]	; 0x24
 800a3d6:	f89a 3000 	ldrb.w	r3, [sl]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	f000 80a2 	beq.w	800a524 <_svfiprintf_r+0x1c8>
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a3e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3ea:	f10a 0a01 	add.w	sl, sl, #1
 800a3ee:	9304      	str	r3, [sp, #16]
 800a3f0:	9307      	str	r3, [sp, #28]
 800a3f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3f6:	931a      	str	r3, [sp, #104]	; 0x68
 800a3f8:	4654      	mov	r4, sl
 800a3fa:	2205      	movs	r2, #5
 800a3fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a400:	4851      	ldr	r0, [pc, #324]	; (800a548 <_svfiprintf_r+0x1ec>)
 800a402:	f7f5 fef5 	bl	80001f0 <memchr>
 800a406:	9a04      	ldr	r2, [sp, #16]
 800a408:	b9d8      	cbnz	r0, 800a442 <_svfiprintf_r+0xe6>
 800a40a:	06d0      	lsls	r0, r2, #27
 800a40c:	bf44      	itt	mi
 800a40e:	2320      	movmi	r3, #32
 800a410:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a414:	0711      	lsls	r1, r2, #28
 800a416:	bf44      	itt	mi
 800a418:	232b      	movmi	r3, #43	; 0x2b
 800a41a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a41e:	f89a 3000 	ldrb.w	r3, [sl]
 800a422:	2b2a      	cmp	r3, #42	; 0x2a
 800a424:	d015      	beq.n	800a452 <_svfiprintf_r+0xf6>
 800a426:	9a07      	ldr	r2, [sp, #28]
 800a428:	4654      	mov	r4, sl
 800a42a:	2000      	movs	r0, #0
 800a42c:	f04f 0c0a 	mov.w	ip, #10
 800a430:	4621      	mov	r1, r4
 800a432:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a436:	3b30      	subs	r3, #48	; 0x30
 800a438:	2b09      	cmp	r3, #9
 800a43a:	d94e      	bls.n	800a4da <_svfiprintf_r+0x17e>
 800a43c:	b1b0      	cbz	r0, 800a46c <_svfiprintf_r+0x110>
 800a43e:	9207      	str	r2, [sp, #28]
 800a440:	e014      	b.n	800a46c <_svfiprintf_r+0x110>
 800a442:	eba0 0308 	sub.w	r3, r0, r8
 800a446:	fa09 f303 	lsl.w	r3, r9, r3
 800a44a:	4313      	orrs	r3, r2
 800a44c:	9304      	str	r3, [sp, #16]
 800a44e:	46a2      	mov	sl, r4
 800a450:	e7d2      	b.n	800a3f8 <_svfiprintf_r+0x9c>
 800a452:	9b03      	ldr	r3, [sp, #12]
 800a454:	1d19      	adds	r1, r3, #4
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	9103      	str	r1, [sp, #12]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	bfbb      	ittet	lt
 800a45e:	425b      	neglt	r3, r3
 800a460:	f042 0202 	orrlt.w	r2, r2, #2
 800a464:	9307      	strge	r3, [sp, #28]
 800a466:	9307      	strlt	r3, [sp, #28]
 800a468:	bfb8      	it	lt
 800a46a:	9204      	strlt	r2, [sp, #16]
 800a46c:	7823      	ldrb	r3, [r4, #0]
 800a46e:	2b2e      	cmp	r3, #46	; 0x2e
 800a470:	d10c      	bne.n	800a48c <_svfiprintf_r+0x130>
 800a472:	7863      	ldrb	r3, [r4, #1]
 800a474:	2b2a      	cmp	r3, #42	; 0x2a
 800a476:	d135      	bne.n	800a4e4 <_svfiprintf_r+0x188>
 800a478:	9b03      	ldr	r3, [sp, #12]
 800a47a:	1d1a      	adds	r2, r3, #4
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	9203      	str	r2, [sp, #12]
 800a480:	2b00      	cmp	r3, #0
 800a482:	bfb8      	it	lt
 800a484:	f04f 33ff 	movlt.w	r3, #4294967295
 800a488:	3402      	adds	r4, #2
 800a48a:	9305      	str	r3, [sp, #20]
 800a48c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a558 <_svfiprintf_r+0x1fc>
 800a490:	7821      	ldrb	r1, [r4, #0]
 800a492:	2203      	movs	r2, #3
 800a494:	4650      	mov	r0, sl
 800a496:	f7f5 feab 	bl	80001f0 <memchr>
 800a49a:	b140      	cbz	r0, 800a4ae <_svfiprintf_r+0x152>
 800a49c:	2340      	movs	r3, #64	; 0x40
 800a49e:	eba0 000a 	sub.w	r0, r0, sl
 800a4a2:	fa03 f000 	lsl.w	r0, r3, r0
 800a4a6:	9b04      	ldr	r3, [sp, #16]
 800a4a8:	4303      	orrs	r3, r0
 800a4aa:	3401      	adds	r4, #1
 800a4ac:	9304      	str	r3, [sp, #16]
 800a4ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4b2:	4826      	ldr	r0, [pc, #152]	; (800a54c <_svfiprintf_r+0x1f0>)
 800a4b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4b8:	2206      	movs	r2, #6
 800a4ba:	f7f5 fe99 	bl	80001f0 <memchr>
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	d038      	beq.n	800a534 <_svfiprintf_r+0x1d8>
 800a4c2:	4b23      	ldr	r3, [pc, #140]	; (800a550 <_svfiprintf_r+0x1f4>)
 800a4c4:	bb1b      	cbnz	r3, 800a50e <_svfiprintf_r+0x1b2>
 800a4c6:	9b03      	ldr	r3, [sp, #12]
 800a4c8:	3307      	adds	r3, #7
 800a4ca:	f023 0307 	bic.w	r3, r3, #7
 800a4ce:	3308      	adds	r3, #8
 800a4d0:	9303      	str	r3, [sp, #12]
 800a4d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4d4:	4433      	add	r3, r6
 800a4d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a4d8:	e767      	b.n	800a3aa <_svfiprintf_r+0x4e>
 800a4da:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4de:	460c      	mov	r4, r1
 800a4e0:	2001      	movs	r0, #1
 800a4e2:	e7a5      	b.n	800a430 <_svfiprintf_r+0xd4>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	3401      	adds	r4, #1
 800a4e8:	9305      	str	r3, [sp, #20]
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	f04f 0c0a 	mov.w	ip, #10
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4f6:	3a30      	subs	r2, #48	; 0x30
 800a4f8:	2a09      	cmp	r2, #9
 800a4fa:	d903      	bls.n	800a504 <_svfiprintf_r+0x1a8>
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d0c5      	beq.n	800a48c <_svfiprintf_r+0x130>
 800a500:	9105      	str	r1, [sp, #20]
 800a502:	e7c3      	b.n	800a48c <_svfiprintf_r+0x130>
 800a504:	fb0c 2101 	mla	r1, ip, r1, r2
 800a508:	4604      	mov	r4, r0
 800a50a:	2301      	movs	r3, #1
 800a50c:	e7f0      	b.n	800a4f0 <_svfiprintf_r+0x194>
 800a50e:	ab03      	add	r3, sp, #12
 800a510:	9300      	str	r3, [sp, #0]
 800a512:	462a      	mov	r2, r5
 800a514:	4b0f      	ldr	r3, [pc, #60]	; (800a554 <_svfiprintf_r+0x1f8>)
 800a516:	a904      	add	r1, sp, #16
 800a518:	4638      	mov	r0, r7
 800a51a:	f7fc fa49 	bl	80069b0 <_printf_float>
 800a51e:	1c42      	adds	r2, r0, #1
 800a520:	4606      	mov	r6, r0
 800a522:	d1d6      	bne.n	800a4d2 <_svfiprintf_r+0x176>
 800a524:	89ab      	ldrh	r3, [r5, #12]
 800a526:	065b      	lsls	r3, r3, #25
 800a528:	f53f af2c 	bmi.w	800a384 <_svfiprintf_r+0x28>
 800a52c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a52e:	b01d      	add	sp, #116	; 0x74
 800a530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a534:	ab03      	add	r3, sp, #12
 800a536:	9300      	str	r3, [sp, #0]
 800a538:	462a      	mov	r2, r5
 800a53a:	4b06      	ldr	r3, [pc, #24]	; (800a554 <_svfiprintf_r+0x1f8>)
 800a53c:	a904      	add	r1, sp, #16
 800a53e:	4638      	mov	r0, r7
 800a540:	f7fc fcda 	bl	8006ef8 <_printf_i>
 800a544:	e7eb      	b.n	800a51e <_svfiprintf_r+0x1c2>
 800a546:	bf00      	nop
 800a548:	0800cb3c 	.word	0x0800cb3c
 800a54c:	0800cb46 	.word	0x0800cb46
 800a550:	080069b1 	.word	0x080069b1
 800a554:	0800a2a5 	.word	0x0800a2a5
 800a558:	0800cb42 	.word	0x0800cb42
 800a55c:	00000000 	.word	0x00000000

0800a560 <nan>:
 800a560:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a568 <nan+0x8>
 800a564:	4770      	bx	lr
 800a566:	bf00      	nop
 800a568:	00000000 	.word	0x00000000
 800a56c:	7ff80000 	.word	0x7ff80000

0800a570 <_sbrk_r>:
 800a570:	b538      	push	{r3, r4, r5, lr}
 800a572:	4d06      	ldr	r5, [pc, #24]	; (800a58c <_sbrk_r+0x1c>)
 800a574:	2300      	movs	r3, #0
 800a576:	4604      	mov	r4, r0
 800a578:	4608      	mov	r0, r1
 800a57a:	602b      	str	r3, [r5, #0]
 800a57c:	f7f8 ff8c 	bl	8003498 <_sbrk>
 800a580:	1c43      	adds	r3, r0, #1
 800a582:	d102      	bne.n	800a58a <_sbrk_r+0x1a>
 800a584:	682b      	ldr	r3, [r5, #0]
 800a586:	b103      	cbz	r3, 800a58a <_sbrk_r+0x1a>
 800a588:	6023      	str	r3, [r4, #0]
 800a58a:	bd38      	pop	{r3, r4, r5, pc}
 800a58c:	20000804 	.word	0x20000804

0800a590 <strncmp>:
 800a590:	b510      	push	{r4, lr}
 800a592:	b17a      	cbz	r2, 800a5b4 <strncmp+0x24>
 800a594:	4603      	mov	r3, r0
 800a596:	3901      	subs	r1, #1
 800a598:	1884      	adds	r4, r0, r2
 800a59a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a59e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a5a2:	4290      	cmp	r0, r2
 800a5a4:	d101      	bne.n	800a5aa <strncmp+0x1a>
 800a5a6:	42a3      	cmp	r3, r4
 800a5a8:	d101      	bne.n	800a5ae <strncmp+0x1e>
 800a5aa:	1a80      	subs	r0, r0, r2
 800a5ac:	bd10      	pop	{r4, pc}
 800a5ae:	2800      	cmp	r0, #0
 800a5b0:	d1f3      	bne.n	800a59a <strncmp+0xa>
 800a5b2:	e7fa      	b.n	800a5aa <strncmp+0x1a>
 800a5b4:	4610      	mov	r0, r2
 800a5b6:	e7f9      	b.n	800a5ac <strncmp+0x1c>

0800a5b8 <__ascii_wctomb>:
 800a5b8:	b149      	cbz	r1, 800a5ce <__ascii_wctomb+0x16>
 800a5ba:	2aff      	cmp	r2, #255	; 0xff
 800a5bc:	bf85      	ittet	hi
 800a5be:	238a      	movhi	r3, #138	; 0x8a
 800a5c0:	6003      	strhi	r3, [r0, #0]
 800a5c2:	700a      	strbls	r2, [r1, #0]
 800a5c4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a5c8:	bf98      	it	ls
 800a5ca:	2001      	movls	r0, #1
 800a5cc:	4770      	bx	lr
 800a5ce:	4608      	mov	r0, r1
 800a5d0:	4770      	bx	lr
	...

0800a5d4 <__assert_func>:
 800a5d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a5d6:	4614      	mov	r4, r2
 800a5d8:	461a      	mov	r2, r3
 800a5da:	4b09      	ldr	r3, [pc, #36]	; (800a600 <__assert_func+0x2c>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4605      	mov	r5, r0
 800a5e0:	68d8      	ldr	r0, [r3, #12]
 800a5e2:	b14c      	cbz	r4, 800a5f8 <__assert_func+0x24>
 800a5e4:	4b07      	ldr	r3, [pc, #28]	; (800a604 <__assert_func+0x30>)
 800a5e6:	9100      	str	r1, [sp, #0]
 800a5e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a5ec:	4906      	ldr	r1, [pc, #24]	; (800a608 <__assert_func+0x34>)
 800a5ee:	462b      	mov	r3, r5
 800a5f0:	f000 f80e 	bl	800a610 <fiprintf>
 800a5f4:	f000 fa8c 	bl	800ab10 <abort>
 800a5f8:	4b04      	ldr	r3, [pc, #16]	; (800a60c <__assert_func+0x38>)
 800a5fa:	461c      	mov	r4, r3
 800a5fc:	e7f3      	b.n	800a5e6 <__assert_func+0x12>
 800a5fe:	bf00      	nop
 800a600:	20000074 	.word	0x20000074
 800a604:	0800cb4d 	.word	0x0800cb4d
 800a608:	0800cb5a 	.word	0x0800cb5a
 800a60c:	0800cb88 	.word	0x0800cb88

0800a610 <fiprintf>:
 800a610:	b40e      	push	{r1, r2, r3}
 800a612:	b503      	push	{r0, r1, lr}
 800a614:	4601      	mov	r1, r0
 800a616:	ab03      	add	r3, sp, #12
 800a618:	4805      	ldr	r0, [pc, #20]	; (800a630 <fiprintf+0x20>)
 800a61a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a61e:	6800      	ldr	r0, [r0, #0]
 800a620:	9301      	str	r3, [sp, #4]
 800a622:	f000 f885 	bl	800a730 <_vfiprintf_r>
 800a626:	b002      	add	sp, #8
 800a628:	f85d eb04 	ldr.w	lr, [sp], #4
 800a62c:	b003      	add	sp, #12
 800a62e:	4770      	bx	lr
 800a630:	20000074 	.word	0x20000074

0800a634 <memmove>:
 800a634:	4288      	cmp	r0, r1
 800a636:	b510      	push	{r4, lr}
 800a638:	eb01 0402 	add.w	r4, r1, r2
 800a63c:	d902      	bls.n	800a644 <memmove+0x10>
 800a63e:	4284      	cmp	r4, r0
 800a640:	4623      	mov	r3, r4
 800a642:	d807      	bhi.n	800a654 <memmove+0x20>
 800a644:	1e43      	subs	r3, r0, #1
 800a646:	42a1      	cmp	r1, r4
 800a648:	d008      	beq.n	800a65c <memmove+0x28>
 800a64a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a64e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a652:	e7f8      	b.n	800a646 <memmove+0x12>
 800a654:	4402      	add	r2, r0
 800a656:	4601      	mov	r1, r0
 800a658:	428a      	cmp	r2, r1
 800a65a:	d100      	bne.n	800a65e <memmove+0x2a>
 800a65c:	bd10      	pop	{r4, pc}
 800a65e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a662:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a666:	e7f7      	b.n	800a658 <memmove+0x24>

0800a668 <__malloc_lock>:
 800a668:	4801      	ldr	r0, [pc, #4]	; (800a670 <__malloc_lock+0x8>)
 800a66a:	f000 bc11 	b.w	800ae90 <__retarget_lock_acquire_recursive>
 800a66e:	bf00      	nop
 800a670:	20000808 	.word	0x20000808

0800a674 <__malloc_unlock>:
 800a674:	4801      	ldr	r0, [pc, #4]	; (800a67c <__malloc_unlock+0x8>)
 800a676:	f000 bc0c 	b.w	800ae92 <__retarget_lock_release_recursive>
 800a67a:	bf00      	nop
 800a67c:	20000808 	.word	0x20000808

0800a680 <_realloc_r>:
 800a680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a684:	4680      	mov	r8, r0
 800a686:	4614      	mov	r4, r2
 800a688:	460e      	mov	r6, r1
 800a68a:	b921      	cbnz	r1, 800a696 <_realloc_r+0x16>
 800a68c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a690:	4611      	mov	r1, r2
 800a692:	f7ff bd93 	b.w	800a1bc <_malloc_r>
 800a696:	b92a      	cbnz	r2, 800a6a4 <_realloc_r+0x24>
 800a698:	f7ff fd24 	bl	800a0e4 <_free_r>
 800a69c:	4625      	mov	r5, r4
 800a69e:	4628      	mov	r0, r5
 800a6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6a4:	f000 fc5c 	bl	800af60 <_malloc_usable_size_r>
 800a6a8:	4284      	cmp	r4, r0
 800a6aa:	4607      	mov	r7, r0
 800a6ac:	d802      	bhi.n	800a6b4 <_realloc_r+0x34>
 800a6ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a6b2:	d812      	bhi.n	800a6da <_realloc_r+0x5a>
 800a6b4:	4621      	mov	r1, r4
 800a6b6:	4640      	mov	r0, r8
 800a6b8:	f7ff fd80 	bl	800a1bc <_malloc_r>
 800a6bc:	4605      	mov	r5, r0
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	d0ed      	beq.n	800a69e <_realloc_r+0x1e>
 800a6c2:	42bc      	cmp	r4, r7
 800a6c4:	4622      	mov	r2, r4
 800a6c6:	4631      	mov	r1, r6
 800a6c8:	bf28      	it	cs
 800a6ca:	463a      	movcs	r2, r7
 800a6cc:	f7ff f824 	bl	8009718 <memcpy>
 800a6d0:	4631      	mov	r1, r6
 800a6d2:	4640      	mov	r0, r8
 800a6d4:	f7ff fd06 	bl	800a0e4 <_free_r>
 800a6d8:	e7e1      	b.n	800a69e <_realloc_r+0x1e>
 800a6da:	4635      	mov	r5, r6
 800a6dc:	e7df      	b.n	800a69e <_realloc_r+0x1e>

0800a6de <__sfputc_r>:
 800a6de:	6893      	ldr	r3, [r2, #8]
 800a6e0:	3b01      	subs	r3, #1
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	b410      	push	{r4}
 800a6e6:	6093      	str	r3, [r2, #8]
 800a6e8:	da08      	bge.n	800a6fc <__sfputc_r+0x1e>
 800a6ea:	6994      	ldr	r4, [r2, #24]
 800a6ec:	42a3      	cmp	r3, r4
 800a6ee:	db01      	blt.n	800a6f4 <__sfputc_r+0x16>
 800a6f0:	290a      	cmp	r1, #10
 800a6f2:	d103      	bne.n	800a6fc <__sfputc_r+0x1e>
 800a6f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6f8:	f000 b94a 	b.w	800a990 <__swbuf_r>
 800a6fc:	6813      	ldr	r3, [r2, #0]
 800a6fe:	1c58      	adds	r0, r3, #1
 800a700:	6010      	str	r0, [r2, #0]
 800a702:	7019      	strb	r1, [r3, #0]
 800a704:	4608      	mov	r0, r1
 800a706:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <__sfputs_r>:
 800a70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a70e:	4606      	mov	r6, r0
 800a710:	460f      	mov	r7, r1
 800a712:	4614      	mov	r4, r2
 800a714:	18d5      	adds	r5, r2, r3
 800a716:	42ac      	cmp	r4, r5
 800a718:	d101      	bne.n	800a71e <__sfputs_r+0x12>
 800a71a:	2000      	movs	r0, #0
 800a71c:	e007      	b.n	800a72e <__sfputs_r+0x22>
 800a71e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a722:	463a      	mov	r2, r7
 800a724:	4630      	mov	r0, r6
 800a726:	f7ff ffda 	bl	800a6de <__sfputc_r>
 800a72a:	1c43      	adds	r3, r0, #1
 800a72c:	d1f3      	bne.n	800a716 <__sfputs_r+0xa>
 800a72e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a730 <_vfiprintf_r>:
 800a730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a734:	460d      	mov	r5, r1
 800a736:	b09d      	sub	sp, #116	; 0x74
 800a738:	4614      	mov	r4, r2
 800a73a:	4698      	mov	r8, r3
 800a73c:	4606      	mov	r6, r0
 800a73e:	b118      	cbz	r0, 800a748 <_vfiprintf_r+0x18>
 800a740:	6983      	ldr	r3, [r0, #24]
 800a742:	b90b      	cbnz	r3, 800a748 <_vfiprintf_r+0x18>
 800a744:	f000 fb06 	bl	800ad54 <__sinit>
 800a748:	4b89      	ldr	r3, [pc, #548]	; (800a970 <_vfiprintf_r+0x240>)
 800a74a:	429d      	cmp	r5, r3
 800a74c:	d11b      	bne.n	800a786 <_vfiprintf_r+0x56>
 800a74e:	6875      	ldr	r5, [r6, #4]
 800a750:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a752:	07d9      	lsls	r1, r3, #31
 800a754:	d405      	bmi.n	800a762 <_vfiprintf_r+0x32>
 800a756:	89ab      	ldrh	r3, [r5, #12]
 800a758:	059a      	lsls	r2, r3, #22
 800a75a:	d402      	bmi.n	800a762 <_vfiprintf_r+0x32>
 800a75c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a75e:	f000 fb97 	bl	800ae90 <__retarget_lock_acquire_recursive>
 800a762:	89ab      	ldrh	r3, [r5, #12]
 800a764:	071b      	lsls	r3, r3, #28
 800a766:	d501      	bpl.n	800a76c <_vfiprintf_r+0x3c>
 800a768:	692b      	ldr	r3, [r5, #16]
 800a76a:	b9eb      	cbnz	r3, 800a7a8 <_vfiprintf_r+0x78>
 800a76c:	4629      	mov	r1, r5
 800a76e:	4630      	mov	r0, r6
 800a770:	f000 f960 	bl	800aa34 <__swsetup_r>
 800a774:	b1c0      	cbz	r0, 800a7a8 <_vfiprintf_r+0x78>
 800a776:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a778:	07dc      	lsls	r4, r3, #31
 800a77a:	d50e      	bpl.n	800a79a <_vfiprintf_r+0x6a>
 800a77c:	f04f 30ff 	mov.w	r0, #4294967295
 800a780:	b01d      	add	sp, #116	; 0x74
 800a782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a786:	4b7b      	ldr	r3, [pc, #492]	; (800a974 <_vfiprintf_r+0x244>)
 800a788:	429d      	cmp	r5, r3
 800a78a:	d101      	bne.n	800a790 <_vfiprintf_r+0x60>
 800a78c:	68b5      	ldr	r5, [r6, #8]
 800a78e:	e7df      	b.n	800a750 <_vfiprintf_r+0x20>
 800a790:	4b79      	ldr	r3, [pc, #484]	; (800a978 <_vfiprintf_r+0x248>)
 800a792:	429d      	cmp	r5, r3
 800a794:	bf08      	it	eq
 800a796:	68f5      	ldreq	r5, [r6, #12]
 800a798:	e7da      	b.n	800a750 <_vfiprintf_r+0x20>
 800a79a:	89ab      	ldrh	r3, [r5, #12]
 800a79c:	0598      	lsls	r0, r3, #22
 800a79e:	d4ed      	bmi.n	800a77c <_vfiprintf_r+0x4c>
 800a7a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7a2:	f000 fb76 	bl	800ae92 <__retarget_lock_release_recursive>
 800a7a6:	e7e9      	b.n	800a77c <_vfiprintf_r+0x4c>
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a7ac:	2320      	movs	r3, #32
 800a7ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7b6:	2330      	movs	r3, #48	; 0x30
 800a7b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a97c <_vfiprintf_r+0x24c>
 800a7bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7c0:	f04f 0901 	mov.w	r9, #1
 800a7c4:	4623      	mov	r3, r4
 800a7c6:	469a      	mov	sl, r3
 800a7c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7cc:	b10a      	cbz	r2, 800a7d2 <_vfiprintf_r+0xa2>
 800a7ce:	2a25      	cmp	r2, #37	; 0x25
 800a7d0:	d1f9      	bne.n	800a7c6 <_vfiprintf_r+0x96>
 800a7d2:	ebba 0b04 	subs.w	fp, sl, r4
 800a7d6:	d00b      	beq.n	800a7f0 <_vfiprintf_r+0xc0>
 800a7d8:	465b      	mov	r3, fp
 800a7da:	4622      	mov	r2, r4
 800a7dc:	4629      	mov	r1, r5
 800a7de:	4630      	mov	r0, r6
 800a7e0:	f7ff ff94 	bl	800a70c <__sfputs_r>
 800a7e4:	3001      	adds	r0, #1
 800a7e6:	f000 80aa 	beq.w	800a93e <_vfiprintf_r+0x20e>
 800a7ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7ec:	445a      	add	r2, fp
 800a7ee:	9209      	str	r2, [sp, #36]	; 0x24
 800a7f0:	f89a 3000 	ldrb.w	r3, [sl]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f000 80a2 	beq.w	800a93e <_vfiprintf_r+0x20e>
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a800:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a804:	f10a 0a01 	add.w	sl, sl, #1
 800a808:	9304      	str	r3, [sp, #16]
 800a80a:	9307      	str	r3, [sp, #28]
 800a80c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a810:	931a      	str	r3, [sp, #104]	; 0x68
 800a812:	4654      	mov	r4, sl
 800a814:	2205      	movs	r2, #5
 800a816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a81a:	4858      	ldr	r0, [pc, #352]	; (800a97c <_vfiprintf_r+0x24c>)
 800a81c:	f7f5 fce8 	bl	80001f0 <memchr>
 800a820:	9a04      	ldr	r2, [sp, #16]
 800a822:	b9d8      	cbnz	r0, 800a85c <_vfiprintf_r+0x12c>
 800a824:	06d1      	lsls	r1, r2, #27
 800a826:	bf44      	itt	mi
 800a828:	2320      	movmi	r3, #32
 800a82a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a82e:	0713      	lsls	r3, r2, #28
 800a830:	bf44      	itt	mi
 800a832:	232b      	movmi	r3, #43	; 0x2b
 800a834:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a838:	f89a 3000 	ldrb.w	r3, [sl]
 800a83c:	2b2a      	cmp	r3, #42	; 0x2a
 800a83e:	d015      	beq.n	800a86c <_vfiprintf_r+0x13c>
 800a840:	9a07      	ldr	r2, [sp, #28]
 800a842:	4654      	mov	r4, sl
 800a844:	2000      	movs	r0, #0
 800a846:	f04f 0c0a 	mov.w	ip, #10
 800a84a:	4621      	mov	r1, r4
 800a84c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a850:	3b30      	subs	r3, #48	; 0x30
 800a852:	2b09      	cmp	r3, #9
 800a854:	d94e      	bls.n	800a8f4 <_vfiprintf_r+0x1c4>
 800a856:	b1b0      	cbz	r0, 800a886 <_vfiprintf_r+0x156>
 800a858:	9207      	str	r2, [sp, #28]
 800a85a:	e014      	b.n	800a886 <_vfiprintf_r+0x156>
 800a85c:	eba0 0308 	sub.w	r3, r0, r8
 800a860:	fa09 f303 	lsl.w	r3, r9, r3
 800a864:	4313      	orrs	r3, r2
 800a866:	9304      	str	r3, [sp, #16]
 800a868:	46a2      	mov	sl, r4
 800a86a:	e7d2      	b.n	800a812 <_vfiprintf_r+0xe2>
 800a86c:	9b03      	ldr	r3, [sp, #12]
 800a86e:	1d19      	adds	r1, r3, #4
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	9103      	str	r1, [sp, #12]
 800a874:	2b00      	cmp	r3, #0
 800a876:	bfbb      	ittet	lt
 800a878:	425b      	neglt	r3, r3
 800a87a:	f042 0202 	orrlt.w	r2, r2, #2
 800a87e:	9307      	strge	r3, [sp, #28]
 800a880:	9307      	strlt	r3, [sp, #28]
 800a882:	bfb8      	it	lt
 800a884:	9204      	strlt	r2, [sp, #16]
 800a886:	7823      	ldrb	r3, [r4, #0]
 800a888:	2b2e      	cmp	r3, #46	; 0x2e
 800a88a:	d10c      	bne.n	800a8a6 <_vfiprintf_r+0x176>
 800a88c:	7863      	ldrb	r3, [r4, #1]
 800a88e:	2b2a      	cmp	r3, #42	; 0x2a
 800a890:	d135      	bne.n	800a8fe <_vfiprintf_r+0x1ce>
 800a892:	9b03      	ldr	r3, [sp, #12]
 800a894:	1d1a      	adds	r2, r3, #4
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	9203      	str	r2, [sp, #12]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	bfb8      	it	lt
 800a89e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8a2:	3402      	adds	r4, #2
 800a8a4:	9305      	str	r3, [sp, #20]
 800a8a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a98c <_vfiprintf_r+0x25c>
 800a8aa:	7821      	ldrb	r1, [r4, #0]
 800a8ac:	2203      	movs	r2, #3
 800a8ae:	4650      	mov	r0, sl
 800a8b0:	f7f5 fc9e 	bl	80001f0 <memchr>
 800a8b4:	b140      	cbz	r0, 800a8c8 <_vfiprintf_r+0x198>
 800a8b6:	2340      	movs	r3, #64	; 0x40
 800a8b8:	eba0 000a 	sub.w	r0, r0, sl
 800a8bc:	fa03 f000 	lsl.w	r0, r3, r0
 800a8c0:	9b04      	ldr	r3, [sp, #16]
 800a8c2:	4303      	orrs	r3, r0
 800a8c4:	3401      	adds	r4, #1
 800a8c6:	9304      	str	r3, [sp, #16]
 800a8c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8cc:	482c      	ldr	r0, [pc, #176]	; (800a980 <_vfiprintf_r+0x250>)
 800a8ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8d2:	2206      	movs	r2, #6
 800a8d4:	f7f5 fc8c 	bl	80001f0 <memchr>
 800a8d8:	2800      	cmp	r0, #0
 800a8da:	d03f      	beq.n	800a95c <_vfiprintf_r+0x22c>
 800a8dc:	4b29      	ldr	r3, [pc, #164]	; (800a984 <_vfiprintf_r+0x254>)
 800a8de:	bb1b      	cbnz	r3, 800a928 <_vfiprintf_r+0x1f8>
 800a8e0:	9b03      	ldr	r3, [sp, #12]
 800a8e2:	3307      	adds	r3, #7
 800a8e4:	f023 0307 	bic.w	r3, r3, #7
 800a8e8:	3308      	adds	r3, #8
 800a8ea:	9303      	str	r3, [sp, #12]
 800a8ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ee:	443b      	add	r3, r7
 800a8f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a8f2:	e767      	b.n	800a7c4 <_vfiprintf_r+0x94>
 800a8f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8f8:	460c      	mov	r4, r1
 800a8fa:	2001      	movs	r0, #1
 800a8fc:	e7a5      	b.n	800a84a <_vfiprintf_r+0x11a>
 800a8fe:	2300      	movs	r3, #0
 800a900:	3401      	adds	r4, #1
 800a902:	9305      	str	r3, [sp, #20]
 800a904:	4619      	mov	r1, r3
 800a906:	f04f 0c0a 	mov.w	ip, #10
 800a90a:	4620      	mov	r0, r4
 800a90c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a910:	3a30      	subs	r2, #48	; 0x30
 800a912:	2a09      	cmp	r2, #9
 800a914:	d903      	bls.n	800a91e <_vfiprintf_r+0x1ee>
 800a916:	2b00      	cmp	r3, #0
 800a918:	d0c5      	beq.n	800a8a6 <_vfiprintf_r+0x176>
 800a91a:	9105      	str	r1, [sp, #20]
 800a91c:	e7c3      	b.n	800a8a6 <_vfiprintf_r+0x176>
 800a91e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a922:	4604      	mov	r4, r0
 800a924:	2301      	movs	r3, #1
 800a926:	e7f0      	b.n	800a90a <_vfiprintf_r+0x1da>
 800a928:	ab03      	add	r3, sp, #12
 800a92a:	9300      	str	r3, [sp, #0]
 800a92c:	462a      	mov	r2, r5
 800a92e:	4b16      	ldr	r3, [pc, #88]	; (800a988 <_vfiprintf_r+0x258>)
 800a930:	a904      	add	r1, sp, #16
 800a932:	4630      	mov	r0, r6
 800a934:	f7fc f83c 	bl	80069b0 <_printf_float>
 800a938:	4607      	mov	r7, r0
 800a93a:	1c78      	adds	r0, r7, #1
 800a93c:	d1d6      	bne.n	800a8ec <_vfiprintf_r+0x1bc>
 800a93e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a940:	07d9      	lsls	r1, r3, #31
 800a942:	d405      	bmi.n	800a950 <_vfiprintf_r+0x220>
 800a944:	89ab      	ldrh	r3, [r5, #12]
 800a946:	059a      	lsls	r2, r3, #22
 800a948:	d402      	bmi.n	800a950 <_vfiprintf_r+0x220>
 800a94a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a94c:	f000 faa1 	bl	800ae92 <__retarget_lock_release_recursive>
 800a950:	89ab      	ldrh	r3, [r5, #12]
 800a952:	065b      	lsls	r3, r3, #25
 800a954:	f53f af12 	bmi.w	800a77c <_vfiprintf_r+0x4c>
 800a958:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a95a:	e711      	b.n	800a780 <_vfiprintf_r+0x50>
 800a95c:	ab03      	add	r3, sp, #12
 800a95e:	9300      	str	r3, [sp, #0]
 800a960:	462a      	mov	r2, r5
 800a962:	4b09      	ldr	r3, [pc, #36]	; (800a988 <_vfiprintf_r+0x258>)
 800a964:	a904      	add	r1, sp, #16
 800a966:	4630      	mov	r0, r6
 800a968:	f7fc fac6 	bl	8006ef8 <_printf_i>
 800a96c:	e7e4      	b.n	800a938 <_vfiprintf_r+0x208>
 800a96e:	bf00      	nop
 800a970:	0800cbac 	.word	0x0800cbac
 800a974:	0800cbcc 	.word	0x0800cbcc
 800a978:	0800cb8c 	.word	0x0800cb8c
 800a97c:	0800cb3c 	.word	0x0800cb3c
 800a980:	0800cb46 	.word	0x0800cb46
 800a984:	080069b1 	.word	0x080069b1
 800a988:	0800a70d 	.word	0x0800a70d
 800a98c:	0800cb42 	.word	0x0800cb42

0800a990 <__swbuf_r>:
 800a990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a992:	460e      	mov	r6, r1
 800a994:	4614      	mov	r4, r2
 800a996:	4605      	mov	r5, r0
 800a998:	b118      	cbz	r0, 800a9a2 <__swbuf_r+0x12>
 800a99a:	6983      	ldr	r3, [r0, #24]
 800a99c:	b90b      	cbnz	r3, 800a9a2 <__swbuf_r+0x12>
 800a99e:	f000 f9d9 	bl	800ad54 <__sinit>
 800a9a2:	4b21      	ldr	r3, [pc, #132]	; (800aa28 <__swbuf_r+0x98>)
 800a9a4:	429c      	cmp	r4, r3
 800a9a6:	d12b      	bne.n	800aa00 <__swbuf_r+0x70>
 800a9a8:	686c      	ldr	r4, [r5, #4]
 800a9aa:	69a3      	ldr	r3, [r4, #24]
 800a9ac:	60a3      	str	r3, [r4, #8]
 800a9ae:	89a3      	ldrh	r3, [r4, #12]
 800a9b0:	071a      	lsls	r2, r3, #28
 800a9b2:	d52f      	bpl.n	800aa14 <__swbuf_r+0x84>
 800a9b4:	6923      	ldr	r3, [r4, #16]
 800a9b6:	b36b      	cbz	r3, 800aa14 <__swbuf_r+0x84>
 800a9b8:	6923      	ldr	r3, [r4, #16]
 800a9ba:	6820      	ldr	r0, [r4, #0]
 800a9bc:	1ac0      	subs	r0, r0, r3
 800a9be:	6963      	ldr	r3, [r4, #20]
 800a9c0:	b2f6      	uxtb	r6, r6
 800a9c2:	4283      	cmp	r3, r0
 800a9c4:	4637      	mov	r7, r6
 800a9c6:	dc04      	bgt.n	800a9d2 <__swbuf_r+0x42>
 800a9c8:	4621      	mov	r1, r4
 800a9ca:	4628      	mov	r0, r5
 800a9cc:	f000 f92e 	bl	800ac2c <_fflush_r>
 800a9d0:	bb30      	cbnz	r0, 800aa20 <__swbuf_r+0x90>
 800a9d2:	68a3      	ldr	r3, [r4, #8]
 800a9d4:	3b01      	subs	r3, #1
 800a9d6:	60a3      	str	r3, [r4, #8]
 800a9d8:	6823      	ldr	r3, [r4, #0]
 800a9da:	1c5a      	adds	r2, r3, #1
 800a9dc:	6022      	str	r2, [r4, #0]
 800a9de:	701e      	strb	r6, [r3, #0]
 800a9e0:	6963      	ldr	r3, [r4, #20]
 800a9e2:	3001      	adds	r0, #1
 800a9e4:	4283      	cmp	r3, r0
 800a9e6:	d004      	beq.n	800a9f2 <__swbuf_r+0x62>
 800a9e8:	89a3      	ldrh	r3, [r4, #12]
 800a9ea:	07db      	lsls	r3, r3, #31
 800a9ec:	d506      	bpl.n	800a9fc <__swbuf_r+0x6c>
 800a9ee:	2e0a      	cmp	r6, #10
 800a9f0:	d104      	bne.n	800a9fc <__swbuf_r+0x6c>
 800a9f2:	4621      	mov	r1, r4
 800a9f4:	4628      	mov	r0, r5
 800a9f6:	f000 f919 	bl	800ac2c <_fflush_r>
 800a9fa:	b988      	cbnz	r0, 800aa20 <__swbuf_r+0x90>
 800a9fc:	4638      	mov	r0, r7
 800a9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa00:	4b0a      	ldr	r3, [pc, #40]	; (800aa2c <__swbuf_r+0x9c>)
 800aa02:	429c      	cmp	r4, r3
 800aa04:	d101      	bne.n	800aa0a <__swbuf_r+0x7a>
 800aa06:	68ac      	ldr	r4, [r5, #8]
 800aa08:	e7cf      	b.n	800a9aa <__swbuf_r+0x1a>
 800aa0a:	4b09      	ldr	r3, [pc, #36]	; (800aa30 <__swbuf_r+0xa0>)
 800aa0c:	429c      	cmp	r4, r3
 800aa0e:	bf08      	it	eq
 800aa10:	68ec      	ldreq	r4, [r5, #12]
 800aa12:	e7ca      	b.n	800a9aa <__swbuf_r+0x1a>
 800aa14:	4621      	mov	r1, r4
 800aa16:	4628      	mov	r0, r5
 800aa18:	f000 f80c 	bl	800aa34 <__swsetup_r>
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	d0cb      	beq.n	800a9b8 <__swbuf_r+0x28>
 800aa20:	f04f 37ff 	mov.w	r7, #4294967295
 800aa24:	e7ea      	b.n	800a9fc <__swbuf_r+0x6c>
 800aa26:	bf00      	nop
 800aa28:	0800cbac 	.word	0x0800cbac
 800aa2c:	0800cbcc 	.word	0x0800cbcc
 800aa30:	0800cb8c 	.word	0x0800cb8c

0800aa34 <__swsetup_r>:
 800aa34:	4b32      	ldr	r3, [pc, #200]	; (800ab00 <__swsetup_r+0xcc>)
 800aa36:	b570      	push	{r4, r5, r6, lr}
 800aa38:	681d      	ldr	r5, [r3, #0]
 800aa3a:	4606      	mov	r6, r0
 800aa3c:	460c      	mov	r4, r1
 800aa3e:	b125      	cbz	r5, 800aa4a <__swsetup_r+0x16>
 800aa40:	69ab      	ldr	r3, [r5, #24]
 800aa42:	b913      	cbnz	r3, 800aa4a <__swsetup_r+0x16>
 800aa44:	4628      	mov	r0, r5
 800aa46:	f000 f985 	bl	800ad54 <__sinit>
 800aa4a:	4b2e      	ldr	r3, [pc, #184]	; (800ab04 <__swsetup_r+0xd0>)
 800aa4c:	429c      	cmp	r4, r3
 800aa4e:	d10f      	bne.n	800aa70 <__swsetup_r+0x3c>
 800aa50:	686c      	ldr	r4, [r5, #4]
 800aa52:	89a3      	ldrh	r3, [r4, #12]
 800aa54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa58:	0719      	lsls	r1, r3, #28
 800aa5a:	d42c      	bmi.n	800aab6 <__swsetup_r+0x82>
 800aa5c:	06dd      	lsls	r5, r3, #27
 800aa5e:	d411      	bmi.n	800aa84 <__swsetup_r+0x50>
 800aa60:	2309      	movs	r3, #9
 800aa62:	6033      	str	r3, [r6, #0]
 800aa64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aa68:	81a3      	strh	r3, [r4, #12]
 800aa6a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa6e:	e03e      	b.n	800aaee <__swsetup_r+0xba>
 800aa70:	4b25      	ldr	r3, [pc, #148]	; (800ab08 <__swsetup_r+0xd4>)
 800aa72:	429c      	cmp	r4, r3
 800aa74:	d101      	bne.n	800aa7a <__swsetup_r+0x46>
 800aa76:	68ac      	ldr	r4, [r5, #8]
 800aa78:	e7eb      	b.n	800aa52 <__swsetup_r+0x1e>
 800aa7a:	4b24      	ldr	r3, [pc, #144]	; (800ab0c <__swsetup_r+0xd8>)
 800aa7c:	429c      	cmp	r4, r3
 800aa7e:	bf08      	it	eq
 800aa80:	68ec      	ldreq	r4, [r5, #12]
 800aa82:	e7e6      	b.n	800aa52 <__swsetup_r+0x1e>
 800aa84:	0758      	lsls	r0, r3, #29
 800aa86:	d512      	bpl.n	800aaae <__swsetup_r+0x7a>
 800aa88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa8a:	b141      	cbz	r1, 800aa9e <__swsetup_r+0x6a>
 800aa8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa90:	4299      	cmp	r1, r3
 800aa92:	d002      	beq.n	800aa9a <__swsetup_r+0x66>
 800aa94:	4630      	mov	r0, r6
 800aa96:	f7ff fb25 	bl	800a0e4 <_free_r>
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	6363      	str	r3, [r4, #52]	; 0x34
 800aa9e:	89a3      	ldrh	r3, [r4, #12]
 800aaa0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aaa4:	81a3      	strh	r3, [r4, #12]
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	6063      	str	r3, [r4, #4]
 800aaaa:	6923      	ldr	r3, [r4, #16]
 800aaac:	6023      	str	r3, [r4, #0]
 800aaae:	89a3      	ldrh	r3, [r4, #12]
 800aab0:	f043 0308 	orr.w	r3, r3, #8
 800aab4:	81a3      	strh	r3, [r4, #12]
 800aab6:	6923      	ldr	r3, [r4, #16]
 800aab8:	b94b      	cbnz	r3, 800aace <__swsetup_r+0x9a>
 800aaba:	89a3      	ldrh	r3, [r4, #12]
 800aabc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aac4:	d003      	beq.n	800aace <__swsetup_r+0x9a>
 800aac6:	4621      	mov	r1, r4
 800aac8:	4630      	mov	r0, r6
 800aaca:	f000 fa09 	bl	800aee0 <__smakebuf_r>
 800aace:	89a0      	ldrh	r0, [r4, #12]
 800aad0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aad4:	f010 0301 	ands.w	r3, r0, #1
 800aad8:	d00a      	beq.n	800aaf0 <__swsetup_r+0xbc>
 800aada:	2300      	movs	r3, #0
 800aadc:	60a3      	str	r3, [r4, #8]
 800aade:	6963      	ldr	r3, [r4, #20]
 800aae0:	425b      	negs	r3, r3
 800aae2:	61a3      	str	r3, [r4, #24]
 800aae4:	6923      	ldr	r3, [r4, #16]
 800aae6:	b943      	cbnz	r3, 800aafa <__swsetup_r+0xc6>
 800aae8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aaec:	d1ba      	bne.n	800aa64 <__swsetup_r+0x30>
 800aaee:	bd70      	pop	{r4, r5, r6, pc}
 800aaf0:	0781      	lsls	r1, r0, #30
 800aaf2:	bf58      	it	pl
 800aaf4:	6963      	ldrpl	r3, [r4, #20]
 800aaf6:	60a3      	str	r3, [r4, #8]
 800aaf8:	e7f4      	b.n	800aae4 <__swsetup_r+0xb0>
 800aafa:	2000      	movs	r0, #0
 800aafc:	e7f7      	b.n	800aaee <__swsetup_r+0xba>
 800aafe:	bf00      	nop
 800ab00:	20000074 	.word	0x20000074
 800ab04:	0800cbac 	.word	0x0800cbac
 800ab08:	0800cbcc 	.word	0x0800cbcc
 800ab0c:	0800cb8c 	.word	0x0800cb8c

0800ab10 <abort>:
 800ab10:	b508      	push	{r3, lr}
 800ab12:	2006      	movs	r0, #6
 800ab14:	f000 fa54 	bl	800afc0 <raise>
 800ab18:	2001      	movs	r0, #1
 800ab1a:	f7f8 fc45 	bl	80033a8 <_exit>
	...

0800ab20 <__sflush_r>:
 800ab20:	898a      	ldrh	r2, [r1, #12]
 800ab22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab26:	4605      	mov	r5, r0
 800ab28:	0710      	lsls	r0, r2, #28
 800ab2a:	460c      	mov	r4, r1
 800ab2c:	d458      	bmi.n	800abe0 <__sflush_r+0xc0>
 800ab2e:	684b      	ldr	r3, [r1, #4]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	dc05      	bgt.n	800ab40 <__sflush_r+0x20>
 800ab34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	dc02      	bgt.n	800ab40 <__sflush_r+0x20>
 800ab3a:	2000      	movs	r0, #0
 800ab3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab42:	2e00      	cmp	r6, #0
 800ab44:	d0f9      	beq.n	800ab3a <__sflush_r+0x1a>
 800ab46:	2300      	movs	r3, #0
 800ab48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab4c:	682f      	ldr	r7, [r5, #0]
 800ab4e:	602b      	str	r3, [r5, #0]
 800ab50:	d032      	beq.n	800abb8 <__sflush_r+0x98>
 800ab52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab54:	89a3      	ldrh	r3, [r4, #12]
 800ab56:	075a      	lsls	r2, r3, #29
 800ab58:	d505      	bpl.n	800ab66 <__sflush_r+0x46>
 800ab5a:	6863      	ldr	r3, [r4, #4]
 800ab5c:	1ac0      	subs	r0, r0, r3
 800ab5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab60:	b10b      	cbz	r3, 800ab66 <__sflush_r+0x46>
 800ab62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab64:	1ac0      	subs	r0, r0, r3
 800ab66:	2300      	movs	r3, #0
 800ab68:	4602      	mov	r2, r0
 800ab6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab6c:	6a21      	ldr	r1, [r4, #32]
 800ab6e:	4628      	mov	r0, r5
 800ab70:	47b0      	blx	r6
 800ab72:	1c43      	adds	r3, r0, #1
 800ab74:	89a3      	ldrh	r3, [r4, #12]
 800ab76:	d106      	bne.n	800ab86 <__sflush_r+0x66>
 800ab78:	6829      	ldr	r1, [r5, #0]
 800ab7a:	291d      	cmp	r1, #29
 800ab7c:	d82c      	bhi.n	800abd8 <__sflush_r+0xb8>
 800ab7e:	4a2a      	ldr	r2, [pc, #168]	; (800ac28 <__sflush_r+0x108>)
 800ab80:	40ca      	lsrs	r2, r1
 800ab82:	07d6      	lsls	r6, r2, #31
 800ab84:	d528      	bpl.n	800abd8 <__sflush_r+0xb8>
 800ab86:	2200      	movs	r2, #0
 800ab88:	6062      	str	r2, [r4, #4]
 800ab8a:	04d9      	lsls	r1, r3, #19
 800ab8c:	6922      	ldr	r2, [r4, #16]
 800ab8e:	6022      	str	r2, [r4, #0]
 800ab90:	d504      	bpl.n	800ab9c <__sflush_r+0x7c>
 800ab92:	1c42      	adds	r2, r0, #1
 800ab94:	d101      	bne.n	800ab9a <__sflush_r+0x7a>
 800ab96:	682b      	ldr	r3, [r5, #0]
 800ab98:	b903      	cbnz	r3, 800ab9c <__sflush_r+0x7c>
 800ab9a:	6560      	str	r0, [r4, #84]	; 0x54
 800ab9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab9e:	602f      	str	r7, [r5, #0]
 800aba0:	2900      	cmp	r1, #0
 800aba2:	d0ca      	beq.n	800ab3a <__sflush_r+0x1a>
 800aba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aba8:	4299      	cmp	r1, r3
 800abaa:	d002      	beq.n	800abb2 <__sflush_r+0x92>
 800abac:	4628      	mov	r0, r5
 800abae:	f7ff fa99 	bl	800a0e4 <_free_r>
 800abb2:	2000      	movs	r0, #0
 800abb4:	6360      	str	r0, [r4, #52]	; 0x34
 800abb6:	e7c1      	b.n	800ab3c <__sflush_r+0x1c>
 800abb8:	6a21      	ldr	r1, [r4, #32]
 800abba:	2301      	movs	r3, #1
 800abbc:	4628      	mov	r0, r5
 800abbe:	47b0      	blx	r6
 800abc0:	1c41      	adds	r1, r0, #1
 800abc2:	d1c7      	bne.n	800ab54 <__sflush_r+0x34>
 800abc4:	682b      	ldr	r3, [r5, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d0c4      	beq.n	800ab54 <__sflush_r+0x34>
 800abca:	2b1d      	cmp	r3, #29
 800abcc:	d001      	beq.n	800abd2 <__sflush_r+0xb2>
 800abce:	2b16      	cmp	r3, #22
 800abd0:	d101      	bne.n	800abd6 <__sflush_r+0xb6>
 800abd2:	602f      	str	r7, [r5, #0]
 800abd4:	e7b1      	b.n	800ab3a <__sflush_r+0x1a>
 800abd6:	89a3      	ldrh	r3, [r4, #12]
 800abd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abdc:	81a3      	strh	r3, [r4, #12]
 800abde:	e7ad      	b.n	800ab3c <__sflush_r+0x1c>
 800abe0:	690f      	ldr	r7, [r1, #16]
 800abe2:	2f00      	cmp	r7, #0
 800abe4:	d0a9      	beq.n	800ab3a <__sflush_r+0x1a>
 800abe6:	0793      	lsls	r3, r2, #30
 800abe8:	680e      	ldr	r6, [r1, #0]
 800abea:	bf08      	it	eq
 800abec:	694b      	ldreq	r3, [r1, #20]
 800abee:	600f      	str	r7, [r1, #0]
 800abf0:	bf18      	it	ne
 800abf2:	2300      	movne	r3, #0
 800abf4:	eba6 0807 	sub.w	r8, r6, r7
 800abf8:	608b      	str	r3, [r1, #8]
 800abfa:	f1b8 0f00 	cmp.w	r8, #0
 800abfe:	dd9c      	ble.n	800ab3a <__sflush_r+0x1a>
 800ac00:	6a21      	ldr	r1, [r4, #32]
 800ac02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac04:	4643      	mov	r3, r8
 800ac06:	463a      	mov	r2, r7
 800ac08:	4628      	mov	r0, r5
 800ac0a:	47b0      	blx	r6
 800ac0c:	2800      	cmp	r0, #0
 800ac0e:	dc06      	bgt.n	800ac1e <__sflush_r+0xfe>
 800ac10:	89a3      	ldrh	r3, [r4, #12]
 800ac12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac16:	81a3      	strh	r3, [r4, #12]
 800ac18:	f04f 30ff 	mov.w	r0, #4294967295
 800ac1c:	e78e      	b.n	800ab3c <__sflush_r+0x1c>
 800ac1e:	4407      	add	r7, r0
 800ac20:	eba8 0800 	sub.w	r8, r8, r0
 800ac24:	e7e9      	b.n	800abfa <__sflush_r+0xda>
 800ac26:	bf00      	nop
 800ac28:	20400001 	.word	0x20400001

0800ac2c <_fflush_r>:
 800ac2c:	b538      	push	{r3, r4, r5, lr}
 800ac2e:	690b      	ldr	r3, [r1, #16]
 800ac30:	4605      	mov	r5, r0
 800ac32:	460c      	mov	r4, r1
 800ac34:	b913      	cbnz	r3, 800ac3c <_fflush_r+0x10>
 800ac36:	2500      	movs	r5, #0
 800ac38:	4628      	mov	r0, r5
 800ac3a:	bd38      	pop	{r3, r4, r5, pc}
 800ac3c:	b118      	cbz	r0, 800ac46 <_fflush_r+0x1a>
 800ac3e:	6983      	ldr	r3, [r0, #24]
 800ac40:	b90b      	cbnz	r3, 800ac46 <_fflush_r+0x1a>
 800ac42:	f000 f887 	bl	800ad54 <__sinit>
 800ac46:	4b14      	ldr	r3, [pc, #80]	; (800ac98 <_fflush_r+0x6c>)
 800ac48:	429c      	cmp	r4, r3
 800ac4a:	d11b      	bne.n	800ac84 <_fflush_r+0x58>
 800ac4c:	686c      	ldr	r4, [r5, #4]
 800ac4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d0ef      	beq.n	800ac36 <_fflush_r+0xa>
 800ac56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac58:	07d0      	lsls	r0, r2, #31
 800ac5a:	d404      	bmi.n	800ac66 <_fflush_r+0x3a>
 800ac5c:	0599      	lsls	r1, r3, #22
 800ac5e:	d402      	bmi.n	800ac66 <_fflush_r+0x3a>
 800ac60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac62:	f000 f915 	bl	800ae90 <__retarget_lock_acquire_recursive>
 800ac66:	4628      	mov	r0, r5
 800ac68:	4621      	mov	r1, r4
 800ac6a:	f7ff ff59 	bl	800ab20 <__sflush_r>
 800ac6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac70:	07da      	lsls	r2, r3, #31
 800ac72:	4605      	mov	r5, r0
 800ac74:	d4e0      	bmi.n	800ac38 <_fflush_r+0xc>
 800ac76:	89a3      	ldrh	r3, [r4, #12]
 800ac78:	059b      	lsls	r3, r3, #22
 800ac7a:	d4dd      	bmi.n	800ac38 <_fflush_r+0xc>
 800ac7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac7e:	f000 f908 	bl	800ae92 <__retarget_lock_release_recursive>
 800ac82:	e7d9      	b.n	800ac38 <_fflush_r+0xc>
 800ac84:	4b05      	ldr	r3, [pc, #20]	; (800ac9c <_fflush_r+0x70>)
 800ac86:	429c      	cmp	r4, r3
 800ac88:	d101      	bne.n	800ac8e <_fflush_r+0x62>
 800ac8a:	68ac      	ldr	r4, [r5, #8]
 800ac8c:	e7df      	b.n	800ac4e <_fflush_r+0x22>
 800ac8e:	4b04      	ldr	r3, [pc, #16]	; (800aca0 <_fflush_r+0x74>)
 800ac90:	429c      	cmp	r4, r3
 800ac92:	bf08      	it	eq
 800ac94:	68ec      	ldreq	r4, [r5, #12]
 800ac96:	e7da      	b.n	800ac4e <_fflush_r+0x22>
 800ac98:	0800cbac 	.word	0x0800cbac
 800ac9c:	0800cbcc 	.word	0x0800cbcc
 800aca0:	0800cb8c 	.word	0x0800cb8c

0800aca4 <std>:
 800aca4:	2300      	movs	r3, #0
 800aca6:	b510      	push	{r4, lr}
 800aca8:	4604      	mov	r4, r0
 800acaa:	e9c0 3300 	strd	r3, r3, [r0]
 800acae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800acb2:	6083      	str	r3, [r0, #8]
 800acb4:	8181      	strh	r1, [r0, #12]
 800acb6:	6643      	str	r3, [r0, #100]	; 0x64
 800acb8:	81c2      	strh	r2, [r0, #14]
 800acba:	6183      	str	r3, [r0, #24]
 800acbc:	4619      	mov	r1, r3
 800acbe:	2208      	movs	r2, #8
 800acc0:	305c      	adds	r0, #92	; 0x5c
 800acc2:	f7fb fdcd 	bl	8006860 <memset>
 800acc6:	4b05      	ldr	r3, [pc, #20]	; (800acdc <std+0x38>)
 800acc8:	6263      	str	r3, [r4, #36]	; 0x24
 800acca:	4b05      	ldr	r3, [pc, #20]	; (800ace0 <std+0x3c>)
 800accc:	62a3      	str	r3, [r4, #40]	; 0x28
 800acce:	4b05      	ldr	r3, [pc, #20]	; (800ace4 <std+0x40>)
 800acd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800acd2:	4b05      	ldr	r3, [pc, #20]	; (800ace8 <std+0x44>)
 800acd4:	6224      	str	r4, [r4, #32]
 800acd6:	6323      	str	r3, [r4, #48]	; 0x30
 800acd8:	bd10      	pop	{r4, pc}
 800acda:	bf00      	nop
 800acdc:	0800aff9 	.word	0x0800aff9
 800ace0:	0800b01b 	.word	0x0800b01b
 800ace4:	0800b053 	.word	0x0800b053
 800ace8:	0800b077 	.word	0x0800b077

0800acec <_cleanup_r>:
 800acec:	4901      	ldr	r1, [pc, #4]	; (800acf4 <_cleanup_r+0x8>)
 800acee:	f000 b8af 	b.w	800ae50 <_fwalk_reent>
 800acf2:	bf00      	nop
 800acf4:	0800ac2d 	.word	0x0800ac2d

0800acf8 <__sfmoreglue>:
 800acf8:	b570      	push	{r4, r5, r6, lr}
 800acfa:	2268      	movs	r2, #104	; 0x68
 800acfc:	1e4d      	subs	r5, r1, #1
 800acfe:	4355      	muls	r5, r2
 800ad00:	460e      	mov	r6, r1
 800ad02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad06:	f7ff fa59 	bl	800a1bc <_malloc_r>
 800ad0a:	4604      	mov	r4, r0
 800ad0c:	b140      	cbz	r0, 800ad20 <__sfmoreglue+0x28>
 800ad0e:	2100      	movs	r1, #0
 800ad10:	e9c0 1600 	strd	r1, r6, [r0]
 800ad14:	300c      	adds	r0, #12
 800ad16:	60a0      	str	r0, [r4, #8]
 800ad18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ad1c:	f7fb fda0 	bl	8006860 <memset>
 800ad20:	4620      	mov	r0, r4
 800ad22:	bd70      	pop	{r4, r5, r6, pc}

0800ad24 <__sfp_lock_acquire>:
 800ad24:	4801      	ldr	r0, [pc, #4]	; (800ad2c <__sfp_lock_acquire+0x8>)
 800ad26:	f000 b8b3 	b.w	800ae90 <__retarget_lock_acquire_recursive>
 800ad2a:	bf00      	nop
 800ad2c:	20000809 	.word	0x20000809

0800ad30 <__sfp_lock_release>:
 800ad30:	4801      	ldr	r0, [pc, #4]	; (800ad38 <__sfp_lock_release+0x8>)
 800ad32:	f000 b8ae 	b.w	800ae92 <__retarget_lock_release_recursive>
 800ad36:	bf00      	nop
 800ad38:	20000809 	.word	0x20000809

0800ad3c <__sinit_lock_acquire>:
 800ad3c:	4801      	ldr	r0, [pc, #4]	; (800ad44 <__sinit_lock_acquire+0x8>)
 800ad3e:	f000 b8a7 	b.w	800ae90 <__retarget_lock_acquire_recursive>
 800ad42:	bf00      	nop
 800ad44:	2000080a 	.word	0x2000080a

0800ad48 <__sinit_lock_release>:
 800ad48:	4801      	ldr	r0, [pc, #4]	; (800ad50 <__sinit_lock_release+0x8>)
 800ad4a:	f000 b8a2 	b.w	800ae92 <__retarget_lock_release_recursive>
 800ad4e:	bf00      	nop
 800ad50:	2000080a 	.word	0x2000080a

0800ad54 <__sinit>:
 800ad54:	b510      	push	{r4, lr}
 800ad56:	4604      	mov	r4, r0
 800ad58:	f7ff fff0 	bl	800ad3c <__sinit_lock_acquire>
 800ad5c:	69a3      	ldr	r3, [r4, #24]
 800ad5e:	b11b      	cbz	r3, 800ad68 <__sinit+0x14>
 800ad60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad64:	f7ff bff0 	b.w	800ad48 <__sinit_lock_release>
 800ad68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad6c:	6523      	str	r3, [r4, #80]	; 0x50
 800ad6e:	4b13      	ldr	r3, [pc, #76]	; (800adbc <__sinit+0x68>)
 800ad70:	4a13      	ldr	r2, [pc, #76]	; (800adc0 <__sinit+0x6c>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad76:	42a3      	cmp	r3, r4
 800ad78:	bf04      	itt	eq
 800ad7a:	2301      	moveq	r3, #1
 800ad7c:	61a3      	streq	r3, [r4, #24]
 800ad7e:	4620      	mov	r0, r4
 800ad80:	f000 f820 	bl	800adc4 <__sfp>
 800ad84:	6060      	str	r0, [r4, #4]
 800ad86:	4620      	mov	r0, r4
 800ad88:	f000 f81c 	bl	800adc4 <__sfp>
 800ad8c:	60a0      	str	r0, [r4, #8]
 800ad8e:	4620      	mov	r0, r4
 800ad90:	f000 f818 	bl	800adc4 <__sfp>
 800ad94:	2200      	movs	r2, #0
 800ad96:	60e0      	str	r0, [r4, #12]
 800ad98:	2104      	movs	r1, #4
 800ad9a:	6860      	ldr	r0, [r4, #4]
 800ad9c:	f7ff ff82 	bl	800aca4 <std>
 800ada0:	68a0      	ldr	r0, [r4, #8]
 800ada2:	2201      	movs	r2, #1
 800ada4:	2109      	movs	r1, #9
 800ada6:	f7ff ff7d 	bl	800aca4 <std>
 800adaa:	68e0      	ldr	r0, [r4, #12]
 800adac:	2202      	movs	r2, #2
 800adae:	2112      	movs	r1, #18
 800adb0:	f7ff ff78 	bl	800aca4 <std>
 800adb4:	2301      	movs	r3, #1
 800adb6:	61a3      	str	r3, [r4, #24]
 800adb8:	e7d2      	b.n	800ad60 <__sinit+0xc>
 800adba:	bf00      	nop
 800adbc:	0800c748 	.word	0x0800c748
 800adc0:	0800aced 	.word	0x0800aced

0800adc4 <__sfp>:
 800adc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adc6:	4607      	mov	r7, r0
 800adc8:	f7ff ffac 	bl	800ad24 <__sfp_lock_acquire>
 800adcc:	4b1e      	ldr	r3, [pc, #120]	; (800ae48 <__sfp+0x84>)
 800adce:	681e      	ldr	r6, [r3, #0]
 800add0:	69b3      	ldr	r3, [r6, #24]
 800add2:	b913      	cbnz	r3, 800adda <__sfp+0x16>
 800add4:	4630      	mov	r0, r6
 800add6:	f7ff ffbd 	bl	800ad54 <__sinit>
 800adda:	3648      	adds	r6, #72	; 0x48
 800addc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ade0:	3b01      	subs	r3, #1
 800ade2:	d503      	bpl.n	800adec <__sfp+0x28>
 800ade4:	6833      	ldr	r3, [r6, #0]
 800ade6:	b30b      	cbz	r3, 800ae2c <__sfp+0x68>
 800ade8:	6836      	ldr	r6, [r6, #0]
 800adea:	e7f7      	b.n	800addc <__sfp+0x18>
 800adec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800adf0:	b9d5      	cbnz	r5, 800ae28 <__sfp+0x64>
 800adf2:	4b16      	ldr	r3, [pc, #88]	; (800ae4c <__sfp+0x88>)
 800adf4:	60e3      	str	r3, [r4, #12]
 800adf6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800adfa:	6665      	str	r5, [r4, #100]	; 0x64
 800adfc:	f000 f847 	bl	800ae8e <__retarget_lock_init_recursive>
 800ae00:	f7ff ff96 	bl	800ad30 <__sfp_lock_release>
 800ae04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ae08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ae0c:	6025      	str	r5, [r4, #0]
 800ae0e:	61a5      	str	r5, [r4, #24]
 800ae10:	2208      	movs	r2, #8
 800ae12:	4629      	mov	r1, r5
 800ae14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ae18:	f7fb fd22 	bl	8006860 <memset>
 800ae1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ae24:	4620      	mov	r0, r4
 800ae26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae28:	3468      	adds	r4, #104	; 0x68
 800ae2a:	e7d9      	b.n	800ade0 <__sfp+0x1c>
 800ae2c:	2104      	movs	r1, #4
 800ae2e:	4638      	mov	r0, r7
 800ae30:	f7ff ff62 	bl	800acf8 <__sfmoreglue>
 800ae34:	4604      	mov	r4, r0
 800ae36:	6030      	str	r0, [r6, #0]
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	d1d5      	bne.n	800ade8 <__sfp+0x24>
 800ae3c:	f7ff ff78 	bl	800ad30 <__sfp_lock_release>
 800ae40:	230c      	movs	r3, #12
 800ae42:	603b      	str	r3, [r7, #0]
 800ae44:	e7ee      	b.n	800ae24 <__sfp+0x60>
 800ae46:	bf00      	nop
 800ae48:	0800c748 	.word	0x0800c748
 800ae4c:	ffff0001 	.word	0xffff0001

0800ae50 <_fwalk_reent>:
 800ae50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae54:	4606      	mov	r6, r0
 800ae56:	4688      	mov	r8, r1
 800ae58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae5c:	2700      	movs	r7, #0
 800ae5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae62:	f1b9 0901 	subs.w	r9, r9, #1
 800ae66:	d505      	bpl.n	800ae74 <_fwalk_reent+0x24>
 800ae68:	6824      	ldr	r4, [r4, #0]
 800ae6a:	2c00      	cmp	r4, #0
 800ae6c:	d1f7      	bne.n	800ae5e <_fwalk_reent+0xe>
 800ae6e:	4638      	mov	r0, r7
 800ae70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae74:	89ab      	ldrh	r3, [r5, #12]
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d907      	bls.n	800ae8a <_fwalk_reent+0x3a>
 800ae7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae7e:	3301      	adds	r3, #1
 800ae80:	d003      	beq.n	800ae8a <_fwalk_reent+0x3a>
 800ae82:	4629      	mov	r1, r5
 800ae84:	4630      	mov	r0, r6
 800ae86:	47c0      	blx	r8
 800ae88:	4307      	orrs	r7, r0
 800ae8a:	3568      	adds	r5, #104	; 0x68
 800ae8c:	e7e9      	b.n	800ae62 <_fwalk_reent+0x12>

0800ae8e <__retarget_lock_init_recursive>:
 800ae8e:	4770      	bx	lr

0800ae90 <__retarget_lock_acquire_recursive>:
 800ae90:	4770      	bx	lr

0800ae92 <__retarget_lock_release_recursive>:
 800ae92:	4770      	bx	lr

0800ae94 <__swhatbuf_r>:
 800ae94:	b570      	push	{r4, r5, r6, lr}
 800ae96:	460e      	mov	r6, r1
 800ae98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae9c:	2900      	cmp	r1, #0
 800ae9e:	b096      	sub	sp, #88	; 0x58
 800aea0:	4614      	mov	r4, r2
 800aea2:	461d      	mov	r5, r3
 800aea4:	da08      	bge.n	800aeb8 <__swhatbuf_r+0x24>
 800aea6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	602a      	str	r2, [r5, #0]
 800aeae:	061a      	lsls	r2, r3, #24
 800aeb0:	d410      	bmi.n	800aed4 <__swhatbuf_r+0x40>
 800aeb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeb6:	e00e      	b.n	800aed6 <__swhatbuf_r+0x42>
 800aeb8:	466a      	mov	r2, sp
 800aeba:	f000 f903 	bl	800b0c4 <_fstat_r>
 800aebe:	2800      	cmp	r0, #0
 800aec0:	dbf1      	blt.n	800aea6 <__swhatbuf_r+0x12>
 800aec2:	9a01      	ldr	r2, [sp, #4]
 800aec4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aec8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aecc:	425a      	negs	r2, r3
 800aece:	415a      	adcs	r2, r3
 800aed0:	602a      	str	r2, [r5, #0]
 800aed2:	e7ee      	b.n	800aeb2 <__swhatbuf_r+0x1e>
 800aed4:	2340      	movs	r3, #64	; 0x40
 800aed6:	2000      	movs	r0, #0
 800aed8:	6023      	str	r3, [r4, #0]
 800aeda:	b016      	add	sp, #88	; 0x58
 800aedc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aee0 <__smakebuf_r>:
 800aee0:	898b      	ldrh	r3, [r1, #12]
 800aee2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aee4:	079d      	lsls	r5, r3, #30
 800aee6:	4606      	mov	r6, r0
 800aee8:	460c      	mov	r4, r1
 800aeea:	d507      	bpl.n	800aefc <__smakebuf_r+0x1c>
 800aeec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aef0:	6023      	str	r3, [r4, #0]
 800aef2:	6123      	str	r3, [r4, #16]
 800aef4:	2301      	movs	r3, #1
 800aef6:	6163      	str	r3, [r4, #20]
 800aef8:	b002      	add	sp, #8
 800aefa:	bd70      	pop	{r4, r5, r6, pc}
 800aefc:	ab01      	add	r3, sp, #4
 800aefe:	466a      	mov	r2, sp
 800af00:	f7ff ffc8 	bl	800ae94 <__swhatbuf_r>
 800af04:	9900      	ldr	r1, [sp, #0]
 800af06:	4605      	mov	r5, r0
 800af08:	4630      	mov	r0, r6
 800af0a:	f7ff f957 	bl	800a1bc <_malloc_r>
 800af0e:	b948      	cbnz	r0, 800af24 <__smakebuf_r+0x44>
 800af10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af14:	059a      	lsls	r2, r3, #22
 800af16:	d4ef      	bmi.n	800aef8 <__smakebuf_r+0x18>
 800af18:	f023 0303 	bic.w	r3, r3, #3
 800af1c:	f043 0302 	orr.w	r3, r3, #2
 800af20:	81a3      	strh	r3, [r4, #12]
 800af22:	e7e3      	b.n	800aeec <__smakebuf_r+0xc>
 800af24:	4b0d      	ldr	r3, [pc, #52]	; (800af5c <__smakebuf_r+0x7c>)
 800af26:	62b3      	str	r3, [r6, #40]	; 0x28
 800af28:	89a3      	ldrh	r3, [r4, #12]
 800af2a:	6020      	str	r0, [r4, #0]
 800af2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af30:	81a3      	strh	r3, [r4, #12]
 800af32:	9b00      	ldr	r3, [sp, #0]
 800af34:	6163      	str	r3, [r4, #20]
 800af36:	9b01      	ldr	r3, [sp, #4]
 800af38:	6120      	str	r0, [r4, #16]
 800af3a:	b15b      	cbz	r3, 800af54 <__smakebuf_r+0x74>
 800af3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af40:	4630      	mov	r0, r6
 800af42:	f000 f8d1 	bl	800b0e8 <_isatty_r>
 800af46:	b128      	cbz	r0, 800af54 <__smakebuf_r+0x74>
 800af48:	89a3      	ldrh	r3, [r4, #12]
 800af4a:	f023 0303 	bic.w	r3, r3, #3
 800af4e:	f043 0301 	orr.w	r3, r3, #1
 800af52:	81a3      	strh	r3, [r4, #12]
 800af54:	89a0      	ldrh	r0, [r4, #12]
 800af56:	4305      	orrs	r5, r0
 800af58:	81a5      	strh	r5, [r4, #12]
 800af5a:	e7cd      	b.n	800aef8 <__smakebuf_r+0x18>
 800af5c:	0800aced 	.word	0x0800aced

0800af60 <_malloc_usable_size_r>:
 800af60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af64:	1f18      	subs	r0, r3, #4
 800af66:	2b00      	cmp	r3, #0
 800af68:	bfbc      	itt	lt
 800af6a:	580b      	ldrlt	r3, [r1, r0]
 800af6c:	18c0      	addlt	r0, r0, r3
 800af6e:	4770      	bx	lr

0800af70 <_raise_r>:
 800af70:	291f      	cmp	r1, #31
 800af72:	b538      	push	{r3, r4, r5, lr}
 800af74:	4604      	mov	r4, r0
 800af76:	460d      	mov	r5, r1
 800af78:	d904      	bls.n	800af84 <_raise_r+0x14>
 800af7a:	2316      	movs	r3, #22
 800af7c:	6003      	str	r3, [r0, #0]
 800af7e:	f04f 30ff 	mov.w	r0, #4294967295
 800af82:	bd38      	pop	{r3, r4, r5, pc}
 800af84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800af86:	b112      	cbz	r2, 800af8e <_raise_r+0x1e>
 800af88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af8c:	b94b      	cbnz	r3, 800afa2 <_raise_r+0x32>
 800af8e:	4620      	mov	r0, r4
 800af90:	f000 f830 	bl	800aff4 <_getpid_r>
 800af94:	462a      	mov	r2, r5
 800af96:	4601      	mov	r1, r0
 800af98:	4620      	mov	r0, r4
 800af9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af9e:	f000 b817 	b.w	800afd0 <_kill_r>
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d00a      	beq.n	800afbc <_raise_r+0x4c>
 800afa6:	1c59      	adds	r1, r3, #1
 800afa8:	d103      	bne.n	800afb2 <_raise_r+0x42>
 800afaa:	2316      	movs	r3, #22
 800afac:	6003      	str	r3, [r0, #0]
 800afae:	2001      	movs	r0, #1
 800afb0:	e7e7      	b.n	800af82 <_raise_r+0x12>
 800afb2:	2400      	movs	r4, #0
 800afb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800afb8:	4628      	mov	r0, r5
 800afba:	4798      	blx	r3
 800afbc:	2000      	movs	r0, #0
 800afbe:	e7e0      	b.n	800af82 <_raise_r+0x12>

0800afc0 <raise>:
 800afc0:	4b02      	ldr	r3, [pc, #8]	; (800afcc <raise+0xc>)
 800afc2:	4601      	mov	r1, r0
 800afc4:	6818      	ldr	r0, [r3, #0]
 800afc6:	f7ff bfd3 	b.w	800af70 <_raise_r>
 800afca:	bf00      	nop
 800afcc:	20000074 	.word	0x20000074

0800afd0 <_kill_r>:
 800afd0:	b538      	push	{r3, r4, r5, lr}
 800afd2:	4d07      	ldr	r5, [pc, #28]	; (800aff0 <_kill_r+0x20>)
 800afd4:	2300      	movs	r3, #0
 800afd6:	4604      	mov	r4, r0
 800afd8:	4608      	mov	r0, r1
 800afda:	4611      	mov	r1, r2
 800afdc:	602b      	str	r3, [r5, #0]
 800afde:	f7f8 f9d3 	bl	8003388 <_kill>
 800afe2:	1c43      	adds	r3, r0, #1
 800afe4:	d102      	bne.n	800afec <_kill_r+0x1c>
 800afe6:	682b      	ldr	r3, [r5, #0]
 800afe8:	b103      	cbz	r3, 800afec <_kill_r+0x1c>
 800afea:	6023      	str	r3, [r4, #0]
 800afec:	bd38      	pop	{r3, r4, r5, pc}
 800afee:	bf00      	nop
 800aff0:	20000804 	.word	0x20000804

0800aff4 <_getpid_r>:
 800aff4:	f7f8 b9c0 	b.w	8003378 <_getpid>

0800aff8 <__sread>:
 800aff8:	b510      	push	{r4, lr}
 800affa:	460c      	mov	r4, r1
 800affc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b000:	f000 f894 	bl	800b12c <_read_r>
 800b004:	2800      	cmp	r0, #0
 800b006:	bfab      	itete	ge
 800b008:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b00a:	89a3      	ldrhlt	r3, [r4, #12]
 800b00c:	181b      	addge	r3, r3, r0
 800b00e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b012:	bfac      	ite	ge
 800b014:	6563      	strge	r3, [r4, #84]	; 0x54
 800b016:	81a3      	strhlt	r3, [r4, #12]
 800b018:	bd10      	pop	{r4, pc}

0800b01a <__swrite>:
 800b01a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b01e:	461f      	mov	r7, r3
 800b020:	898b      	ldrh	r3, [r1, #12]
 800b022:	05db      	lsls	r3, r3, #23
 800b024:	4605      	mov	r5, r0
 800b026:	460c      	mov	r4, r1
 800b028:	4616      	mov	r6, r2
 800b02a:	d505      	bpl.n	800b038 <__swrite+0x1e>
 800b02c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b030:	2302      	movs	r3, #2
 800b032:	2200      	movs	r2, #0
 800b034:	f000 f868 	bl	800b108 <_lseek_r>
 800b038:	89a3      	ldrh	r3, [r4, #12]
 800b03a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b03e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b042:	81a3      	strh	r3, [r4, #12]
 800b044:	4632      	mov	r2, r6
 800b046:	463b      	mov	r3, r7
 800b048:	4628      	mov	r0, r5
 800b04a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b04e:	f000 b817 	b.w	800b080 <_write_r>

0800b052 <__sseek>:
 800b052:	b510      	push	{r4, lr}
 800b054:	460c      	mov	r4, r1
 800b056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b05a:	f000 f855 	bl	800b108 <_lseek_r>
 800b05e:	1c43      	adds	r3, r0, #1
 800b060:	89a3      	ldrh	r3, [r4, #12]
 800b062:	bf15      	itete	ne
 800b064:	6560      	strne	r0, [r4, #84]	; 0x54
 800b066:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b06a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b06e:	81a3      	strheq	r3, [r4, #12]
 800b070:	bf18      	it	ne
 800b072:	81a3      	strhne	r3, [r4, #12]
 800b074:	bd10      	pop	{r4, pc}

0800b076 <__sclose>:
 800b076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b07a:	f000 b813 	b.w	800b0a4 <_close_r>
	...

0800b080 <_write_r>:
 800b080:	b538      	push	{r3, r4, r5, lr}
 800b082:	4d07      	ldr	r5, [pc, #28]	; (800b0a0 <_write_r+0x20>)
 800b084:	4604      	mov	r4, r0
 800b086:	4608      	mov	r0, r1
 800b088:	4611      	mov	r1, r2
 800b08a:	2200      	movs	r2, #0
 800b08c:	602a      	str	r2, [r5, #0]
 800b08e:	461a      	mov	r2, r3
 800b090:	f7f8 f9b1 	bl	80033f6 <_write>
 800b094:	1c43      	adds	r3, r0, #1
 800b096:	d102      	bne.n	800b09e <_write_r+0x1e>
 800b098:	682b      	ldr	r3, [r5, #0]
 800b09a:	b103      	cbz	r3, 800b09e <_write_r+0x1e>
 800b09c:	6023      	str	r3, [r4, #0]
 800b09e:	bd38      	pop	{r3, r4, r5, pc}
 800b0a0:	20000804 	.word	0x20000804

0800b0a4 <_close_r>:
 800b0a4:	b538      	push	{r3, r4, r5, lr}
 800b0a6:	4d06      	ldr	r5, [pc, #24]	; (800b0c0 <_close_r+0x1c>)
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	4604      	mov	r4, r0
 800b0ac:	4608      	mov	r0, r1
 800b0ae:	602b      	str	r3, [r5, #0]
 800b0b0:	f7f8 f9bd 	bl	800342e <_close>
 800b0b4:	1c43      	adds	r3, r0, #1
 800b0b6:	d102      	bne.n	800b0be <_close_r+0x1a>
 800b0b8:	682b      	ldr	r3, [r5, #0]
 800b0ba:	b103      	cbz	r3, 800b0be <_close_r+0x1a>
 800b0bc:	6023      	str	r3, [r4, #0]
 800b0be:	bd38      	pop	{r3, r4, r5, pc}
 800b0c0:	20000804 	.word	0x20000804

0800b0c4 <_fstat_r>:
 800b0c4:	b538      	push	{r3, r4, r5, lr}
 800b0c6:	4d07      	ldr	r5, [pc, #28]	; (800b0e4 <_fstat_r+0x20>)
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	4608      	mov	r0, r1
 800b0ce:	4611      	mov	r1, r2
 800b0d0:	602b      	str	r3, [r5, #0]
 800b0d2:	f7f8 f9b8 	bl	8003446 <_fstat>
 800b0d6:	1c43      	adds	r3, r0, #1
 800b0d8:	d102      	bne.n	800b0e0 <_fstat_r+0x1c>
 800b0da:	682b      	ldr	r3, [r5, #0]
 800b0dc:	b103      	cbz	r3, 800b0e0 <_fstat_r+0x1c>
 800b0de:	6023      	str	r3, [r4, #0]
 800b0e0:	bd38      	pop	{r3, r4, r5, pc}
 800b0e2:	bf00      	nop
 800b0e4:	20000804 	.word	0x20000804

0800b0e8 <_isatty_r>:
 800b0e8:	b538      	push	{r3, r4, r5, lr}
 800b0ea:	4d06      	ldr	r5, [pc, #24]	; (800b104 <_isatty_r+0x1c>)
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	4604      	mov	r4, r0
 800b0f0:	4608      	mov	r0, r1
 800b0f2:	602b      	str	r3, [r5, #0]
 800b0f4:	f7f8 f9b7 	bl	8003466 <_isatty>
 800b0f8:	1c43      	adds	r3, r0, #1
 800b0fa:	d102      	bne.n	800b102 <_isatty_r+0x1a>
 800b0fc:	682b      	ldr	r3, [r5, #0]
 800b0fe:	b103      	cbz	r3, 800b102 <_isatty_r+0x1a>
 800b100:	6023      	str	r3, [r4, #0]
 800b102:	bd38      	pop	{r3, r4, r5, pc}
 800b104:	20000804 	.word	0x20000804

0800b108 <_lseek_r>:
 800b108:	b538      	push	{r3, r4, r5, lr}
 800b10a:	4d07      	ldr	r5, [pc, #28]	; (800b128 <_lseek_r+0x20>)
 800b10c:	4604      	mov	r4, r0
 800b10e:	4608      	mov	r0, r1
 800b110:	4611      	mov	r1, r2
 800b112:	2200      	movs	r2, #0
 800b114:	602a      	str	r2, [r5, #0]
 800b116:	461a      	mov	r2, r3
 800b118:	f7f8 f9b0 	bl	800347c <_lseek>
 800b11c:	1c43      	adds	r3, r0, #1
 800b11e:	d102      	bne.n	800b126 <_lseek_r+0x1e>
 800b120:	682b      	ldr	r3, [r5, #0]
 800b122:	b103      	cbz	r3, 800b126 <_lseek_r+0x1e>
 800b124:	6023      	str	r3, [r4, #0]
 800b126:	bd38      	pop	{r3, r4, r5, pc}
 800b128:	20000804 	.word	0x20000804

0800b12c <_read_r>:
 800b12c:	b538      	push	{r3, r4, r5, lr}
 800b12e:	4d07      	ldr	r5, [pc, #28]	; (800b14c <_read_r+0x20>)
 800b130:	4604      	mov	r4, r0
 800b132:	4608      	mov	r0, r1
 800b134:	4611      	mov	r1, r2
 800b136:	2200      	movs	r2, #0
 800b138:	602a      	str	r2, [r5, #0]
 800b13a:	461a      	mov	r2, r3
 800b13c:	f7f8 f93e 	bl	80033bc <_read>
 800b140:	1c43      	adds	r3, r0, #1
 800b142:	d102      	bne.n	800b14a <_read_r+0x1e>
 800b144:	682b      	ldr	r3, [r5, #0]
 800b146:	b103      	cbz	r3, 800b14a <_read_r+0x1e>
 800b148:	6023      	str	r3, [r4, #0]
 800b14a:	bd38      	pop	{r3, r4, r5, pc}
 800b14c:	20000804 	.word	0x20000804

0800b150 <_init>:
 800b150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b152:	bf00      	nop
 800b154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b156:	bc08      	pop	{r3}
 800b158:	469e      	mov	lr, r3
 800b15a:	4770      	bx	lr

0800b15c <_fini>:
 800b15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b15e:	bf00      	nop
 800b160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b162:	bc08      	pop	{r3}
 800b164:	469e      	mov	lr, r3
 800b166:	4770      	bx	lr
